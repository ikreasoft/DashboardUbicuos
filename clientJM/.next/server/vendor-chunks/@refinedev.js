"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@refinedev";
exports.ids = ["vendor-chunks/@refinedev"];
exports.modules = {

/***/ "(ssr)/./node_modules/@refinedev/core/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/core/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessControlContext: () => (/* binding */ ct),\n/* harmony export */   ActionTypes: () => (/* binding */ Gs),\n/* harmony export */   AuthPage: () => (/* binding */ sc),\n/* harmony export */   Authenticated: () => (/* binding */ Dc),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ Fc),\n/* harmony export */   CanAccess: () => (/* binding */ wc),\n/* harmony export */   ErrorComponent: () => (/* binding */ rc),\n/* harmony export */   GitHubBanner: () => (/* binding */ Ac),\n/* harmony export */   I18nContext: () => (/* binding */ Xe),\n/* harmony export */   KeyBuilder: () => (/* binding */ wt),\n/* harmony export */   LayoutWrapper: () => (/* binding */ bc),\n/* harmony export */   Link: () => (/* binding */ Io),\n/* harmony export */   LoginPage: () => (/* binding */ Yr),\n/* harmony export */   MetaContextProvider: () => (/* binding */ ju),\n/* harmony export */   ReadyPage: () => (/* binding */ Qo),\n/* harmony export */   Refine: () => (/* binding */ Pc),\n/* harmony export */   ResourceContext: () => (/* binding */ Rt),\n/* harmony export */   RouteChangeHandler: () => (/* binding */ Vo),\n/* harmony export */   TranslationContext: () => (/* binding */ Xe),\n/* harmony export */   UndoableQueue: () => (/* binding */ an),\n/* harmony export */   WelcomePage: () => (/* binding */ dc),\n/* harmony export */   createTreeView: () => (/* binding */ is),\n/* harmony export */   file2Base64: () => (/* binding */ Da),\n/* harmony export */   flattenObjectKeys: () => (/* binding */ Cr),\n/* harmony export */   generateDefaultDocumentTitle: () => (/* binding */ ls),\n/* harmony export */   getDefaultFilter: () => (/* binding */ va),\n/* harmony export */   getDefaultSortOrder: () => (/* binding */ ba),\n/* harmony export */   getNextPageParam: () => (/* binding */ Tr),\n/* harmony export */   getPreviousPageParam: () => (/* binding */ xr),\n/* harmony export */   handleUseParams: () => (/* binding */ es),\n/* harmony export */   importCSVMapper: () => (/* binding */ sr),\n/* harmony export */   keys: () => (/* binding */ nt),\n/* harmony export */   legacyResourceTransform: () => (/* binding */ Pr),\n/* harmony export */   matchResourceFromRoute: () => (/* binding */ as),\n/* harmony export */   parseTableParams: () => (/* binding */ vr),\n/* harmony export */   parseTableParamsFromQuery: () => (/* binding */ Ca),\n/* harmony export */   pickDataProvider: () => (/* binding */ ee),\n/* harmony export */   pickNotDeprecated: () => (/* binding */ A),\n/* harmony export */   propertyPathToArray: () => (/* binding */ Ts),\n/* harmony export */   queryKeys: () => (/* binding */ ts),\n/* harmony export */   routeGenerator: () => (/* binding */ yr),\n/* harmony export */   setInitialFilters: () => (/* binding */ Er),\n/* harmony export */   setInitialSorters: () => (/* binding */ Lr),\n/* harmony export */   stringifyTableParams: () => (/* binding */ Dr),\n/* harmony export */   unionFilters: () => (/* binding */ St),\n/* harmony export */   unionSorters: () => (/* binding */ Ur),\n/* harmony export */   useActiveAuthProvider: () => (/* binding */ ie),\n/* harmony export */   useApiUrl: () => (/* binding */ pi),\n/* harmony export */   useAuthenticated: () => (/* binding */ Va),\n/* harmony export */   useBack: () => (/* binding */ Mo),\n/* harmony export */   useBreadcrumb: () => (/* binding */ lb),\n/* harmony export */   useCan: () => (/* binding */ kr),\n/* harmony export */   useCanWithoutCache: () => (/* binding */ aC),\n/* harmony export */   useCancelNotification: () => (/* binding */ ut),\n/* harmony export */   useCheckError: () => (/* binding */ Na),\n/* harmony export */   useCloneButton: () => (/* binding */ Zv),\n/* harmony export */   useCreate: () => (/* binding */ Xt),\n/* harmony export */   useCreateButton: () => (/* binding */ Yv),\n/* harmony export */   useCreateMany: () => (/* binding */ bo),\n/* harmony export */   useCustom: () => (/* binding */ mi),\n/* harmony export */   useCustomMutation: () => (/* binding */ gi),\n/* harmony export */   useDataProvider: () => (/* binding */ fe),\n/* harmony export */   useDelete: () => (/* binding */ ho),\n/* harmony export */   useDeleteButton: () => (/* binding */ Yu),\n/* harmony export */   useDeleteMany: () => (/* binding */ ci),\n/* harmony export */   useEditButton: () => (/* binding */ Xv),\n/* harmony export */   useExport: () => (/* binding */ dh),\n/* harmony export */   useExportButton: () => (/* binding */ eD),\n/* harmony export */   useForgotPassword: () => (/* binding */ lo),\n/* harmony export */   useForm: () => (/* binding */ xh),\n/* harmony export */   useGetIdentity: () => (/* binding */ no),\n/* harmony export */   useGetLocale: () => (/* binding */ Lo),\n/* harmony export */   useGetToPath: () => (/* binding */ Ut),\n/* harmony export */   useGo: () => (/* binding */ he),\n/* harmony export */   useHandleNotification: () => (/* binding */ Ce),\n/* harmony export */   useImport: () => (/* binding */ pR),\n/* harmony export */   useImportButton: () => (/* binding */ tD),\n/* harmony export */   useInfiniteList: () => (/* binding */ Ri),\n/* harmony export */   useInvalidate: () => (/* binding */ Ae),\n/* harmony export */   useInvalidateAuthStore: () => (/* binding */ Dt),\n/* harmony export */   useIsAuthenticated: () => (/* binding */ wr),\n/* harmony export */   useIsExistAuthentication: () => (/* binding */ yo),\n/* harmony export */   useKeys: () => (/* binding */ Z),\n/* harmony export */   useLink: () => (/* binding */ yt),\n/* harmony export */   useList: () => (/* binding */ zt),\n/* harmony export */   useListButton: () => (/* binding */ Jv),\n/* harmony export */   useLiveMode: () => (/* binding */ on),\n/* harmony export */   useLoadingOvertime: () => (/* binding */ pe),\n/* harmony export */   useLog: () => (/* binding */ Je),\n/* harmony export */   useLogList: () => (/* binding */ JC),\n/* harmony export */   useLogin: () => (/* binding */ $t),\n/* harmony export */   useLogout: () => (/* binding */ Mr),\n/* harmony export */   useMany: () => (/* binding */ go),\n/* harmony export */   useMenu: () => (/* binding */ $u),\n/* harmony export */   useMeta: () => (/* binding */ ue),\n/* harmony export */   useMetaContext: () => (/* binding */ Br),\n/* harmony export */   useModal: () => (/* binding */ fR),\n/* harmony export */   useMutationMode: () => (/* binding */ _e),\n/* harmony export */   useNavigation: () => (/* binding */ Pe),\n/* harmony export */   useNotification: () => (/* binding */ $e),\n/* harmony export */   useOnError: () => (/* binding */ Re),\n/* harmony export */   useOne: () => (/* binding */ Ot),\n/* harmony export */   useParse: () => (/* binding */ vo),\n/* harmony export */   useParsed: () => (/* binding */ Te),\n/* harmony export */   usePermissions: () => (/* binding */ Ua),\n/* harmony export */   usePublish: () => (/* binding */ Ye),\n/* harmony export */   useRedirectionAfterSubmission: () => (/* binding */ mn),\n/* harmony export */   useRefineContext: () => (/* binding */ ge),\n/* harmony export */   useRefineOptions: () => (/* binding */ At),\n/* harmony export */   useRefreshButton: () => (/* binding */ qu),\n/* harmony export */   useRegister: () => (/* binding */ co),\n/* harmony export */   useResource: () => (/* binding */ Y),\n/* harmony export */   useResourceParams: () => (/* binding */ qe),\n/* harmony export */   useResourceSubscription: () => (/* binding */ ht),\n/* harmony export */   useResourceWithRoute: () => (/* binding */ tn),\n/* harmony export */   useRouterContext: () => (/* binding */ le),\n/* harmony export */   useRouterType: () => (/* binding */ se),\n/* harmony export */   useSaveButton: () => (/* binding */ qv),\n/* harmony export */   useSelect: () => (/* binding */ TC),\n/* harmony export */   useSetLocale: () => (/* binding */ Eo),\n/* harmony export */   useShow: () => (/* binding */ rR),\n/* harmony export */   useShowButton: () => (/* binding */ jv),\n/* harmony export */   useSubscription: () => (/* binding */ iP),\n/* harmony export */   useSyncWithLocation: () => (/* binding */ to),\n/* harmony export */   useTable: () => (/* binding */ MC),\n/* harmony export */   useTitle: () => (/* binding */ Ta),\n/* harmony export */   useToPath: () => (/* binding */ bu),\n/* harmony export */   useTranslate: () => (/* binding */ $),\n/* harmony export */   useTranslation: () => (/* binding */ JP),\n/* harmony export */   useUpdate: () => (/* binding */ To),\n/* harmony export */   useUpdateMany: () => (/* binding */ ni),\n/* harmony export */   useUpdatePassword: () => (/* binding */ fo),\n/* harmony export */   useUserFriendlyName: () => (/* binding */ Pt),\n/* harmony export */   useWarnAboutChange: () => (/* binding */ vt),\n/* harmony export */   userFriendlyResourceName: () => (/* binding */ nr)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @refinedev/devtools-internal */ \"(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/differenceWith.js */ \"(ssr)/./node_modules/lodash-es/differenceWith.js\");\n/* harmony import */ var lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/unionWith.js */ \"(ssr)/./node_modules/lodash-es/unionWith.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/qs/lib/index.js\");\n/* harmony import */ var warn_once__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! warn-once */ \"(ssr)/./node_modules/warn-once/index.js\");\n/* harmony import */ var lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/fromPairs.js */ \"(ssr)/./node_modules/lodash-es/fromPairs.js\");\n/* harmony import */ var lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/zip.js */ \"(ssr)/./node_modules/lodash-es/zip.js\");\n/* harmony import */ var pluralize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pluralize */ \"(ssr)/./node_modules/pluralize/pluralize.js\");\n/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/debounce.js */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/isEqual.js */ \"(ssr)/./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! papaparse */ \"(ssr)/./node_modules/papaparse/papaparse.js\");\n/* harmony import */ var lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es/chunk.js */ \"(ssr)/./node_modules/lodash-es/chunk.js\");\n/* harmony import */ var lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es/get.js */ \"(ssr)/./node_modules/lodash-es/get.js\");\n/* harmony import */ var lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es/uniqBy.js */ \"(ssr)/./node_modules/lodash-es/uniqBy.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* __next_internal_client_entry_do_not_use__ AccessControlContext,ActionTypes,AuthPage,Authenticated,AutoSaveIndicator,CanAccess,ErrorComponent,GitHubBanner,I18nContext,KeyBuilder,LayoutWrapper,Link,LoginPage,MetaContextProvider,ReadyPage,Refine,ResourceContext,RouteChangeHandler,TranslationContext,UndoableQueue,WelcomePage,createTreeView,file2Base64,flattenObjectKeys,generateDefaultDocumentTitle,getDefaultFilter,getDefaultSortOrder,getNextPageParam,getPreviousPageParam,handleUseParams,importCSVMapper,keys,legacyResourceTransform,matchResourceFromRoute,parseTableParams,parseTableParamsFromQuery,pickDataProvider,pickNotDeprecated,propertyPathToArray,queryKeys,routeGenerator,setInitialFilters,setInitialSorters,stringifyTableParams,unionFilters,unionSorters,useActiveAuthProvider,useApiUrl,useAuthenticated,useBack,useBreadcrumb,useCan,useCanWithoutCache,useCancelNotification,useCheckError,useCloneButton,useCreate,useCreateButton,useCreateMany,useCustom,useCustomMutation,useDataProvider,useDelete,useDeleteButton,useDeleteMany,useEditButton,useExport,useExportButton,useForgotPassword,useForm,useGetIdentity,useGetLocale,useGetToPath,useGo,useHandleNotification,useImport,useImportButton,useInfiniteList,useInvalidate,useInvalidateAuthStore,useIsAuthenticated,useIsExistAuthentication,useKeys,useLink,useList,useListButton,useLiveMode,useLoadingOvertime,useLog,useLogList,useLogin,useLogout,useMany,useMenu,useMeta,useMetaContext,useModal,useMutationMode,useNavigation,useNotification,useOnError,useOne,useParse,useParsed,usePermissions,usePublish,useRedirectionAfterSubmission,useRefineContext,useRefineOptions,useRefreshButton,useRegister,useResource,useResourceParams,useResourceSubscription,useResourceWithRoute,useRouterContext,useRouterType,useSaveButton,useSelect,useSetLocale,useShow,useShowButton,useSubscription,useSyncWithLocation,useTable,useTitle,useToPath,useTranslate,useTranslation,useUpdate,useUpdateMany,useUpdatePassword,useUserFriendlyName,useWarnAboutChange,userFriendlyResourceName auto */ var na = Object.defineProperty;\nvar o = (e, t)=>na(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n\n\n\n\nvar Xo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Zo = o(({ children: e, isProvided: t, ...r })=>{\n    let { replace: s } = Pe(), n = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.login) == null ? void 0 : u.call(r, p));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"loginFunc\"), a = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.register) == null ? void 0 : u.call(r, p));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"registerFunc\"), i = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.logout) == null ? void 0 : u.call(r, p));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"logoutFunc\"), c = o(async (p)=>{\n        var u;\n        try {\n            return await ((u = r.checkAuth) == null ? void 0 : u.call(r, p)), Promise.resolve();\n        } catch (l) {\n            return l != null && l.redirectPath && s(l.redirectPath), Promise.reject(l);\n        }\n    }, \"checkAuthFunc\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xo.Provider, {\n        value: {\n            ...r,\n            login: n,\n            logout: i,\n            checkAuth: c,\n            register: a,\n            isProvided: t\n        }\n    }, e);\n}, \"LegacyAuthContextProvider\"), Yo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Jo = o(({ children: e, isProvided: t, ...r })=>{\n    let s = o(async (u)=>{\n        var l;\n        try {\n            return await ((l = r.login) == null ? void 0 : l.call(r, u));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in login: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleLogin\"), n = o(async (u)=>{\n        var l;\n        try {\n            return await ((l = r.register) == null ? void 0 : l.call(r, u));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in register: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleRegister\"), a = o(async (u)=>{\n        var l;\n        try {\n            return await ((l = r.logout) == null ? void 0 : l.call(r, u));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in logout: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleLogout\"), i = o(async (u)=>{\n        var l;\n        try {\n            let m = await ((l = r.check) == null ? void 0 : l.call(r, u));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in check: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleCheck\"), c = o(async (u)=>{\n        var l;\n        try {\n            let m = await ((l = r.forgotPassword) == null ? void 0 : l.call(r, u));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in forgotPassword: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleForgotPassword\"), p = o(async (u)=>{\n        var l;\n        try {\n            let m = await ((l = r.updatePassword) == null ? void 0 : l.call(r, u));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in updatePassword: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleUpdatePassword\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Yo.Provider, {\n        value: {\n            ...r,\n            login: s,\n            logout: a,\n            check: i,\n            register: n,\n            forgotPassword: c,\n            updatePassword: p,\n            isProvided: t\n        }\n    }, e);\n}, \"AuthBindingsContextProvider\"), xe = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Xo), \"useLegacyAuthContext\"), Ee = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Yo), \"useAuthBindingsContext\");\n\n\n\n\nvar Bt = o((e)=>e / 1e3, \"userFriendlySecond\");\n\n\nvar sr = o((e, t = (r)=>r)=>{\n    let [r, ...s] = e;\n    return s.map((n)=>(0,lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(r, n))).map((n, a, i)=>t.call(void 0, n, a, i));\n}, \"importCSVMapper\");\n\nvar nr = o((e = \"\", t)=>{\n    let r = Kt(e);\n    return t === \"singular\" ? pluralize__WEBPACK_IMPORTED_MODULE_4__.singular(r) : pluralize__WEBPACK_IMPORTED_MODULE_4__.plural(r);\n}, \"userFriendlyResourceName\");\nvar es = o((e = {})=>e != null && e.id ? {\n        ...e,\n        id: decodeURIComponent(e.id)\n    } : e, \"handleUseParams\");\nfunction pt(e, t) {\n    return e.findIndex((r, s)=>s <= e.length - t.length && t.every((n, a)=>e[s + a] === n));\n}\no(pt, \"arrayFindIndex\");\nfunction ua(e) {\n    if (e[0] === \"data\") {\n        let t = e.slice(1);\n        if (t[2] === \"many\") t[2] = \"getMany\";\n        else if (t[2] === \"infinite\") t[2] = \"list\";\n        else if (t[2] === \"one\") t[2] = \"detail\";\n        else if (t[1] === \"custom\") {\n            let r = {\n                ...t[2]\n            };\n            return delete r.method, delete r.url, [\n                t[0],\n                t[1],\n                t[2].method,\n                t[2].url,\n                r\n            ];\n        }\n        return t;\n    }\n    if (e[0] === \"audit\" && e[2] === \"list\") return [\n        \"logList\",\n        e[1],\n        e[3]\n    ];\n    if (e[0] === \"access\" && e.length === 4) return [\n        \"useCan\",\n        {\n            resource: e[1],\n            action: e[2],\n            ...e[3]\n        }\n    ];\n    if (e[0] === \"auth\") {\n        if (pt(e, [\n            \"auth\",\n            \"login\"\n        ]) !== -1) return [\n            \"useLogin\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"logout\"\n        ]) !== -1) return [\n            \"useLogout\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"identity\"\n        ]) !== -1) return [\n            \"getUserIdentity\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"register\"\n        ]) !== -1) return [\n            \"useRegister\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"forgotPassword\"\n        ]) !== -1) return [\n            \"useForgotPassword\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"check\"\n        ]) !== -1) return [\n            \"useAuthenticated\",\n            e[2]\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"onError\"\n        ]) !== -1) return [\n            \"useCheckError\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"permissions\"\n        ]) !== -1) return [\n            \"usePermissions\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"updatePassword\"\n        ]) !== -1) return [\n            \"useUpdatePassword\"\n        ];\n    }\n    return e;\n}\no(ua, \"convertToLegacy\");\nvar We = class {\n    constructor(t = []){\n        this.segments = [];\n        this.segments = t;\n    }\n    key() {\n        return this.segments;\n    }\n    legacy() {\n        return ua(this.segments);\n    }\n    get(t) {\n        return t ? this.legacy() : this.segments;\n    }\n};\no(We, \"BaseKeyBuilder\");\nvar st = class extends We {\n    params(t) {\n        return new We([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(st, \"ParamsKeyBuilder\");\nvar ar = class extends We {\n    id(t) {\n        return new st([\n            ...this.segments,\n            t ? String(t) : void 0\n        ]);\n    }\n};\no(ar, \"DataIdRequiringKeyBuilder\");\nvar ir = class extends We {\n    ids(...t) {\n        return new st([\n            ...this.segments,\n            ...t.length ? [\n                t.map((r)=>String(r))\n            ] : []\n        ]);\n    }\n};\no(ir, \"DataIdsRequiringKeyBuilder\");\nvar ur = class extends We {\n    action(t) {\n        if (t === \"one\") return new ar([\n            ...this.segments,\n            t\n        ]);\n        if (t === \"many\") return new ir([\n            ...this.segments,\n            t\n        ]);\n        if ([\n            \"list\",\n            \"infinite\"\n        ].includes(t)) return new st([\n            ...this.segments,\n            t\n        ]);\n        throw new Error(\"Invalid action type\");\n    }\n};\no(ur, \"DataResourceKeyBuilder\");\nvar cr = class extends We {\n    resource(t) {\n        return new ur([\n            ...this.segments,\n            t\n        ]);\n    }\n    mutation(t) {\n        return new st([\n            ...t === \"custom\" ? this.segments : [\n                this.segments[0]\n            ],\n            t\n        ]);\n    }\n};\no(cr, \"DataKeyBuilder\");\nvar pr = class extends We {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(pr, \"AuthKeyBuilder\");\nvar dr = class extends We {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(dr, \"AccessResourceKeyBuilder\");\nvar lr = class extends We {\n    resource(t) {\n        return new dr([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(lr, \"AccessKeyBuilder\");\nvar mr = class extends We {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(mr, \"AuditActionKeyBuilder\");\nvar fr = class extends We {\n    resource(t) {\n        return new mr([\n            ...this.segments,\n            t\n        ]);\n    }\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(fr, \"AuditKeyBuilder\");\nvar wt = class extends We {\n    data(t) {\n        return new cr([\n            \"data\",\n            t || \"default\"\n        ]);\n    }\n    auth() {\n        return new pr([\n            \"auth\"\n        ]);\n    }\n    access() {\n        return new lr([\n            \"access\"\n        ]);\n    }\n    audit() {\n        return new fr([\n            \"audit\"\n        ]);\n    }\n};\no(wt, \"KeyBuilder\");\nvar nt = o(()=>new wt([]), \"keys\");\nvar A = o((...e)=>e.find((t)=>typeof t < \"u\"), \"pickNotDeprecated\");\nvar ts = o((e, t, r, s)=>{\n    let n = t || \"default\", a = {\n        all: [\n            n\n        ],\n        resourceAll: [\n            n,\n            e || \"\"\n        ],\n        list: (i)=>[\n                ...a.resourceAll,\n                \"list\",\n                {\n                    ...i,\n                    ...A(r, s) || {}\n                }\n            ],\n        many: (i)=>[\n                ...a.resourceAll,\n                \"getMany\",\n                i == null ? void 0 : i.map(String),\n                {\n                    ...A(r, s) || {}\n                }\n            ].filter((c)=>c !== void 0),\n        detail: (i)=>[\n                ...a.resourceAll,\n                \"detail\",\n                i == null ? void 0 : i.toString(),\n                {\n                    ...A(r, s) || {}\n                }\n            ],\n        logList: (i)=>[\n                \"logList\",\n                e,\n                i,\n                s\n            ].filter((c)=>c !== void 0)\n    };\n    return a;\n}, \"queryKeys\"), dt = o((e)=>(t, r, s, n)=>{\n        let a = r || \"default\";\n        return {\n            all: nt().data(a).get(e),\n            resourceAll: nt().data(r).resource(t ?? \"\").get(e),\n            list: (c)=>nt().data(r).resource(t ?? \"\").action(\"list\").params({\n                    ...c,\n                    ...A(s, n) || {}\n                }).get(e),\n            many: (c)=>nt().data(r).resource(t ?? \"\").action(\"many\").ids(...c ?? []).params({\n                    ...A(s, n) || {}\n                }).get(e),\n            detail: (c)=>nt().data(r).resource(t ?? \"\").action(\"one\").id(c ?? \"\").params({\n                    ...A(s, n) || {}\n                }).get(e),\n            logList: (c)=>[\n                    ...nt().audit().resource(t).action(\"list\").params(c).get(e),\n                    n\n                ].filter((p)=>p !== void 0)\n        };\n    }, \"queryKeysReplacement\");\nvar Xr = o((e, t)=>!e || !t ? !1 : !!e.find((r)=>r === t), \"hasPermission\");\nvar It = o((e)=>e.startsWith(\":\"), \"isParameter\");\nvar it = o((e)=>e.split(\"/\").filter((r)=>r !== \"\"), \"splitToSegments\");\nvar rs = o((e, t)=>{\n    let r = it(e), s = it(t);\n    return r.length === s.length;\n}, \"isSegmentCountsSame\");\nvar ke = o((e)=>e.replace(/^\\/|\\/$/g, \"\"), \"removeLeadingTrailingSlashes\");\nvar os = o((e, t)=>{\n    let r = ke(e), s = ke(t);\n    if (!rs(r, s)) return !1;\n    let n = it(r);\n    return it(s).every((i, c)=>It(i) || i === n[c]);\n}, \"checkBySegments\");\nvar ss = o((e, t, r)=>{\n    let s = ke(r || \"\"), n = `${s}${s ? \"/\" : \"\"}${e}`;\n    return t === \"list\" ? n = `${n}` : t === \"create\" ? n = `${n}/create` : t === \"edit\" ? n = `${n}/edit/:id` : t === \"show\" ? n = `${n}/show/:id` : t === \"clone\" && (n = `${n}/clone/:id`), `/${n.replace(/^\\//, \"\")}`;\n}, \"getDefaultActionPath\");\nvar Oe = o((e, t)=>{\n    var n, a;\n    let r = A((n = e.meta) == null ? void 0 : n.parent, (a = e.options) == null ? void 0 : a.parent, e.parentName);\n    return r ? t.find((i)=>(i.identifier ?? i.name) === r) ?? {\n        name: r\n    } : void 0;\n}, \"getParentResource\");\nvar Gt = o((e, t, r)=>{\n    let s = [], n = Oe(e, t);\n    for(; n;)s.push(n), n = Oe(n, t);\n    if (s.length !== 0) return `/${s.reverse().map((a)=>{\n        var c;\n        let i = r ? ((c = a.options) == null ? void 0 : c.route) ?? a.name : a.name;\n        return ke(i);\n    }).join(\"/\")}`;\n}, \"getParentPrefixForResource\");\nvar Se = o((e, t, r)=>{\n    let s = [], n = [\n        \"list\",\n        \"show\",\n        \"edit\",\n        \"create\",\n        \"clone\"\n    ], a = Gt(e, t, r);\n    return n.forEach((i)=>{\n        var u, l;\n        let c = r && i === \"clone\" ? e.create : e[i], p;\n        typeof c == \"function\" || r ? p = ss(r ? ((u = e.meta) == null ? void 0 : u.route) ?? ((l = e.options) == null ? void 0 : l.route) ?? e.name : e.name, i, r ? a : void 0) : typeof c == \"string\" ? p = c : typeof c == \"object\" && (p = c.path), p && s.push({\n            action: i,\n            resource: e,\n            route: `/${p.replace(/^\\//, \"\")}`\n        });\n    }), s;\n}, \"getActionRoutesFromResource\");\nvar ns = o((e)=>{\n    var n;\n    if (e.length === 0) return;\n    if (e.length === 1) return e[0];\n    let t = e.map((a)=>({\n            ...a,\n            splitted: it(ke(a.route))\n        })), r = ((n = t[0]) == null ? void 0 : n.splitted.length) ?? 0, s = [\n        ...t\n    ];\n    for(let a = 0; a < r; a++){\n        let i = s.filter((c)=>!It(c.splitted[a]));\n        if (i.length !== 0) {\n            if (i.length === 1) {\n                s = i;\n                break;\n            }\n            s = i;\n        }\n    }\n    return s[0];\n}, \"pickMatchedRoute\");\nvar as = o((e, t)=>{\n    let s = t.flatMap((a)=>Se(a, t)).filter((a)=>os(e, a.route)), n = ns(s);\n    return {\n        found: !!n,\n        resource: n == null ? void 0 : n.resource,\n        action: n == null ? void 0 : n.action,\n        matchedRoute: n == null ? void 0 : n.route\n    };\n}, \"matchResourceFromRoute\");\nvar yr = o((e, t)=>{\n    var n;\n    let r, s = Gt(e, t, !0);\n    if (s) {\n        let a = A(e.meta, e.options);\n        r = `${s}/${(a == null ? void 0 : a.route) ?? e.name}`;\n    } else r = ((n = e.options) == null ? void 0 : n.route) ?? e.name;\n    return `/${r.replace(/^\\//, \"\")}`;\n}, \"routeGenerator\");\nvar is = o((e)=>{\n    var i;\n    let t = [], r = {}, s = {}, n, a;\n    for(let c = 0; c < e.length; c++){\n        n = e[c];\n        let p = n.route ?? ((i = A(n == null ? void 0 : n.meta, n.options)) == null ? void 0 : i.route) ?? \"\";\n        r[p] = n, r[p].children = [], s[n.name] = n, s[n.name].children = [];\n    }\n    for(let c in r)Object.hasOwn(r, c) && (a = r[c], a.parentName && s[a.parentName] ? s[a.parentName].children.push(a) : t.push(a));\n    return t;\n}, \"createTreeView\");\nvar Kt = o((e)=>(e = e.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\"), e = e.toLowerCase().replace(/[_-]+/g, \" \").replace(/\\s{2,}/g, \" \").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e), \"humanizeString\");\n\n\n\nvar Zr = o(({ children: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, e), \"DefaultLayout\");\nvar pa = {\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: 24,\n        height: 24,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        \"data-testid\": \"refine-logo\",\n        id: \"refine-default-logo\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z\",\n        fill: \"currentColor\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\n        fill: \"currentColor\"\n    })),\n    text: \"Refine Project\"\n}, Fe = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    warnWhenUnsavedChanges: !1,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\"\n    },\n    overtime: {\n        interval: 1e3\n    },\n    textTransformers: {\n        humanize: Kt,\n        plural: pluralize__WEBPACK_IMPORTED_MODULE_4__.plural,\n        singular: pluralize__WEBPACK_IMPORTED_MODULE_4__.singular\n    },\n    disableServerSideValidation: !1,\n    title: pa\n}, Qe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    hasDashboard: !1,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: !1,\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    Title: void 0,\n    Sider: void 0,\n    Header: void 0,\n    Footer: void 0,\n    Layout: Zr,\n    OffLayoutArea: void 0,\n    liveMode: \"off\",\n    onLiveEvent: void 0,\n    options: Fe\n}), cs = o(({ hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, undoableTimeout: n, children: a, DashboardPage: i, Title: c, Layout: p = Zr, Header: u, Sider: l, Footer: m, OffLayoutArea: y, LoginPage: d = Yr, catchAll: g, liveMode: x = \"off\", onLiveEvent: v, options: f })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qe.Provider, {\n        value: {\n            __initialized: !0,\n            hasDashboard: e,\n            mutationMode: t,\n            warnWhenUnsavedChanges: r,\n            syncWithLocation: s,\n            Title: c,\n            undoableTimeout: n,\n            Layout: p,\n            Header: u,\n            Sider: l,\n            Footer: m,\n            OffLayoutArea: y,\n            DashboardPage: i,\n            LoginPage: d,\n            catchAll: g,\n            liveMode: x,\n            onLiveEvent: v,\n            options: f\n        }\n    }, a), \"RefineContextProvider\");\nvar Jr = o(({ options: e, disableTelemetry: t, liveMode: r, mutationMode: s, reactQueryClientConfig: n, reactQueryDevtoolConfig: a, syncWithLocation: i, undoableTimeout: c, warnWhenUnsavedChanges: p } = {})=>{\n    var y, d, g, x, v, f, h, E, V, T, C, R;\n    let u = {\n        breadcrumb: e == null ? void 0 : e.breadcrumb,\n        mutationMode: (e == null ? void 0 : e.mutationMode) ?? s ?? Fe.mutationMode,\n        undoableTimeout: (e == null ? void 0 : e.undoableTimeout) ?? c ?? Fe.undoableTimeout,\n        syncWithLocation: (e == null ? void 0 : e.syncWithLocation) ?? i ?? Fe.syncWithLocation,\n        warnWhenUnsavedChanges: (e == null ? void 0 : e.warnWhenUnsavedChanges) ?? p ?? Fe.warnWhenUnsavedChanges,\n        liveMode: (e == null ? void 0 : e.liveMode) ?? r ?? Fe.liveMode,\n        redirect: {\n            afterCreate: ((y = e == null ? void 0 : e.redirect) == null ? void 0 : y.afterCreate) ?? Fe.redirect.afterCreate,\n            afterClone: ((d = e == null ? void 0 : e.redirect) == null ? void 0 : d.afterClone) ?? Fe.redirect.afterClone,\n            afterEdit: ((g = e == null ? void 0 : e.redirect) == null ? void 0 : g.afterEdit) ?? Fe.redirect.afterEdit\n        },\n        overtime: (e == null ? void 0 : e.overtime) ?? Fe.overtime,\n        textTransformers: {\n            humanize: ((x = e == null ? void 0 : e.textTransformers) == null ? void 0 : x.humanize) ?? Fe.textTransformers.humanize,\n            plural: ((v = e == null ? void 0 : e.textTransformers) == null ? void 0 : v.plural) ?? Fe.textTransformers.plural,\n            singular: ((f = e == null ? void 0 : e.textTransformers) == null ? void 0 : f.singular) ?? Fe.textTransformers.singular\n        },\n        disableServerSideValidation: (e == null ? void 0 : e.disableServerSideValidation) ?? Fe.disableServerSideValidation,\n        projectId: e == null ? void 0 : e.projectId,\n        useNewQueryKeys: e == null ? void 0 : e.useNewQueryKeys,\n        title: {\n            icon: typeof ((h = e == null ? void 0 : e.title) == null ? void 0 : h.icon) > \"u\" ? Fe.title.icon : (E = e == null ? void 0 : e.title) == null ? void 0 : E.icon,\n            text: typeof ((V = e == null ? void 0 : e.title) == null ? void 0 : V.text) > \"u\" ? Fe.title.text : (T = e == null ? void 0 : e.title) == null ? void 0 : T.text\n        }\n    }, l = (e == null ? void 0 : e.disableTelemetry) ?? t ?? !1, m = {\n        clientConfig: ((C = e == null ? void 0 : e.reactQuery) == null ? void 0 : C.clientConfig) ?? n ?? {},\n        devtoolConfig: ((R = e == null ? void 0 : e.reactQuery) == null ? void 0 : R.devtoolConfig) ?? a ?? {}\n    };\n    return {\n        optionsWithDefaults: u,\n        disableTelemetryWithDefault: l,\n        reactQueryWithDefaults: m\n    };\n}, \"handleRefineOptions\");\nvar qr = o(({ redirectFromProps: e, action: t, redirectOptions: r })=>{\n    if (e || e === !1) return e;\n    switch(t){\n        case \"clone\":\n            return r.afterClone;\n        case \"create\":\n            return r.afterCreate;\n        case \"edit\":\n            return r.afterEdit;\n        default:\n            return !1;\n    }\n}, \"redirectPage\");\nvar gr = o(async (e, t, r)=>{\n    let s = [];\n    for (let [n, a] of e.entries())try {\n        let i = await a();\n        s.push(t(i, n));\n    } catch (i) {\n        s.push(r(i, n));\n    }\n    return s;\n}, \"sequentialPromises\");\nvar Le = o((e, t = [], r = !1)=>{\n    if (!e) return;\n    if (r) {\n        let n = t.find((i)=>ke(i.route ?? \"\") === ke(e));\n        return n || t.find((i)=>i.name === e);\n    }\n    let s = t.find((n)=>n.identifier === e);\n    return s || (s = t.find((n)=>n.name === e)), s;\n}, \"pickResource\");\nvar ee = o((e, t, r)=>{\n    if (t) return t;\n    let s = Le(e, r), n = A(s == null ? void 0 : s.meta, s == null ? void 0 : s.options);\n    return n != null && n.dataProviderName ? n.dataProviderName : \"default\";\n}, \"pickDataProvider\");\nvar lt = o(async (e)=>({\n        data: (await Promise.all(e)).map((t)=>t.data)\n    }), \"handleMultiple\");\nvar Tr = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.next) return r.next;\n    let s = (t == null ? void 0 : t.current) || 1, n = (t == null ? void 0 : t.pageSize) || 10, a = Math.ceil((e.total || 0) / n);\n    return s < a ? Number(s) + 1 : void 0;\n}, \"getNextPageParam\"), xr = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.prev) return r.prev;\n    let s = (t == null ? void 0 : t.current) || 1;\n    return s === 1 ? void 0 : s - 1;\n}, \"getPreviousPageParam\");\nvar Pr = o((e)=>{\n    let t = [];\n    return e.forEach((r)=>{\n        var s, n;\n        t.push({\n            ...r,\n            label: ((s = r.meta) == null ? void 0 : s.label) ?? ((n = r.options) == null ? void 0 : n.label),\n            route: yr(r, e),\n            canCreate: !!r.create,\n            canEdit: !!r.edit,\n            canShow: !!r.show,\n            canDelete: r.canDelete\n        });\n    }), t;\n}, \"legacyResourceTransform\");\nvar ps = o((e)=>it(ke(e)).flatMap((r)=>It(r) ? [\n            r.slice(1)\n        ] : []), \"pickRouteParams\");\nvar ds = o((e, t = {})=>e.reduce((r, s)=>{\n        let n = t[s];\n        return typeof n < \"u\" && (r[s] = n), r;\n    }, {}), \"prepareRouteParams\");\nvar He = o((e, t = {}, r = {}, s = {})=>{\n    let n = ps(e), a = ds(n, {\n        ...t,\n        ...typeof (r == null ? void 0 : r.id) < \"u\" ? {\n            id: r.id\n        } : {},\n        ...typeof (r == null ? void 0 : r.action) < \"u\" ? {\n            action: r.action\n        } : {},\n        ...typeof (r == null ? void 0 : r.resource) < \"u\" ? {\n            resource: r.resource\n        } : {},\n        ...r == null ? void 0 : r.params,\n        ...s\n    });\n    return e.replace(/:([^\\/]+)/g, (i, c)=>{\n        let p = a[c];\n        return typeof p < \"u\" ? `${p}` : i;\n    });\n}, \"composeRoute\");\nvar ie = o(()=>{\n    let e = xe(), t = Ee();\n    return t.isProvided ? {\n        isLegacy: !1,\n        ...t\n    } : e.isProvided ? {\n        isLegacy: !0,\n        ...e,\n        check: e.checkAuth,\n        onError: e.checkError,\n        getIdentity: e.getUserIdentity\n    } : null;\n}, \"useActiveAuthProvider\");\nvar Ht = o(({ hasPagination: e, pagination: t, configPagination: r } = {})=>{\n    let s = e === !1 ? \"off\" : \"server\", n = (t == null ? void 0 : t.mode) ?? s, a = A(t == null ? void 0 : t.current, r == null ? void 0 : r.current) ?? 1, i = A(t == null ? void 0 : t.pageSize, r == null ? void 0 : r.pageSize) ?? 10;\n    return {\n        current: a,\n        pageSize: i,\n        mode: n\n    };\n}, \"handlePaginationParams\");\n\nvar hr = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let s = window.matchMedia(e);\n        s.matches !== t && r(s.matches);\n        let n = o(()=>r(s.matches), \"listener\");\n        return window.addEventListener(\"resize\", n), ()=>window.removeEventListener(\"resize\", n);\n    }, [\n        t,\n        e\n    ]), t;\n}, \"useMediaQuery\");\nvar Rr = o((e, t, r, s)=>{\n    let n = s ? e(t, s, r) : e(t, r), a = r ?? t;\n    return n === t || typeof n > \"u\" ? a : n;\n}, \"safeTranslate\");\nfunction ls(e, t, r, s, n) {\n    var y;\n    let a = {\n        create: \"Create new \",\n        clone: `#${s ?? \"\"} Clone `,\n        edit: `#${s ?? \"\"} Edit `,\n        show: `#${s ?? \"\"} Show `,\n        list: \"\"\n    }, i = (t == null ? void 0 : t.identifier) ?? (t == null ? void 0 : t.name), c = (t == null ? void 0 : t.label) ?? ((y = t == null ? void 0 : t.meta) == null ? void 0 : y.label) ?? nr(i, r === \"list\" ? \"plural\" : \"singular\"), p = n ?? c, u = Rr(e, \"documentTitle.default\", \"Refine\"), l = Rr(e, \"documentTitle.suffix\", \" | Refine\"), m = u;\n    return r && i && (m = Rr(e, `documentTitle.${i}.${r}`, `${a[r] ?? \"\"}${p}${l}`, {\n        id: s\n    })), m;\n}\no(ls, \"generateDefaultDocumentTitle\");\n\nvar _e = o((e, t)=>{\n    let { mutationMode: r, undoableTimeout: s } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        mutationMode: e ?? r,\n        undoableTimeout: t ?? s\n    };\n}, \"useMutationMode\");\n\n\nvar eo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), fs = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(eo.Provider, {\n        value: {\n            warnWhen: t,\n            setWarnWhen: r\n        }\n    }, e);\n}, \"UnsavedWarnContextProvider\");\nvar vt = o(()=>{\n    let { warnWhenUnsavedChanges: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), { warnWhen: t, setWarnWhen: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(eo);\n    return {\n        warnWhenUnsavedChanges: e,\n        warnWhen: !!t,\n        setWarnWhen: r ?? (()=>{})\n    };\n}, \"useWarnAboutChange\");\n\nvar to = o(()=>{\n    let { syncWithLocation: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        syncWithLocation: e\n    };\n}, \"useSyncWithLocation\");\n\nvar Ta = o(()=>{\n    let { Title: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return e;\n}, \"useTitle\");\n\nvar ge = o(()=>{\n    let { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: a, hasDashboard: i, mutationMode: c, syncWithLocation: p, undoableTimeout: u, warnWhenUnsavedChanges: l, DashboardPage: m, LoginPage: y, catchAll: d, options: g, __initialized: x } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        __initialized: x,\n        Footer: e,\n        Header: t,\n        Layout: r,\n        OffLayoutArea: s,\n        Sider: n,\n        Title: a,\n        hasDashboard: i,\n        mutationMode: c,\n        syncWithLocation: p,\n        undoableTimeout: u,\n        warnWhenUnsavedChanges: l,\n        DashboardPage: m,\n        LoginPage: y,\n        catchAll: d,\n        options: g\n    };\n}, \"useRefineContext\");\nvar Pt = o(()=>{\n    let { options: { textTransformers: e } } = ge();\n    return o((r = \"\", s)=>{\n        let n = e.humanize(r);\n        return s === \"singular\" ? e.singular(n) : e.plural(n);\n    }, \"getFriendlyName\");\n}, \"useUserFriendlyName\");\nvar gs = o((e)=>typeof e == \"object\" && e !== null, \"isNested\"), Pa = o((e)=>Array.isArray(e), \"isArray\"), Cr = o((e, t = \"\")=>gs(e) ? Object.keys(e).reduce((r, s)=>{\n        let n = t.length ? `${t}.` : \"\";\n        return gs(e[s]) && Object.keys(e[s]).length && (Pa(e[s]) && e[s].length ? e[s].forEach((a, i)=>{\n            Object.assign(r, Cr(a, `${n + s}.${i}`));\n        }) : Object.assign(r, Cr(e[s], n + s))), r[n + s] = e[s], r;\n    }, {}) : {\n        [t]: e\n    }, \"flattenObjectKeys\");\nvar Ts = o((e)=>e.split(\".\").map((t)=>Number.isNaN(Number(t)) ? t : Number(t)), \"propertyPathToArray\");\nvar ro = o((e, t, r)=>{\n    if (true) return;\n    let s = new Blob([\n        t\n    ], {\n        type: r\n    }), n = document.createElement(\"a\");\n    n.setAttribute(\"visibility\", \"hidden\"), n.download = e;\n    let a = URL.createObjectURL(s);\n    n.href = a, document.body.appendChild(n), n.click(), document.body.removeChild(n), setTimeout(()=>{\n        URL.revokeObjectURL(a);\n    });\n}, \"downloadInBrowser\");\nvar br = o((e)=>{\n    setTimeout(e, 0);\n}, \"deferExecution\");\n\nvar oo = o((e, t = 1e3, r)=>{\n    let s = [], n = o(()=>{\n        s.forEach((c)=>{\n            var p;\n            return (p = c.reject) == null ? void 0 : p.call(c, r);\n        }), s = [];\n    }, \"cancelPrevious\"), a = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((...c)=>{\n        let { resolve: p, reject: u } = s.pop() || {};\n        Promise.resolve(e(...c)).then(p).catch(u);\n    }, t), i = o((...c)=>new Promise((p, u)=>{\n            n(), s.push({\n                resolve: p,\n                reject: u\n            }), a(...c);\n        }), \"runner\");\n    return i.flush = ()=>a.flush(), i.cancel = ()=>{\n        a.cancel(), n();\n    }, i;\n}, \"asyncDebounce\");\nvar je = o((e)=>{\n    let t = {\n        queryKey: e.queryKey,\n        pageParam: e.pageParam\n    };\n    return Object.defineProperty(t, \"signal\", {\n        enumerable: !0,\n        get: ()=>e.signal\n    }), t;\n}, \"prepareQueryContext\");\nvar vr = o((e)=>{\n    let { current: t, pageSize: r, sorter: s, sorters: n, filters: a } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(e.substring(1));\n    return {\n        parsedCurrent: t && Number(t),\n        parsedPageSize: r && Number(r),\n        parsedSorter: A(n, s) ?? [],\n        parsedFilters: a ?? []\n    };\n}, \"parseTableParams\"), Ca = o((e)=>{\n    let t = qs__WEBPACK_IMPORTED_MODULE_6__.stringify(e);\n    return vr(`/${t}`);\n}, \"parseTableParamsFromQuery\"), Dr = o((e)=>{\n    let t = {\n        skipNulls: !0,\n        arrayFormat: \"indices\",\n        encode: !1\n    }, { pagination: r, sorter: s, sorters: n, filters: a, ...i } = e;\n    return qs__WEBPACK_IMPORTED_MODULE_6__.stringify({\n        ...i,\n        ...r || {},\n        sorters: A(n, s),\n        filters: a\n    }, t);\n}, \"stringifyTableParams\"), hs = o((e, t)=>e.operator !== \"and\" && e.operator !== \"or\" && t.operator !== \"and\" && t.operator !== \"or\" ? (\"field\" in e ? e.field : void 0) === (\"field\" in t ? t.field : void 0) && e.operator === t.operator : (\"key\" in e ? e.key : void 0) === (\"key\" in t ? t.key : void 0) && e.operator === t.operator, \"compareFilters\"), Rs = o((e, t)=>e.field === t.field, \"compareSorters\"), St = o((e, t, r = [])=>(t.filter((n)=>(n.operator === \"or\" || n.operator === \"and\") && !n.key).length > 1 && warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, r, hs).filter((n)=>n.value !== void 0 && n.value !== null && (n.operator !== \"or\" || n.operator === \"or\" && n.value.length !== 0) && (n.operator !== \"and\" || n.operator === \"and\" && n.value.length !== 0))), \"unionFilters\"), Ur = o((e, t)=>(0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, Rs).filter((r)=>r.order !== void 0 && r.order !== null), \"unionSorters\"), Er = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, hs),\n        ...e\n    ], \"setInitialFilters\"), Lr = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, Rs),\n        ...e\n    ], \"setInitialSorters\"), ba = o((e, t)=>{\n    if (!t) return;\n    let r = t.find((s)=>s.field === e);\n    if (r) return r.order;\n}, \"getDefaultSortOrder\"), va = o((e, t, r = \"eq\")=>{\n    let s = t == null ? void 0 : t.find((n)=>{\n        if (n.operator !== \"or\" && n.operator !== \"and\" && \"field\" in n) {\n            let { operator: a, field: i } = n;\n            return i === e && a === r;\n        }\n    });\n    if (s) return s.value || [];\n}, \"getDefaultFilter\");\nvar Da = o((e)=>new Promise((t, r)=>{\n        let s = new FileReader, n = o(()=>{\n            s.result && (s.removeEventListener(\"load\", n, !1), t(s.result));\n        }, \"resultHandler\");\n        s.addEventListener(\"load\", n, !1), s.readAsDataURL(e.originFileObj), s.onerror = (a)=>(s.removeEventListener(\"load\", n, !1), r(a));\n    }), \"file2Base64\");\nvar Z = o(()=>{\n    let { options: { useNewQueryKeys: e } } = ge();\n    return {\n        keys: nt,\n        preferLegacyKeys: !e\n    };\n}, \"useKeys\");\nfunction Ua({ v3LegacyAuthProviderCompatible: e = !1, options: t, params: r } = {}) {\n    let { getPermissions: s } = xe(), { getPermissions: n } = Ee(), { keys: a, preferLegacyKeys: i } = Z(), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: a().auth().action(\"permissions\").get(i),\n        queryFn: n ? ()=>n(r) : ()=>Promise.resolve(void 0),\n        enabled: !e && !!n,\n        ...e ? {} : t,\n        meta: {\n            ...e ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", i)\n        }\n    }), p = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...a().auth().action(\"permissions\").get(i),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: s ? ()=>s(r) : ()=>Promise.resolve(void 0),\n        enabled: e && !!s,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", i)\n        }\n    });\n    return e ? p : c;\n}\no(Ua, \"usePermissions\");\n\n\nfunction no({ v3LegacyAuthProviderCompatible: e = !1, queryOptions: t } = {}) {\n    let { getUserIdentity: r } = xe(), { getIdentity: s } = Ee(), { keys: n, preferLegacyKeys: a } = Z(), i = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"identity\").get(a),\n        queryFn: s ?? (()=>Promise.resolve({})),\n        enabled: !e && !!s,\n        retry: !1,\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", a)\n        }\n    }), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"identity\").get(a),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: r ?? (()=>Promise.resolve({})),\n        enabled: e && !!r,\n        retry: !1,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", a)\n        }\n    });\n    return e ? c : i;\n}\no(no, \"useGetIdentity\");\n\n\n\nvar Dt = o(()=>{\n    let e = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: t, preferLegacyKeys: r } = Z();\n    return o(async ()=>{\n        await Promise.all([\n            \"check\",\n            \"identity\",\n            \"permissions\"\n        ].map((n)=>e.invalidateQueries(t().auth().action(n).get(r))));\n    }, \"invalidate\");\n}, \"useInvalidateAuthStore\");\nfunction Mr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = se(), n = he(), { push: a } = Pe(), { open: i, close: c } = $e(), { logout: p } = xe(), { logout: u } = Ee(), { keys: l, preferLegacyKeys: m } = Z(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: l().auth().action(\"logout\").get(m),\n        mutationFn: u,\n        onSuccess: async (g, x)=>{\n            let { success: v, error: f, redirectTo: h, successNotification: E } = g, { redirectPath: V } = x ?? {}, T = V ?? h;\n            v && (c == null || c(\"useLogout-error\"), E && (i == null || i(La(E)))), (f || !v) && (i == null || i(ao(f))), T !== !1 && (s === \"legacy\" ? a(T ?? \"/login\") : T && n({\n                to: T\n            })), await r();\n        },\n        onError: (g)=>{\n            i == null || i(ao(g));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", m)\n        }\n    }), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...l().auth().action(\"logout\").get(m),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: p,\n        onSuccess: async (g, x)=>{\n            let v = (x == null ? void 0 : x.redirectPath) ?? g;\n            if (v !== !1) {\n                if (v) {\n                    s === \"legacy\" ? a(v) : n({\n                        to: v\n                    });\n                    return;\n                }\n                s === \"legacy\" ? a(\"/login\") : n({\n                    to: \"/login\"\n                }), await r();\n            }\n        },\n        onError: (g)=>{\n            i == null || i(ao(g));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", m)\n        }\n    });\n    return e ? d : y;\n}\no(Mr, \"useLogout\");\nvar ao = o((e)=>({\n        key: \"useLogout-error\",\n        type: \"error\",\n        message: (e == null ? void 0 : e.name) || \"Logout Error\",\n        description: (e == null ? void 0 : e.message) || \"Something went wrong during logout\"\n    }), \"buildNotification\"), La = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"logout-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction $t({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = se(), n = he(), { replace: a } = Pe(), i = Te(), { useLocation: c } = le(), { search: p } = c(), { close: u, open: l } = $e(), { login: m } = xe(), { login: y } = Ee(), { keys: d, preferLegacyKeys: g } = Z(), x = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var h;\n        return s === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(p, {\n            ignoreQueryPrefix: !0\n        }).to : (h = i.params) == null ? void 0 : h.to;\n    }, [\n        s,\n        i.params,\n        p\n    ]), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: d().auth().action(\"login\").get(g),\n        mutationFn: y,\n        onSuccess: async ({ success: h, redirectTo: E, error: V, successNotification: T })=>{\n            h && (u == null || u(\"login-error\"), T && (l == null || l(Ia(T)))), (V || !h) && (l == null || l(io(V))), x && h ? s === \"legacy\" ? a(x) : n({\n                to: x,\n                type: \"replace\"\n            }) : E ? s === \"legacy\" ? a(E) : n({\n                to: E,\n                type: \"replace\"\n            }) : s === \"legacy\" && a(\"/\"), await r();\n        },\n        onError: (h)=>{\n            l == null || l(io(h));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", g)\n        }\n    }), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...d().auth().action(\"login\").get(g),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: m,\n        onSuccess: async (h)=>{\n            x && a(x), h !== !1 && !x && (typeof h == \"string\" ? s === \"legacy\" ? a(h) : n({\n                to: h,\n                type: \"replace\"\n            }) : s === \"legacy\" ? a(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            })), await r(), u == null || u(\"login-error\");\n        },\n        onError: (h)=>{\n            l == null || l(io(h));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", g)\n        }\n    });\n    return e ? f : v;\n}\no($t, \"useLogin\");\nvar io = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Login Error\",\n        description: (e == null ? void 0 : e.message) || \"Invalid credentials\",\n        key: \"login-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Ia = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"login-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction co({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = se(), n = he(), { replace: a } = Pe(), { register: i } = xe(), { register: c } = Ee(), { close: p, open: u } = $e(), { keys: l, preferLegacyKeys: m } = Z(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: l().auth().action(\"register\").get(m),\n        mutationFn: c,\n        onSuccess: async ({ success: g, redirectTo: x, error: v, successNotification: f })=>{\n            g && (p == null || p(\"register-error\"), f && (u == null || u(Sa(f)))), (v || !g) && (u == null || u(uo(v))), x ? s === \"legacy\" ? a(x) : n({\n                to: x,\n                type: \"replace\"\n            }) : s === \"legacy\" && a(\"/\"), await r();\n        },\n        onError: (g)=>{\n            u == null || u(uo(g));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", m)\n        }\n    }), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...l().auth().action(\"register\").get(m),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: i,\n        onSuccess: async (g)=>{\n            g !== !1 && (g ? s === \"legacy\" ? a(g) : n({\n                to: g,\n                type: \"replace\"\n            }) : s === \"legacy\" ? a(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            }), await r(), p == null || p(\"register-error\"));\n        },\n        onError: (g)=>{\n            u == null || u(uo(g));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", m)\n        }\n    });\n    return e ? d : y;\n}\no(co, \"useRegister\");\nvar uo = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Register Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while registering\",\n        key: \"register-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Sa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"register-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction lo({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = se(), s = he(), { replace: n } = Pe(), { forgotPassword: a } = xe(), { forgotPassword: i } = Ee(), { close: c, open: p } = $e(), { keys: u, preferLegacyKeys: l } = Z(), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: u().auth().action(\"forgotPassword\").get(l),\n        mutationFn: i,\n        onSuccess: ({ success: d, redirectTo: g, error: x, successNotification: v })=>{\n            d && (c == null || c(\"forgot-password-error\"), v && (p == null || p(Aa(v)))), (x || !d) && (p == null || p(po(x))), g && (r === \"legacy\" ? n(g) : s({\n                to: g,\n                type: \"replace\"\n            }));\n        },\n        onError: (d)=>{\n            p == null || p(po(d));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", l)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...u().auth().action(\"forgotPassword\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: a,\n        onSuccess: (d)=>{\n            d !== !1 && d && (r === \"legacy\" ? n(d) : s({\n                to: d,\n                type: \"replace\"\n            })), c == null || c(\"forgot-password-error\");\n        },\n        onError: (d)=>{\n            p == null || p(po(d));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", l)\n        }\n    });\n    return e ? y : m;\n}\no(lo, \"useForgotPassword\");\nvar po = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Forgot Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while resetting password\",\n        key: \"forgot-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Aa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"forgot-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction fo({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = se(), s = he(), { replace: n } = Pe(), { updatePassword: a } = xe(), { updatePassword: i } = Ee(), { close: c, open: p } = $e(), { keys: u, preferLegacyKeys: l } = Z(), m = Te(), { useLocation: y } = le(), { search: d } = y(), g = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>r === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(d, {\n            ignoreQueryPrefix: !0\n        }) ?? {} : m.params ?? {}, [\n        d,\n        m,\n        r\n    ]), x = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: u().auth().action(\"updatePassword\").get(l),\n        mutationFn: async (f)=>i == null ? void 0 : i({\n                ...g,\n                ...f\n            }),\n        onSuccess: ({ success: f, redirectTo: h, error: E, successNotification: V })=>{\n            f && (c == null || c(\"update-password-error\"), V && (p == null || p(Qa(V)))), (E || !f) && (p == null || p(mo(E))), h && (r === \"legacy\" ? n(h) : s({\n                to: h,\n                type: \"replace\"\n            }));\n        },\n        onError: (f)=>{\n            p == null || p(mo(f));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", l)\n        }\n    }), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...u().auth().action(\"updatePassword\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: async (f)=>a == null ? void 0 : a({\n                ...g,\n                ...f\n            }),\n        onSuccess: (f)=>{\n            f !== !1 && f && (r === \"legacy\" ? n(f) : s({\n                to: f,\n                type: \"replace\"\n            })), c == null || c(\"update-password-error\");\n        },\n        onError: (f)=>{\n            p == null || p(mo(f));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", l)\n        }\n    });\n    return e ? v : x;\n}\no(fo, \"useUpdatePassword\");\nvar mo = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Update Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while updating password\",\n        key: \"update-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Qa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"update-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction wr({ v3LegacyAuthProviderCompatible: e = !1, params: t } = {}) {\n    let { checkAuth: r } = xe(), { check: s } = Ee(), { keys: n, preferLegacyKeys: a } = Z(), i = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"check\").params(t).get(a),\n        queryFn: async ()=>await (s == null ? void 0 : s(t)) ?? {},\n        retry: !1,\n        enabled: !e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", a)\n        }\n    }), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"check\").params(t).get(a),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: async ()=>await (r == null ? void 0 : r(t)) ?? {},\n        retry: !1,\n        enabled: e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", a)\n        }\n    });\n    return e ? c : i;\n}\no(wr, \"useIsAuthenticated\");\nvar Va = wr;\n\n\nfunction Re({ v3LegacyAuthProviderCompatible: e = !1 } = {}) {\n    let t = se(), r = he(), { replace: s } = Pe(), { checkError: n } = xe(), { onError: a } = Ee(), { keys: i, preferLegacyKeys: c } = Z(), { mutate: p } = Mr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), { mutate: u } = Mr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: i().auth().action(\"onError\").get(c),\n        ...a ? {\n            mutationFn: a,\n            onSuccess: ({ logout: y, redirectTo: d })=>{\n                if (y) {\n                    u({\n                        redirectPath: d\n                    });\n                    return;\n                }\n                if (d) {\n                    t === \"legacy\" ? s(d) : r({\n                        to: d,\n                        type: \"replace\"\n                    });\n                    return;\n                }\n            }\n        } : {\n            mutationFn: ()=>({})\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", c)\n        }\n    }), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...i().auth().action(\"onError\").get(c),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: n,\n        onError: (y)=>{\n            p({\n                redirectPath: y\n            });\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", c)\n        }\n    });\n    return e ? m : l;\n}\no(Re, \"useOnError\");\nvar Na = Re;\nvar yo = o(()=>{\n    let { isProvided: e } = xe(), { isProvided: t } = Ee();\n    return !!(t || e);\n}, \"useIsExistAuthentication\");\n\n\n\nvar pe = o(({ isLoading: e, interval: t, onInterval: r })=>{\n    let [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), { options: a } = ge(), { overtime: i } = a, c = t ?? i.interval, p = r ?? (i == null ? void 0 : i.onInterval);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let u;\n        return e && (u = setInterval(()=>{\n            n((l)=>l === void 0 ? c : l + c);\n        }, c)), ()=>{\n            clearInterval(u), n(void 0);\n        };\n    }, [\n        e,\n        c\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        p && s && p(s);\n    }, [\n        s\n    ]), {\n        elapsedTime: s\n    };\n}, \"useLoadingOvertime\");\nvar zt = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: a, queryOptions: i, successNotification: c, errorNotification: p, meta: u, metaData: l, liveMode: m, onLiveEvent: y, liveParams: d, dataProviderName: g, overtimeOptions: x } = {})=>{\n    let { resources: v, resource: f, identifier: h } = Y(e), E = fe(), V = $(), T = ie(), { mutate: C } = Re({\n        v3LegacyAuthProviderCompatible: !!(T != null && T.isLegacy)\n    }), R = Ce(), U = ue(), { keys: F, preferLegacyKeys: L } = Z(), M = ee(h, g, v), D = A(u, l), I = A(r, t == null ? void 0 : t.filters), B = A(a, t == null ? void 0 : t.sort), P = A(s, t == null ? void 0 : t.hasPagination), S = Ht({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: P\n    }), Q = S.mode === \"server\", H = U({\n        resource: f,\n        meta: D\n    }), j = {\n        meta: H,\n        metaData: H,\n        filters: I,\n        hasPagination: Q,\n        pagination: S,\n        sorters: B,\n        config: {\n            ...t,\n            sort: B\n        }\n    }, K = (i == null ? void 0 : i.enabled) === void 0 || (i == null ? void 0 : i.enabled) === !0, { getList: X } = E(M);\n    ht({\n        resource: h,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: H,\n            metaData: H,\n            pagination: S,\n            hasPagination: Q,\n            sort: B,\n            sorters: B,\n            filters: I,\n            subscriptionType: \"useList\",\n            ...d\n        },\n        channel: `resources/${f == null ? void 0 : f.name}`,\n        enabled: K,\n        liveMode: m,\n        onLiveEvent: y,\n        dataProviderName: M,\n        meta: {\n            ...u,\n            dataProviderName: g\n        }\n    });\n    let te = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: F().data(M).resource(h ?? \"\").action(\"list\").params({\n            ...D || {},\n            filters: I,\n            hasPagination: Q,\n            ...Q && {\n                pagination: S\n            },\n            ...a && {\n                sorters: a\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(L),\n        queryFn: (b)=>{\n            let w = {\n                ...H,\n                queryContext: je(b)\n            };\n            return X({\n                resource: (f == null ? void 0 : f.name) ?? \"\",\n                pagination: S,\n                hasPagination: Q,\n                filters: I,\n                sort: B,\n                sorters: B,\n                meta: w,\n                metaData: w\n            });\n        },\n        ...i,\n        enabled: typeof (i == null ? void 0 : i.enabled) < \"u\" ? i == null ? void 0 : i.enabled : !!(f != null && f.name),\n        select: (b)=>{\n            var q;\n            let w = b, { current: N, mode: G, pageSize: z } = S;\n            return G === \"client\" && (w = {\n                ...w,\n                data: w.data.slice((N - 1) * z, N * z),\n                total: w.total\n            }), i != null && i.select ? (q = i == null ? void 0 : i.select) == null ? void 0 : q.call(i, w) : w;\n        },\n        onSuccess: (b)=>{\n            var N;\n            (N = i == null ? void 0 : i.onSuccess) == null || N.call(i, b);\n            let w = typeof c == \"function\" ? c(b, j, h) : c;\n            R(w);\n        },\n        onError: (b)=>{\n            var N;\n            C(b), (N = i == null ? void 0 : i.onError) == null || N.call(i, b);\n            let w = typeof p == \"function\" ? p(b, j, h) : p;\n            R(w, {\n                key: `${h}-useList-notification`,\n                message: V(\"notifications.error\", {\n                    statusCode: b.statusCode\n                }, `Error (status code: ${b.statusCode})`),\n                description: b.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...i == null ? void 0 : i.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useList\", L, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: ae } = pe({\n        isLoading: te.isFetching,\n        interval: x == null ? void 0 : x.interval,\n        onInterval: x == null ? void 0 : x.onInterval\n    });\n    return {\n        ...te,\n        overtime: {\n            elapsedTime: ae\n        }\n    };\n}, \"useList\");\n\n\nvar Ot = o(({ resource: e, id: t, queryOptions: r, successNotification: s, errorNotification: n, meta: a, metaData: i, liveMode: c, onLiveEvent: p, liveParams: u, dataProviderName: l, overtimeOptions: m })=>{\n    let { resources: y, resource: d, identifier: g } = Y(e), x = fe(), v = $(), f = ie(), { mutate: h } = Re({\n        v3LegacyAuthProviderCompatible: !!(f != null && f.isLegacy)\n    }), E = Ce(), V = ue(), { keys: T, preferLegacyKeys: C } = Z(), R = A(a, i), U = ee(g, l, y), { getOne: F } = x(U), L = V({\n        resource: d,\n        meta: R\n    });\n    ht({\n        resource: g,\n        types: [\n            \"*\"\n        ],\n        channel: `resources/${d == null ? void 0 : d.name}`,\n        params: {\n            ids: t ? [\n                t\n            ] : [],\n            id: t,\n            meta: L,\n            metaData: L,\n            subscriptionType: \"useOne\",\n            ...u\n        },\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof (d == null ? void 0 : d.name) < \"u\" && typeof t < \"u\",\n        liveMode: c,\n        onLiveEvent: p,\n        dataProviderName: U,\n        meta: {\n            ...a,\n            dataProviderName: l\n        }\n    });\n    let M = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: T().data(U).resource(g ?? \"\").action(\"one\").id(t ?? \"\").params({\n            ...R || {}\n        }).get(C),\n        queryFn: (I)=>F({\n                resource: (d == null ? void 0 : d.name) ?? \"\",\n                id: t,\n                meta: {\n                    ...L,\n                    queryContext: je(I)\n                },\n                metaData: {\n                    ...L,\n                    queryContext: je(I)\n                }\n            }),\n        ...r,\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof t < \"u\",\n        onSuccess: (I)=>{\n            var P;\n            (P = r == null ? void 0 : r.onSuccess) == null || P.call(r, I);\n            let B = typeof s == \"function\" ? s(I, {\n                id: t,\n                ...L\n            }, g) : s;\n            E(B);\n        },\n        onError: (I)=>{\n            var P;\n            h(I), (P = r == null ? void 0 : r.onError) == null || P.call(r, I);\n            let B = typeof n == \"function\" ? n(I, {\n                id: t,\n                ...L\n            }, g) : n;\n            E(B, {\n                key: `${t}-${g}-getOne-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: I.statusCode\n                }, `Error (status code: ${I.statusCode})`),\n                description: I.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOne\", C, d == null ? void 0 : d.name)\n        }\n    }), { elapsedTime: D } = pe({\n        isLoading: M.isFetching,\n        interval: m == null ? void 0 : m.interval,\n        onInterval: m == null ? void 0 : m.onInterval\n    });\n    return {\n        ...M,\n        overtime: {\n            elapsedTime: D\n        }\n    };\n}, \"useOne\");\n\n\nvar go = o(({ resource: e, ids: t, queryOptions: r, successNotification: s, errorNotification: n, meta: a, metaData: i, liveMode: c, onLiveEvent: p, liveParams: u, dataProviderName: l, overtimeOptions: m })=>{\n    let { resources: y, resource: d, identifier: g } = Y(e), x = fe(), v = $(), f = ie(), { mutate: h } = Re({\n        v3LegacyAuthProviderCompatible: !!(f != null && f.isLegacy)\n    }), E = Ce(), V = ue(), { keys: T, preferLegacyKeys: C } = Z(), R = A(a, i), U = ee(g, l, y), F = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === !0, { getMany: L, getOne: M } = x(U), D = V({\n        resource: d,\n        meta: R\n    });\n    ht({\n        resource: g,\n        types: [\n            \"*\"\n        ],\n        params: {\n            ids: t,\n            meta: D,\n            metaData: D,\n            subscriptionType: \"useMany\",\n            ...u\n        },\n        channel: `resources/${d.name}`,\n        enabled: F,\n        liveMode: c,\n        onLiveEvent: p,\n        dataProviderName: U,\n        meta: {\n            ...a,\n            dataProviderName: l\n        }\n    });\n    let I = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: T().data(U).resource(g).action(\"many\").ids(...t).params({\n            ...R || {}\n        }).get(C),\n        queryFn: (P)=>{\n            let S = {\n                ...D,\n                queryContext: je(P)\n            };\n            return L ? L({\n                resource: d == null ? void 0 : d.name,\n                ids: t,\n                meta: S,\n                metaData: S\n            }) : lt(t.map((Q)=>M({\n                    resource: d == null ? void 0 : d.name,\n                    id: Q,\n                    meta: S,\n                    metaData: S\n                })));\n        },\n        ...r,\n        onSuccess: (P)=>{\n            var Q;\n            (Q = r == null ? void 0 : r.onSuccess) == null || Q.call(r, P);\n            let S = typeof s == \"function\" ? s(P, t, g) : s;\n            E(S);\n        },\n        onError: (P)=>{\n            var Q;\n            h(P), (Q = r == null ? void 0 : r.onError) == null || Q.call(r, P);\n            let S = typeof n == \"function\" ? n(P, t, g) : n;\n            E(S, {\n                key: `${t[0]}-${g}-getMany-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: P.statusCode\n                }, `Error (status code: ${P.statusCode})`),\n                description: P.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useMany\", C, d == null ? void 0 : d.name)\n        }\n    }), { elapsedTime: B } = pe({\n        isLoading: I.isFetching,\n        interval: m == null ? void 0 : m.interval,\n        onInterval: m == null ? void 0 : m.onInterval\n    });\n    return {\n        ...I,\n        overtime: {\n            elapsedTime: B\n        }\n    };\n}, \"useMany\");\n\n\nvar Gs = ((s)=>(s.ADD = \"ADD\", s.REMOVE = \"REMOVE\", s.DECREASE_NOTIFICATION_SECOND = \"DECREASE_NOTIFICATION_SECOND\", s))(Gs || {});\nvar To = o(({ id: e, resource: t, values: r, dataProviderName: s, successNotification: n, errorNotification: a, meta: i, metaData: c, mutationMode: p, undoableTimeout: u, onCancel: l, optimisticUpdateMap: m, invalidates: y, mutationOptions: d, overtimeOptions: g } = {})=>{\n    let { resources: x, select: v } = Y(), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), h = fe(), { mutationMode: E, undoableTimeout: V } = _e(), T = $(), C = ie(), { mutate: R } = Re({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), U = Ye(), { log: F } = Je(), { notificationDispatch: L } = ut(), M = Ce(), D = Ae(), I = ue(), { options: { textTransformers: B } } = ge(), { keys: P, preferLegacyKeys: S } = Z(), Q = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: b = e, values: w = r, resource: N = t, mutationMode: G = p, undoableTimeout: z = u, onCancel: q = l, meta: re = i, metaData: O = c, dataProviderName: W = s })=>{\n            if (!b) throw jt;\n            if (!w) throw Ir;\n            if (!N) throw _t;\n            let { resource: _, identifier: oe } = v(N), J = I({\n                resource: _,\n                meta: A(re, O)\n            }), ve = G ?? E, ce = z ?? V;\n            return ve !== \"undoable\" ? h(ee(oe, W, x)).update({\n                resource: _.name,\n                id: b,\n                variables: w,\n                meta: J,\n                metaData: J\n            }) : new Promise((Ne, ne)=>{\n                let ye = o(()=>{\n                    h(ee(oe, W, x)).update({\n                        resource: _.name,\n                        id: b,\n                        variables: w,\n                        meta: J,\n                        metaData: J\n                    }).then((De)=>Ne(De)).catch((De)=>ne(De));\n                }, \"doMutation\"), de = o(()=>{\n                    ne({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                q && q(de), L({\n                    type: \"ADD\",\n                    payload: {\n                        id: b,\n                        resource: oe,\n                        cancelMutation: de,\n                        doMutation: ye,\n                        seconds: ce,\n                        isSilent: !!q\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: b = t, id: w = e, mutationMode: N = p, values: G = r, dataProviderName: z = s, meta: q = i, metaData: re = c, optimisticUpdateMap: O = m ?? {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            if (!w) throw jt;\n            if (!G) throw Ir;\n            if (!b) throw _t;\n            let { identifier: W } = v(b), { gqlMutation: _, gqlQuery: oe, ...J } = A(q, re) ?? {}, ve = dt(S)(W, ee(W, z, x), J), ce = P().data(ee(W, z, x)).resource(W), Ve = f.getQueriesData(ce.get(S)), Ne = N ?? E;\n            return await f.cancelQueries(ce.get(S), void 0, {\n                silent: !0\n            }), Ne !== \"pessimistic\" && (O.list && f.setQueriesData(ce.action(\"list\").params(J ?? {}).get(S), (ne)=>{\n                if (typeof O.list == \"function\") return O.list(ne, G, w);\n                if (!ne) return null;\n                let ye = ne.data.map((de)=>{\n                    var De;\n                    return ((De = de.id) == null ? void 0 : De.toString()) === (w == null ? void 0 : w.toString()) ? {\n                        id: w,\n                        ...de,\n                        ...G\n                    } : de;\n                });\n                return {\n                    ...ne,\n                    data: ye\n                };\n            }), O.many && f.setQueriesData(ce.action(\"many\").get(S), (ne)=>{\n                if (typeof O.many == \"function\") return O.many(ne, G, w);\n                if (!ne) return null;\n                let ye = ne.data.map((de)=>{\n                    var De;\n                    return ((De = de.id) == null ? void 0 : De.toString()) === (w == null ? void 0 : w.toString()) && (de = {\n                        id: w,\n                        ...de,\n                        ...G\n                    }), de;\n                });\n                return {\n                    ...ne,\n                    data: ye\n                };\n            }), O.detail && f.setQueriesData(ce.action(\"one\").id(w).params(J ?? {}).get(S), (ne)=>typeof O.detail == \"function\" ? O.detail(ne, G, w) : ne ? {\n                    ...ne,\n                    data: {\n                        ...ne.data,\n                        ...G\n                    }\n                } : null)), {\n                previousQueries: Ve,\n                queryKey: ve\n            };\n        },\n        onSettled: (b, w, N, G)=>{\n            var _;\n            let { id: z = e, resource: q = t, dataProviderName: re = s, invalidates: O = y ?? [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ] } = N;\n            if (!z) throw jt;\n            if (!q) throw _t;\n            let { identifier: W } = v(q);\n            D({\n                resource: W,\n                dataProviderName: ee(W, re, x),\n                invalidates: O,\n                id: z\n            }), L({\n                type: \"REMOVE\",\n                payload: {\n                    id: z,\n                    resource: W\n                }\n            }), (_ = d == null ? void 0 : d.onSettled) == null || _.call(d, b, w, N, G);\n        },\n        onSuccess: (b, w, N)=>{\n            var Ke, Ct;\n            let { id: G = e, resource: z = t, successNotification: q = n, dataProviderName: re = s, values: O = r, meta: W = i, metaData: _ = c } = w;\n            if (!G) throw jt;\n            if (!O) throw Ir;\n            if (!z) throw _t;\n            let { resource: oe, identifier: J } = v(z), ve = B.singular(J), ce = ee(J, re, x), Ve = I({\n                resource: oe,\n                meta: A(W, _)\n            }), Ne = typeof q == \"function\" ? q(b, {\n                id: G,\n                values: O\n            }, J) : q;\n            M(Ne, {\n                key: `${G}-${J}-notification`,\n                description: T(\"notifications.success\", \"Successful\"),\n                message: T(\"notifications.editSuccess\", {\n                    resource: T(`${J}.${J}`, ve)\n                }, `Successfully updated ${ve}`),\n                type: \"success\"\n            }), U == null || U({\n                channel: `resources/${oe.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: (Ke = b.data) != null && Ke.id ? [\n                        b.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...Ve,\n                    dataProviderName: ce\n                }\n            });\n            let ne;\n            if (N) {\n                let Ge = f.getQueryData(N.queryKey.detail(G));\n                ne = Object.keys(O || {}).reduce((Tt, xt)=>{\n                    var bt;\n                    return Tt[xt] = (bt = Ge == null ? void 0 : Ge.data) == null ? void 0 : bt[xt], Tt;\n                }, {});\n            }\n            let { fields: ye, operation: de, variables: De, ...rt } = Ve || {};\n            F == null || F.mutate({\n                action: \"update\",\n                resource: oe.name,\n                data: O,\n                previousData: ne,\n                meta: {\n                    id: G,\n                    dataProviderName: ce,\n                    ...rt\n                }\n            }), (Ct = d == null ? void 0 : d.onSuccess) == null || Ct.call(d, b, w, N);\n        },\n        onError: (b, w, N)=>{\n            var W;\n            let { id: G = e, resource: z = t, errorNotification: q = a, values: re = r } = w;\n            if (!G) throw jt;\n            if (!re) throw Ir;\n            if (!z) throw _t;\n            let { identifier: O } = v(z);\n            if (N) for (let _ of N.previousQueries)f.setQueryData(_[0], _[1]);\n            if (b.message !== \"mutationCancelled\") {\n                R == null || R(b);\n                let _ = B.singular(O), oe = typeof q == \"function\" ? q(b, {\n                    id: G,\n                    values: re\n                }, O) : q;\n                M(oe, {\n                    key: `${G}-${O}-notification`,\n                    message: T(\"notifications.editError\", {\n                        resource: T(`${O}.${O}`, _),\n                        statusCode: b.statusCode\n                    }, `Error when updating ${_} (status code: ${b.statusCode})`),\n                    description: b.message,\n                    type: \"error\"\n                });\n            }\n            (W = d == null ? void 0 : d.onError) == null || W.call(d, b, w, N);\n        },\n        mutationKey: P().data().mutation(\"update\").get(S),\n        ...d,\n        meta: {\n            ...d == null ? void 0 : d.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdate\", S)\n        }\n    }), { mutate: H, mutateAsync: j, ...K } = Q, { elapsedTime: X } = pe({\n        isLoading: K.isLoading,\n        interval: g == null ? void 0 : g.interval,\n        onInterval: g == null ? void 0 : g.onInterval\n    });\n    return {\n        ...K,\n        mutate: o((b, w)=>H(b || {}, w), \"handleMutation\"),\n        mutateAsync: o((b, w)=>j(b || {}, w), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: X\n        }\n    };\n}, \"useUpdate\"), _t = new Error(\"[useUpdate]: `resource` is not defined or not matched but is required\"), jt = new Error(\"[useUpdate]: `id` is not defined but is required in edit and clone actions\"), Ir = new Error(\"[useUpdate]: `values` is not provided but is required\");\n\n\nvar Xt = o(({ resource: e, values: t, dataProviderName: r, successNotification: s, errorNotification: n, invalidates: a, meta: i, metaData: c, mutationOptions: p, overtimeOptions: u } = {})=>{\n    let l = ie(), { mutate: m } = Re({\n        v3LegacyAuthProviderCompatible: !!(l != null && l.isLegacy)\n    }), y = fe(), d = Ae(), { resources: g, select: x } = Y(), v = $(), f = Ye(), { log: h } = Je(), E = Ce(), V = ue(), { options: { textTransformers: T } } = ge(), { keys: C, preferLegacyKeys: R } = Z(), U = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: P = e, values: S = t, meta: Q = i, metaData: H = c, dataProviderName: j = r })=>{\n            if (!S) throw Po;\n            if (!P) throw xo;\n            let { resource: K, identifier: X } = x(P), te = V({\n                resource: K,\n                meta: A(Q, H)\n            });\n            return y(ee(X, j, g)).create({\n                resource: K.name,\n                variables: S,\n                meta: te,\n                metaData: te\n            });\n        },\n        onSuccess: (P, S, Q)=>{\n            var J, ve, ce;\n            let { resource: H = e, successNotification: j = s, dataProviderName: K = r, invalidates: X = a ?? [\n                \"list\",\n                \"many\"\n            ], values: te = t, meta: ae = i, metaData: b = c } = S;\n            if (!te) throw Po;\n            if (!H) throw xo;\n            let { resource: w, identifier: N } = x(H), G = T.singular(N), z = ee(N, K, g), q = V({\n                resource: w,\n                meta: A(ae, b)\n            }), re = typeof j == \"function\" ? j(P, te, N) : j;\n            E(re, {\n                key: `create-${N}-notification`,\n                message: v(\"notifications.createSuccess\", {\n                    resource: v(`${N}.${N}`, G)\n                }, `Successfully created ${G}`),\n                description: v(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), d({\n                resource: N,\n                dataProviderName: z,\n                invalidates: X\n            }), f == null || f({\n                channel: `resources/${w.name}`,\n                type: \"created\",\n                payload: {\n                    ids: (J = P == null ? void 0 : P.data) != null && J.id ? [\n                        P.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...q,\n                    dataProviderName: z\n                }\n            });\n            let { fields: O, operation: W, variables: _, ...oe } = q || {};\n            h == null || h.mutate({\n                action: \"create\",\n                resource: w.name,\n                data: te,\n                meta: {\n                    dataProviderName: z,\n                    id: ((ve = P == null ? void 0 : P.data) == null ? void 0 : ve.id) ?? void 0,\n                    ...oe\n                }\n            }), (ce = p == null ? void 0 : p.onSuccess) == null || ce.call(p, P, S, Q);\n        },\n        onError: (P, S, Q)=>{\n            var b;\n            let { resource: H = e, errorNotification: j = n, values: K = t } = S;\n            if (!K) throw Po;\n            if (!H) throw xo;\n            m(P);\n            let { identifier: X } = x(H), te = T.singular(X), ae = typeof j == \"function\" ? j(P, K, X) : j;\n            E(ae, {\n                key: `create-${X}-notification`,\n                description: P.message,\n                message: v(\"notifications.createError\", {\n                    resource: v(`${X}.${X}`, te),\n                    statusCode: P.statusCode\n                }, `There was an error creating ${te} (status code: ${P.statusCode})`),\n                type: \"error\"\n            }), (b = p == null ? void 0 : p.onError) == null || b.call(p, P, S, Q);\n        },\n        mutationKey: C().data().mutation(\"create\").get(R),\n        ...p,\n        meta: {\n            ...p == null ? void 0 : p.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreate\", R)\n        }\n    }), { mutate: F, mutateAsync: L, ...M } = U, { elapsedTime: D } = pe({\n        isLoading: M.isLoading,\n        interval: u == null ? void 0 : u.interval,\n        onInterval: u == null ? void 0 : u.onInterval\n    });\n    return {\n        ...M,\n        mutate: o((P, S)=>F(P || {}, S), \"handleMutation\"),\n        mutateAsync: o((P, S)=>L(P || {}, S), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: D\n        }\n    };\n}, \"useCreate\"), xo = new Error(\"[useCreate]: `resource` is not defined or not matched but is required\"), Po = new Error(\"[useCreate]: `values` is not provided but is required\");\n\n\nvar ho = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = fe(), { resources: a, select: i } = Y(), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { mutationMode: p, undoableTimeout: u } = _e(), { notificationDispatch: l } = ut(), m = $(), y = Ye(), { log: d } = Je(), g = Ce(), x = Ae(), v = ue(), { options: { textTransformers: f } } = ge(), { keys: h, preferLegacyKeys: E } = Z(), V = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: C, mutationMode: R, undoableTimeout: U, resource: F, onCancel: L, meta: M, metaData: D, dataProviderName: I, values: B })=>{\n            let { resource: P, identifier: S } = i(F), Q = v({\n                resource: P,\n                meta: A(M, D)\n            }), H = R ?? p, j = U ?? u;\n            return H !== \"undoable\" ? n(ee(S, I, a)).deleteOne({\n                resource: P.name,\n                id: C,\n                meta: Q,\n                metaData: Q,\n                variables: B\n            }) : new Promise((X, te)=>{\n                let ae = o(()=>{\n                    n(ee(S, I, a)).deleteOne({\n                        resource: P.name,\n                        id: C,\n                        meta: Q,\n                        metaData: Q,\n                        variables: B\n                    }).then((w)=>X(w)).catch((w)=>te(w));\n                }, \"doMutation\"), b = o(()=>{\n                    te({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                L && L(b), l({\n                    type: \"ADD\",\n                    payload: {\n                        id: C,\n                        resource: S,\n                        cancelMutation: b,\n                        doMutation: ae,\n                        seconds: j,\n                        isSilent: !!L\n                    }\n                });\n            });\n        },\n        onMutate: async ({ id: C, resource: R, mutationMode: U, dataProviderName: F, meta: L, metaData: M })=>{\n            let { identifier: D } = i(R), { gqlMutation: I, gqlQuery: B, ...P } = A(L, M) ?? {}, S = dt(E)(D, ee(D, F, a), P), Q = h().data(ee(D, F, a)).resource(D), H = U ?? p;\n            await c.cancelQueries(Q.get(E), void 0, {\n                silent: !0\n            });\n            let j = c.getQueriesData(Q.get(E));\n            return H !== \"pessimistic\" && (c.setQueriesData(Q.action(\"list\").params(P ?? {}).get(E), (K)=>K ? {\n                    data: K.data.filter((te)=>{\n                        var ae;\n                        return ((ae = te.id) == null ? void 0 : ae.toString()) !== C.toString();\n                    }),\n                    total: K.total - 1\n                } : null), c.setQueriesData(Q.action(\"many\").get(E), (K)=>{\n                if (!K) return null;\n                let X = K.data.filter((te)=>{\n                    var ae;\n                    return ((ae = te.id) == null ? void 0 : ae.toString()) !== (C == null ? void 0 : C.toString());\n                });\n                return {\n                    ...K,\n                    data: X\n                };\n            })), {\n                previousQueries: j,\n                queryKey: S\n            };\n        },\n        onSettled: (C, R, { id: U, resource: F, dataProviderName: L, invalidates: M = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: D } = i(F);\n            x({\n                resource: D,\n                dataProviderName: ee(D, L, a),\n                invalidates: M\n            }), l({\n                type: \"REMOVE\",\n                payload: {\n                    id: U,\n                    resource: D\n                }\n            });\n        },\n        onSuccess: (C, { id: R, resource: U, successNotification: F, dataProviderName: L, meta: M, metaData: D }, I)=>{\n            let { resource: B, identifier: P } = i(U), S = f.singular(P), Q = ee(P, L, a), H = v({\n                resource: B,\n                meta: A(M, D)\n            });\n            c.removeQueries(I == null ? void 0 : I.queryKey.detail(R));\n            let j = typeof F == \"function\" ? F(C, R, P) : F;\n            g(j, {\n                key: `${R}-${P}-notification`,\n                description: m(\"notifications.success\", \"Success\"),\n                message: m(\"notifications.deleteSuccess\", {\n                    resource: m(`${P}.${P}`, S)\n                }, `Successfully deleted a ${S}`),\n                type: \"success\"\n            }), y == null || y({\n                channel: `resources/${B.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: [\n                        R\n                    ]\n                },\n                date: new Date,\n                meta: {\n                    ...H,\n                    dataProviderName: Q\n                }\n            });\n            let { fields: K, operation: X, variables: te, ...ae } = H || {};\n            d == null || d.mutate({\n                action: \"delete\",\n                resource: B.name,\n                meta: {\n                    id: R,\n                    dataProviderName: Q,\n                    ...ae\n                }\n            }), c.removeQueries(I == null ? void 0 : I.queryKey.detail(R));\n        },\n        onError: (C, { id: R, resource: U, errorNotification: F }, L)=>{\n            let { identifier: M } = i(U);\n            if (L) for (let D of L.previousQueries)c.setQueryData(D[0], D[1]);\n            if (C.message !== \"mutationCancelled\") {\n                s(C);\n                let D = f.singular(M), I = typeof F == \"function\" ? F(C, R, M) : F;\n                g(I, {\n                    key: `${R}-${M}-notification`,\n                    message: m(\"notifications.deleteError\", {\n                        resource: D,\n                        statusCode: C.statusCode\n                    }, `Error (status code: ${C.statusCode})`),\n                    description: C.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: h().data().mutation(\"delete\").get(E),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDelete\", E)\n        }\n    }), { elapsedTime: T } = pe({\n        isLoading: V.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...V,\n        overtime: {\n            elapsedTime: T\n        }\n    };\n}, \"useDelete\");\n\n\nvar bo = o(({ resource: e, values: t, dataProviderName: r, successNotification: s, errorNotification: n, meta: a, metaData: i, invalidates: c, mutationOptions: p, overtimeOptions: u } = {})=>{\n    let l = fe(), { resources: m, select: y } = Y(), d = $(), g = Ye(), x = Ce(), v = Ae(), { log: f } = Je(), h = ue(), { options: { textTransformers: E } } = ge(), { keys: V, preferLegacyKeys: T } = Z(), C = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: I = e, values: B = t, meta: P = a, metaData: S = i, dataProviderName: Q = r })=>{\n            if (!B) throw Co;\n            if (!I) throw Ro;\n            let { resource: H, identifier: j } = y(I), K = h({\n                resource: H,\n                meta: A(P, S)\n            }), X = l(ee(j, Q, m));\n            return X.createMany ? X.createMany({\n                resource: H.name,\n                variables: B,\n                meta: K,\n                metaData: K\n            }) : lt(B.map((te)=>X.create({\n                    resource: H.name,\n                    variables: te,\n                    meta: K,\n                    metaData: K\n                })));\n        },\n        onSuccess: (I, B, P)=>{\n            var oe;\n            let { resource: S = e, successNotification: Q = s, dataProviderName: H = r, invalidates: j = c ?? [\n                \"list\",\n                \"many\"\n            ], values: K = t, meta: X = a, metaData: te = i } = B;\n            if (!K) throw Co;\n            if (!S) throw Ro;\n            let { resource: ae, identifier: b } = y(S), w = E.plural(b), N = ee(b, H, m), G = h({\n                resource: ae,\n                meta: A(X, te)\n            }), z = typeof Q == \"function\" ? Q(I, K, b) : Q;\n            x(z, {\n                key: `createMany-${b}-notification`,\n                message: d(\"notifications.createSuccess\", {\n                    resource: d(`${b}.${b}`, b)\n                }, `Successfully created ${w}`),\n                description: d(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), v({\n                resource: b,\n                dataProviderName: N,\n                invalidates: j\n            });\n            let q = I == null ? void 0 : I.data.filter((J)=>(J == null ? void 0 : J.id) !== void 0).map((J)=>J.id);\n            g == null || g({\n                channel: `resources/${ae.name}`,\n                type: \"created\",\n                payload: {\n                    ids: q\n                },\n                date: new Date,\n                meta: {\n                    ...G,\n                    dataProviderName: N\n                }\n            });\n            let { fields: re, operation: O, variables: W, ..._ } = G || {};\n            f == null || f.mutate({\n                action: \"createMany\",\n                resource: ae.name,\n                data: K,\n                meta: {\n                    dataProviderName: N,\n                    ids: q,\n                    ..._\n                }\n            }), (oe = p == null ? void 0 : p.onSuccess) == null || oe.call(p, I, B, P);\n        },\n        onError: (I, B, P)=>{\n            var X;\n            let { resource: S = e, errorNotification: Q = n, values: H = t } = B;\n            if (!H) throw Co;\n            if (!S) throw Ro;\n            let { identifier: j } = y(S), K = typeof Q == \"function\" ? Q(I, H, j) : Q;\n            x(K, {\n                key: `createMany-${j}-notification`,\n                description: I.message,\n                message: d(\"notifications.createError\", {\n                    resource: d(`${j}.${j}`, j),\n                    statusCode: I.statusCode\n                }, `There was an error creating ${j} (status code: ${I.statusCode}`),\n                type: \"error\"\n            }), (X = p == null ? void 0 : p.onError) == null || X.call(p, I, B, P);\n        },\n        mutationKey: V().data().mutation(\"createMany\").get(T),\n        ...p,\n        meta: {\n            ...p == null ? void 0 : p.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreateMany\", T)\n        }\n    }), { mutate: R, mutateAsync: U, ...F } = C, { elapsedTime: L } = pe({\n        isLoading: F.isLoading,\n        interval: u == null ? void 0 : u.interval,\n        onInterval: u == null ? void 0 : u.onInterval\n    });\n    return {\n        ...F,\n        mutate: o((I, B)=>R(I || {}, B), \"handleMutation\"),\n        mutateAsync: o((I, B)=>U(I || {}, B), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: L\n        }\n    };\n}, \"useCreateMany\"), Ro = new Error(\"[useCreateMany]: `resource` is not defined or not matched but is required\"), Co = new Error(\"[useCreateMany]: `values` is not provided but is required\");\n\n\nvar ni = o(({ ids: e, resource: t, values: r, dataProviderName: s, successNotification: n, errorNotification: a, meta: i, metaData: c, mutationMode: p, undoableTimeout: u, onCancel: l, optimisticUpdateMap: m, invalidates: y, mutationOptions: d, overtimeOptions: g } = {})=>{\n    let { resources: x, select: v } = Y(), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), h = fe(), E = $(), { mutationMode: V, undoableTimeout: T } = _e(), C = ie(), { mutate: R } = Re({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), { notificationDispatch: U } = ut(), F = Ye(), L = Ce(), M = Ae(), { log: D } = Je(), I = ue(), { options: { textTransformers: B } } = ge(), { keys: P, preferLegacyKeys: S } = Z(), Q = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ ids: b = e, values: w = r, resource: N = t, onCancel: G = l, mutationMode: z = p, undoableTimeout: q = u, meta: re = i, metaData: O = c, dataProviderName: W = s })=>{\n            if (!b) throw Yt;\n            if (!w) throw Sr;\n            if (!N) throw Zt;\n            let { resource: _, identifier: oe } = v(N), J = I({\n                resource: _,\n                meta: A(re, O)\n            }), ve = z ?? V, ce = q ?? T, Ve = h(ee(oe, W, x)), Ne = o(()=>Ve.updateMany ? Ve.updateMany({\n                    resource: _.name,\n                    ids: b,\n                    variables: w,\n                    meta: J,\n                    metaData: J\n                }) : lt(b.map((ye)=>Ve.update({\n                        resource: _.name,\n                        id: ye,\n                        variables: w,\n                        meta: J,\n                        metaData: J\n                    }))), \"mutationFn\");\n            return ve !== \"undoable\" ? Ne() : new Promise((ye, de)=>{\n                let De = o(()=>{\n                    Ne().then((Ke)=>ye(Ke)).catch((Ke)=>de(Ke));\n                }, \"doMutation\"), rt = o(()=>{\n                    de({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                G && G(rt), U({\n                    type: \"ADD\",\n                    payload: {\n                        id: b,\n                        resource: oe,\n                        cancelMutation: rt,\n                        doMutation: De,\n                        seconds: ce,\n                        isSilent: !!G\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: b = t, ids: w = e, values: N = r, mutationMode: G = p, dataProviderName: z = s, meta: q = i, metaData: re = c, optimisticUpdateMap: O = m ?? {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            if (!w) throw Yt;\n            if (!N) throw Sr;\n            if (!b) throw Zt;\n            let { identifier: W } = v(b), { gqlMutation: _, gqlQuery: oe, ...J } = A(q, re) ?? {}, ve = dt(S)(W, ee(W, z, x), J), ce = P().data(ee(W, z, x)).resource(W), Ve = G ?? V;\n            await f.cancelQueries(ce.get(S), void 0, {\n                silent: !0\n            });\n            let Ne = f.getQueriesData(ce.get(S));\n            if (Ve !== \"pessimistic\" && (O.list && f.setQueriesData(ce.action(\"list\").params(J ?? {}).get(S), (ne)=>{\n                if (typeof O.list == \"function\") return O.list(ne, N, w);\n                if (!ne) return null;\n                let ye = ne.data.map((de)=>de.id !== void 0 && w.filter((De)=>De !== void 0).map(String).includes(de.id.toString()) ? {\n                        ...de,\n                        ...N\n                    } : de);\n                return {\n                    ...ne,\n                    data: ye\n                };\n            }), O.many && f.setQueriesData(ce.action(\"many\").get(S), (ne)=>{\n                if (typeof O.many == \"function\") return O.many(ne, N, w);\n                if (!ne) return null;\n                let ye = ne.data.map((de)=>de.id !== void 0 && w.filter((De)=>De !== void 0).map(String).includes(de.id.toString()) ? {\n                        ...de,\n                        ...N\n                    } : de);\n                return {\n                    ...ne,\n                    data: ye\n                };\n            }), O.detail)) for (let ne of w)f.setQueriesData(ce.action(\"one\").id(ne).params(J ?? {}).get(S), (ye)=>{\n                if (typeof O.detail == \"function\") return O.detail(ye, N, ne);\n                if (!ye) return null;\n                let de = {\n                    ...ye.data,\n                    ...N\n                };\n                return {\n                    ...ye,\n                    data: de\n                };\n            });\n            return {\n                previousQueries: Ne,\n                queryKey: ve\n            };\n        },\n        onSettled: (b, w, N, G)=>{\n            var _;\n            let { ids: z = e, resource: q = t, dataProviderName: re = s, invalidates: O = y } = N;\n            if (!z) throw Yt;\n            if (!q) throw Zt;\n            let { identifier: W } = v(q);\n            M({\n                resource: W,\n                invalidates: O ?? [\n                    \"list\",\n                    \"many\"\n                ],\n                dataProviderName: ee(W, re, x)\n            }), z.forEach((oe)=>M({\n                    resource: W,\n                    invalidates: O ?? [\n                        \"detail\"\n                    ],\n                    dataProviderName: ee(W, re, x),\n                    id: oe\n                })), U({\n                type: \"REMOVE\",\n                payload: {\n                    id: z,\n                    resource: W\n                }\n            }), (_ = d == null ? void 0 : d.onSettled) == null || _.call(d, b, w, N, G);\n        },\n        onSuccess: (b, w, N)=>{\n            var Ke;\n            let { ids: G = e, resource: z = t, values: q = r, meta: re = i, metaData: O = c, dataProviderName: W = s, successNotification: _ = n } = w;\n            if (!G) throw Yt;\n            if (!q) throw Sr;\n            if (!z) throw Zt;\n            let { resource: oe, identifier: J } = v(z), ve = B.singular(J), ce = ee(J, W, x), Ve = I({\n                resource: oe,\n                meta: A(re, O)\n            }), Ne = typeof _ == \"function\" ? _(b, {\n                ids: G,\n                values: q\n            }, J) : _;\n            L(Ne, {\n                key: `${G}-${J}-notification`,\n                description: E(\"notifications.success\", \"Successful\"),\n                message: E(\"notifications.editSuccess\", {\n                    resource: E(`${J}.${J}`, J)\n                }, `Successfully updated ${ve}`),\n                type: \"success\"\n            }), F == null || F({\n                channel: `resources/${oe.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: G.map(String)\n                },\n                date: new Date,\n                meta: {\n                    ...Ve,\n                    dataProviderName: ce\n                }\n            });\n            let ne = [];\n            N && G.forEach((Ct)=>{\n                let Ge = f.getQueryData(N.queryKey.detail(Ct));\n                ne.push(Object.keys(q || {}).reduce((Tt, xt)=>{\n                    var bt;\n                    return Tt[xt] = (bt = Ge == null ? void 0 : Ge.data) == null ? void 0 : bt[xt], Tt;\n                }, {}));\n            });\n            let { fields: ye, operation: de, variables: De, ...rt } = Ve || {};\n            D == null || D.mutate({\n                action: \"updateMany\",\n                resource: oe.name,\n                data: q,\n                previousData: ne,\n                meta: {\n                    ids: G,\n                    dataProviderName: ce,\n                    ...rt\n                }\n            }), (Ke = d == null ? void 0 : d.onSuccess) == null || Ke.call(d, b, w, N);\n        },\n        onError: (b, w, N)=>{\n            var W;\n            let { ids: G = e, resource: z = t, errorNotification: q = a, values: re = r } = w;\n            if (!G) throw Yt;\n            if (!re) throw Sr;\n            if (!z) throw Zt;\n            let { identifier: O } = v(z);\n            if (N) for (let _ of N.previousQueries)f.setQueryData(_[0], _[1]);\n            if (b.message !== \"mutationCancelled\") {\n                R == null || R(b);\n                let _ = B.singular(O), oe = typeof q == \"function\" ? q(b, {\n                    ids: G,\n                    values: re\n                }, O) : q;\n                L(oe, {\n                    key: `${G}-${O}-updateMany-error-notification`,\n                    message: E(\"notifications.editError\", {\n                        resource: _,\n                        statusCode: b.statusCode\n                    }, `Error when updating ${_} (status code: ${b.statusCode})`),\n                    description: b.message,\n                    type: \"error\"\n                });\n            }\n            (W = d == null ? void 0 : d.onError) == null || W.call(d, b, w, N);\n        },\n        mutationKey: P().data().mutation(\"updateMany\").get(S),\n        ...d,\n        meta: {\n            ...d == null ? void 0 : d.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdateMany\", S)\n        }\n    }), { mutate: H, mutateAsync: j, ...K } = Q, { elapsedTime: X } = pe({\n        isLoading: K.isLoading,\n        interval: g == null ? void 0 : g.interval,\n        onInterval: g == null ? void 0 : g.onInterval\n    });\n    return {\n        ...K,\n        mutate: o((b, w)=>H(b || {}, w), \"handleMutation\"),\n        mutateAsync: o((b, w)=>j(b || {}, w), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: X\n        }\n    };\n}, \"useUpdateMany\"), Zt = new Error(\"[useUpdateMany]: `resource` is not defined or not matched but is required\"), Yt = new Error(\"[useUpdateMany]: `id` is not defined but is required in edit and clone actions\"), Sr = new Error(\"[useUpdateMany]: `values` is not provided but is required\");\n\n\nvar ci = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), { mutationMode: n, undoableTimeout: a } = _e(), i = fe(), { notificationDispatch: c } = ut(), p = $(), u = Ye(), l = Ce(), m = Ae(), { log: y } = Je(), { resources: d, select: g } = Y(), x = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), v = ue(), { options: { textTransformers: f } } = ge(), { keys: h, preferLegacyKeys: E } = Z(), V = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: C, ids: R, mutationMode: U, undoableTimeout: F, onCancel: L, meta: M, metaData: D, dataProviderName: I, values: B })=>{\n            let { resource: P, identifier: S } = g(C), Q = v({\n                resource: P,\n                meta: A(M, D)\n            }), H = U ?? n, j = F ?? a, K = i(ee(S, I, d)), X = o(()=>K.deleteMany ? K.deleteMany({\n                    resource: P.name,\n                    ids: R,\n                    meta: Q,\n                    metaData: Q,\n                    variables: B\n                }) : lt(R.map((ae)=>K.deleteOne({\n                        resource: P.name,\n                        id: ae,\n                        meta: Q,\n                        metaData: Q,\n                        variables: B\n                    }))), \"mutationFn\");\n            return H !== \"undoable\" ? X() : new Promise((ae, b)=>{\n                let w = o(()=>{\n                    X().then((G)=>ae(G)).catch((G)=>b(G));\n                }, \"doMutation\"), N = o(()=>{\n                    b({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                L && L(N), c({\n                    type: \"ADD\",\n                    payload: {\n                        id: R,\n                        resource: S,\n                        cancelMutation: N,\n                        doMutation: w,\n                        seconds: j,\n                        isSilent: !!L\n                    }\n                });\n            });\n        },\n        onMutate: async ({ ids: C, resource: R, mutationMode: U, dataProviderName: F, meta: L, metaData: M })=>{\n            let { identifier: D } = g(R), { gqlMutation: I, gqlQuery: B, ...P } = A(L, M) ?? {}, S = dt(E)(D, ee(D, F, d), P), Q = h().data(ee(D, F, d)).resource(D), H = U ?? n;\n            await x.cancelQueries(Q.get(E), void 0, {\n                silent: !0\n            });\n            let j = x.getQueriesData(Q.get(E));\n            if (H !== \"pessimistic\") {\n                x.setQueriesData(Q.action(\"list\").params(P ?? {}).get(E), (K)=>K ? {\n                        data: K.data.filter((te)=>te.id && !C.map(String).includes(te.id.toString())),\n                        total: K.total - 1\n                    } : null), x.setQueriesData(Q.action(\"many\").get(E), (K)=>{\n                    if (!K) return null;\n                    let X = K.data.filter((te)=>te.id ? !C.map(String).includes(te.id.toString()) : !1);\n                    return {\n                        ...K,\n                        data: X\n                    };\n                });\n                for (let K of C)x.setQueriesData(Q.action(\"one\").id(K).params(P).get(E), (X)=>!X || X.data.id === K ? null : {\n                        ...X\n                    });\n            }\n            return {\n                previousQueries: j,\n                queryKey: S\n            };\n        },\n        onSettled: (C, R, { resource: U, ids: F, dataProviderName: L, invalidates: M = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: D } = g(U);\n            m({\n                resource: D,\n                dataProviderName: ee(D, L, d),\n                invalidates: M\n            }), c({\n                type: \"REMOVE\",\n                payload: {\n                    id: F,\n                    resource: D\n                }\n            });\n        },\n        onSuccess: (C, { ids: R, resource: U, meta: F, metaData: L, dataProviderName: M, successNotification: D }, I)=>{\n            let { resource: B, identifier: P } = g(U), S = ee(P, M, d), Q = v({\n                resource: B,\n                meta: A(F, L)\n            });\n            R.forEach((ae)=>x.removeQueries(I == null ? void 0 : I.queryKey.detail(ae)));\n            let H = typeof D == \"function\" ? D(C, R, P) : D;\n            l(H, {\n                key: `${R}-${P}-notification`,\n                description: p(\"notifications.success\", \"Success\"),\n                message: p(\"notifications.deleteSuccess\", {\n                    resource: p(`${P}.${P}`, P)\n                }, `Successfully deleted ${P}`),\n                type: \"success\"\n            }), u == null || u({\n                channel: `resources/${B.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: R\n                },\n                date: new Date,\n                meta: {\n                    ...Q,\n                    dataProviderName: S\n                }\n            });\n            let { fields: j, operation: K, variables: X, ...te } = Q || {};\n            y == null || y.mutate({\n                action: \"deleteMany\",\n                resource: B.name,\n                meta: {\n                    ids: R,\n                    dataProviderName: S,\n                    ...te\n                }\n            }), R.forEach((ae)=>x.removeQueries(I == null ? void 0 : I.queryKey.detail(ae)));\n        },\n        onError: (C, { ids: R, resource: U, errorNotification: F }, L)=>{\n            let { identifier: M } = g(U);\n            if (L) for (let D of L.previousQueries)x.setQueryData(D[0], D[1]);\n            if (C.message !== \"mutationCancelled\") {\n                s(C);\n                let D = f.singular(M), I = typeof F == \"function\" ? F(C, R, M) : F;\n                l(I, {\n                    key: `${R}-${M}-notification`,\n                    message: p(\"notifications.deleteError\", {\n                        resource: D,\n                        statusCode: C.statusCode\n                    }, `Error (status code: ${C.statusCode})`),\n                    description: C.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: h().data().mutation(\"deleteMany\").get(E),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDeleteMany\", E)\n        }\n    }), { elapsedTime: T } = pe({\n        isLoading: V.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...V,\n        overtime: {\n            elapsedTime: T\n        }\n    };\n}, \"useDeleteMany\");\nvar pi = o((e)=>{\n    var n;\n    let t = fe(), { resource: r } = Y(), { getApiUrl: s } = t(e ?? ((n = A(r == null ? void 0 : r.meta, r == null ? void 0 : r.options)) == null ? void 0 : n.dataProviderName));\n    return s();\n}, \"useApiUrl\");\n\n\nvar mi = o(({ url: e, method: t, config: r, queryOptions: s, successNotification: n, errorNotification: a, meta: i, metaData: c, dataProviderName: p, overtimeOptions: u })=>{\n    let l = fe(), m = ie(), { mutate: y } = Re({\n        v3LegacyAuthProviderCompatible: !!(m != null && m.isLegacy)\n    }), d = $(), g = Ce(), x = ue(), { keys: v, preferLegacyKeys: f } = Z(), h = A(i, c), { custom: E } = l(p), V = x({\n        meta: h\n    });\n    if (E) {\n        let T = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n            queryKey: v().data(p).mutation(\"custom\").params({\n                method: t,\n                url: e,\n                ...r,\n                ...h || {}\n            }).get(f),\n            queryFn: (R)=>E({\n                    url: e,\n                    method: t,\n                    ...r,\n                    meta: {\n                        ...V,\n                        queryContext: je(R)\n                    },\n                    metaData: {\n                        ...V,\n                        queryContext: je(R)\n                    }\n                }),\n            ...s,\n            onSuccess: (R)=>{\n                var F;\n                (F = s == null ? void 0 : s.onSuccess) == null || F.call(s, R);\n                let U = typeof n == \"function\" ? n(R, {\n                    ...r,\n                    ...V\n                }) : n;\n                g(U);\n            },\n            onError: (R)=>{\n                var F;\n                y(R), (F = s == null ? void 0 : s.onError) == null || F.call(s, R);\n                let U = typeof a == \"function\" ? a(R, {\n                    ...r,\n                    ...V\n                }) : a;\n                g(U, {\n                    key: `${t}-notification`,\n                    message: d(\"notifications.error\", {\n                        statusCode: R.statusCode\n                    }, `Error (status code: ${R.statusCode})`),\n                    description: R.message,\n                    type: \"error\"\n                });\n            },\n            meta: {\n                ...s == null ? void 0 : s.meta,\n                ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustom\", f)\n            }\n        }), { elapsedTime: C } = pe({\n            isLoading: T.isFetching,\n            interval: u == null ? void 0 : u.interval,\n            onInterval: u == null ? void 0 : u.onInterval\n        });\n        return {\n            ...T,\n            overtime: {\n                elapsedTime: C\n            }\n        };\n    }\n    throw Error(\"Not implemented custom on data provider.\");\n}, \"useCustom\");\n\n\nvar gi = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = Ce(), a = fe(), i = $(), c = ue(), { keys: p, preferLegacyKeys: u } = Z(), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(({ url: y, method: d, values: g, meta: x, metaData: v, dataProviderName: f, config: h })=>{\n        let E = c({\n            meta: A(x, v)\n        }), { custom: V } = a(f);\n        if (V) return V({\n            url: y,\n            method: d,\n            payload: g,\n            meta: E,\n            metaData: E,\n            headers: {\n                ...h == null ? void 0 : h.headers\n            }\n        });\n        throw Error(\"Not implemented custom on data provider.\");\n    }, {\n        onSuccess: (y, { successNotification: d, config: g, meta: x, metaData: v })=>{\n            let f = typeof d == \"function\" ? d(y, {\n                ...g,\n                ...A(x, v) || {}\n            }) : d;\n            n(f);\n        },\n        onError: (y, { errorNotification: d, method: g, config: x, meta: v, metaData: f })=>{\n            s(y);\n            let h = typeof d == \"function\" ? d(y, {\n                ...x,\n                ...A(v, f) || {}\n            }) : d;\n            n(h, {\n                key: `${g}-notification`,\n                message: i(\"notifications.error\", {\n                    statusCode: y.statusCode\n                }, `Error (status code: ${y.statusCode})`),\n                description: y.message,\n                type: \"error\"\n            });\n        },\n        mutationKey: p().data().mutation(\"customMutation\").get(u),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustomMutation\", u)\n        }\n    }), { elapsedTime: m } = pe({\n        isLoading: l.isLoading,\n        interval: t == null ? void 0 : t.interval,\n        onInterval: t == null ? void 0 : t.onInterval\n    });\n    return {\n        ...l,\n        overtime: {\n            elapsedTime: m\n        }\n    };\n}, \"useCustomMutation\");\n\n\nvar Hs = {\n    default: {}\n}, Jt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(Hs), $s = o(({ children: e, dataProvider: t })=>{\n    let r = Hs;\n    return t && (!(\"default\" in t) && (\"getList\" in t || \"getOne\" in t) ? r = {\n        default: t\n    } : r = t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Jt.Provider, {\n        value: r\n    }, e);\n}, \"DataContextProvider\");\nvar fe = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Jt);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        if (r) {\n            let s = e == null ? void 0 : e[r];\n            if (!s) throw new Error(`\"${r}\" Data provider not found`);\n            if (s && !(e != null && e.default)) throw new Error(\"If you have multiple data providers, you must provide default data provider property\");\n            return e[r];\n        }\n        if (e.default) return e.default;\n        throw new Error('There is no \"default\" data provider. Please pass dataProviderName.');\n    }, [\n        e\n    ]);\n}, \"useDataProvider\");\n\n\nvar Ri = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: a, queryOptions: i, successNotification: c, errorNotification: p, meta: u, metaData: l, liveMode: m, onLiveEvent: y, liveParams: d, dataProviderName: g, overtimeOptions: x })=>{\n    let { resources: v, resource: f, identifier: h } = Y(e), E = fe(), V = $(), T = ie(), { mutate: C } = Re({\n        v3LegacyAuthProviderCompatible: !!(T != null && T.isLegacy)\n    }), R = Ce(), U = ue(), { keys: F, preferLegacyKeys: L } = Z(), M = ee(h, g, v), D = A(u, l), I = A(r, t == null ? void 0 : t.filters), B = A(a, t == null ? void 0 : t.sort), P = A(s, t == null ? void 0 : t.hasPagination), S = Ht({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: P\n    }), Q = S.mode === \"server\", H = {\n        meta: D,\n        metaData: D,\n        filters: I,\n        hasPagination: Q,\n        pagination: S,\n        sorters: B,\n        config: {\n            ...t,\n            sort: B\n        }\n    }, j = (i == null ? void 0 : i.enabled) === void 0 || (i == null ? void 0 : i.enabled) === !0, K = U({\n        resource: f,\n        meta: D\n    }), { getList: X } = E(M);\n    ht({\n        resource: h,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: K,\n            metaData: K,\n            pagination: S,\n            hasPagination: Q,\n            sort: B,\n            sorters: B,\n            filters: I,\n            subscriptionType: \"useList\",\n            ...d\n        },\n        channel: `resources/${f.name}`,\n        enabled: j,\n        liveMode: m,\n        onLiveEvent: y,\n        dataProviderName: M,\n        meta: {\n            ...K,\n            dataProviderName: g\n        }\n    });\n    let te = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__.useInfiniteQuery)({\n        queryKey: F().data(M).resource(h).action(\"infinite\").params({\n            ...D || {},\n            filters: I,\n            hasPagination: Q,\n            ...Q && {\n                pagination: S\n            },\n            ...a && {\n                sorters: a\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(L),\n        queryFn: (b)=>{\n            let w = {\n                ...S,\n                current: b.pageParam\n            }, N = {\n                ...K,\n                queryContext: je(b)\n            };\n            return X({\n                resource: f.name,\n                pagination: w,\n                hasPagination: Q,\n                filters: I,\n                sort: B,\n                sorters: B,\n                meta: N,\n                metaData: N\n            }).then(({ data: G, total: z, ...q })=>({\n                    data: G,\n                    total: z,\n                    pagination: w,\n                    ...q\n                }));\n        },\n        getNextPageParam: (b)=>Tr(b),\n        getPreviousPageParam: (b)=>xr(b),\n        ...i,\n        onSuccess: (b)=>{\n            var N;\n            (N = i == null ? void 0 : i.onSuccess) == null || N.call(i, b);\n            let w = typeof c == \"function\" ? c(b, H, h) : c;\n            R(w);\n        },\n        onError: (b)=>{\n            var N;\n            C(b), (N = i == null ? void 0 : i.onError) == null || N.call(i, b);\n            let w = typeof p == \"function\" ? p(b, H, h) : p;\n            R(w, {\n                key: `${h}-useInfiniteList-notification`,\n                message: V(\"notifications.error\", {\n                    statusCode: b.statusCode\n                }, `Error (status code: ${b.statusCode})`),\n                description: b.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...i == null ? void 0 : i.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useInfiniteList\", L, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: ae } = pe({\n        isLoading: te.isFetching,\n        interval: x == null ? void 0 : x.interval,\n        onInterval: x == null ? void 0 : x.onInterval\n    });\n    return {\n        ...te,\n        overtime: {\n            elapsedTime: ae\n        }\n    };\n}, \"useInfiniteList\");\n\n\nvar mt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Os = o(({ liveProvider: e, children: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(mt.Provider, {\n        value: {\n            liveProvider: e\n        }\n    }, t), \"LiveContextProvider\");\n\n\nvar Ae = o(()=>{\n    let { resources: e } = Y(), t = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: r, preferLegacyKeys: s } = Z();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ resource: a, dataProviderName: i, invalidates: c, id: p, invalidationFilters: u = {\n        type: \"all\",\n        refetchType: \"active\"\n    }, invalidationOptions: l = {\n        cancelRefetch: !1\n    } })=>{\n        if (c === !1) return;\n        let m = ee(a, i, e), y = r().data(m).resource(a ?? \"\");\n        await Promise.all(c.map((d)=>{\n            switch(d){\n                case \"all\":\n                    return t.invalidateQueries(r().data(m).get(s), u, l);\n                case \"list\":\n                    return t.invalidateQueries(y.action(\"list\").get(s), u, l);\n                case \"many\":\n                    return t.invalidateQueries(y.action(\"many\").get(s), u, l);\n                case \"resourceAll\":\n                    return t.invalidateQueries(y.get(s), u, l);\n                case \"detail\":\n                    return t.invalidateQueries(y.action(\"one\").id(p || \"\").get(s), u, l);\n                default:\n                    return;\n            }\n        }));\n    }, []);\n}, \"useInvalidate\");\n\n\n\n\n\nvar _s = o((e)=>{\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e);\n    return (0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(t.current, e) || (t.current = e), t.current;\n}, \"useMemoized\");\nvar Ar = o((e, t)=>{\n    let r = _s(t);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(e, r);\n}, \"useDeepMemo\");\nvar Rt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    resources: []\n}), Xs = o(({ resources: e, children: t })=>{\n    let r = Ar(()=>Pr(e ?? []), [\n        e\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Rt.Provider, {\n        value: {\n            resources: r\n        }\n    }, t);\n}, \"ResourceContextProvider\");\n\nvar Ys = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(\"new\"), Js = Ys.Provider, se = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Ys), \"useRouterType\");\n\n\nvar qs = {}, ft = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(qs), en = o(({ children: e, router: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ft.Provider, {\n        value: t ?? qs\n    }, e), \"RouterContextProvider\");\n\nvar vo = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.parse) ?? (()=>()=>({})), [\n        e == null ? void 0 : e.parse\n    ])();\n}, \"useParse\");\nvar Te = o(()=>{\n    let e = vo();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e(), [\n        e\n    ]);\n}, \"useParsed\");\nfunction Y(e) {\n    let { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt), r = se(), s = Te(), n = {\n        resourceName: e && typeof e != \"string\" ? e.resourceName : e,\n        resourceNameOrRouteName: e && typeof e != \"string\" ? e.resourceNameOrRouteName : e,\n        recordItemId: e && typeof e != \"string\" ? e.recordItemId : void 0\n    }, a = o((m, y = !0)=>{\n        let g = Le(m, t, r === \"legacy\");\n        if (g) return {\n            resource: g,\n            identifier: g.identifier ?? g.name\n        };\n        if (y) {\n            let x = {\n                name: m,\n                identifier: m\n            }, v = x.identifier ?? x.name;\n            return {\n                resource: x,\n                identifier: v\n            };\n        }\n    }, \"select\"), i = tn(), { useParams: c } = le(), p = c();\n    if (r === \"legacy\") {\n        let m = n.resourceNameOrRouteName ? n.resourceNameOrRouteName : p.resource, y = m ? i(m) : void 0, d = (n == null ? void 0 : n.recordItemId) ?? p.id, g = p.action, x = (n == null ? void 0 : n.resourceName) ?? (y == null ? void 0 : y.name), v = (y == null ? void 0 : y.identifier) ?? (y == null ? void 0 : y.name);\n        return {\n            resources: t,\n            resource: y,\n            resourceName: x,\n            id: d,\n            action: g,\n            select: a,\n            identifier: v\n        };\n    }\n    let u, l = typeof e == \"string\" ? e : n == null ? void 0 : n.resourceNameOrRouteName;\n    if (l) {\n        let m = Le(l, t);\n        m ? u = m : u = {\n            name: l\n        };\n    } else s != null && s.resource && (u = s.resource);\n    return {\n        resources: t,\n        resource: u,\n        resourceName: u == null ? void 0 : u.name,\n        id: s.id,\n        action: s.action,\n        select: a,\n        identifier: (u == null ? void 0 : u.identifier) ?? (u == null ? void 0 : u.name)\n    };\n}\no(Y, \"useResource\");\n\nvar tn = o(()=>{\n    let { resources: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        let s = Le(r, e, !0);\n        return s || {\n            name: r,\n            route: r\n        };\n    }, [\n        e\n    ]);\n}, \"useResourceWithRoute\");\nvar ht = o(({ resource: e, params: t, channel: r, types: s, enabled: n = !0, liveMode: a, onLiveEvent: i, dataProviderName: c, meta: p })=>{\n    var f;\n    let { resource: u, identifier: l } = Y(e), { liveProvider: m } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), { liveMode: y, onLiveEvent: d } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), g = a ?? y, x = Ae(), v = c ?? (p == null ? void 0 : p.dataProviderName) ?? ((f = u == null ? void 0 : u.meta) == null ? void 0 : f.dataProviderName);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let h, E = o((V)=>{\n            g === \"auto\" && x({\n                resource: l,\n                dataProviderName: v,\n                invalidates: [\n                    \"resourceAll\"\n                ],\n                invalidationFilters: {\n                    type: \"active\",\n                    refetchType: \"active\"\n                },\n                invalidationOptions: {\n                    cancelRefetch: !1\n                }\n            }), i == null || i(V), d == null || d(V);\n        }, \"callback\");\n        return g && g !== \"off\" && n && (h = m == null ? void 0 : m.subscribe({\n            channel: r,\n            params: {\n                resource: u == null ? void 0 : u.name,\n                ...t\n            },\n            types: s,\n            callback: E,\n            dataProviderName: v,\n            meta: {\n                ...p,\n                dataProviderName: v\n            }\n        })), ()=>{\n            h && (m == null || m.unsubscribe(h));\n        };\n    }, [\n        n\n    ]);\n}, \"useResourceSubscription\");\n\nvar on = o((e)=>{\n    let { liveMode: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return e ?? t;\n}, \"useLiveMode\");\n\nvar iP = o(({ params: e, channel: t, types: r = [\n    \"*\"\n], enabled: s = !0, onLiveEvent: n, dataProviderName: a = \"default\", meta: i })=>{\n    let { liveProvider: c } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let p;\n        return s && (p = c == null ? void 0 : c.subscribe({\n            channel: t,\n            params: e,\n            types: r,\n            callback: n,\n            dataProviderName: a,\n            meta: {\n                ...i,\n                dataProviderName: a\n            }\n        })), ()=>{\n            p && (c == null || c.unsubscribe(p));\n        };\n    }, [\n        s\n    ]);\n}, \"useSubscription\");\n\nvar Ye = o(()=>{\n    let { liveProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt);\n    return e == null ? void 0 : e.publish;\n}, \"usePublish\");\n\n\n\nvar Uo = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    notifications: [],\n    notificationDispatch: ()=>!1\n}), Wi = [], Hi = o((e, t)=>{\n    switch(t.type){\n        case \"ADD\":\n            return [\n                ...e.filter((s)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(s.id, t.payload.id) && s.resource === t.payload.resource)),\n                {\n                    ...t.payload,\n                    isRunning: !0\n                }\n            ];\n        case \"REMOVE\":\n            return e.filter((r)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource));\n        case \"DECREASE_NOTIFICATION_SECOND\":\n            return e.map((r)=>(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource ? {\n                    ...r,\n                    seconds: t.payload.seconds - 1e3\n                } : r);\n        default:\n            return e;\n    }\n}, \"undoableQueueReducer\"), nn = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(Hi, Wi), s = {\n        notifications: t,\n        notificationDispatch: r\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Uo.Provider, {\n        value: s\n    }, e,  false ? 0 : null);\n}, \"UndoableQueueContextProvider\");\nvar ut = o(()=>{\n    let { notifications: e, notificationDispatch: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Uo);\n    return {\n        notifications: e,\n        notificationDispatch: t\n    };\n}, \"useCancelNotification\");\n\n\nvar qt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), un = o(({ open: e, close: t, children: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qt.Provider, {\n        value: {\n            open: e,\n            close: t\n        }\n    }, r), \"NotificationContextProvider\");\nvar $e = o(()=>{\n    let { open: e, close: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(qt);\n    return {\n        open: e,\n        close: t\n    };\n}, \"useNotification\");\n\nvar Ce = o(()=>{\n    let { open: e } = $e();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r, s)=>{\n        r !== !1 && (r ? e == null || e(r) : s && (e == null || e(s)));\n    }, []);\n}, \"useHandleNotification\");\n\n\nvar Xe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), pn = o(({ children: e, i18nProvider: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xe.Provider, {\n        value: {\n            i18nProvider: t\n        }\n    }, e), \"I18nContextProvider\");\nvar Eo = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((t)=>e == null ? void 0 : e.changeLocale(t), []);\n}, \"useSetLocale\");\n\nvar $ = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        function r(s, n, a) {\n            return (e == null ? void 0 : e.translate(s, n, a)) ?? a ?? (typeof n == \"string\" && typeof a > \"u\" ? n : s);\n        }\n        return o(r, \"translate\"), r;\n    }, [\n        e\n    ]);\n}, \"useTranslate\");\n\nvar Lo = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>e == null ? void 0 : e.getLocale(), []);\n}, \"useGetLocale\");\nvar JP = o(()=>{\n    let e = $(), t = Eo(), r = Lo();\n    return {\n        translate: e,\n        changeLocale: t,\n        getLocale: r\n    };\n}, \"useTranslation\");\n\n\n\nvar dh = o(({ resourceName: e, resource: t, sorter: r, sorters: s, filters: n, maxItemCount: a, pageSize: i = 20, mapData: c = o((x)=>x, \"mapData\"), exportOptions: p, unparseConfig: u, meta: l, metaData: m, dataProviderName: y, onError: d, download: g } = {})=>{\n    let [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), f = fe(), h = ue(), { resource: E, resources: V, identifier: T } = Y(A(t, e)), R = `${Pt()(T, \"plural\")}-${new Date().toLocaleString()}`, { getList: U } = f(ee(T, y, V)), F = h({\n        resource: E,\n        meta: A(l, m)\n    });\n    return {\n        isLoading: x,\n        triggerExport: o(async ()=>{\n            v(!0);\n            let M = [], D = 1, I = !0;\n            for(; I;)try {\n                let { data: Q, total: H } = await U({\n                    resource: (E == null ? void 0 : E.name) ?? \"\",\n                    filters: n,\n                    sort: A(s, r),\n                    sorters: A(s, r),\n                    pagination: {\n                        current: D,\n                        pageSize: i,\n                        mode: \"server\"\n                    },\n                    meta: F,\n                    metaData: F\n                });\n                D++, M.push(...Q), a && M.length >= a && (M = M.slice(0, a), I = !1), H === M.length && (I = !1);\n            } catch (Q) {\n                v(!1), I = !1, d == null || d(Q);\n                return;\n            }\n            let B = typeof u < \"u\" && u !== null;\n            warn_once__WEBPACK_IMPORTED_MODULE_1__(B && typeof p < \"u\" && p !== null, `[useExport]: resource: \"${T}\" \n\nBoth \\`unparseConfig\\` and \\`exportOptions\\` are set, \\`unparseConfig\\` will take precedence`);\n            let P = {\n                filename: R,\n                useKeysAsHeaders: !0,\n                useBom: !0,\n                title: \"My Generated Report\",\n                quoteStrings: '\"',\n                ...p\n            };\n            warn_once__WEBPACK_IMPORTED_MODULE_1__((p == null ? void 0 : p.decimalSeparator) !== void 0, `[useExport]: resource: \"${T}\" \n\nUse of \\`decimalSeparator\\` no longer supported, please use \\`mapData\\` instead.\n\nSee https://refine.dev/docs/api-reference/core/hooks/import-export/useExport/`), B ? u = {\n                quotes: !0,\n                ...u\n            } : u = {\n                columns: P.useKeysAsHeaders ? void 0 : P.headers,\n                delimiter: P.fieldSeparator,\n                header: P.showLabels || P.useKeysAsHeaders,\n                quoteChar: P.quoteStrings,\n                quotes: !0\n            };\n            let S = papaparse__WEBPACK_IMPORTED_MODULE_15__.unparse(M.map(c), u);\n            if (P.showTitle && (S = `${P.title}\\r\n\n${S}`),  false && (0)) {\n                let Q = P.useTextFile ? \".txt\" : \".csv\", H = `text/${P.useTextFile ? \"plain\" : \"csv\"};charset=utf8;`, j = `${(P.filename ?? \"download\").replace(/ /g, \"_\")}${Q}`;\n                ro(j, `${P != null && P.useBom ? \"\\uFEFF\" : \"\"}${S}`, H);\n            }\n            return v(!1), S;\n        }, \"triggerExport\")\n    };\n}, \"useExport\");\n\n\nvar xh = o((e = {})=>{\n    var K, X, te, ae, b;\n    let t = ue(), r = Ae(), { redirect: s } = At(), { mutationMode: n } = _e(), { setWarnWhen: a } = vt(), i = mn(), c = A(e.meta, e.metaData), p = e.mutationMode ?? n, { id: u, setId: l, resource: m, identifier: y, formAction: d } = qe({\n        resource: e.resource,\n        id: e.id,\n        action: e.action\n    }), [g, x] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), v = d === \"edit\", f = d === \"clone\", h = d === \"create\", E = t({\n        resource: m,\n        meta: c\n    }), V = (v || f) && !!e.resource, T = typeof e.id < \"u\", C = ((K = e.queryOptions) == null ? void 0 : K.enabled) === !1;\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(V && !T && !C, uu(d, y, u));\n    let R = qr({\n        redirectFromProps: e.redirect,\n        action: d,\n        redirectOptions: s\n    }), U = o((w = v ? \"list\" : \"edit\", N = u, G = {})=>{\n        i({\n            redirect: w,\n            resource: m,\n            id: N,\n            meta: {\n                ...c,\n                ...G\n            }\n        });\n    }, \"redirect\"), F = Ot({\n        resource: y,\n        id: u,\n        queryOptions: {\n            enabled: !h && u !== void 0,\n            ...e.queryOptions\n        },\n        liveMode: e.liveMode,\n        onLiveEvent: e.onLiveEvent,\n        liveParams: e.liveParams,\n        meta: {\n            ...E,\n            ...e.queryMeta\n        },\n        dataProviderName: e.dataProviderName\n    }), L = Xt({\n        mutationOptions: e.createMutationOptions\n    }), M = To({\n        mutationOptions: e.updateMutationOptions\n    }), D = v ? M : L, B = D.isLoading || F.isFetching, { elapsedTime: P } = pe({\n        isLoading: B,\n        interval: (X = e.overtimeOptions) == null ? void 0 : X.interval,\n        onInterval: (te = e.overtimeOptions) == null ? void 0 : te.onInterval\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>()=>{\n            var w;\n            (w = e.autoSave) != null && w.invalidateOnUnmount && g && y && typeof u < \"u\" && r({\n                id: u,\n                invalidates: e.invalidates || [\n                    \"list\",\n                    \"many\",\n                    \"detail\"\n                ],\n                dataProviderName: e.dataProviderName,\n                resource: y\n            });\n        }, [\n        (ae = e.autoSave) == null ? void 0 : ae.invalidateOnUnmount,\n        g\n    ]);\n    let S = o(async (w, { isAutosave: N = !1 } = {})=>{\n        let G = p === \"pessimistic\";\n        a(!1);\n        let z = o((re)=>U(R, re), \"onSuccessRedirect\");\n        return new Promise((re, O)=>{\n            if (!m) return O(su);\n            if (f && !u) return O(nu);\n            if (!w) return O(au);\n            if (N && !v) return O(iu);\n            !G && !N && (br(()=>z()), re());\n            let W = {\n                values: w,\n                resource: y ?? m.name,\n                meta: {\n                    ...E,\n                    ...e.mutationMeta\n                },\n                metaData: {\n                    ...E,\n                    ...e.mutationMeta\n                },\n                dataProviderName: e.dataProviderName,\n                invalidates: N ? [] : e.invalidates,\n                successNotification: N ? !1 : e.successNotification,\n                errorNotification: N ? !1 : e.errorNotification,\n                ...v ? {\n                    id: u ?? \"\",\n                    mutationMode: p,\n                    undoableTimeout: e.undoableTimeout,\n                    optimisticUpdateMap: e.optimisticUpdateMap\n                } : {}\n            }, { mutateAsync: _ } = v ? M : L;\n            _(W, {\n                onSuccess: e.onMutationSuccess ? (oe, J, ve)=>{\n                    var ce;\n                    (ce = e.onMutationSuccess) == null || ce.call(e, oe, w, ve, N);\n                } : void 0,\n                onError: e.onMutationError ? (oe, J, ve)=>{\n                    var ce;\n                    (ce = e.onMutationError) == null || ce.call(e, oe, w, ve, N);\n                } : void 0\n            }).then((oe)=>{\n                G && !N && br(()=>{\n                    var J;\n                    return z((J = oe == null ? void 0 : oe.data) == null ? void 0 : J.id);\n                }), N && x(!0), re(oe);\n            }).catch(O);\n        });\n    }, \"onFinish\"), Q = oo((w)=>S(w, {\n            isAutosave: !0\n        }), ((b = e.autoSave) == null ? void 0 : b.debounce) || 1e3, \"Cancelled by debounce\"), H = {\n        elapsedTime: P\n    }, j = {\n        status: M.status,\n        data: M.data,\n        error: M.error\n    };\n    return {\n        onFinish: S,\n        onFinishAutoSave: Q,\n        formLoading: B,\n        mutationResult: D,\n        mutation: D,\n        queryResult: F,\n        query: F,\n        autoSaveProps: j,\n        id: u,\n        setId: l,\n        redirect: U,\n        overtime: H\n    };\n}, \"useForm\"), su = new Error(\"[useForm]: `resource` is not defined or not matched but is required\"), nu = new Error(\"[useForm]: `id` is not defined but is required in edit and clone actions\"), au = new Error(\"[useForm]: `values` is not provided but is required\"), iu = new Error(\"[useForm]: `autoSave` is only allowed in edit action\"), uu = o((e, t, r)=>`[useForm]: action: \"${e}\", resource: \"${t}\", id: ${r}\n\nIf you don't use the \\`setId\\` method to set the \\`id\\`, you should pass the \\`id\\` prop to \\`useForm\\`. Otherwise, \\`useForm\\` will not be able to infer the \\`id\\` from the current URL with custom resource provided.\n\nSee https://refine.dev/docs/data/hooks/use-form/#id-`, \"idWarningMessage\");\n\nvar mn = o(()=>{\n    let { show: e, edit: t, list: r, create: s } = Pe();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ redirect: a, resource: i, id: c, meta: p = {} })=>{\n        if (a && i) return i.show && a === \"show\" && c ? e(i, c, void 0, p) : i.edit && a === \"edit\" && c ? t(i, c, void 0, p) : i.create && a === \"create\" ? s(i, void 0, p) : r(i, \"push\", p);\n    }, []);\n}, \"useRedirectionAfterSubmission\");\n\nvar Mo = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.back) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.back\n    ])();\n}, \"useBack\");\n\n\nvar Ut = o(()=>{\n    let e = se(), { resource: t, resources: r } = Y(), s = Te();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(({ resource: a, action: i, meta: c })=>{\n        var y;\n        let p = a || t;\n        if (!p) return;\n        let l = (y = Se(p, r, e === \"legacy\").find((d)=>d.action === i)) == null ? void 0 : y.route;\n        return l ? He(l, p == null ? void 0 : p.meta, s, c) : void 0;\n    }, [\n        r,\n        t,\n        s\n    ]);\n}, \"useGetToPath\");\nvar he = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft), { select: t } = Y(), r = Ut(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.go) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.go\n    ])();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        if (typeof i.to != \"object\") return n({\n            ...i,\n            to: i.to\n        });\n        let { resource: c } = t(i.to.resource);\n        gu(i.to, c);\n        let p = r({\n            resource: c,\n            action: i.to.action,\n            meta: {\n                id: i.to.id,\n                ...i.to.meta\n            }\n        });\n        return n({\n            ...i,\n            to: p\n        });\n    }, [\n        t,\n        n\n    ]);\n}, \"useGo\"), gu = o((e, t)=>{\n    if (!(e != null && e.action) || !(e != null && e.resource)) throw new Error('[useGo]: \"action\" or \"resource\" is required.');\n    if ([\n        \"edit\",\n        \"show\",\n        \"clone\"\n    ].includes(e == null ? void 0 : e.action) && !e.id) throw new Error(`[useGo]: [action: ${e.action}] requires an \"id\" for resource [resource: ${e.resource}]`);\n    if (!t[e.action]) throw new Error(`[useGo]: [action: ${e.action}] is not defined for [resource: ${e.resource}]`);\n}, \"handleResourceErrors\");\nvar Pe = o(()=>{\n    let { resources: e } = Y(), t = se(), { useHistory: r } = le(), s = r(), n = Te(), a = he(), i = Mo(), c = o((T, C = \"push\")=>{\n        t === \"legacy\" ? s[C](T) : a({\n            to: T,\n            type: C\n        });\n    }, \"handleUrl\"), p = o((T, C = {})=>{\n        var F;\n        if (t === \"legacy\") {\n            let L = typeof T == \"string\" ? Le(T, e, !0) ?? {\n                name: T,\n                route: T\n            } : T, M = Se(L, e, !0).find((D)=>D.action === \"create\");\n            return M ? He(M.route, L == null ? void 0 : L.meta, n, C) : \"\";\n        }\n        let R = typeof T == \"string\" ? Le(T, e) ?? {\n            name: T\n        } : T, U = (F = Se(R, e).find((L)=>L.action === \"create\")) == null ? void 0 : F.route;\n        return U ? a({\n            to: He(U, R == null ? void 0 : R.meta, n, C),\n            type: \"path\"\n        }) : \"\";\n    }, \"createUrl\"), u = o((T, C, R = {})=>{\n        var M;\n        let U = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let D = typeof T == \"string\" ? Le(T, e, !0) ?? {\n                name: T,\n                route: T\n            } : T, I = Se(D, e, !0).find((B)=>B.action === \"edit\");\n            return I ? He(I.route, D == null ? void 0 : D.meta, n, {\n                ...R,\n                id: U\n            }) : \"\";\n        }\n        let F = typeof T == \"string\" ? Le(T, e) ?? {\n            name: T\n        } : T, L = (M = Se(F, e).find((D)=>D.action === \"edit\")) == null ? void 0 : M.route;\n        return L ? a({\n            to: He(L, F == null ? void 0 : F.meta, n, {\n                ...R,\n                id: U\n            }),\n            type: \"path\"\n        }) : \"\";\n    }, \"editUrl\"), l = o((T, C, R = {})=>{\n        var M;\n        let U = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let D = typeof T == \"string\" ? Le(T, e, !0) ?? {\n                name: T,\n                route: T\n            } : T, I = Se(D, e, !0).find((B)=>B.action === \"clone\");\n            return I ? He(I.route, D == null ? void 0 : D.meta, n, {\n                ...R,\n                id: U\n            }) : \"\";\n        }\n        let F = typeof T == \"string\" ? Le(T, e) ?? {\n            name: T\n        } : T, L = (M = Se(F, e).find((D)=>D.action === \"clone\")) == null ? void 0 : M.route;\n        return L ? a({\n            to: He(L, F == null ? void 0 : F.meta, n, {\n                ...R,\n                id: U\n            }),\n            type: \"path\"\n        }) : \"\";\n    }, \"cloneUrl\"), m = o((T, C, R = {})=>{\n        var M;\n        let U = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let D = typeof T == \"string\" ? Le(T, e, !0) ?? {\n                name: T,\n                route: T\n            } : T, I = Se(D, e, !0).find((B)=>B.action === \"show\");\n            return I ? He(I.route, D == null ? void 0 : D.meta, n, {\n                ...R,\n                id: U\n            }) : \"\";\n        }\n        let F = typeof T == \"string\" ? Le(T, e) ?? {\n            name: T\n        } : T, L = (M = Se(F, e).find((D)=>D.action === \"show\")) == null ? void 0 : M.route;\n        return L ? a({\n            to: He(L, F == null ? void 0 : F.meta, n, {\n                ...R,\n                id: U\n            }),\n            type: \"path\"\n        }) : \"\";\n    }, \"showUrl\"), y = o((T, C = {})=>{\n        var F;\n        if (t === \"legacy\") {\n            let L = typeof T == \"string\" ? Le(T, e, !0) ?? {\n                name: T,\n                route: T\n            } : T, M = Se(L, e, !0).find((D)=>D.action === \"list\");\n            return M ? He(M.route, L == null ? void 0 : L.meta, n, C) : \"\";\n        }\n        let R = typeof T == \"string\" ? Le(T, e) ?? {\n            name: T\n        } : T, U = (F = Se(R, e).find((L)=>L.action === \"list\")) == null ? void 0 : F.route;\n        return U ? a({\n            to: He(U, R == null ? void 0 : R.meta, n, C),\n            type: \"path\"\n        }) : \"\";\n    }, \"listUrl\");\n    return {\n        create: o((T, C = \"push\", R = {})=>{\n            c(p(T, R), C);\n        }, \"create\"),\n        createUrl: p,\n        edit: o((T, C, R = \"push\", U = {})=>{\n            c(u(T, C, U), R);\n        }, \"edit\"),\n        editUrl: u,\n        clone: o((T, C, R = \"push\", U = {})=>{\n            c(l(T, C, U), R);\n        }, \"clone\"),\n        cloneUrl: l,\n        show: o((T, C, R = \"push\", U = {})=>{\n            c(m(T, C, U), R);\n        }, \"show\"),\n        showUrl: m,\n        list: o((T, C = \"push\", R = {})=>{\n            c(y(T, R), C);\n        }, \"list\"),\n        listUrl: y,\n        push: o((T, ...C)=>{\n            t === \"legacy\" ? s.push(T, ...C) : a({\n                to: T,\n                type: \"push\"\n            });\n        }, \"push\"),\n        replace: o((T, ...C)=>{\n            t === \"legacy\" ? s.replace(T, ...C) : a({\n                to: T,\n                type: \"replace\"\n            });\n        }, \"replace\"),\n        goBack: o(()=>{\n            t === \"legacy\" ? s.goBack() : i();\n        }, \"goBack\")\n    };\n}, \"useNavigation\");\n\nvar rR = o(({ resource: e, id: t, meta: r, metaData: s, queryOptions: n, overtimeOptions: a, ...i } = {})=>{\n    let { resource: c, identifier: p, id: u, setId: l } = qe({\n        id: t,\n        resource: e\n    }), y = ue()({\n        resource: c,\n        meta: A(r, s)\n    });\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(!!e && !u, xu(p, u));\n    let d = Ot({\n        resource: p,\n        id: u ?? \"\",\n        queryOptions: {\n            enabled: u !== void 0,\n            ...n\n        },\n        meta: y,\n        metaData: y,\n        ...i\n    }), { elapsedTime: g } = pe({\n        isLoading: d.isFetching,\n        interval: a == null ? void 0 : a.interval,\n        onInterval: a == null ? void 0 : a.onInterval\n    });\n    return {\n        queryResult: d,\n        query: d,\n        showId: u,\n        setShowId: l,\n        overtime: {\n            elapsedTime: g\n        }\n    };\n}, \"useShow\"), xu = o((e, t)=>`[useShow]: resource: \"${e}\", id: ${t} \n\nIf you don't use the \\`setShowId\\` method to set the \\`showId\\`, you should pass the \\`id\\` prop to \\`useShow\\`. Otherwise, \\`useShow\\` will not be able to infer the \\`id\\` from the current URL. \n\nSee https://refine.dev/docs/data/hooks/use-show/#resource`, \"idWarningMessage\");\n\n\n\nvar pR = o(({ resourceName: e, resource: t, mapData: r = o((l)=>l, \"mapData\"), paparseOptions: s, batchSize: n = Number.MAX_SAFE_INTEGER, onFinish: a, meta: i, metaData: c, onProgress: p, dataProviderName: u } = {})=>{\n    let [l, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [g, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), { resource: v, identifier: f } = Y(t ?? e), h = ue(), E = bo(), V = Xt(), T = h({\n        resource: v,\n        meta: A(i, c)\n    }), C;\n    n === 1 ? C = V : C = E;\n    let R = o(()=>{\n        d(0), m(0), x(!1);\n    }, \"handleCleanup\"), U = o((L)=>{\n        let M = {\n            succeeded: L.filter((D)=>D.type === \"success\"),\n            errored: L.filter((D)=>D.type === \"error\")\n        };\n        a == null || a(M), x(!1);\n    }, \"handleFinish\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        p == null || p({\n            totalAmount: y,\n            processedAmount: l\n        });\n    }, [\n        y,\n        l\n    ]);\n    let F = o(({ file: L })=>(R(), new Promise((M)=>{\n            x(!0), papaparse__WEBPACK_IMPORTED_MODULE_15__.parse(L, {\n                complete: async ({ data: D })=>{\n                    let I = sr(D, r);\n                    if (d(I.length), n === 1) {\n                        let B = I.map((S)=>o(async ()=>({\n                                    response: await V.mutateAsync({\n                                        resource: f ?? \"\",\n                                        values: S,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: u,\n                                        meta: T,\n                                        metaData: T\n                                    }),\n                                    value: S\n                                }), \"fn\")), P = await gr(B, ({ response: S, value: Q })=>(m((H)=>H + 1), {\n                                response: [\n                                    S.data\n                                ],\n                                type: \"success\",\n                                request: [\n                                    Q\n                                ]\n                            }), (S, Q)=>({\n                                response: [\n                                    S\n                                ],\n                                type: \"error\",\n                                request: [\n                                    I[Q]\n                                ]\n                            }));\n                        M(P);\n                    } else {\n                        let B = (0,lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(I, n), P = B.map((Q)=>o(async ()=>({\n                                    response: await E.mutateAsync({\n                                        resource: f ?? \"\",\n                                        values: Q,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: u,\n                                        meta: T,\n                                        metaData: T\n                                    }),\n                                    value: Q,\n                                    currentBatchLength: Q.length\n                                }), \"fn\")), S = await gr(P, ({ response: Q, currentBatchLength: H, value: j })=>(m((K)=>K + H), {\n                                response: Q.data,\n                                type: \"success\",\n                                request: j\n                            }), (Q, H)=>({\n                                response: [\n                                    Q\n                                ],\n                                type: \"error\",\n                                request: B[H]\n                            }));\n                        M(S);\n                    }\n                },\n                ...s\n            });\n        }).then((M)=>(U(M), M))), \"handleChange\");\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (L)=>{\n                L.target.files && L.target.files.length > 0 && F({\n                    file: L.target.files[0]\n                });\n            }\n        },\n        mutationResult: C,\n        isLoading: g,\n        handleChange: F\n    };\n}, \"useImport\");\n\nvar fR = o(({ defaultVisible: e = !1 } = {})=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!0), [\n        t\n    ]), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!1), [\n        t\n    ]);\n    return {\n        visible: t,\n        show: s,\n        close: n\n    };\n}, \"useModal\");\nvar bu = o(({ resource: e, action: t, meta: r, legacy: s })=>Ut()({\n        resource: e,\n        action: t,\n        meta: r,\n        legacy: s\n    }), \"useToPath\");\n\n\nvar Eu = o((e, t)=>{\n    let r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft), s = r == null ? void 0 : r.Link, n = he(), a = \"\";\n    return \"go\" in e && (r != null && r.go || warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, \"[Link]: `routerProvider` is not found. To use `go`, Please make sure that you have provided the `routerProvider` for `<Refine />` https://refine.dev/docs/routing/router-provider/ \\n\"), a = n({\n        ...e.go,\n        type: \"path\"\n    })), \"to\" in e && (a = e.to), s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(s, {\n        ref: t,\n        ...e,\n        to: a,\n        go: void 0\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        ref: t,\n        href: a,\n        ...e,\n        to: void 0,\n        go: void 0\n    });\n}, \"LinkComponent\"), Io = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(Eu);\nvar yt = o(()=>Io, \"useLink\");\n\n\nvar gt = {\n    useHistory: ()=>!1,\n    useLocation: ()=>!1,\n    useParams: ()=>({}),\n    Prompt: ()=>null,\n    Link: ()=>null\n}, er = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(gt), Tn = o(({ children: e, useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: a, routes: i })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(er.Provider, {\n        value: {\n            useHistory: t ?? gt.useHistory,\n            useLocation: r ?? gt.useLocation,\n            useParams: s ?? gt.useParams,\n            Prompt: n ?? gt.Prompt,\n            Link: a ?? gt.Link,\n            routes: i ?? gt.routes\n        }\n    }, e), \"LegacyRouterContextProvider\");\nvar le = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(er), { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: a, routes: i } = e ?? gt;\n    return {\n        useHistory: t,\n        useLocation: r,\n        useParams: s,\n        Prompt: n,\n        Link: a,\n        routes: i\n    };\n}, \"useRouterContext\");\n\n\n\n\nvar ct = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    options: {\n        buttons: {\n            enableAccessControl: !0,\n            hideIfUnauthorized: !1\n        }\n    }\n}), Pn = o(({ can: e, children: t, options: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ct.Provider, {\n        value: {\n            can: e,\n            options: r ? {\n                ...r,\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1,\n                    ...r.buttons\n                }\n            } : {\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1\n                },\n                queryOptions: void 0\n            }\n        }\n    }, t), \"AccessControlContextProvider\");\nvar kt = o((e)=>{\n    if (!e) return;\n    let { icon: t, list: r, edit: s, create: n, show: a, clone: i, children: c, meta: p, options: u, ...l } = e, { icon: m, ...y } = p ?? {}, { icon: d, ...g } = u ?? {};\n    return {\n        ...l,\n        ...p ? {\n            meta: y\n        } : {},\n        ...u ? {\n            options: g\n        } : {}\n    };\n}, \"sanitizeResource\");\nvar kr = o(({ action: e, resource: t, params: r, queryOptions: s })=>{\n    let { can: n, options: a } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ct), { keys: i, preferLegacyKeys: c } = Z(), { queryOptions: p } = a || {}, u = {\n        ...p,\n        ...s\n    }, { resource: l, ...m } = r ?? {}, y = kt(l), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: i().access().resource(t).action(e).params({\n            params: {\n                ...m,\n                resource: y\n            },\n            enabled: u == null ? void 0 : u.enabled\n        }).get(c),\n        queryFn: ()=>(n == null ? void 0 : n({\n                action: e,\n                resource: t,\n                params: {\n                    ...m,\n                    resource: y\n                }\n            })) ?? Promise.resolve({\n                can: !0\n            }),\n        enabled: typeof n < \"u\",\n        ...u,\n        meta: {\n            ...u == null ? void 0 : u.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCan\", c, t, [\n                \"useButtonCanAccess\",\n                \"useNavigationButton\"\n            ])\n        },\n        retry: !1\n    });\n    return typeof n > \"u\" ? {\n        data: {\n            can: !0\n        }\n    } : d;\n}, \"useCan\");\n\nvar aC = o(()=>{\n    let { can: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ct);\n    return {\n        can: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e ? o(async ({ params: s, ...n })=>{\n                let a = s != null && s.resource ? kt(s.resource) : void 0;\n                return e({\n                    ...n,\n                    ...s ? {\n                        params: {\n                            ...s,\n                            resource: a\n                        }\n                    } : {}\n                });\n            }, \"canWithSanitizedResource\") : void 0, [\n            e\n        ])\n    };\n}, \"useCanWithoutCache\");\n\n\n\n\nvar TC = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [a, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), { resource: c, sort: p, sorters: u, filters: l = [], optionLabel: m = \"title\", optionValue: y = \"id\", searchField: d = typeof m == \"string\" ? m : \"title\", debounce: g = 300, successNotification: x, errorNotification: v, defaultValueQueryOptions: f, queryOptions: h, fetchSize: E, pagination: V, hasPagination: T = !1, liveMode: C, defaultValue: R = [], selectedOptionsOrder: U = \"in-place\", onLiveEvent: F, onSearch: L, liveParams: M, meta: D, metaData: I, dataProviderName: B, overtimeOptions: P } = e, S = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((W)=>typeof m == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(W, m) : m(W), [\n        m\n    ]), Q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((W)=>typeof y == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(W, y) : y(W), [\n        y\n    ]), { resource: H, identifier: j } = Y(c), X = ue()({\n        resource: H,\n        meta: A(D, I)\n    }), te = Array.isArray(R) ? R : [\n        R\n    ], ae = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((W)=>{\n        i(W.data.map((_)=>({\n                label: S(_),\n                value: Q(_)\n            })));\n    }, [\n        m,\n        y\n    ]), b = f ?? h, w = go({\n        resource: j,\n        ids: te,\n        queryOptions: {\n            ...b,\n            enabled: te.length > 0 && ((b == null ? void 0 : b.enabled) ?? !0),\n            onSuccess: (W)=>{\n                var _;\n                ae(W), (_ = b == null ? void 0 : b.onSuccess) == null || _.call(b, W);\n            }\n        },\n        meta: X,\n        metaData: X,\n        liveMode: \"off\",\n        dataProviderName: B\n    }), N = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((W)=>{\n        n(W.data.map((_)=>({\n                label: S(_),\n                value: Q(_)\n            })));\n    }, [\n        m,\n        y\n    ]), G = zt({\n        resource: j,\n        sorters: A(u, p),\n        filters: l.concat(t),\n        pagination: {\n            current: V == null ? void 0 : V.current,\n            pageSize: (V == null ? void 0 : V.pageSize) ?? E,\n            mode: V == null ? void 0 : V.mode\n        },\n        hasPagination: T,\n        queryOptions: {\n            ...h,\n            onSuccess: (W)=>{\n                var _;\n                N(W), (_ = h == null ? void 0 : h.onSuccess) == null || _.call(h, W);\n            }\n        },\n        successNotification: x,\n        errorNotification: v,\n        meta: X,\n        metaData: X,\n        liveMode: C,\n        liveParams: M,\n        onLiveEvent: F,\n        dataProviderName: B\n    }), { elapsedTime: z } = pe({\n        isLoading: G.isFetching || w.isFetching,\n        interval: P == null ? void 0 : P.interval,\n        onInterval: P == null ? void 0 : P.onInterval\n    }), q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(U === \"in-place\" ? [\n            ...s,\n            ...a\n        ] : [\n            ...a,\n            ...s\n        ], \"value\"), [\n        s,\n        a\n    ]), re = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(L), O = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((W)=>{\n            if (re.current) {\n                r(re.current(W));\n                return;\n            }\n            if (!W) {\n                r([]);\n                return;\n            }\n            r([\n                {\n                    field: d,\n                    operator: \"contains\",\n                    value: W\n                }\n            ]);\n        }, g), [\n        d,\n        g\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        re.current = L;\n    }, [\n        L\n    ]), {\n        queryResult: G,\n        defaultValueQueryResult: w,\n        query: G,\n        defaultValueQuery: w,\n        options: q,\n        onSearch: O,\n        overtime: {\n            elapsedTime: z\n        }\n    };\n}, \"useSelect\");\n\n\n\n\n\nvar Dn = [], Un = [];\nfunction MC({ initialCurrent: e, initialPageSize: t, hasPagination: r = !0, pagination: s, initialSorter: n, permanentSorter: a = Un, defaultSetFilterBehavior: i, initialFilter: c, permanentFilter: p = Dn, filters: u, sorters: l, syncWithLocation: m, resource: y, successNotification: d, errorNotification: g, queryOptions: x, liveMode: v, onLiveEvent: f, liveParams: h, meta: E, metaData: V, dataProviderName: T, overtimeOptions: C } = {}) {\n    var Ho, $o, zo, Oo, _o;\n    let { syncWithLocation: R } = to(), U = m ?? R, F = on(v), L = se(), { useLocation: M } = le(), { search: D, pathname: I } = M(), B = ue(), P = Te(), S = ((u == null ? void 0 : u.mode) || \"server\") === \"server\", Q = ((l == null ? void 0 : l.mode) || \"server\") === \"server\", H = r === !1 ? \"off\" : \"server\", j = ((s == null ? void 0 : s.mode) ?? H) !== \"off\", K = A(s == null ? void 0 : s.current, e), X = A(s == null ? void 0 : s.pageSize, t), te = A(E, V), { parsedCurrent: ae, parsedPageSize: b, parsedSorter: w, parsedFilters: N } = vr(D ?? \"?\"), G = A(u == null ? void 0 : u.initial, c), z = A(u == null ? void 0 : u.permanent, p) ?? Dn, q = A(l == null ? void 0 : l.initial, n), re = A(l == null ? void 0 : l.permanent, a) ?? Un, O = A(u == null ? void 0 : u.defaultBehavior, i) ?? \"merge\", W, _, oe, J;\n    U ? (W = ((Ho = P == null ? void 0 : P.params) == null ? void 0 : Ho.current) || ae || K || 1, _ = (($o = P == null ? void 0 : P.params) == null ? void 0 : $o.pageSize) || b || X || 10, oe = ((zo = P == null ? void 0 : P.params) == null ? void 0 : zo.sorters) || (w.length ? w : q), J = ((Oo = P == null ? void 0 : P.params) == null ? void 0 : Oo.filters) || (N.length ? N : G)) : (W = K || 1, _ = X || 10, oe = q, J = G);\n    let { replace: ve } = Pe(), ce = he(), { resource: Ve, identifier: Ne } = Y(y), ne = B({\n        resource: Ve,\n        meta: te\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        warn_once__WEBPACK_IMPORTED_MODULE_1__(typeof Ne > \"u\", \"useTable: `resource` is not defined.\");\n    }, [\n        Ne\n    ]);\n    let [ye, de] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Lr(re, oe ?? [])), [De, rt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Er(z, J ?? [])), [Ke, Ct] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(W), [Ge, Tt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_), xt = o(()=>{\n        if (L === \"new\") {\n            let { sorters: jo, filters: Qc, pageSize: Vc, current: Nc, ...sa } = (P == null ? void 0 : P.params) ?? {};\n            return sa;\n        }\n        let { sorter: Ie, filters: ot, pageSize: Or, current: _r, ...jr } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(D, {\n            ignoreQueryPrefix: !0\n        });\n        return jr;\n    }, \"getCurrentQueryParams\"), bt = o(({ pagination: { current: Ie, pageSize: ot }, sorter: Or, filters: _r })=>{\n        if (L === \"new\") return ce({\n            type: \"path\",\n            options: {\n                keepHash: !0,\n                keepQuery: !0\n            },\n            query: {\n                ...j ? {\n                    current: Ie,\n                    pageSize: ot\n                } : {},\n                sorters: Or,\n                filters: _r,\n                ...xt()\n            }\n        }) ?? \"\";\n        let jr = qs__WEBPACK_IMPORTED_MODULE_6__.parse(D == null ? void 0 : D.substring(1)), jo = Dr({\n            pagination: {\n                pageSize: ot,\n                current: Ie\n            },\n            sorters: ye ?? Or,\n            filters: _r,\n            ...jr\n        });\n        return `${I ?? \"\"}?${jo ?? \"\"}`;\n    }, \"createLinkForSyncWithLocation\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        D === \"\" && (Ct(W), Tt(_), de(Lr(re, oe ?? [])), rt(Er(z, J ?? [])));\n    }, [\n        D\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (U) {\n            let Ie = xt();\n            if (L === \"new\") ce({\n                type: \"replace\",\n                options: {\n                    keepQuery: !0\n                },\n                query: {\n                    ...j ? {\n                        pageSize: Ge,\n                        current: Ke\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ye, re, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(De, z, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])\n                }\n            });\n            else {\n                let ot = Dr({\n                    ...j ? {\n                        pagination: {\n                            pageSize: Ge,\n                            current: Ke\n                        }\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ye, re, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(De, z, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    ...Ie\n                });\n                return ve == null ? void 0 : ve(`${I}?${ot}`, void 0, {\n                    shallow: !0\n                });\n            }\n        }\n    }, [\n        U,\n        Ke,\n        Ge,\n        ye,\n        De\n    ]);\n    let or = zt({\n        resource: Ne,\n        hasPagination: r,\n        pagination: {\n            current: Ke,\n            pageSize: Ge,\n            mode: s == null ? void 0 : s.mode\n        },\n        filters: S ? St(z, De) : void 0,\n        sorters: Q ? Ur(re, ye) : void 0,\n        queryOptions: x,\n        successNotification: d,\n        errorNotification: g,\n        meta: ne,\n        metaData: ne,\n        liveMode: F,\n        liveParams: h,\n        onLiveEvent: f,\n        dataProviderName: T\n    }), Bo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt((ot)=>St(z, Ie, ot));\n    }, [\n        z\n    ]), Ko = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt(St(z, Ie));\n    }, [\n        z\n    ]), Go = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt((ot)=>St(z, Ie(ot)));\n    }, [\n        z\n    ]), ra = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie, ot = O)=>{\n        typeof Ie == \"function\" ? Go(Ie) : ot === \"replace\" ? Ko(Ie) : Bo(Ie);\n    }, [\n        Go,\n        Ko,\n        Bo\n    ]), Wo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        de(()=>Ur(re, Ie));\n    }, [\n        re\n    ]), { elapsedTime: oa } = pe({\n        isLoading: or.isFetching,\n        interval: C == null ? void 0 : C.interval,\n        onInterval: C == null ? void 0 : C.onInterval\n    });\n    return {\n        tableQueryResult: or,\n        tableQuery: or,\n        sorters: ye,\n        setSorters: Wo,\n        sorter: ye,\n        setSorter: Wo,\n        filters: De,\n        setFilters: ra,\n        current: Ke,\n        setCurrent: Ct,\n        pageSize: Ge,\n        setPageSize: Tt,\n        pageCount: Ge ? Math.ceil((((_o = or.data) == null ? void 0 : _o.total) ?? 0) / Ge) : 1,\n        createLinkForSyncWithLocation: bt,\n        overtime: {\n            elapsedTime: oa\n        }\n    };\n}\no(MC, \"useTable\");\n\n\n\n\nvar Et = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Ln = o(({ create: e, get: t, update: r, children: s })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Et.Provider, {\n        value: {\n            create: e,\n            get: t,\n            update: r\n        }\n    }, s), \"AuditLogContextProvider\");\nvar Je = o(({ logMutationOptions: e, renameMutationOptions: t } = {})=>{\n    let r = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { keys: n, preferLegacyKeys: a } = Z(), i = ie(), { resources: c } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt), { data: p, refetch: u, isLoading: l } = no({\n        v3LegacyAuthProviderCompatible: !!(i != null && i.isLegacy),\n        queryOptions: {\n            enabled: !!(s != null && s.create)\n        }\n    }), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (d)=>{\n        var f, h, E, V, T;\n        let g = Le(d.resource, c), x = A((f = g == null ? void 0 : g.meta) == null ? void 0 : f.audit, (h = g == null ? void 0 : g.options) == null ? void 0 : h.audit, (V = (E = g == null ? void 0 : g.options) == null ? void 0 : E.auditLog) == null ? void 0 : V.permissions);\n        if (x && !Xr(x, d.action)) return;\n        let v;\n        return l && s != null && s.create && (v = await u()), await ((T = s.create) == null ? void 0 : T.call(s, {\n            ...d,\n            author: p ?? (v == null ? void 0 : v.data)\n        }));\n    }, {\n        mutationKey: n().audit().action(\"log\").get(),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", a)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (d)=>{\n        var g;\n        return await ((g = s.update) == null ? void 0 : g.call(s, d));\n    }, {\n        onSuccess: (d)=>{\n            d != null && d.resource && r.invalidateQueries(n().audit().resource((d == null ? void 0 : d.resource) ?? \"\").action(\"list\").get(a));\n        },\n        mutationKey: n().audit().action(\"rename\").get(),\n        ...t,\n        meta: {\n            ...t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", a)\n        }\n    });\n    return {\n        log: m,\n        rename: y\n    };\n}, \"useLog\");\n\n\n\nvar JC = o(({ resource: e, action: t, meta: r, author: s, metaData: n, queryOptions: a })=>{\n    let { get: i } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { keys: c, preferLegacyKeys: p } = Z();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: c().audit().resource(e).action(\"list\").params(r).get(p),\n        queryFn: ()=>(i == null ? void 0 : i({\n                resource: e,\n                action: t,\n                author: s,\n                meta: r,\n                metaData: n\n            })) ?? Promise.resolve([]),\n        enabled: typeof i < \"u\",\n        ...a,\n        retry: !1,\n        meta: {\n            ...a == null ? void 0 : a.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogList\", p, e)\n        }\n    });\n}, \"useLogList\");\n\n\nvar lb = o(({ meta: e = {} } = {})=>{\n    let t = se(), { i18nProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), s = Te(), n = $(), { resources: a, resource: i, action: c } = Y(), { options: { textTransformers: p } } = ge(), u = [];\n    if (!(i != null && i.name)) return {\n        breadcrumbs: u\n    };\n    let l = o((m)=>{\n        var d, g, x, v, f, h;\n        let y = typeof m == \"string\" ? Le(m, a, t === \"legacy\") ?? {\n            name: m\n        } : m;\n        if (y) {\n            let E = A((d = y == null ? void 0 : y.meta) == null ? void 0 : d.parent, y == null ? void 0 : y.parentName);\n            E && l(E);\n            let V = Se(y, a, t === \"legacy\").find((R)=>R.action === \"list\"), T = (g = V == null ? void 0 : V.resource) != null && g.list ? V == null ? void 0 : V.route : void 0, C = T ? t === \"legacy\" ? T : He(T, y == null ? void 0 : y.meta, s, e) : void 0;\n            u.push({\n                label: A((x = y.meta) == null ? void 0 : x.label, (v = y.options) == null ? void 0 : v.label) ?? n(`${y.name}.${y.name}`, p.humanize(y.name)),\n                href: C,\n                icon: A((f = y.meta) == null ? void 0 : f.icon, (h = y.options) == null ? void 0 : h.icon, y.icon)\n            });\n        }\n    }, \"addBreadcrumb\");\n    if (l(i), c && c !== \"list\") {\n        let m = `actions.${c}`, y = n(m);\n        typeof r < \"u\" && y === m ? (warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[useBreadcrumb]: Breadcrumb missing translate key for the \"${c}\" action. Please add \"actions.${c}\" key to your translation file.\nFor more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`), u.push({\n            label: n(`buttons.${c}`, p.humanize(c))\n        })) : u.push({\n            label: n(m, p.humanize(c))\n        });\n    }\n    return {\n        breadcrumbs: u\n    };\n}, \"useBreadcrumb\");\n\nvar Ft = o((e, t, r = !1)=>{\n    let s = [], n = Oe(e, t);\n    for(; n;)s.push(n), n = Oe(n, t);\n    return s.reverse(), `/${[\n        ...s,\n        e\n    ].map((i)=>ke((r ? i.route : void 0) ?? i.identifier ?? i.name)).join(\"/\").replace(/^\\//, \"\")}`;\n}, \"createResourceKey\");\nvar Sn = o((e, t = !1)=>{\n    let r = {\n        item: {\n            name: \"__root__\"\n        },\n        children: {}\n    };\n    e.forEach((n)=>{\n        let a = [], i = Oe(n, e);\n        for(; i;)a.push(i), i = Oe(i, e);\n        a.reverse();\n        let c = r;\n        a.forEach((u)=>{\n            let l = (t ? u.route : void 0) ?? u.identifier ?? u.name;\n            c.children[l] || (c.children[l] = {\n                item: u,\n                children: {}\n            }), c = c.children[l];\n        });\n        let p = (t ? n.route : void 0) ?? n.identifier ?? n.name;\n        c.children[p] || (c.children[p] = {\n            item: n,\n            children: {}\n        });\n    });\n    let s = o((n)=>{\n        let a = [];\n        return Object.keys(n.children).forEach((i)=>{\n            let c = Ft(n.children[i].item, e, t), p = {\n                ...n.children[i].item,\n                key: c,\n                children: s(n.children[i])\n            };\n            a.push(p);\n        }), a;\n    }, \"flatten\");\n    return s(r);\n}, \"createTree\");\nvar An = o((e)=>e.split(\"?\")[0].split(\"#\")[0].replace(/(.+)(\\/$)/, \"$1\"), \"getCleanPath\"), $u = o(({ meta: e, hideOnMissingParameter: t = !0 } = {\n    hideOnMissingParameter: !0\n})=>{\n    let r = $(), s = Ut(), n = se(), { resource: a, resources: i } = Y(), { pathname: c } = Te(), { useLocation: p } = le(), { pathname: u } = p(), l = Pt(), y = `/${((n === \"legacy\" ? An(u) : c ? An(c) : void 0) ?? \"\").replace(/^\\//, \"\")}`, d = a ? Ft(a, i, n === \"legacy\") : y ?? \"\", g = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!a) return [];\n        let f = Oe(a, i), h = [\n            Ft(a, i)\n        ];\n        for(; f;)h.push(Ft(f, i)), f = Oe(f, i);\n        return h;\n    }, []), x = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((f)=>{\n        var E, V, T, C, R, U;\n        if (A((E = f == null ? void 0 : f.meta) == null ? void 0 : E.hide, (V = f == null ? void 0 : f.options) == null ? void 0 : V.hide) || !(f != null && f.list) && f.children.length === 0) return;\n        let h = f.list ? s({\n            resource: f,\n            action: \"list\",\n            legacy: n === \"legacy\",\n            meta: e\n        }) : void 0;\n        if (!(t && h && h.match(/(\\/|^):(.+?)(\\/|$){1}/))) return {\n            ...f,\n            route: h,\n            icon: A((T = f.meta) == null ? void 0 : T.icon, (C = f.options) == null ? void 0 : C.icon, f.icon),\n            label: A((R = f == null ? void 0 : f.meta) == null ? void 0 : R.label, (U = f == null ? void 0 : f.options) == null ? void 0 : U.label) ?? r(`${f.name}.${f.name}`, l(f.name, \"plural\"))\n        };\n    }, [\n        n,\n        e,\n        s,\n        r,\n        t\n    ]), v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let f = Sn(i, n === \"legacy\"), h = o((E)=>E.flatMap((V)=>{\n                let T = h(V.children), C = x({\n                    ...V,\n                    children: T\n                });\n                return C ? [\n                    C\n                ] : [];\n            }), \"prepare\");\n        return h(f);\n    }, [\n        i,\n        n,\n        x\n    ]);\n    return {\n        defaultOpenKeys: g,\n        selectedKey: d,\n        menuItems: v\n    };\n}, \"useMenu\");\n\nvar ko = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), ju = o(({ children: e, value: t })=>{\n    let r = Br(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...r,\n            ...t\n        }), [\n        r,\n        t\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ko.Provider, {\n        value: s\n    }, e);\n}, \"MetaContextProvider\"), Br = o(()=>{\n    if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ko)) throw new Error(\"useMetaContext must be used within a MetaContextProvider\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ko);\n}, \"useMetaContext\");\nvar ue = o(()=>{\n    let { params: e } = Te(), t = Br();\n    return o(({ resource: s, meta: n } = {})=>{\n        let { meta: a } = kt(s) ?? {\n            meta: {}\n        }, { filters: i, sorters: c, current: p, pageSize: u, ...l } = e ?? {}, m = {\n            ...a,\n            ...l,\n            ...n\n        };\n        return t != null && t.tenantId && (m.tenantId = t.tenantId), m;\n    }, \"getMetaFn\");\n}, \"useMeta\");\n\nvar At = o(()=>{\n    let { options: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Qe);\n    return e;\n}, \"useRefineOptions\");\n\nvar Fn = o((e)=>{\n    let t = se(), { useParams: r } = le(), s = Te(), n = r(), a = t === \"legacy\" ? n.id : s.id;\n    return e ?? a;\n}, \"useId\");\nvar Qn = o((e)=>{\n    let t = se(), { useParams: r } = le(), s = Te(), n = r(), a = t === \"legacy\" ? n.action : s.action;\n    return e ?? a;\n}, \"useAction\");\nfunction qe(e) {\n    let { select: t, identifier: r } = Y(), s = (e == null ? void 0 : e.resource) ?? r, { identifier: n = void 0, resource: a = void 0 } = s ? t(s, !0) : {}, i = r === n, c = Fn(), p = Qn(e == null ? void 0 : e.action), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>i ? (e == null ? void 0 : e.id) ?? c : e == null ? void 0 : e.id, [\n        i,\n        e == null ? void 0 : e.id,\n        c\n    ]), [l, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(u);\n    react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>m(u), [\n        u\n    ]);\n    let y = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>!i && !(e != null && e.action) ? \"create\" : p === \"edit\" || p === \"clone\" ? p : \"create\", [\n        p,\n        i,\n        e == null ? void 0 : e.action\n    ]);\n    return {\n        id: l,\n        setId: m,\n        resource: a,\n        action: p,\n        identifier: n,\n        formAction: y\n    };\n}\no(qe, \"useResourceParams\");\nfunction Gr({ type: e }) {\n    let t = $(), { textTransformers: { humanize: r } } = At(), s = `buttons.${e}`, n = r(e);\n    return {\n        label: t(s, n)\n    };\n}\no(Gr, \"useActionableButton\");\n\n\nvar Wr = o((e)=>{\n    var u, l, m;\n    let t = $(), r = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ct), s = ((u = e.accessControl) == null ? void 0 : u.enabled) ?? r.options.buttons.enableAccessControl, n = ((l = e.accessControl) == null ? void 0 : l.hideIfUnauthorized) ?? r.options.buttons.hideIfUnauthorized, { data: a } = kr({\n        resource: (m = e.resource) == null ? void 0 : m.name,\n        action: e.action === \"clone\" ? \"create\" : e.action,\n        params: {\n            id: e.id,\n            resource: e.resource\n        },\n        queryOptions: {\n            enabled: s\n        }\n    }), i = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>a != null && a.can ? \"\" : a != null && a.reason ? a.reason : t(\"buttons.notAccessTitle\", \"You don't have permission to access\"), [\n        a == null ? void 0 : a.can,\n        a == null ? void 0 : a.reason,\n        t\n    ]), c = s && n && !(a != null && a.can), p = (a == null ? void 0 : a.can) === !1;\n    return {\n        title: i,\n        hidden: c,\n        disabled: p,\n        canAccess: a\n    };\n}, \"useButtonCanAccess\");\nfunction Qt(e) {\n    var h;\n    let t = Pe(), r = se(), s = yt(), { Link: n } = le(), a = $(), i = Pt(), { textTransformers: { humanize: c } } = At(), { id: p, resource: u, identifier: l } = qe({\n        resource: e.resource,\n        id: e.action === \"create\" ? void 0 : e.id\n    }), { canAccess: m, title: y, hidden: d, disabled: g } = Wr({\n        action: e.action,\n        accessControl: e.accessControl,\n        id: p,\n        resource: u\n    }), x = r === \"legacy\" ? n : s, v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!u) return \"\";\n        switch(e.action){\n            case \"create\":\n            case \"list\":\n                return t[`${e.action}Url`](u, e.meta);\n            default:\n                return p ? t[`${e.action}Url`](u, p, e.meta) : \"\";\n        }\n    }, [\n        u,\n        p,\n        e.meta,\n        t[`${e.action}Url`]\n    ]), f = e.action === \"list\" ? a(`${l ?? e.resource}.titles.list`, i(((h = u == null ? void 0 : u.meta) == null ? void 0 : h.label) ?? (u == null ? void 0 : u.label) ?? l ?? e.resource, \"plural\")) : a(`buttons.${e.action}`, c(e.action));\n    return {\n        to: v,\n        label: f,\n        title: y,\n        disabled: g,\n        hidden: d,\n        canAccess: m,\n        LinkComponent: x\n    };\n}\no(Qt, \"useNavigationButton\");\nfunction Yu(e) {\n    let t = $(), { mutate: r, isLoading: s, variables: n } = ho(), { setWarnWhen: a } = vt(), { mutationMode: i } = _e(e.mutationMode), { id: c, resource: p, identifier: u } = qe({\n        resource: e.resource,\n        id: e.id\n    }), { title: l, disabled: m, hidden: y, canAccess: d } = Wr({\n        action: \"delete\",\n        accessControl: e.accessControl,\n        id: c,\n        resource: p\n    }), g = t(\"buttons.delete\", \"Delete\"), x = t(\"buttons.delete\", \"Delete\"), v = t(\"buttons.confirm\", \"Are you sure?\"), f = t(\"buttons.cancel\", \"Cancel\"), h = c === (n == null ? void 0 : n.id) && s;\n    return {\n        label: g,\n        title: l,\n        hidden: y,\n        disabled: m,\n        canAccess: d,\n        loading: h,\n        confirmOkLabel: x,\n        cancelLabel: f,\n        confirmTitle: v,\n        onConfirm: o(()=>{\n            c && u && (a(!1), r({\n                id: c,\n                resource: u,\n                mutationMode: i,\n                successNotification: e.successNotification,\n                errorNotification: e.errorNotification,\n                meta: e.meta,\n                metaData: e.meta,\n                dataProviderName: e.dataProviderName,\n                invalidates: e.invalidates\n            }, {\n                onSuccess: e.onSuccess\n            }));\n        }, \"onConfirm\")\n    };\n}\no(Yu, \"useDeleteButton\");\n\nfunction qu(e) {\n    let t = $(), { keys: r, preferLegacyKeys: s } = Z(), n = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), a = Ae(), { identifier: i, id: c } = qe({\n        resource: e.resource,\n        id: e.id\n    }), { resources: p } = Y(), u = !!n.isFetching({\n        queryKey: r().data(ee(i, e.dataProviderName, p)).resource(i).action(\"one\").get(s)\n    }), l = o(()=>{\n        a({\n            id: c,\n            invalidates: [\n                \"detail\"\n            ],\n            dataProviderName: e.dataProviderName,\n            resource: i\n        });\n    }, \"onClick\"), m = t(\"buttons.refresh\", \"Refresh\");\n    return {\n        onClick: l,\n        label: m,\n        loading: u\n    };\n}\no(qu, \"useRefreshButton\");\nvar jv = o((e)=>Qt({\n        ...e,\n        action: \"show\"\n    }), \"useShowButton\"), Xv = o((e)=>Qt({\n        ...e,\n        action: \"edit\"\n    }), \"useEditButton\"), Zv = o((e)=>Qt({\n        ...e,\n        action: \"clone\"\n    }), \"useCloneButton\"), Yv = o((e)=>Qt({\n        ...e,\n        action: \"create\"\n    }), \"useCreateButton\"), Jv = o((e)=>Qt({\n        ...e,\n        action: \"list\"\n    }), \"useListButton\"), qv = o(()=>Gr({\n        type: \"save\"\n    }), \"useSaveButton\"), eD = o(()=>Gr({\n        type: \"export\"\n    }), \"useExportButton\"), tD = o(()=>Gr({\n        type: \"import\"\n    }), \"useImportButton\");\nvar rc = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), r = $(), { push: s } = Pe(), n = he(), a = se(), { resource: i, action: c } = Y();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i && c && t(r(\"pages.error.info\", {\n            action: c,\n            resource: i.name\n        }, `You may have forgotten to add the \"${c}\" component to \"${i.name}\" resource.`));\n    }, [\n        i,\n        c\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, r(\"pages.error.404\", void 0, \"Sorry, the page you visited does not exist.\")), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        onClick: ()=>{\n            a === \"legacy\" ? s(\"/\") : n({\n                to: \"/\"\n            });\n        }\n    }, r(\"pages.error.backHome\", void 0, \"Back Home\")));\n}, \"ErrorComponent\");\n\nvar Yr = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), n = $(), a = ie(), { mutate: i } = $t({\n        v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, n(\"pages.login.title\", \"Sign in your account\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (c)=>{\n            c.preventDefault(), i({\n                username: e,\n                password: r\n            });\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"table\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tbody\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.username\", void 0, \"username\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        autoFocus: !0,\n        required: !0,\n        value: e,\n        onChange: (c)=>t(c.target.value)\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.password\", void 0, \"password\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: r,\n        onChange: (c)=>s(c.target.value)\n    }))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: \"login\"\n    })));\n}, \"LoginPage\");\n\n\nvar Bn = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: s, contentProps: n, wrapperProps: a, renderContent: i, formProps: c, title: p = void 0, hideForm: u, mutationVariables: l })=>{\n    let m = se(), y = yt(), { Link: d } = le(), g = m === \"legacy\" ? d : y, [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [f, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [E, V] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), T = $(), C = ie(), { mutate: R } = $t({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), U = o((M, D)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(g, {\n            to: M\n        }, D), \"renderLink\"), F = o(()=>e ? e.map((M)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: M.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>R({\n                        ...l,\n                        providerName: M.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, M == null ? void 0 : M.icon, M.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, M.label)))) : null, \"renderProviders\"), L = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, T(\"pages.login.title\", \"Sign in to your account\")), F(), !u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (M)=>{\n            M.preventDefault(), R({\n                ...l,\n                email: x,\n                password: f,\n                remember: E\n            });\n        },\n        ...c\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, T(\"pages.login.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: x,\n        onChange: (M)=>v(M.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, T(\"pages.login.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        type: \"password\",\n        name: \"password\",\n        required: !0,\n        size: 20,\n        value: f,\n        onChange: (M)=>h(M.target.value)\n    }), s ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"remember-me-input\"\n    }, T(\"pages.login.buttons.rememberMe\", \"Remember me\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"remember-me-input\",\n        name: \"remember\",\n        type: \"checkbox\",\n        size: 20,\n        checked: E,\n        value: E.toString(),\n        onChange: ()=>{\n            V(!E);\n        }\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), r ?? U(\"/forgot-password\", T(\"pages.login.buttons.forgotPassword\", \"Forgot password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: T(\"pages.login.signin\", \"Sign in\")\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, T(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", U(\"/register\", T(\"pages.login.register\", \"Sign up\")))))), t !== !1 && u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, T(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", U(\"/register\", T(\"pages.login.register\", \"Sign up\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...a\n    }, i ? i(L, p) : L);\n}, \"LoginPage\");\n\nvar Gn = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: s, renderContent: n, formProps: a, title: i = void 0, hideForm: c, mutationVariables: p })=>{\n    let u = se(), l = yt(), { Link: m } = le(), y = u === \"legacy\" ? m : l, [d, g] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), f = $(), h = ie(), { mutate: E, isLoading: V } = co({\n        v3LegacyAuthProviderCompatible: !!(h != null && h.isLegacy)\n    }), T = o((U, F)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(y, {\n            to: U\n        }, F), \"renderLink\"), C = o(()=>e ? e.map((U)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: U.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>E({\n                        ...p,\n                        providerName: U.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, U == null ? void 0 : U.icon, U.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, U.label)))) : null, \"renderProviders\"), R = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, f(\"pages.register.title\", \"Sign up for your account\")), C(), !c && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (U)=>{\n            U.preventDefault(), E({\n                ...p,\n                email: d,\n                password: x\n            });\n        },\n        ...a\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, f(\"pages.register.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"email\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: d,\n        onChange: (U)=>g(U.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, f(\"pages.register.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: x,\n        onChange: (U)=>v(U.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: f(\"pages.register.buttons.submit\", \"Sign up\"),\n        disabled: V\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, f(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", T(\"/login\", f(\"pages.login.signin\", \"Sign in\"))))))), t !== !1 && c && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, f(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", T(\"/login\", f(\"pages.login.signin\", \"Sign in\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, n ? n(R, i) : R);\n}, \"RegisterPage\");\n\nvar Wn = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: s, formProps: n, title: a = void 0, mutationVariables: i })=>{\n    let c = $(), p = se(), u = yt(), { Link: l } = le(), m = p === \"legacy\" ? l : u, [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), { mutate: g, isLoading: x } = lo(), v = o((h, E)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m, {\n            to: h\n        }, E), \"renderLink\"), f = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, c(\"pages.forgotPassword.title\", \"Forgot your password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (h)=>{\n            h.preventDefault(), g({\n                ...i,\n                email: y\n            });\n        },\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, c(\"pages.forgotPassword.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"mail\",\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: y,\n        onChange: (h)=>d(h.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: x,\n        value: c(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), e ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, c(\"pages.register.buttons.haveAccount\", \"Have an account? \"), \" \", v(\"/login\", c(\"pages.login.signin\", \"Sign in\"))))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, s ? s(f, a) : f);\n}, \"ForgotPasswordPage\");\n\nvar $n = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: s, title: n = void 0, mutationVariables: a })=>{\n    let i = $(), c = ie(), { mutate: p, isLoading: u } = fo({\n        v3LegacyAuthProviderCompatible: !!(c != null && c.isLegacy)\n    }), [l, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), g = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, i(\"pages.updatePassword.title\", \"Update Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (x)=>{\n            x.preventDefault(), p({\n                ...a,\n                password: l,\n                confirmPassword: y\n            });\n        },\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, i(\"pages.updatePassword.fields.password\", \"New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: l,\n        onChange: (x)=>m(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"confirm-password-input\"\n    }, i(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"confirm-password-input\",\n        name: \"confirmPassword\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: y,\n        onChange: (x)=>d(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: u,\n        value: i(\"pages.updatePassword.buttons.submit\", \"Update\")\n    }))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...e\n    }, r ? r(g, n) : g);\n}, \"UpdatePasswordPage\");\nvar sc = o((e)=>{\n    let { type: t } = e;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, o(()=>{\n        switch(t){\n            case \"register\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Gn, {\n                    ...e\n                });\n            case \"forgotPassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wn, {\n                    ...e\n                });\n            case \"updatePassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($n, {\n                    ...e\n                });\n            default:\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Bn, {\n                    ...e\n                });\n        }\n    }, \"renderView\")());\n}, \"AuthPage\");\n\nvar Qo = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, \"Welcome on board\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Your configuration is completed.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Now you can get started by adding your resources to the\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`resources`\"), \" property of \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`<Refine>`\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: 8\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Documentation\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev/examples\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Examples\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://discord.gg/refine\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Community\")))), \"ReadyPage\");\n\n\nvar ac = [\n    {\n        title: \"Documentation\",\n        description: \"Learn about the technical details of using Refine in your projects.\",\n        link: \"https://refine.dev/docs\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg\"\n    },\n    {\n        title: \"Tutorial\",\n        description: \"Learn how to use Refine by building a fully-functioning CRUD app, from scratch to full launch.\",\n        link: \"https://refine.dev/tutorial\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg\"\n    },\n    {\n        title: \"Templates\",\n        description: \"Explore a range of pre-built templates, perfect everything from admin panels to dashboards and CRMs.\",\n        link: \"https://refine.dev/templates\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg\"\n    },\n    {\n        title: \"Community\",\n        description: \"Join our Discord community and keep up with the latest news.\",\n        link: \"https://discord.gg/refine\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg\"\n    }\n], zn = o(()=>{\n    let e = hr(\"(max-width: 1010px)\"), t = hr(\"(max-width: 650px)\"), r = o(()=>t ? \"1, 280px\" : e ? \"2, 280px\" : \"4, 1fr\", \"getGridTemplateColumns\"), s = o(()=>t ? \"32px\" : e ? \"40px\" : \"48px\", \"getHeaderFontSize\"), n = o(()=>t ? \"16px\" : e ? \"20px\" : \"24px\", \"getSubHeaderFontSize\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 10,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            overflow: \"hidden\",\n            position: \"relative\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n            background: t ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : e ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30\",\n            minHeight: \"100%\",\n            minWidth: \"100%\",\n            fontFamily: \"Arial\",\n            color: \"#FFFFFF\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            zIndex: 2,\n            position: \"absolute\",\n            width: t ? \"400px\" : \"800px\",\n            height: \"552px\",\n            opacity: \"0.5\",\n            background: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: \"contain\",\n            top: \"0\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"40px\" : \"80px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: t ? \"112px 58px\" : \"224px 116px\",\n            backgroundImage: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)\",\n            width: t ? 112 : 224,\n            height: t ? 58 : 116\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"120px\" : e ? \"200px\" : \"30vh\",\n            minHeight: t ? \"120px\" : \"200px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\",\n            textAlign: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            fontSize: s(),\n            fontWeight: 700,\n            margin: \"0px\"\n        }\n    }, \"Welcome Aboard!\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h4\", {\n        style: {\n            fontSize: n(),\n            fontWeight: 400,\n            margin: \"0px\"\n        }\n    }, \"Your configuration is completed.\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: \"64px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${r()})`,\n            justifyContent: \"center\",\n            gap: \"48px\",\n            paddingRight: \"16px\",\n            paddingLeft: \"16px\",\n            paddingBottom: \"32px\",\n            maxWidth: \"976px\",\n            margin: \"auto\"\n        }\n    }, ac.map((a)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ic, {\n            key: `welcome-page-${a.title}`,\n            card: a\n        })))));\n}, \"ConfigSuccessPage\"), ic = o(({ card: e })=>{\n    let { title: t, description: r, iconUrl: s, link: n } = e, [a, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        onPointerEnter: ()=>i(!0),\n        onPointerLeave: ()=>i(!1),\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            color: \"#fff\",\n            textDecoration: \"none\"\n        },\n        href: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"16px\",\n            height: \"16px\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundImage: `url(${s})`\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"16px\",\n            fontWeight: 700,\n            marginLeft: \"13px\",\n            marginRight: \"14px\"\n        }\n    }, t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        style: {\n            transition: \"transform 0.5s ease-in-out, opacity 0.2s ease-in-out\",\n            ...a && {\n                transform: \"translateX(4px)\",\n                opacity: 1\n            }\n        },\n        width: \"12\",\n        height: \"8\",\n        fill: \"none\",\n        opacity: \"0.5\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z\",\n        fill: \"#fff\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"12px\",\n            opacity: .5,\n            lineHeight: \"16px\"\n        }\n    }, r));\n}, \"Card\");\n\nvar On = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 11,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            padding: \"24px\",\n            background: \"#14141FBF\",\n            backdropFilter: \"blur(3px)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            maxWidth: \"640px\",\n            width: \"100%\",\n            background: \"#1D1E30\",\n            borderRadius: \"16px\",\n            border: \"1px solid #303450\",\n            boxShadow: \"0px 0px 120px -24px #000000\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"16px 20px\",\n            borderBottom: \"1px solid #303450\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"8px\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cc, {\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            color: \"#FFFFFF\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(pc, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontWeight: 400\n        }\n    }, \"Configuration Error\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"20px\",\n            color: \"#A3ADC2\",\n            lineHeight: \"20px\",\n            fontSize: \"14px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        style: {\n            margin: 0,\n            padding: 0,\n            lineHeight: \"28px\",\n            fontSize: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n        style: {\n            display: \"inline-block\",\n            background: \"#30345080\",\n            padding: \"0 4px\",\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            borderRadius: \"4px\",\n            color: \"#FFFFFF\"\n        }\n    }, \"<Refine />\"), \" \", \"is not initialized. Please make sure you have it mounted in your app and placed your components inside it.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(uc, null)))))), \"ConfigErrorPage\"), uc = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pre\", {\n        style: {\n            display: \"block\",\n            overflowX: \"auto\",\n            borderRadius: \"8px\",\n            fontSize: \"14px\",\n            lineHeight: \"24px\",\n            backgroundColor: \"#14141F\",\n            color: \"#E5ECF2\",\n            padding: \"16px\",\n            margin: \"0\",\n            maxHeight: \"400px\",\n            overflow: \"auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"import\"), \" \", \"{\", \" Refine, WelcomePage\", \" \", \"}\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"from\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#A5D6FF\"\n        }\n    }, '\"@refinedev/core\"'), \";\", `\n`, `\n`, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"export\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"default\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"function\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FFA657\"\n        }\n    }, \"App\"), \"(\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"rgb(222, 147, 95)\"\n        }\n    }), \")\", \" \"), \"{\", `\n`, \"  \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"return\"), \" (\", `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#E5ECF2\",\n            opacity: .6\n        }\n    }, \"// \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \"...\")), `\n`, \"    \", \">\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"WelcomePage\"), \" />\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"</\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), \">\")), `\n`, \"  \", \");\", `\n`, \"}\"), \"ExampleImplementation\"), cc = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 204,\n        height: 56,\n        viewBox: \"0 0 204 56\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-a)\",\n        d: \"M12 0H0v12L12 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-b)\",\n        d: \"M28 0h-8L0 20v8L28 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-c)\",\n        d: \"M36 0h8L0 44v-8L36 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-d)\",\n        d: \"M60 0h-8L0 52v4h4L60 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-e)\",\n        d: \"M68 0h8L20 56h-8L68 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-f)\",\n        d: \"M92 0h-8L28 56h8L92 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-g)\",\n        d: \"M100 0h8L52 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-h)\",\n        d: \"M124 0h-8L60 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-i)\",\n        d: \"M140 0h-8L76 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-j)\",\n        d: \"M132 0h8L84 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-k)\",\n        d: \"M156 0h-8L92 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-l)\",\n        d: \"M164 0h8l-56 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-m)\",\n        d: \"M188 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-n)\",\n        d: \"M204 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-a\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-b\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-c\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-d\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-e\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-f\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-g\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-h\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-i\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-j\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-k\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-l\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-m\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-n\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })))), \"ErrorGradient\"), pc = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#FF4C4D\",\n        fillRule: \"evenodd\",\n        d: \"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z\",\n        clipRule: \"evenodd\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#fff\",\n        fillRule: \"evenodd\",\n        d: \"M7 8a1 1 0 1 0 2 0V5a1 1 0 1 0-2 0v3Zm0 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z\",\n        clipRule: \"evenodd\"\n    })), \"ErrorIcon\");\nvar dc = o(()=>{\n    let { __initialized: e } = ge();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(zn, null), !e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(On, null));\n}, \"WelcomePage\");\n\n\n\n\n\nvar lc = \"4.56.0\", _n = o(()=>{\n    var h;\n    let e = yo(), t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { liveProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(er), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Jt), { i18nProvider: a } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(qt), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ct), { resources: p } = Y(), u = ge(), l = !!t.create || !!t.get || !!t.update, m = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe), y = !!s.useHistory || !!s.Link || !!s.Prompt || !!s.useLocation || !!s.useParams, d = !!n, g = !!(a != null && a.changeLocale) || !!(a != null && a.getLocale) || !!(a != null && a.translate), x = !!i.close || !!i.open, v = !!c.can, f = (h = u == null ? void 0 : u.options) == null ? void 0 : h.projectId;\n    return {\n        providers: {\n            auth: e,\n            auditLog: l,\n            live: m,\n            router: y,\n            data: d,\n            i18n: g,\n            notification: x,\n            accessControl: v\n        },\n        version: lc,\n        resourceCount: p.length,\n        projectId: f\n    };\n}, \"useTelemetryData\");\nvar mc = o((e)=>{\n    try {\n        let t = JSON.stringify(e || {});\n        return typeof btoa < \"u\" ? btoa(t) : Buffer.from(t).toString(\"base64\");\n    } catch  {\n        return;\n    }\n}, \"encode\"), fc = o((e)=>{\n    let t = new Image;\n    t.src = e;\n}, \"throughImage\"), yc = o((e)=>{\n    fetch(e);\n}, \"throughFetch\"), gc = o((e)=>{\n    typeof Image < \"u\" ? fc(e) : typeof fetch < \"u\" && yc(e);\n}, \"transport\"), Xn = o(()=>{\n    let e = _n(), t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (t.current) return;\n        let r = mc(e);\n        r && (gc(`https://telemetry.refine.dev/telemetry?payload=${r}`), t.current = !0);\n    }, []), null;\n}, \"Telemetry\");\nvar Zn = o((e)=>{\n    let t = [\n        \"go\",\n        \"parse\",\n        \"back\",\n        \"Link\"\n    ], r = Object.keys(e).filter((n)=>!t.includes(n));\n    return r.length > 0 ? (console.warn(`Unsupported properties are found in \\`routerProvider\\` prop. You provided \\`${r.join(\", \")}\\`. Supported properties are \\`${t.join(\", \")}\\`. You may wanted to use \\`legacyRouterProvider\\` prop instead.`), !0) : !1;\n}, \"checkRouterPropMisuse\");\n\nvar Jn = o((e)=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t.current === !1 && e && Zn(e) && (t.current = !0);\n    }, [\n        e\n    ]);\n}, \"useRouterMisuseWarning\");\nvar Pc = o(({ legacyAuthProvider: e, authProvider: t, dataProvider: r, legacyRouterProvider: s, routerProvider: n, notificationProvider: a, accessControlProvider: i, auditLogProvider: c, resources: p, DashboardPage: u, ReadyPage: l, LoginPage: m, catchAll: y, children: d, liveProvider: g, i18nProvider: x, Title: v, Layout: f, Sider: h, Header: E, Footer: V, OffLayoutArea: T, onLiveEvent: C, options: R })=>{\n    let { optionsWithDefaults: U, disableTelemetryWithDefault: F, reactQueryWithDefaults: L } = Jr({\n        options: R\n    }), M = Ar(()=>{\n        var P;\n        return L.clientConfig instanceof _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient ? L.clientConfig : new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient({\n            ...L.clientConfig,\n            defaultOptions: {\n                ...L.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: !1,\n                    keepPreviousData: !0,\n                    ...(P = L.clientConfig.defaultOptions) == null ? void 0 : P.queries\n                }\n            }\n        });\n    }, [\n        L.clientConfig\n    ]);\n    (0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.useQuerySubscription)(M);\n    let I = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>typeof a == \"function\" ? a : ()=>a, [\n        a\n    ])();\n    if (Jn(n), s && !n && (p ?? []).length === 0) return l ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(l, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qo, null);\n    let { RouterComponent: B = react__WEBPACK_IMPORTED_MODULE_0__.Fragment } = n ? {} : s ?? {};\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.QueryClientProvider, {\n        client: M\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(un, {\n        ...I\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zo, {\n        ...e ?? {},\n        isProvided: !!e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Jo, {\n        ...t ?? {},\n        isProvided: !!t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($s, {\n        dataProvider: r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Os, {\n        liveProvider: g\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Js, {\n        value: s && !n ? \"legacy\" : \"new\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(en, {\n        router: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tn, {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xs, {\n        resources: p ?? []\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(pn, {\n        i18nProvider: x\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Pn, {\n        ...i ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ln, {\n        ...c ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(nn, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cs, {\n        mutationMode: U.mutationMode,\n        warnWhenUnsavedChanges: U.warnWhenUnsavedChanges,\n        syncWithLocation: U.syncWithLocation,\n        Title: v,\n        undoableTimeout: U.undoableTimeout,\n        catchAll: y,\n        DashboardPage: u,\n        LoginPage: m,\n        Layout: f,\n        Sider: h,\n        Footer: V,\n        Header: E,\n        OffLayoutArea: T,\n        hasDashboard: !!u,\n        liveMode: U.liveMode,\n        onLiveEvent: C,\n        options: U\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(fs, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(B, null, d, !F && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xn, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Vo, null))))))))))))))))));\n}, \"Refine\");\n\nvar an = o(({ notification: e })=>{\n    let t = $(), { notificationDispatch: r } = ut(), { open: s } = $e(), [n, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), i = o(()=>{\n        if (e.isRunning === !0 && (e.seconds === 0 && e.doMutation(), e.isSilent || s == null || s({\n            key: `${e.id}-${e.resource}-notification`,\n            type: \"progress\",\n            message: t(\"notifications.undoable\", {\n                seconds: Bt(e.seconds)\n            }, `You have ${Bt(e.seconds)} seconds to undo`),\n            cancelMutation: e.cancelMutation,\n            undoableTimeout: Bt(e.seconds)\n        }), e.seconds > 0)) {\n            n && clearTimeout(n);\n            let c = setTimeout(()=>{\n                r({\n                    type: \"DECREASE_NOTIFICATION_SECOND\",\n                    payload: {\n                        id: e.id,\n                        seconds: e.seconds,\n                        resource: e.resource\n                    }\n                });\n            }, 1e3);\n            a(c);\n        }\n    }, \"cancelNotification\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i();\n    }, [\n        e\n    ]), null;\n}, \"UndoableQueue\");\n\nvar bc = o(({ children: e, Layout: t, Sider: r, Header: s, Title: n, Footer: a, OffLayoutArea: i })=>{\n    let { Layout: c, Footer: p, Header: u, Sider: l, Title: m, OffLayoutArea: y } = ge();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t ?? c, {\n        Sider: r ?? l,\n        Header: s ?? u,\n        Footer: a ?? p,\n        Title: n ?? m,\n        OffLayoutArea: i ?? y\n    }, e, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(vc, null));\n}, \"LayoutWrapper\"), vc = o(()=>{\n    let { Prompt: e } = le(), t = $(), { warnWhen: r, setWarnWhen: s } = vt(), n = o((a)=>(a.preventDefault(), a.returnValue = t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"), a.returnValue), \"warnWhenListener\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(r && window.addEventListener(\"beforeunload\", n), window.removeEventListener(\"beforeunload\", n)), [\n        r\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(e, {\n        when: r,\n        message: t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"),\n        setWarnWhen: s\n    });\n}, \"UnsavedPrompt\");\n\nfunction Dc({ redirectOnFail: e = !0, appendCurrentPathToQuery: t = !0, children: r, fallback: s, loading: n }) {\n    var T;\n    let a = ie(), i = se(), c = !!(a != null && a.isProvided), p = !!(a != null && a.isLegacy), u = i === \"legacy\", l = Te(), m = he(), { useLocation: y } = le(), d = y(), { isFetching: g, isSuccess: x, data: { authenticated: v, redirectTo: f } = {} } = wr({\n        v3LegacyAuthProviderCompatible: p\n    }), h = c ? p ? x : v : !0;\n    if (!c) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (g) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n ?? null);\n    if (h) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (typeof s < \"u\") return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null);\n    let E = p ? typeof e == \"string\" ? e : \"/login\" : typeof e == \"string\" ? e : f, V = `${u ? d == null ? void 0 : d.pathname : l.pathname}`.replace(/(\\?.*|#.*)$/, \"\");\n    if (E) {\n        if (u) {\n            let R = t ? `?to=${encodeURIComponent(V)}` : \"\";\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ec, {\n                to: `${E}${R}`\n            });\n        }\n        let C = (T = l.params) != null && T.to ? l.params.to : m({\n            to: V,\n            options: {\n                keepQuery: !0\n            },\n            type: \"path\"\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Uc, {\n            config: {\n                to: E,\n                query: t && (C ?? \"\").length > 1 ? {\n                    to: C\n                } : void 0,\n                type: \"replace\"\n            }\n        });\n    }\n    return null;\n}\no(Dc, \"Authenticated\");\nvar Uc = o(({ config: e })=>{\n    let t = he();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"Redirect\"), Ec = o(({ to: e })=>{\n    let { replace: t } = Pe();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"RedirectLegacy\");\n\nvar Vo = o(()=>{\n    let { useLocation: e } = le(), { checkAuth: t } = xe(), r = e();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        t == null || t().catch(()=>!1);\n    }, [\n        r == null ? void 0 : r.pathname\n    ]), null;\n}, \"RouteChangeHandler\");\n\nvar wc = o(({ resource: e, action: t, params: r, fallback: s, onUnauthorized: n, children: a, queryOptions: i, ...c })=>{\n    let { id: p, resource: u, action: l = \"\" } = qe({\n        resource: e,\n        id: r == null ? void 0 : r.id\n    }), m = t ?? l, y = r ?? {\n        id: p,\n        resource: u\n    }, { data: d } = kr({\n        resource: u == null ? void 0 : u.name,\n        action: m,\n        params: y,\n        queryOptions: i\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        n && (d == null ? void 0 : d.can) === !1 && n({\n            resource: u == null ? void 0 : u.name,\n            action: m,\n            reason: d == null ? void 0 : d.reason,\n            params: y\n        });\n    }, [\n        d == null ? void 0 : d.can\n    ]), d != null && d.can ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(a) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(a, c) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, a) : (d == null ? void 0 : d.can) === !1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null) : null;\n}, \"CanAccess\");\n\nvar ea = [\n    `\n    .bg-top-announcement {\n        border-bottom: 1px solid rgba(71, 235, 235, 0.15);\n        background: radial-gradient(\n                218.19% 111.8% at 0% 0%,\n                rgba(71, 235, 235, 0.1) 0%,\n                rgba(71, 235, 235, 0.2) 100%\n            ),\n            #14141f;\n    }\n    `,\n    `\n    .top-announcement-mask {\n        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        mask-repeat: repeat;\n        -webkit-mask-repeat: repeat;\n        background: rgba(71, 235, 235, 0.25);\n    }\n    `,\n    `\n    .banner {\n        display: flex;\n        @media (max-width: 1000px) {\n            display: none;\n        }\n    }`,\n    `\n    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {\n        text-decoration: none;\n        z-index: 9;\n    }\n    `,\n    `\n    @keyframes top-announcement-glow {\n        0% {\n            opacity: 1;\n        }\n\n        100% {\n            opacity: 0;\n        }\n    }\n    `\n];\nvar Sc = \"If you find Refine useful, you can contribute to its growth by giving it a star on GitHub\", Ac = o(({ containerStyle: e })=>((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let t = document.createElement(\"style\");\n        document.head.appendChild(t), ea.forEach((r)=>{\n            var s;\n            return (s = t.sheet) == null ? void 0 : s.insertRule(r, t.sheet.cssRules.length);\n        });\n    }, []), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"banner bg-top-announcement\",\n        style: {\n            width: \"100%\",\n            height: \"48px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            paddingLeft: \"200px\",\n            width: \"100%\",\n            maxWidth: \"100vw\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"top-announcement-mask\",\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            width: \"960px\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: \"0 auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n        style: {\n            animationDelay: \"1.5s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"220px\"\n        },\n        id: \"1\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n        style: {\n            animationDelay: \"1s\",\n            position: \"absolute\",\n            top: \"8px\",\n            right: \"100px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ta, {\n        style: {\n            position: \"absolute\",\n            right: \"10px\"\n        },\n        id: \"3\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n        style: {\n            animationDelay: \"2s\",\n            position: \"absolute\",\n            top: \"6px\",\n            right: \"180px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n        style: {\n            animationDelay: \"0.5s\",\n            transitionDelay: \"1.3s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"40px\"\n        },\n        id: \"5\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ta, {\n        style: {\n            position: \"absolute\",\n            right: \"-70px\"\n        },\n        id: \"6\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kc, {\n        text: Sc\n    })))), \"GitHubBanner\"), kc = o(({ text: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        className: \"gh-link\",\n        href: \"https://s.refine.dev/github-support\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            position: \"absolute\",\n            height: \"100%\",\n            padding: \"0 60px\",\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            whiteSpace: \"nowrap\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundImage: \"linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            color: \"#fff\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            gap: \"8px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"text\",\n        style: {\n            fontSize: \"16px\",\n            lineHeight: \"24px\"\n        }\n    }, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"))), \"Text\"), $r = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 80,\n        height: 40,\n        fill: \"none\",\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 40,\n        r: 40,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 40 -40 0 40 0)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowSmall\"), ta = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 120,\n        height: 48,\n        fill: \"none\",\n        ...t,\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 60,\n        cy: 24,\n        r: 60,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 60 -60 0 60 24)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowBig\");\n\nvar Fc = o(({ status: e, elements: { success: t = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(zr, {\n    translationKey: \"autoSave.success\",\n    defaultMessage: \"saved\"\n}), error: r = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(zr, {\n    translationKey: \"autoSave.error\",\n    defaultMessage: \"auto save failure\"\n}), loading: s = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(zr, {\n    translationKey: \"autoSave.loading\",\n    defaultMessage: \"saving...\"\n}), idle: n = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(zr, {\n    translationKey: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\"\n}) } = {} })=>{\n    switch(e){\n        case \"success\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t);\n        case \"error\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r);\n        case \"loading\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s);\n        default:\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n);\n    }\n}, \"AutoSaveIndicator\"), zr = o(({ translationKey: e, defaultMessage: t })=>{\n    let r = $();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, r(e, t));\n}, \"Message\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9jb3JlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBO0FDREE7QUFTTztBQUFBLElBQU1LLG1CQUFvQkwsZ0RBQU0sQ0FBa0MsQ0FBQyxJQUs3RE8sS0FFVEMsRUFBQSxDQUFDLEVBQUVDLFVBQUFBLENBQUFBLEVBQVVDLFlBQUFBLENBQUFBLEVBQVksR0FBR0MsR0FBZTtJQUM3QyxJQUFNLEVBQUVDLFNBQUFBLENBQVEsS0FBSUMsTUFFZEMsSUFBWU4sRUFBQSxPQUFPTztRQW5CM0IsSUFBQUM7UUFvQkksSUFBSTtZQUdGLE9BRmUsUUFBTUEsSUFBQUwsRUFBZU0sS0FBQSxLQUFmLGdCQUFBRCxFQUFBRSxJQUFBLENBQUFQLEdBQXVCSSxFQUFBQTtRQUc5QyxTQUFTSSxHQUFQO1lBQ0EsT0FBT0MsUUFBUUMsTUFBQSxDQUFPRjtRQUN4QjtJQUNGLEdBUmtCLGNBVVpHLElBQWVkLEVBQUEsT0FBT087UUE3QjlCLElBQUFDO1FBOEJJLElBQUk7WUFHRixPQUZlLFFBQU1BLElBQUFMLEVBQWVZLFFBQUEsS0FBZixnQkFBQVAsRUFBQUUsSUFBQSxDQUFBUCxHQUEwQkksRUFBQUE7UUFHakQsU0FBU0ksR0FBUDtZQUNBLE9BQU9DLFFBQVFDLE1BQUEsQ0FBT0Y7UUFDeEI7SUFDRixHQVJxQixpQkFVZkssSUFBYWhCLEVBQUEsT0FBT087UUF2QzVCLElBQUFDO1FBd0NJLElBQUk7WUFHRixPQUZxQixRQUFNQSxJQUFBTCxFQUFlYyxNQUFBLEtBQWYsZ0JBQUFULEVBQUFFLElBQUEsQ0FBQVAsR0FBd0JJ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MUM7SUFDZDtBQUNGLEdBakNtRSxzQkFtQzdERixLQUFVLzBDLEVBQUEsQ0FBQyxFQUNmZzFDLGdCQUFBQSxDQUFBQSxFQUNBci9CLGdCQUFBQSxDQUNGO0lBSUUsSUFBTUQsSUFBWTZOO0lBRWxCLHFCQUFPL2pCLGdEQUFBLENBQUMsY0FBTWtXLEVBQVVzL0IsR0FBZ0JyL0I7QUFDMUMsR0FWZ0I7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3BhZ2VzL2Vycm9yL2luZGV4LnRzeD9jMTIwIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9hdXRoL3VzZVBlcm1pc3Npb25zL2luZGV4LnRzP2I3YjIiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbnRleHRzL2F1dGgvaW5kZXgudHN4P2NiYjAiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL3RhYmxlL2luZGV4LnRzPzcyZTkiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvdXNlckZyaWVuZGx5U2Vjb25kcy9pbmRleC50cz9kYWE0Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2ltcG9ydENTVk1hcHBlci9pbmRleC50cz9kMTg1Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3VzZXJGcmllbmRseVJlc291cmNlTmFtZS9pbmRleC50cz80YmMxIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2hhbmRsZVVzZVBhcmFtcy9pbmRleC50c3g/OWFkMiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9rZXlzL2luZGV4LnRzPzkwNDUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvcGlja05vdERlcHJlY2F0ZWQvaW5kZXgudHM/MjkxNSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9xdWVyeUtleXMvaW5kZXgudHM/YTc3ZiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9oYXNQZXJtaXNzaW9uL2luZGV4LnRzPzI4YTAiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvcm91dGVyL2lzLXBhcmFtZXRlci50cz9lNWEzIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlci9zcGxpdC10by1zZWdtZW50cy50cz9kYTcyIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlci9pcy1zZWdtZW50LWNvdW50cy1zYW1lLnRzPzkyZmIiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvcm91dGVyL3JlbW92ZS1sZWFkaW5nLXRyYWlsaW5nLXNsYXNoZXMudHM/NTFmOCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXIvY2hlY2stYnktc2VnbWVudHMudHM/MWY3OCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXIvZ2V0LWRlZmF1bHQtYWN0aW9uLXBhdGgudHM/NDkzYSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXIvZ2V0LXBhcmVudC1yZXNvdXJjZS50cz8xNjk2Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlci9nZXQtcGFyZW50LXByZWZpeC1mb3ItcmVzb3VyY2UudHM/YWZhMCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXIvZ2V0LWFjdGlvbi1yb3V0ZXMtZnJvbS1yZXNvdXJjZS50cz8wZjYxIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlci9waWNrLW1hdGNoZWQtcm91dGUudHM/MGRlMCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXIvbWF0Y2gtcmVzb3VyY2UtZnJvbS1yb3V0ZS50cz82MjIxIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlR2VuZXJhdG9yL2luZGV4LnRzP2FiZjEiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvdHJlZVZpZXcvY3JlYXRlVHJlZVZpZXcvaW5kZXgudHM/MTY4NCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9odW1hbml6ZVN0cmluZy9pbmRleC50cz81NWRkIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb250ZXh0cy9yZWZpbmUvaW5kZXgudHN4PzEzMTIiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbXBvbmVudHMvbGF5b3V0V3JhcHBlci9kZWZhdWx0TGF5b3V0L2luZGV4LnRzeD9lMWU0Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2hhbmRsZVJlZmluZU9wdGlvbnMvaW5kZXgudHM/NDc2MyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9yZWRpcmVjdFBhZ2UvaW5kZXgudHM/NGI4MiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9zZXF1ZW50aWFsUHJvbWlzZXMvaW5kZXgudHM/ZTFhMSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9waWNrLXJlc291cmNlL2luZGV4LnRzP2IwMDEiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvcGlja0RhdGFQcm92aWRlci9pbmRleC50cz9hY2E4Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2hhbmRsZU11bHRpcGxlL2luZGV4LnRzP2QzZmMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvdXNlSW5maW5pdGVQYWdpbmF0aW9uL2luZGV4LnRzPzY2NDYiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvbGVnYWN5LXJlc291cmNlLXRyYW5zZm9ybS9pbmRleC50cz8yZGRiIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlci9waWNrLXJvdXRlLXBhcmFtcy50cz83ZDA5Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlci9wcmVwYXJlLXJvdXRlLXBhcmFtcy50cz85ZGUzIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3JvdXRlci9jb21wb3NlLXJvdXRlLnRzP2E2ZjMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvdXNlQWN0aXZlQXV0aFByb3ZpZGVyL2luZGV4LnRzPzA3NTUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvaGFuZGxlUGFnaW5hdGlvblBhcmFtcy9pbmRleC50cz85ZDg4Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3VzZU1lZGlhUXVlcnkvaW5kZXgudHM/YmQwYSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9zYWZlLXRyYW5zbGF0ZS9pbmRleC50cz8zNGRlIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2dlbmVyYXRlRG9jdW1lbnRUaXRsZS9pbmRleC50cz9iY2ZiIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9yZWZpbmUvdXNlTXV0YXRpb25Nb2RlLnRzPzY5MmUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL3JlZmluZS91c2VXYXJuQWJvdXRDaGFuZ2UvaW5kZXgudHM/ZDUzYiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29udGV4dHMvdW5zYXZlZFdhcm4vaW5kZXgudHN4Pzk2OWYiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL3JlZmluZS91c2VTeW5jV2l0aExvY2F0aW9uLnRzPzNiZWIiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL3JlZmluZS91c2VUaXRsZS50c3g/ZmQ5ZiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvcmVmaW5lL3VzZVJlZmluZUNvbnRleHQudHM/YjUyMSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy91c2VVc2VyRnJpZW5kbHlOYW1lL2luZGV4LnRzP2I3MjAiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvZmxhdHRlbi1vYmplY3Qta2V5cy9pbmRleC50cz9jOWNmIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3Byb3BlcnR5LXBhdGgtdG8tYXJyYXkvaW5kZXgudHM/YTM4MSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZGVmaW5pdGlvbnMvaGVscGVycy9kb3dubG9hZEluQnJvd3Nlci9pbmRleC50cz9jMWZiIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2RlZmVyLWV4ZWN1dGlvbi9pbmRleC50cz9lZDg4Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2FzeW5jLWRlYm91bmNlL2luZGV4LnRzPzNlMjkiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvcHJlcGFyZS1xdWVyeS1jb250ZXh0L2luZGV4LnRzPzdkODQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL3VwbG9hZC9maWxlMkJhc2U2NC9pbmRleC50cz9iMmY5Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy91c2VLZXlzL2luZGV4LnRzeD81MmJhIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9hdXRoL3VzZUdldElkZW50aXR5L2luZGV4LnRzPzU5MTMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2F1dGgvdXNlTG9nb3V0L2luZGV4LnRzP2NjZmMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2F1dGgvdXNlSW52YWxpZGF0ZUF1dGhTdG9yZS9pbmRleC50cz8yYTBhIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9hdXRoL3VzZUxvZ2luL2luZGV4LnRzPzM3MzQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2F1dGgvdXNlUmVnaXN0ZXIvaW5kZXgudHM/OWU5NyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvYXV0aC91c2VGb3Jnb3RQYXNzd29yZC9pbmRleC50cz9mZjYyIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9hdXRoL3VzZVVwZGF0ZVBhc3N3b3JkL2luZGV4LnRzP2E2ZjAiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2F1dGgvdXNlSXNBdXRoZW50aWNhdGVkL2luZGV4LnRzP2I1NjkiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2F1dGgvdXNlT25FcnJvci9pbmRleC50cz9lMzhhIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9hdXRoL3VzZUlzRXhpc3RBdXRoZW50aWNhdGlvbi9pbmRleC50cz84YWY3Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9kYXRhL3VzZUxpc3QudHM/ZjZkOCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvdXNlTG9hZGluZ092ZXJ0aW1lL2luZGV4LnRzPzA3NmUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlT25lLnRzPzg4MTciLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlTWFueS50cz80ODEzIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9kYXRhL3VzZVVwZGF0ZS50cz9iMjcyIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb250ZXh0cy91bmRvYWJsZVF1ZXVlL3R5cGVzLnRzP2EzYzIiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlQ3JlYXRlLnRzP2JlNzciLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlRGVsZXRlLnRzPzdjMWUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlQ3JlYXRlTWFueS50cz85MmFhIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9kYXRhL3VzZVVwZGF0ZU1hbnkudHM/MzZiYyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvZGF0YS91c2VEZWxldGVNYW55LnRzPzlkMDYiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlQXBpVXJsLnRzP2RlMTYiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlQ3VzdG9tLnRzPzgxYTAiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlQ3VzdG9tTXV0YXRpb24udHM/ZmVmZSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvZGF0YS91c2VEYXRhUHJvdmlkZXIudHN4Pzc3MTAiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbnRleHRzL2RhdGEvaW5kZXgudHN4PzVkNDIiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RhdGEvdXNlSW5maW5pdGVMaXN0LnRzP2E4YTUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2xpdmUvdXNlUmVzb3VyY2VTdWJzY3JpcHRpb24vaW5kZXgudHM/MDcyZSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29udGV4dHMvbGl2ZS9pbmRleC50c3g/MzUxMyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvaW52YWxpZGF0ZS9pbmRleC50c3g/MDJjYSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvcmVzb3VyY2UvdXNlUmVzb3VyY2UvaW5kZXgudHM/ZDA0OSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29udGV4dHMvcmVzb3VyY2UvaW5kZXgudHN4PzExZGMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2RlZXBNZW1vL2luZGV4LnRzeD9hZDkwIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9tZW1vaXplZC9pbmRleC50c3g/ODA3NSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29udGV4dHMvcm91dGVyL3BpY2tlci9pbmRleC50c3g/MjZlOCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3Mvcm91dGVyL3VzZS1wYXJzZWQvaW5kZXgudHN4P2E3YjIiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbnRleHRzL3JvdXRlci9pbmRleC50c3g/NWU1ZiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3Mvcm91dGVyL3VzZS1wYXJzZS9pbmRleC50c3g/ZDJlNyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvcmVzb3VyY2UvdXNlUmVzb3VyY2VXaXRoUm91dGUvaW5kZXgudHM/NjE3YSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvbGl2ZS91c2VMaXZlTW9kZS9pbmRleC50cz85YjkwIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9saXZlL3VzZVN1YnNjcmlwdGlvbi9pbmRleC50cz83ZmFkIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9saXZlL3VzZVB1Ymxpc2gvaW5kZXgudHM/OTZlNiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3Mvbm90aWZpY2F0aW9uL3VzZUNhbmNlbE5vdGlmaWNhdGlvbi9pbmRleC50c3g/OGViZSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29udGV4dHMvdW5kb2FibGVRdWV1ZS9pbmRleC50c3g/MGQyOSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3Mvbm90aWZpY2F0aW9uL3VzZU5vdGlmaWNhdGlvbi9pbmRleC50cz82MDNmIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb250ZXh0cy9ub3RpZmljYXRpb24vaW5kZXgudHN4P2M4MWYiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL25vdGlmaWNhdGlvbi91c2VIYW5kbGVOb3RpZmljYXRpb24vaW5kZXgudHM/YjAyZCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvaTE4bi91c2VTZXRMb2NhbGUudHM/NzVjNCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29udGV4dHMvaTE4bi9pbmRleC50c3g/YmZlNyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvaTE4bi91c2VUcmFuc2xhdGUudHM/YWM2NCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvaTE4bi91c2VHZXRMb2NhbGUudHM/OThhNiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvaTE4bi91c2VUcmFuc2xhdGlvbi50c3g/Y2UyZSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvZXhwb3J0L2luZGV4LnRzPzM1MzQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2Zvcm0vaW5kZXgudHM/OTJlMyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvcmVkaXJlY3Rpb24vaW5kZXgudHM/MTdkYiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3Mvcm91dGVyL3VzZS1iYWNrL2luZGV4LnRzeD8wZmIwIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9yb3V0ZXIvdXNlLWdvL2luZGV4LnRzeD9mZTU1Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9yb3V0ZXIvdXNlLWdldC10by1wYXRoL2luZGV4LnRzPzRhMTgiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL25hdmlnYXRpb24vaW5kZXgudHM/N2I1NSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3Mvc2hvdy9pbmRleC50cz8wZDE3Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9pbXBvcnQvaW5kZXgudHN4PzBkYmEiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL21vZGFsL3VzZU1vZGFsL2luZGV4LnRzeD9hNWUxIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9yb3V0ZXIvdXNlLXRvLXBhdGgvaW5kZXgudHM/ZDZkNCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29tcG9uZW50cy9saW5rL2luZGV4LnRzeD80MGY3Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9yb3V0ZXIvdXNlLWxpbmsvaW5kZXgudHN4PzVjZGQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2xlZ2FjeS1yb3V0ZXIvdXNlUm91dGVyQ29udGV4dC50cz9jNmRlIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb250ZXh0cy9yb3V0ZXIvbGVnYWN5L2luZGV4LnRzeD9kYmQyIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9hY2Nlc3NDb250cm9sL3VzZUNhbi9pbmRleC50cz8xMjEyIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb250ZXh0cy9hY2Nlc3NDb250cm9sL2luZGV4LnRzeD83YjFlIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL3Nhbml0aXplLXJlc291cmNlL2luZGV4LnRzP2EyNWQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2FjY2Vzc0NvbnRyb2wvdXNlQ2FuV2l0aG91dENhY2hlLnRzP2I1ZTciLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL3VzZVNlbGVjdC9pbmRleC50cz80NmY4Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy91c2VUYWJsZS9pbmRleC50cz80NjRmIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9hdWRpdExvZy91c2VMb2cvaW5kZXgudHM/MGQyMyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29udGV4dHMvYXVkaXRMb2cvaW5kZXgudHN4PzI2NzMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2F1ZGl0TG9nL3VzZUxvZ0xpc3QvaW5kZXgudHM/ZmJkMSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvYnJlYWRjcnVtYi9pbmRleC50cz83ZmQ0Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9tZW51L3VzZU1lbnUudHN4P2IyYTQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvbWVudS9jcmVhdGUtcmVzb3VyY2Uta2V5LnRzP2U0OTAiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2RlZmluaXRpb25zL2hlbHBlcnMvbWVudS9jcmVhdGUtdHJlZS50cz8xNGNkIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb250ZXh0cy9tZXRhQ29udGV4dC9pbmRleC50c3g/YzUxZiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvdXNlTWV0YS9pbmRleC50cz9kNTQ3Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy91c2UtcmVmaW5lLW9wdGlvbnMvaW5kZXgudHN4PzVhZDMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL3VzZS1yZXNvdXJjZS1wYXJhbXMvaW5kZXgudHM/MjE3MSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvdXNlLXJlc291cmNlLXBhcmFtcy91c2UtaWQvaW5kZXgudHN4P2UwMjEiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL3VzZS1yZXNvdXJjZS1wYXJhbXMvdXNlLWFjdGlvbi9pbmRleC50c3g/MDE3ZSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvYnV0dG9uL2FjdGlvbmFibGUtYnV0dG9uL2luZGV4LnRzeD9iY2JmIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9idXR0b24vbmF2aWdhdGlvbi1idXR0b24vaW5kZXgudHN4P2Y2ZTYiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2J1dHRvbi9idXR0b24tY2FuLWFjY2Vzcy9pbmRleC50c3g/ZTk5OCIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvYnV0dG9uL2RlbGV0ZS1idXR0b24vaW5kZXgudHN4Pzc4OTQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2hvb2tzL2J1dHRvbi9yZWZyZXNoLWJ1dHRvbi9pbmRleC50c3g/NGFkOSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvYnV0dG9uL2luZGV4LnRzeD8yZDA5Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3BhZ2VzL2xvZ2luL2luZGV4LnRzeD9hOTdmIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3BhZ2VzL2F1dGgvaW5kZXgudHN4P2I2NzUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbXBvbmVudHMvcGFnZXMvYXV0aC9jb21wb25lbnRzL2xvZ2luL2luZGV4LnRzeD8xZTkxIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3BhZ2VzL2F1dGgvY29tcG9uZW50cy9yZWdpc3Rlci9pbmRleC50c3g/NjgzYSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29tcG9uZW50cy9wYWdlcy9hdXRoL2NvbXBvbmVudHMvZm9yZ290UGFzc3dvcmQvaW5kZXgudHN4PzA0MGUiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbXBvbmVudHMvcGFnZXMvYXV0aC9jb21wb25lbnRzL3VwZGF0ZVBhc3N3b3JkL2luZGV4LnRzeD9hNTdkIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3BhZ2VzL3JlYWR5L2luZGV4LnRzeD9kNDM4Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3BhZ2VzL3dlbGNvbWUvaW5kZXgudHN4PzNlOTMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbXBvbmVudHMvcGFnZXMvY29uZmlnLXN1Y2Nlc3MvaW5kZXgudHN4PzNiNDgiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbXBvbmVudHMvcGFnZXMvY29uZmlnLWVycm9yL2luZGV4LnRzeD8xODgxIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lcnMvcmVmaW5lL2luZGV4LnRzeD9kMTZhIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3RlbGVtZXRyeS9pbmRleC50c3g/ZDZkMiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvaG9va3MvdXNlVGVsZW1ldHJ5RGF0YS9pbmRleC50cz9mNzU3Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9kZWZpbml0aW9ucy9oZWxwZXJzL2NoZWNrLXJvdXRlci1wcm9wLW1pc3VzZS9pbmRleC50cz9kYWVkIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9ob29rcy9yb3V0ZXIvdXNlLXJvdXRlci1taXN1c2Utd2FybmluZy9pbmRleC50cz81ZWU2Iiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3VuZG9hYmxlUXVldWUvaW5kZXgudHN4PzdhZTQiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbXBvbmVudHMvbGF5b3V0V3JhcHBlci9pbmRleC50c3g/MTNjYiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29tcG9uZW50cy9hdXRoZW50aWNhdGVkL2luZGV4LnRzeD84YTFjIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL3JvdXRlQ2hhbmdlSGFuZGxlci9pbmRleC50c3g/NzM4MSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29tcG9uZW50cy9jYW5BY2Nlc3MvaW5kZXgudHN4P2Y1NGYiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbXBvbmVudHMvZ2gtYmFubmVyL2luZGV4LnRzeD81N2UwIiwid2VicGFjazovL2NsaWVudEpNLy4uL3NyYy9jb21wb25lbnRzL2doLWJhbm5lci9zdHlsZXMudHM/ZDMzYSIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvY29tcG9uZW50cy9hdXRvU2F2ZUluZGljYXRvci9pbmRleC50c3g/MzRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge1xuICB1c2VOYXZpZ2F0aW9uLFxuICB1c2VUcmFuc2xhdGUsXG4gIHVzZVJlc291cmNlLFxuICB1c2VHbyxcbiAgdXNlUm91dGVyVHlwZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG4vKipcbiAqIFdoZW4gdGhlIGFwcCBpcyBuYXZpZ2F0ZWQgdG8gYSBub24tZXhpc3RlbnQgcm91dGUsIHJlZmluZSBzaG93cyBhIGRlZmF1bHQgZXJyb3IgcGFnZS5cbiAqIEEgY3VzdG9tIGVycm9yIGNvbXBvbmVudCBjYW4gYmUgdXNlZCBmb3IgdGhpcyBlcnJvciBwYWdlLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL3BhY2thZ2VzL2RvY3VtZW50YXRpb24vcm91dGVycy99IGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBjb25zdCBFcnJvckNvbXBvbmVudDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFtlcnJvck1lc3NhZ2UsIHNldEVycm9yTWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuICBjb25zdCB7IHB1c2ggfSA9IHVzZU5hdmlnYXRpb24oKTtcbiAgY29uc3QgZ28gPSB1c2VHbygpO1xuICBjb25zdCByb3V0ZXJUeXBlID0gdXNlUm91dGVyVHlwZSgpO1xuXG4gIGNvbnN0IHsgcmVzb3VyY2UsIGFjdGlvbiB9ID0gdXNlUmVzb3VyY2UoKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZXNvdXJjZSAmJiBhY3Rpb24pIHtcbiAgICAgIHNldEVycm9yTWVzc2FnZShcbiAgICAgICAgdHJhbnNsYXRlKFxuICAgICAgICAgIFwicGFnZXMuZXJyb3IuaW5mb1wiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlLm5hbWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBgWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBhZGQgdGhlIFwiJHthY3Rpb259XCIgY29tcG9uZW50IHRvIFwiJHtyZXNvdXJjZS5uYW1lfVwiIHJlc291cmNlLmAsXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH1cbiAgfSwgW3Jlc291cmNlLCBhY3Rpb25dKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aDE+XG4gICAgICAgIHt0cmFuc2xhdGUoXG4gICAgICAgICAgXCJwYWdlcy5lcnJvci40MDRcIixcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgXCJTb3JyeSwgdGhlIHBhZ2UgeW91IHZpc2l0ZWQgZG9lcyBub3QgZXhpc3QuXCIsXG4gICAgICAgICl9XG4gICAgICA8L2gxPlxuICAgICAge2Vycm9yTWVzc2FnZSAmJiA8cD57ZXJyb3JNZXNzYWdlfTwvcD59XG4gICAgICA8YnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBpZiAocm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIikge1xuICAgICAgICAgICAgcHVzaChcIi9cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdvKHsgdG86IFwiL1wiIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3RyYW5zbGF0ZShcInBhZ2VzLmVycm9yLmJhY2tIb21lXCIsIHVuZGVmaW5lZCwgXCJCYWNrIEhvbWVcIil9XG4gICAgICA8L2J1dHRvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBnZXRYUmF5IH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtaW50ZXJuYWxcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlUXVlcnlPcHRpb25zLFxuICB0eXBlIFVzZVF1ZXJ5UmVzdWx0LFxuICB1c2VRdWVyeSxcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQgeyB1c2VBdXRoQmluZGluZ3NDb250ZXh0LCB1c2VMZWdhY3lBdXRoQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvYXV0aFwiO1xuaW1wb3J0IHsgdXNlS2V5cyB9IGZyb20gXCJAaG9va3MvdXNlS2V5c1wiO1xuXG5pbXBvcnQgdHlwZSB7IFBlcm1pc3Npb25SZXNwb25zZSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9hdXRoL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFVzZVBlcm1pc3Npb25zTGVnYWN5UHJvcHM8XG4gIFREYXRhID0gYW55LFxuICBUUGFyYW1zIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4+ID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IHRydWU7XG4gIG9wdGlvbnM/OiBVc2VRdWVyeU9wdGlvbnM8VERhdGE+O1xuICBwYXJhbXM/OiBUUGFyYW1zO1xufTtcblxuZXhwb3J0IHR5cGUgVXNlUGVybWlzc2lvbnNQcm9wczxcbiAgVERhdGEgPSBQZXJtaXNzaW9uUmVzcG9uc2UsXG4gIFRQYXJhbXMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55Pixcbj4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZT86IGZhbHNlO1xuICBvcHRpb25zPzogVXNlUXVlcnlPcHRpb25zPFREYXRhPjtcbiAgcGFyYW1zPzogVFBhcmFtcztcbn07XG5cbmV4cG9ydCB0eXBlIFVzZVBlcm1pc3Npb25zQ29tYmluZWRQcm9wczxcbiAgVERhdGEgPSBhbnksXG4gIFRQYXJhbXMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55Pixcbj4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogYm9vbGVhbjtcbiAgb3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxURGF0YT4gfCBVc2VRdWVyeU9wdGlvbnM8UGVybWlzc2lvblJlc3BvbnNlPjtcbiAgcGFyYW1zPzogVFBhcmFtcztcbn07XG5cbmV4cG9ydCB0eXBlIFVzZVBlcm1pc3Npb25zTGVnYWN5UmV0dXJuVHlwZTxURGF0YSA9IGFueT4gPSBVc2VRdWVyeVJlc3VsdDxcbiAgVERhdGEsXG4gIHVua25vd25cbj47XG5cbmV4cG9ydCB0eXBlIFVzZVBlcm1pc3Npb25zUmV0dXJuVHlwZTxURGF0YSA9IFBlcm1pc3Npb25SZXNwb25zZT4gPVxuICBVc2VRdWVyeVJlc3VsdDxURGF0YSwgdW5rbm93bj47XG5cbmV4cG9ydCB0eXBlIFVzZVBlcm1pc3Npb25zQ29tYmluZWRSZXR1cm5UeXBlPFREYXRhID0gYW55PiA9XG4gIHwgVXNlUXVlcnlSZXN1bHQ8VERhdGEsIHVua25vd24+XG4gIHwgVXNlUXVlcnlSZXN1bHQ8UGVybWlzc2lvblJlc3BvbnNlLCB1bmtub3duPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBlcm1pc3Npb25zPFxuICBURGF0YSA9IGFueSxcbiAgVFBhcmFtcyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuPihcbiAgcHJvcHM6IFVzZVBlcm1pc3Npb25zTGVnYWN5UHJvcHM8VERhdGEsIFRQYXJhbXM+LFxuKTogVXNlUGVybWlzc2lvbnNMZWdhY3lSZXR1cm5UeXBlPFREYXRhPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBlcm1pc3Npb25zPFxuICBURGF0YSA9IFBlcm1pc3Npb25SZXNwb25zZSxcbiAgVFBhcmFtcyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuPihwcm9wcz86IFVzZVBlcm1pc3Npb25zUHJvcHM8VERhdGEsIFRQYXJhbXM+KTogVXNlUGVybWlzc2lvbnNSZXR1cm5UeXBlPFREYXRhPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBlcm1pc3Npb25zPFxuICBURGF0YSA9IGFueSxcbiAgVFBhcmFtcyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuPihcbiAgcHJvcHM/OiBVc2VQZXJtaXNzaW9uc0NvbWJpbmVkUHJvcHM8VERhdGEsIFRQYXJhbXM+LFxuKTogVXNlUGVybWlzc2lvbnNDb21iaW5lZFJldHVyblR5cGU8VERhdGE+O1xuXG4vKipcbiAqIGB1c2VQZXJtaXNzaW9uc2AgY2FsbHMgdGhlIGBnZXRQZXJtaXNzaW9uc2AgbWV0aG9kIGZyb20gdGhlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL3Byb3ZpZGVycy9hdXRoLXByb3ZpZGVyIGBhdXRoUHJvdmlkZXJgfSB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXV0aC91c2VQZXJtaXNzaW9uc30gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgb2YgdGhlIHF1ZXJ5XG4gKlxuICogQHR5cGVQYXJhbSBUUGFyYW1zIC0gUGFyYW1zIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBgZ2V0UGVybWlzc2lvbnNgIG1ldGhvZCBvZiB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvY29yZS9wcm92aWRlcnMvYXV0aC1wcm92aWRlciBgYXV0aFByb3ZpZGVyYH0uXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUGVybWlzc2lvbnM8XG4gIFREYXRhID0gYW55LFxuICBUUGFyYW1zIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4+KHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID0gZmFsc2UsXG4gIG9wdGlvbnMsXG4gIHBhcmFtcyxcbn06XG4gIHwgVXNlUGVybWlzc2lvbnNQcm9wczxURGF0YSwgVFBhcmFtcz5cbiAgfCBVc2VQZXJtaXNzaW9uc0xlZ2FjeVByb3BzPFREYXRhLCBUUGFyYW1zPiA9IHt9KTpcbiAgfCBVc2VQZXJtaXNzaW9uc1JldHVyblR5cGVcbiAgfCBVc2VQZXJtaXNzaW9uc0xlZ2FjeVJldHVyblR5cGU8VERhdGE+IHtcbiAgY29uc3QgeyBnZXRQZXJtaXNzaW9uczogbGVnYWN5R2V0UGVybWlzc2lvbiB9ID0gdXNlTGVnYWN5QXV0aENvbnRleHQoKTtcbiAgY29uc3QgeyBnZXRQZXJtaXNzaW9ucyB9ID0gdXNlQXV0aEJpbmRpbmdzQ29udGV4dCgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBxdWVyeVJlc3BvbnNlID0gdXNlUXVlcnk8VERhdGE+KHtcbiAgICBxdWVyeUtleToga2V5cygpLmF1dGgoKS5hY3Rpb24oXCJwZXJtaXNzaW9uc1wiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgLy8gRW5hYmxlZCBjaGVjayBmb3IgYGdldFBlcm1pc3Npb25zYCBpcyBlbm91Z2ggdG8gYmUgc3VyZSB0aGF0IGl0J3MgZGVmaW5lZCBpbiB0aGUgcXVlcnkgZnVuY3Rpb24gYnV0IFRTIGlzIG5vdCBzbWFydCBlbm91Z2ggdG8ga25vdyB0aGF0LlxuICAgIHF1ZXJ5Rm46IChnZXRQZXJtaXNzaW9uc1xuICAgICAgPyAoKSA9PiBnZXRQZXJtaXNzaW9ucyhwYXJhbXMpXG4gICAgICA6ICgpID0+IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpKSBhcyAoXG4gICAgICBwYXJhbXM/OiB1bmtub3duLFxuICAgICkgPT4gUHJvbWlzZTxURGF0YT4sXG4gICAgZW5hYmxlZDogIXYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSAmJiAhIWdldFBlcm1pc3Npb25zLFxuICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPyB7fSA6IG9wdGlvbnMpLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPyB7fSA6IG9wdGlvbnM/Lm1ldGEpLFxuICAgICAgLi4uZ2V0WFJheShcInVzZVBlcm1pc3Npb25zXCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGxlZ2FjeVF1ZXJ5UmVzcG9uc2UgPSB1c2VRdWVyeTxURGF0YT4oe1xuICAgIHF1ZXJ5S2V5OiBbXG4gICAgICAuLi5rZXlzKCkuYXV0aCgpLmFjdGlvbihcInBlcm1pc3Npb25zXCIpLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgIFwidjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlXCIsXG4gICAgXSxcbiAgICAvLyBFbmFibGVkIGNoZWNrIGZvciBgZ2V0UGVybWlzc2lvbnNgIGlzIGVub3VnaCB0byBiZSBzdXJlIHRoYXQgaXQncyBkZWZpbmVkIGluIHRoZSBxdWVyeSBmdW5jdGlvbiBidXQgVFMgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBrbm93IHRoYXQuXG4gICAgcXVlcnlGbjogKGxlZ2FjeUdldFBlcm1pc3Npb25cbiAgICAgID8gKCkgPT4gbGVnYWN5R2V0UGVybWlzc2lvbihwYXJhbXMpXG4gICAgICA6ICgpID0+IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpKSBhcyAoXG4gICAgICBwYXJhbXM/OiB1bmtub3duLFxuICAgICkgPT4gUHJvbWlzZTxURGF0YT4sXG4gICAgZW5hYmxlZDogdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlICYmICEhbGVnYWN5R2V0UGVybWlzc2lvbixcbiAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gb3B0aW9ucyA6IHt9KSxcbiAgICBtZXRhOiB7XG4gICAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gb3B0aW9ucz8ubWV0YSA6IHt9KSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VQZXJtaXNzaW9uc1wiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gbGVnYWN5UXVlcnlSZXNwb25zZSA6IHF1ZXJ5UmVzcG9uc2U7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdHlwZSBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uIH0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7IElBdXRoQ29udGV4dCwgSUxlZ2FjeUF1dGhDb250ZXh0IH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBgTGVnYWN5QXV0aENvbnRleHRgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgdXNlIGBBdXRoQmluZGluZ3NDb250ZXh0YCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGBMZWdhY3lBdXRoQ29udGV4dGAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjb25zdCBMZWdhY3lBdXRoQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SUxlZ2FjeUF1dGhDb250ZXh0Pih7fSk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgYExlZ2FjeUF1dGhDb250ZXh0UHJvdmlkZXJgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgdXNlIGBBdXRoQmluZGluZ3NDb250ZXh0UHJvdmlkZXJgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYExlZ2FjeUF1dGhDb250ZXh0UHJvdmlkZXJgIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY29uc3QgTGVnYWN5QXV0aENvbnRleHRQcm92aWRlcjogUmVhY3QuRkM8XG4gIFByb3BzV2l0aENoaWxkcmVuPElMZWdhY3lBdXRoQ29udGV4dD5cbj4gPSAoeyBjaGlsZHJlbiwgaXNQcm92aWRlZCwgLi4uYXV0aE9wZXJhdGlvbnMgfSkgPT4ge1xuICBjb25zdCB7IHJlcGxhY2UgfSA9IHVzZU5hdmlnYXRpb24oKTtcblxuICBjb25zdCBsb2dpbkZ1bmMgPSBhc3luYyAocGFyYW1zOiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aE9wZXJhdGlvbnMubG9naW4/LihwYXJhbXMpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCByZWdpc3RlckZ1bmMgPSBhc3luYyAocGFyYW1zOiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aE9wZXJhdGlvbnMucmVnaXN0ZXI/LihwYXJhbXMpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBsb2dvdXRGdW5jID0gYXN5bmMgKHBhcmFtczogYW55KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlZGlyZWN0UGF0aCA9IGF3YWl0IGF1dGhPcGVyYXRpb25zLmxvZ291dD8uKHBhcmFtcyk7XG5cbiAgICAgIHJldHVybiByZWRpcmVjdFBhdGg7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGNoZWNrQXV0aEZ1bmMgPSBhc3luYyAocGFyYW1zOiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYXV0aE9wZXJhdGlvbnMuY2hlY2tBdXRoPy4ocGFyYW1zKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKChlcnJvciBhcyB7IHJlZGlyZWN0UGF0aD86IHN0cmluZyB9KT8ucmVkaXJlY3RQYXRoKSB7XG4gICAgICAgIHJlcGxhY2UoKGVycm9yIGFzIHsgcmVkaXJlY3RQYXRoOiBzdHJpbmcgfSkucmVkaXJlY3RQYXRoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8TGVnYWN5QXV0aENvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7XG4gICAgICAgIC4uLmF1dGhPcGVyYXRpb25zLFxuICAgICAgICBsb2dpbjogbG9naW5GdW5jLFxuICAgICAgICBsb2dvdXQ6IGxvZ291dEZ1bmMsXG4gICAgICAgIGNoZWNrQXV0aDogY2hlY2tBdXRoRnVuYyxcbiAgICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyRnVuYyxcbiAgICAgICAgaXNQcm92aWRlZCxcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTGVnYWN5QXV0aENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgQXV0aEJpbmRpbmdzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8UGFydGlhbDxJQXV0aENvbnRleHQ+PihcbiAge30sXG4pO1xuXG5leHBvcnQgY29uc3QgQXV0aEJpbmRpbmdzQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GQzxcbiAgUHJvcHNXaXRoQ2hpbGRyZW48SUF1dGhDb250ZXh0PlxuPiA9ICh7IGNoaWxkcmVuLCBpc1Byb3ZpZGVkLCAuLi5hdXRoQmluZGluZ3MgfSkgPT4ge1xuICBjb25zdCBoYW5kbGVMb2dpbiA9IGFzeW5jIChwYXJhbXM6IHVua25vd24pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aEJpbmRpbmdzLmxvZ2luPy4ocGFyYW1zKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIlVuaGFuZGxlZCBFcnJvciBpbiBsb2dpbjogcmVmaW5lIGFsd2F5cyBleHBlY3RzIGEgcmVzb2x2ZWQgcHJvbWlzZS5cIixcbiAgICAgICAgZXJyb3IsXG4gICAgICApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUmVnaXN0ZXIgPSBhc3luYyAocGFyYW1zOiB1bmtub3duKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF1dGhCaW5kaW5ncy5yZWdpc3Rlcj8uKHBhcmFtcyk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJVbmhhbmRsZWQgRXJyb3IgaW4gcmVnaXN0ZXI6IHJlZmluZSBhbHdheXMgZXhwZWN0cyBhIHJlc29sdmVkIHByb21pc2UuXCIsXG4gICAgICAgIGVycm9yLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUxvZ291dCA9IGFzeW5jIChwYXJhbXM6IHVua25vd24pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aEJpbmRpbmdzLmxvZ291dD8uKHBhcmFtcyk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJVbmhhbmRsZWQgRXJyb3IgaW4gbG9nb3V0OiByZWZpbmUgYWx3YXlzIGV4cGVjdHMgYSByZXNvbHZlZCBwcm9taXNlLlwiLFxuICAgICAgICBlcnJvcixcbiAgICAgICk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVDaGVjayA9IGFzeW5jIChwYXJhbXM6IHVua25vd24pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aEJpbmRpbmdzLmNoZWNrPy4ocGFyYW1zKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiVW5oYW5kbGVkIEVycm9yIGluIGNoZWNrOiByZWZpbmUgYWx3YXlzIGV4cGVjdHMgYSByZXNvbHZlZCBwcm9taXNlLlwiLFxuICAgICAgICBlcnJvcixcbiAgICAgICk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVGb3Jnb3RQYXNzd29yZCA9IGFzeW5jIChwYXJhbXM6IHVua25vd24pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aEJpbmRpbmdzLmZvcmdvdFBhc3N3b3JkPy4ocGFyYW1zKTtcblxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiVW5oYW5kbGVkIEVycm9yIGluIGZvcmdvdFBhc3N3b3JkOiByZWZpbmUgYWx3YXlzIGV4cGVjdHMgYSByZXNvbHZlZCBwcm9taXNlLlwiLFxuICAgICAgICBlcnJvcixcbiAgICAgICk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVVcGRhdGVQYXNzd29yZCA9IGFzeW5jIChwYXJhbXM6IHVua25vd24pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aEJpbmRpbmdzLnVwZGF0ZVBhc3N3b3JkPy4ocGFyYW1zKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBcIlVuaGFuZGxlZCBFcnJvciBpbiB1cGRhdGVQYXNzd29yZDogcmVmaW5lIGFsd2F5cyBleHBlY3RzIGEgcmVzb2x2ZWQgcHJvbWlzZS5cIixcbiAgICAgICAgZXJyb3IsXG4gICAgICApO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8QXV0aEJpbmRpbmdzQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgLi4uYXV0aEJpbmRpbmdzLFxuICAgICAgICBsb2dpbjogaGFuZGxlTG9naW4gYXMgSUF1dGhDb250ZXh0W1wibG9naW5cIl0sXG4gICAgICAgIGxvZ291dDogaGFuZGxlTG9nb3V0IGFzIElBdXRoQ29udGV4dFtcImxvZ291dFwiXSxcbiAgICAgICAgY2hlY2s6IGhhbmRsZUNoZWNrIGFzIElBdXRoQ29udGV4dFtcImNoZWNrXCJdLFxuICAgICAgICByZWdpc3RlcjogaGFuZGxlUmVnaXN0ZXIgYXMgSUF1dGhDb250ZXh0W1wicmVnaXN0ZXJcIl0sXG4gICAgICAgIGZvcmdvdFBhc3N3b3JkOiBoYW5kbGVGb3Jnb3RQYXNzd29yZCBhcyBJQXV0aENvbnRleHRbXCJmb3Jnb3RQYXNzd29yZFwiXSxcbiAgICAgICAgdXBkYXRlUGFzc3dvcmQ6IGhhbmRsZVVwZGF0ZVBhc3N3b3JkIGFzIElBdXRoQ29udGV4dFtcInVwZGF0ZVBhc3N3b3JkXCJdLFxuICAgICAgICBpc1Byb3ZpZGVkLFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9BdXRoQmluZGluZ3NDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBgdXNlTGVnYWN5QXV0aENvbnRleHRgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgdXNlIGB1c2VBdXRoQmluZGluZ3NDb250ZXh0YCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGB1c2VMZWdhY3lBdXRoQ29udGV4dGAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VMZWdhY3lBdXRoQ29udGV4dCA9ICgpID0+IHtcbiAgY29uc3QgY29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoTGVnYWN5QXV0aENvbnRleHQpO1xuXG4gIHJldHVybiBjb250ZXh0O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUF1dGhCaW5kaW5nc0NvbnRleHQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEF1dGhCaW5kaW5nc0NvbnRleHQpO1xuXG4gIHJldHVybiBjb250ZXh0O1xufTtcbiIsImltcG9ydCBkaWZmZXJlbmNlV2l0aCBmcm9tIFwibG9kYXNoLWVzL2RpZmZlcmVuY2VXaXRoLmpzXCI7XG5pbXBvcnQgdW5pb25XaXRoIGZyb20gXCJsb2Rhc2gtZXMvdW5pb25XaXRoLmpzXCI7XG5pbXBvcnQgcXMsIHsgdHlwZSBJU3RyaW5naWZ5T3B0aW9ucyB9IGZyb20gXCJxc1wiO1xuaW1wb3J0IHdhcm5PbmNlIGZyb20gXCJ3YXJuLW9uY2VcIjtcblxuaW1wb3J0IHsgcGlja05vdERlcHJlY2F0ZWQgfSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnNcIjtcblxuaW1wb3J0IHR5cGUge1xuICBDcnVkRmlsdGVyLFxuICBDcnVkT3BlcmF0b3JzLFxuICBDcnVkU29ydCxcbiAgU29ydE9yZGVyLFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgcGFyc2VUYWJsZVBhcmFtcyA9ICh1cmw6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGN1cnJlbnQsIHBhZ2VTaXplLCBzb3J0ZXIsIHNvcnRlcnMsIGZpbHRlcnMgfSA9IHFzLnBhcnNlKFxuICAgIHVybC5zdWJzdHJpbmcoMSksIC8vIHJlbW92ZSBmaXJzdCA/IGNoYXJhY3RlclxuICApO1xuXG4gIHJldHVybiB7XG4gICAgcGFyc2VkQ3VycmVudDogY3VycmVudCAmJiBOdW1iZXIoY3VycmVudCksXG4gICAgcGFyc2VkUGFnZVNpemU6IHBhZ2VTaXplICYmIE51bWJlcihwYWdlU2l6ZSksXG4gICAgcGFyc2VkU29ydGVyOiAocGlja05vdERlcHJlY2F0ZWQoc29ydGVycywgc29ydGVyKSBhcyBDcnVkU29ydFtdKSA/PyBbXSxcbiAgICBwYXJzZWRGaWx0ZXJzOiAoZmlsdGVycyBhcyBDcnVkRmlsdGVyW10pID8/IFtdLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlVGFibGVQYXJhbXNGcm9tUXVlcnkgPSAocGFyYW1zOiBhbnkpID0+IHtcbiAgY29uc3QgdXJsID0gcXMuc3RyaW5naWZ5KHBhcmFtcyk7XG4gIHJldHVybiBwYXJzZVRhYmxlUGFyYW1zKGAvJHt1cmx9YCk7XG59O1xuXG4vKipcbiAqIEBpbnRlcm5hbCBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc3RyaW5naWZ5IHRhYmxlIHBhcmFtcyBmcm9tIHRoZSB1c2VUYWJsZSBob29rLlxuICovXG5leHBvcnQgY29uc3Qgc3RyaW5naWZ5VGFibGVQYXJhbXMgPSAocGFyYW1zOiB7XG4gIHBhZ2luYXRpb24/OiB7IGN1cnJlbnQ/OiBudW1iZXI7IHBhZ2VTaXplPzogbnVtYmVyIH07XG4gIHNvcnRlcnM6IENydWRTb3J0W107XG4gIGZpbHRlcnM6IENydWRGaWx0ZXJbXTtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufSk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IG9wdGlvbnM6IElTdHJpbmdpZnlPcHRpb25zID0ge1xuICAgIHNraXBOdWxsczogdHJ1ZSxcbiAgICBhcnJheUZvcm1hdDogXCJpbmRpY2VzXCIsXG4gICAgZW5jb2RlOiBmYWxzZSxcbiAgfTtcbiAgY29uc3QgeyBwYWdpbmF0aW9uLCBzb3J0ZXIsIHNvcnRlcnMsIGZpbHRlcnMsIC4uLnJlc3QgfSA9IHBhcmFtcztcblxuICBjb25zdCBxdWVyeVN0cmluZyA9IHFzLnN0cmluZ2lmeShcbiAgICB7XG4gICAgICAuLi5yZXN0LFxuICAgICAgLi4uKHBhZ2luYXRpb24gPyBwYWdpbmF0aW9uIDoge30pLFxuICAgICAgc29ydGVyczogcGlja05vdERlcHJlY2F0ZWQoc29ydGVycywgc29ydGVyKSxcbiAgICAgIGZpbHRlcnMsXG4gICAgfSxcbiAgICBvcHRpb25zLFxuICApO1xuXG4gIHJldHVybiBxdWVyeVN0cmluZztcbn07XG5cbmV4cG9ydCBjb25zdCBjb21wYXJlRmlsdGVycyA9IChcbiAgbGVmdDogQ3J1ZEZpbHRlcixcbiAgcmlnaHQ6IENydWRGaWx0ZXIsXG4pOiBib29sZWFuID0+IHtcbiAgaWYgKFxuICAgIGxlZnQub3BlcmF0b3IgIT09IFwiYW5kXCIgJiZcbiAgICBsZWZ0Lm9wZXJhdG9yICE9PSBcIm9yXCIgJiZcbiAgICByaWdodC5vcGVyYXRvciAhPT0gXCJhbmRcIiAmJlxuICAgIHJpZ2h0Lm9wZXJhdG9yICE9PSBcIm9yXCJcbiAgKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIChcImZpZWxkXCIgaW4gbGVmdCA/IGxlZnQuZmllbGQgOiB1bmRlZmluZWQpID09PVxuICAgICAgICAoXCJmaWVsZFwiIGluIHJpZ2h0ID8gcmlnaHQuZmllbGQgOiB1bmRlZmluZWQpICYmXG4gICAgICBsZWZ0Lm9wZXJhdG9yID09PSByaWdodC5vcGVyYXRvclxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIChcImtleVwiIGluIGxlZnQgPyBsZWZ0LmtleSA6IHVuZGVmaW5lZCkgPT09XG4gICAgICAoXCJrZXlcIiBpbiByaWdodCA/IHJpZ2h0LmtleSA6IHVuZGVmaW5lZCkgJiZcbiAgICBsZWZ0Lm9wZXJhdG9yID09PSByaWdodC5vcGVyYXRvclxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVTb3J0ZXJzID0gKGxlZnQ6IENydWRTb3J0LCByaWdodDogQ3J1ZFNvcnQpOiBib29sZWFuID0+XG4gIGxlZnQuZmllbGQgPT09IHJpZ2h0LmZpZWxkO1xuLy8gS2VlcCBvbmx5IG9uZSBDcnVkRmlsdGVyIHBlciB0eXBlIGFjY29yZGluZyB0byBjb21wYXJlRmlsdGVyc1xuLy8gSXRlbXMgaW4gdGhlIGFycmF5IHRoYXQgaXMgcGFzc2VkIGZpcnN0IHRvIHVuaW9uV2l0aCBoYXZlIGhpZ2hlciBwcmlvcml0eVxuLy8gQ3J1ZEZpbHRlciBpdGVtcyB3aXRoIHVuZGVmaW5lZCB2YWx1ZXMgYXJlIG5lY2Vzc2FyeSB0byBzaWduaWZ5IG5vIGZpbHRlclxuLy8gQWZ0ZXIgdW5pb24sIGRvbid0IGtlZXAgQ3J1ZEZpbHRlciBpdGVtcyB3aXRoIHVuZGVmaW5lZCB2YWx1ZSBpbiB0aGUgcmVzdWx0XG4vLyBJdGVtcyBpbiB0aGUgYXJyYXlzIHdpdGggaGlnaGVyIHByaW9yaXR5IGFyZSBwdXQgYXQgdGhlIGVuZC5cbmV4cG9ydCBjb25zdCB1bmlvbkZpbHRlcnMgPSAoXG4gIHBlcm1hbmVudEZpbHRlcjogQ3J1ZEZpbHRlcltdLFxuICBuZXdGaWx0ZXJzOiBDcnVkRmlsdGVyW10sXG4gIHByZXZGaWx0ZXJzOiBDcnVkRmlsdGVyW10gPSBbXSxcbik6IENydWRGaWx0ZXJbXSA9PiB7XG4gIGNvbnN0IGlzS2V5UmVxdWlyZWQgPSBuZXdGaWx0ZXJzLmZpbHRlcihcbiAgICAoZikgPT4gKGYub3BlcmF0b3IgPT09IFwib3JcIiB8fCBmLm9wZXJhdG9yID09PSBcImFuZFwiKSAmJiAhZi5rZXksXG4gICk7XG5cbiAgaWYgKGlzS2V5UmVxdWlyZWQubGVuZ3RoID4gMSkge1xuICAgIHdhcm5PbmNlKFxuICAgICAgdHJ1ZSxcbiAgICAgIFwiW2NvbmRpdGlvbmFsRmlsdGVyc106IFlvdSBoYXZlIGNyZWF0ZWQgbXVsdGlwbGUgQ29uZGl0aW9uYWwgRmlsdGVycyBhdCB0aGUgdG9wIGxldmVsLCB0aGlzIHJlcXVpcmVzIHRoZSBrZXkgcGFyYW1ldGVyLiBcXG5Gb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FkdmFuY2VkLXR1dG9yaWFscy9kYXRhLXByb3ZpZGVyL2hhbmRsaW5nLWZpbHRlcnMvI3RvcC1sZXZlbC1tdWx0aXBsZS1jb25kaXRpb25hbC1maWx0ZXJzLXVzYWdlXCIsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB1bmlvbldpdGgoXG4gICAgcGVybWFuZW50RmlsdGVyLFxuICAgIG5ld0ZpbHRlcnMsXG4gICAgcHJldkZpbHRlcnMsXG4gICAgY29tcGFyZUZpbHRlcnMsXG4gICkuZmlsdGVyKFxuICAgIChjcnVkRmlsdGVyKSA9PlxuICAgICAgY3J1ZEZpbHRlci52YWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBjcnVkRmlsdGVyLnZhbHVlICE9PSBudWxsICYmXG4gICAgICAoY3J1ZEZpbHRlci5vcGVyYXRvciAhPT0gXCJvclwiIHx8XG4gICAgICAgIChjcnVkRmlsdGVyLm9wZXJhdG9yID09PSBcIm9yXCIgJiYgY3J1ZEZpbHRlci52YWx1ZS5sZW5ndGggIT09IDApKSAmJlxuICAgICAgKGNydWRGaWx0ZXIub3BlcmF0b3IgIT09IFwiYW5kXCIgfHxcbiAgICAgICAgKGNydWRGaWx0ZXIub3BlcmF0b3IgPT09IFwiYW5kXCIgJiYgY3J1ZEZpbHRlci52YWx1ZS5sZW5ndGggIT09IDApKSxcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB1bmlvblNvcnRlcnMgPSAoXG4gIHBlcm1hbmVudFNvcnRlcjogQ3J1ZFNvcnRbXSxcbiAgbmV3U29ydGVyczogQ3J1ZFNvcnRbXSxcbik6IENydWRTb3J0W10gPT5cbiAgdW5pb25XaXRoKHBlcm1hbmVudFNvcnRlciwgbmV3U29ydGVycywgY29tcGFyZVNvcnRlcnMpLmZpbHRlcihcbiAgICAoY3J1ZFNvcnRlcikgPT4gY3J1ZFNvcnRlci5vcmRlciAhPT0gdW5kZWZpbmVkICYmIGNydWRTb3J0ZXIub3JkZXIgIT09IG51bGwsXG4gICk7XG4vLyBQcmlvcml0aXplIGZpbHRlcnMgaW4gdGhlIHBlcm1hbmVudEZpbHRlciBhbmQgcHV0IGl0IGF0IHRoZSBlbmQgb2YgcmVzdWx0IGFycmF5XG5leHBvcnQgY29uc3Qgc2V0SW5pdGlhbEZpbHRlcnMgPSAoXG4gIHBlcm1hbmVudEZpbHRlcjogQ3J1ZEZpbHRlcltdLFxuICBkZWZhdWx0RmlsdGVyOiBDcnVkRmlsdGVyW10sXG4pOiBDcnVkRmlsdGVyW10gPT4gW1xuICAuLi5kaWZmZXJlbmNlV2l0aChkZWZhdWx0RmlsdGVyLCBwZXJtYW5lbnRGaWx0ZXIsIGNvbXBhcmVGaWx0ZXJzKSxcbiAgLi4ucGVybWFuZW50RmlsdGVyLFxuXTtcblxuZXhwb3J0IGNvbnN0IHNldEluaXRpYWxTb3J0ZXJzID0gKFxuICBwZXJtYW5lbnRTb3J0ZXI6IENydWRTb3J0W10sXG4gIGRlZmF1bHRTb3J0ZXI6IENydWRTb3J0W10sXG4pOiBDcnVkU29ydFtdID0+IFtcbiAgLi4uZGlmZmVyZW5jZVdpdGgoZGVmYXVsdFNvcnRlciwgcGVybWFuZW50U29ydGVyLCBjb21wYXJlU29ydGVycyksXG4gIC4uLnBlcm1hbmVudFNvcnRlcixcbl07XG5cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0U29ydE9yZGVyID0gKFxuICBjb2x1bW5OYW1lOiBzdHJpbmcsXG4gIHNvcnRlcj86IENydWRTb3J0W10sXG4pOiBTb3J0T3JkZXIgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoIXNvcnRlcikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBzb3J0SXRlbSA9IHNvcnRlci5maW5kKChpdGVtKSA9PiBpdGVtLmZpZWxkID09PSBjb2x1bW5OYW1lKTtcblxuICBpZiAoc29ydEl0ZW0pIHtcbiAgICByZXR1cm4gc29ydEl0ZW0ub3JkZXIgYXMgU29ydE9yZGVyO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0RmlsdGVyID0gKFxuICBjb2x1bW5OYW1lOiBzdHJpbmcsXG4gIGZpbHRlcnM/OiBDcnVkRmlsdGVyW10sXG4gIG9wZXJhdG9yVHlwZTogQ3J1ZE9wZXJhdG9ycyA9IFwiZXFcIixcbik6IENydWRGaWx0ZXJbXCJ2YWx1ZVwiXSB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IGZpbHRlciA9IGZpbHRlcnM/LmZpbmQoKGZpbHRlcikgPT4ge1xuICAgIGlmIChcbiAgICAgIGZpbHRlci5vcGVyYXRvciAhPT0gXCJvclwiICYmXG4gICAgICBmaWx0ZXIub3BlcmF0b3IgIT09IFwiYW5kXCIgJiZcbiAgICAgIFwiZmllbGRcIiBpbiBmaWx0ZXJcbiAgICApIHtcbiAgICAgIGNvbnN0IHsgb3BlcmF0b3IsIGZpZWxkIH0gPSBmaWx0ZXI7XG4gICAgICByZXR1cm4gZmllbGQgPT09IGNvbHVtbk5hbWUgJiYgb3BlcmF0b3IgPT09IG9wZXJhdG9yVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgaWYgKGZpbHRlcikge1xuICAgIHJldHVybiBmaWx0ZXIudmFsdWUgfHwgW107XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiIsImV4cG9ydCBjb25zdCB1c2VyRnJpZW5kbHlTZWNvbmQgPSAobWlsaXNlY29uZHM6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiBtaWxpc2Vjb25kcyAvIDEwMDA7IC8vY29udmVydCB0byBzZWNvbmRzXG59O1xuIiwiaW1wb3J0IGZyb21QYWlycyBmcm9tIFwibG9kYXNoLWVzL2Zyb21QYWlycy5qc1wiO1xuaW1wb3J0IHppcCBmcm9tIFwibG9kYXNoLWVzL3ppcC5qc1wiO1xuXG5pbXBvcnQgdHlwZSB7IE1hcERhdGFGbiB9IGZyb20gXCIuLi8uLi8uLi9ob29rcy9leHBvcnQvdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGltcG9ydENTVk1hcHBlciA9IDxUSXRlbSA9IGFueSwgVFZhcmlhYmxlcyA9IGFueT4oXG4gIGRhdGE6IGFueVtdW10sXG4gIG1hcERhdGE6IE1hcERhdGFGbjxUSXRlbSwgVFZhcmlhYmxlcz4gPSAoaXRlbSkgPT4gaXRlbSBhcyBhbnksXG4pOiBUVmFyaWFibGVzW10gPT4ge1xuICBjb25zdCBbaGVhZGVycywgLi4uYm9keV0gPSBkYXRhO1xuICByZXR1cm4gYm9keVxuICAgIC5tYXAoKGVudHJ5KSA9PiBmcm9tUGFpcnMoemlwKGhlYWRlcnMsIGVudHJ5KSkpXG4gICAgLm1hcCgoaXRlbTogYW55LCBpbmRleCwgYXJyYXk6IGFueSkgPT5cbiAgICAgIG1hcERhdGEuY2FsbCh1bmRlZmluZWQsIGl0ZW0sIGluZGV4LCBhcnJheSksXG4gICAgKTtcbn07XG4iLCJpbXBvcnQgcGx1cmFsaXplIGZyb20gXCJwbHVyYWxpemVcIjtcbmltcG9ydCB7IGh1bWFuaXplU3RyaW5nIH0gZnJvbSBcIkBkZWZpbml0aW9uc1wiO1xuXG4vKipcbiAqIEEgbWV0aG9kIHRoYXQgdGhlIGludGVybmFsIHVzZXNcbiAqIEBpbnRlcm5hbFxuICogQGRlcHJlY2F0ZWQgdXNlIGB1c2VVc2VyRnJpZW5kbHlOYW1lYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgdXNlckZyaWVuZGx5UmVzb3VyY2VOYW1lID0gKFxuICByZXNvdXJjZSA9IFwiXCIsXG4gIHR5cGU6IFwic2luZ3VsYXJcIiB8IFwicGx1cmFsXCIsXG4pOiBzdHJpbmcgPT4ge1xuICBjb25zdCBodW1hbml6ZVJlc291cmNlID0gaHVtYW5pemVTdHJpbmcocmVzb3VyY2UpO1xuICBpZiAodHlwZSA9PT0gXCJzaW5ndWxhclwiKSB7XG4gICAgcmV0dXJuIHBsdXJhbGl6ZS5zaW5ndWxhcihodW1hbml6ZVJlc291cmNlKTtcbiAgfVxuICByZXR1cm4gcGx1cmFsaXplLnBsdXJhbChodW1hbml6ZVJlc291cmNlKTtcbn07XG4iLCJleHBvcnQgY29uc3QgaGFuZGxlVXNlUGFyYW1zID0gKHBhcmFtczogYW55ID0ge30pOiBhbnkgPT4ge1xuICBpZiAocGFyYW1zPy5pZCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBpZDogZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5pZCksXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufTtcbiIsImltcG9ydCB0eXBlIHsgQmFzZUtleSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5cbnR5cGUgUGFyYW1ldHJpemVkRGF0YUFjdGlvbnMgPSBcImxpc3RcIiB8IFwiaW5maW5pdGVcIjtcbnR5cGUgSWRSZXF1aXJlZERhdGFBY3Rpb25zID0gXCJvbmVcIjtcbnR5cGUgSWRzUmVxdWlyZWREYXRhQWN0aW9ucyA9IFwibWFueVwiO1xudHlwZSBEYXRhTXV0YXRpb25BY3Rpb25zID1cbiAgfCBcImN1c3RvbVwiXG4gIHwgXCJjdXN0b21NdXRhdGlvblwiXG4gIHwgXCJjcmVhdGVcIlxuICB8IFwiY3JlYXRlTWFueVwiXG4gIHwgXCJ1cGRhdGVcIlxuICB8IFwidXBkYXRlTWFueVwiXG4gIHwgXCJkZWxldGVcIlxuICB8IFwiZGVsZXRlTWFueVwiO1xuXG50eXBlIEF1dGhBY3Rpb25UeXBlID1cbiAgfCBcImxvZ2luXCJcbiAgfCBcImxvZ291dFwiXG4gIHwgXCJpZGVudGl0eVwiXG4gIHwgXCJyZWdpc3RlclwiXG4gIHwgXCJmb3Jnb3RQYXNzd29yZFwiXG4gIHwgXCJjaGVja1wiXG4gIHwgXCJvbkVycm9yXCJcbiAgfCBcInBlcm1pc3Npb25zXCJcbiAgfCBcInVwZGF0ZVBhc3N3b3JkXCI7XG5cbnR5cGUgQXVkaXRBY3Rpb25UeXBlID0gXCJsaXN0XCIgfCBcImxvZ1wiIHwgXCJyZW5hbWVcIjtcblxudHlwZSBJZFR5cGUgPSBCYXNlS2V5O1xudHlwZSBJZHNUeXBlID0gSWRUeXBlW107XG5cbnR5cGUgUGFyYW1zVHlwZSA9IGFueTtcblxudHlwZSBLZXlTZWdtZW50ID0gc3RyaW5nIHwgSWRUeXBlIHwgSWRzVHlwZSB8IFBhcmFtc1R5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheUZpbmRJbmRleDxUPihhcnJheTogVFtdLCBzbGljZTogVFtdKTogbnVtYmVyIHtcbiAgcmV0dXJuIGFycmF5LmZpbmRJbmRleChcbiAgICAoaXRlbSwgaW5kZXgpID0+XG4gICAgICBpbmRleCA8PSBhcnJheS5sZW5ndGggLSBzbGljZS5sZW5ndGggJiZcbiAgICAgIHNsaWNlLmV2ZXJ5KFxuICAgICAgICAoc2xpY2VJdGVtLCBzbGljZUluZGV4KSA9PiBhcnJheVtpbmRleCArIHNsaWNlSW5kZXhdID09PSBzbGljZUl0ZW0sXG4gICAgICApLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlSZXBsYWNlPFQ+KFxuICBhcnJheTogVFtdLFxuICBwYXJ0VG9CZVJlcGxhY2VkOiBUW10sXG4gIG5ld1BhcnQ6IFRbXSxcbik6IFRbXSB7XG4gIGNvbnN0IG5ld0FycmF5OiBUW10gPSBbLi4uYXJyYXldO1xuICBjb25zdCBzdGFydEluZGV4ID0gYXJyYXlGaW5kSW5kZXgoYXJyYXksIHBhcnRUb0JlUmVwbGFjZWQpO1xuXG4gIGlmIChzdGFydEluZGV4ICE9PSAtMSkge1xuICAgIG5ld0FycmF5LnNwbGljZShzdGFydEluZGV4LCBwYXJ0VG9CZVJlcGxhY2VkLmxlbmd0aCwgLi4ubmV3UGFydCk7XG4gIH1cblxuICByZXR1cm4gbmV3QXJyYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcFVuZGVmaW5lZChzZWdtZW50czogS2V5U2VnbWVudFtdKSB7XG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIoKHNlZ21lbnQpID0+IHNlZ21lbnQgIT09IHVuZGVmaW5lZCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUb0xlZ2FjeShzZWdtZW50czogS2V5U2VnbWVudFtdKSB7XG4gIC8vIGZvciBgbGlzdGAsIGBtYW55YCBhbmQgYG9uZWBcbiAgaWYgKHNlZ21lbnRzWzBdID09PSBcImRhdGFcIikge1xuICAgIC8vIFtkYXRhLCBkcE5hbWUsIHJlc291cmNlLCBhY3Rpb24sIC4uLl07XG4gICAgY29uc3QgbmV3U2VnbWVudHMgPSBzZWdtZW50cy5zbGljZSgxKTtcblxuICAgIGlmIChuZXdTZWdtZW50c1syXSA9PT0gXCJtYW55XCIpIHtcbiAgICAgIG5ld1NlZ21lbnRzWzJdID0gXCJnZXRNYW55XCI7XG4gICAgfSBlbHNlIGlmIChuZXdTZWdtZW50c1syXSA9PT0gXCJpbmZpbml0ZVwiKSB7XG4gICAgICBuZXdTZWdtZW50c1syXSA9IFwibGlzdFwiO1xuICAgIH0gZWxzZSBpZiAobmV3U2VnbWVudHNbMl0gPT09IFwib25lXCIpIHtcbiAgICAgIG5ld1NlZ21lbnRzWzJdID0gXCJkZXRhaWxcIjtcbiAgICB9IGVsc2UgaWYgKG5ld1NlZ21lbnRzWzFdID09PSBcImN1c3RvbVwiKSB7XG4gICAgICBjb25zdCBuZXdQYXJhbXMgPSB7XG4gICAgICAgIC4uLm5ld1NlZ21lbnRzWzJdLFxuICAgICAgfTtcbiAgICAgIGRlbGV0ZSBuZXdQYXJhbXMubWV0aG9kO1xuICAgICAgZGVsZXRlIG5ld1BhcmFtcy51cmw7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIG5ld1NlZ21lbnRzWzBdLFxuICAgICAgICBuZXdTZWdtZW50c1sxXSxcbiAgICAgICAgbmV3U2VnbWVudHNbMl0ubWV0aG9kLFxuICAgICAgICBuZXdTZWdtZW50c1syXS51cmwsXG4gICAgICAgIG5ld1BhcmFtcyxcbiAgICAgIF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld1NlZ21lbnRzO1xuICB9XG4gIC8vIGZvciBgYXVkaXRgIC0+IGBsb2dMaXN0YFxuICBpZiAoc2VnbWVudHNbMF0gPT09IFwiYXVkaXRcIikge1xuICAgIC8vIFthdWRpdCwgcmVzb3VyY2UsIGFjdGlvbiwgcGFyYW1zXSAoZm9yIGxvZyBhbmQgbGlzdClcbiAgICAvLyBvclxuICAgIC8vIFthdWRpdCwgYWN0aW9uLCBwYXJhbXNdIChmb3IgcmVuYW1lKVxuICAgIGlmIChzZWdtZW50c1syXSA9PT0gXCJsaXN0XCIpIHtcbiAgICAgIHJldHVybiBbXCJsb2dMaXN0XCIsIHNlZ21lbnRzWzFdLCBzZWdtZW50c1szXV07XG4gICAgfVxuICB9XG4gIC8vIGZvciBgYWNjZXNzYCAtPiBgdXNlQ2FuYFxuICBpZiAoc2VnbWVudHNbMF0gPT09IFwiYWNjZXNzXCIpIHtcbiAgICAvLyBbYWNjZXNzLCByZXNvdXJjZSwgYWN0aW9uLCBwYXJhbXNdXG4gICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgXCJ1c2VDYW5cIixcbiAgICAgICAge1xuICAgICAgICAgIHJlc291cmNlOiBzZWdtZW50c1sxXSxcbiAgICAgICAgICBhY3Rpb246IHNlZ21lbnRzWzJdLFxuICAgICAgICAgIC4uLnNlZ21lbnRzWzNdLCAvLyBwYXJhbXM6IHsgcGFyYW1zLCBlbmFibGVkIH1cbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgfVxuICB9XG4gIC8vIGZvciBgYXV0aGBcbiAgaWYgKHNlZ21lbnRzWzBdID09PSBcImF1dGhcIikge1xuICAgIGlmIChhcnJheUZpbmRJbmRleChzZWdtZW50cywgW1wiYXV0aFwiLCBcImxvZ2luXCJdKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBbXCJ1c2VMb2dpblwiXTtcbiAgICB9XG4gICAgaWYgKGFycmF5RmluZEluZGV4KHNlZ21lbnRzLCBbXCJhdXRoXCIsIFwibG9nb3V0XCJdKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBbXCJ1c2VMb2dvdXRcIl07XG4gICAgfVxuICAgIGlmIChhcnJheUZpbmRJbmRleChzZWdtZW50cywgW1wiYXV0aFwiLCBcImlkZW50aXR5XCJdKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBbXCJnZXRVc2VySWRlbnRpdHlcIl07XG4gICAgfVxuICAgIGlmIChhcnJheUZpbmRJbmRleChzZWdtZW50cywgW1wiYXV0aFwiLCBcInJlZ2lzdGVyXCJdKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBbXCJ1c2VSZWdpc3RlclwiXTtcbiAgICB9XG4gICAgaWYgKGFycmF5RmluZEluZGV4KHNlZ21lbnRzLCBbXCJhdXRoXCIsIFwiZm9yZ290UGFzc3dvcmRcIl0pICE9PSAtMSkge1xuICAgICAgcmV0dXJuIFtcInVzZUZvcmdvdFBhc3N3b3JkXCJdO1xuICAgIH1cbiAgICBpZiAoYXJyYXlGaW5kSW5kZXgoc2VnbWVudHMsIFtcImF1dGhcIiwgXCJjaGVja1wiXSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gW1widXNlQXV0aGVudGljYXRlZFwiLCBzZWdtZW50c1syXV07IC8vIFthdXRoLCBjaGVjaywgcGFyYW1zXVxuICAgIH1cbiAgICBpZiAoYXJyYXlGaW5kSW5kZXgoc2VnbWVudHMsIFtcImF1dGhcIiwgXCJvbkVycm9yXCJdKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBbXCJ1c2VDaGVja0Vycm9yXCJdO1xuICAgIH1cbiAgICBpZiAoYXJyYXlGaW5kSW5kZXgoc2VnbWVudHMsIFtcImF1dGhcIiwgXCJwZXJtaXNzaW9uc1wiXSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gW1widXNlUGVybWlzc2lvbnNcIl07XG4gICAgfVxuICAgIGlmIChhcnJheUZpbmRJbmRleChzZWdtZW50cywgW1wiYXV0aFwiLCBcInVwZGF0ZVBhc3N3b3JkXCJdKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBbXCJ1c2VVcGRhdGVQYXNzd29yZFwiXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnRzO1xufVxuXG5jbGFzcyBCYXNlS2V5QnVpbGRlciB7XG4gIHNlZ21lbnRzOiBLZXlTZWdtZW50W10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihzZWdtZW50czogS2V5U2VnbWVudFtdID0gW10pIHtcbiAgICB0aGlzLnNlZ21lbnRzID0gc2VnbWVudHM7XG4gIH1cblxuICBrZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VnbWVudHM7XG4gIH1cblxuICBsZWdhY3koKSB7XG4gICAgcmV0dXJuIGNvbnZlcnRUb0xlZ2FjeSh0aGlzLnNlZ21lbnRzKTtcbiAgfVxuXG4gIGdldChsZWdhY3k/OiBib29sZWFuKSB7XG4gICAgcmV0dXJuIGxlZ2FjeSA/IHRoaXMubGVnYWN5KCkgOiB0aGlzLnNlZ21lbnRzO1xuICB9XG59XG5cbmNsYXNzIFBhcmFtc0tleUJ1aWxkZXIgZXh0ZW5kcyBCYXNlS2V5QnVpbGRlciB7XG4gIHBhcmFtcyhwYXJhbXNWYWx1ZT86IFBhcmFtc1R5cGUpIHtcbiAgICByZXR1cm4gbmV3IEJhc2VLZXlCdWlsZGVyKFsuLi50aGlzLnNlZ21lbnRzLCBwYXJhbXNWYWx1ZV0pO1xuICB9XG59XG5cbmNsYXNzIERhdGFJZFJlcXVpcmluZ0tleUJ1aWxkZXIgZXh0ZW5kcyBCYXNlS2V5QnVpbGRlciB7XG4gIGlkKGlkVmFsdWU/OiBJZFR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFBhcmFtc0tleUJ1aWxkZXIoW1xuICAgICAgLi4udGhpcy5zZWdtZW50cyxcbiAgICAgIGlkVmFsdWUgPyBTdHJpbmcoaWRWYWx1ZSkgOiB1bmRlZmluZWQsXG4gICAgXSk7XG4gIH1cbn1cblxuY2xhc3MgRGF0YUlkc1JlcXVpcmluZ0tleUJ1aWxkZXIgZXh0ZW5kcyBCYXNlS2V5QnVpbGRlciB7XG4gIGlkcyguLi5pZHNWYWx1ZTogSWRzVHlwZSkge1xuICAgIHJldHVybiBuZXcgUGFyYW1zS2V5QnVpbGRlcihbXG4gICAgICAuLi50aGlzLnNlZ21lbnRzLFxuICAgICAgLi4uKGlkc1ZhbHVlLmxlbmd0aCA/IFtpZHNWYWx1ZS5tYXAoKGVsKSA9PiBTdHJpbmcoZWwpKV0gOiBbXSksXG4gICAgXSk7XG4gIH1cbn1cblxuY2xhc3MgRGF0YVJlc291cmNlS2V5QnVpbGRlciBleHRlbmRzIEJhc2VLZXlCdWlsZGVyIHtcbiAgYWN0aW9uKGFjdGlvblR5cGU6IFBhcmFtZXRyaXplZERhdGFBY3Rpb25zKTogUGFyYW1zS2V5QnVpbGRlcjtcbiAgYWN0aW9uKGFjdGlvblR5cGU6IElkUmVxdWlyZWREYXRhQWN0aW9ucyk6IERhdGFJZFJlcXVpcmluZ0tleUJ1aWxkZXI7XG4gIGFjdGlvbihhY3Rpb25UeXBlOiBJZHNSZXF1aXJlZERhdGFBY3Rpb25zKTogRGF0YUlkc1JlcXVpcmluZ0tleUJ1aWxkZXI7XG4gIGFjdGlvbihcbiAgICBhY3Rpb25UeXBlOlxuICAgICAgfCBQYXJhbWV0cml6ZWREYXRhQWN0aW9uc1xuICAgICAgfCBJZFJlcXVpcmVkRGF0YUFjdGlvbnNcbiAgICAgIHwgSWRzUmVxdWlyZWREYXRhQWN0aW9ucyxcbiAgKTogUGFyYW1zS2V5QnVpbGRlciB8IERhdGFJZFJlcXVpcmluZ0tleUJ1aWxkZXIgfCBEYXRhSWRzUmVxdWlyaW5nS2V5QnVpbGRlciB7XG4gICAgaWYgKGFjdGlvblR5cGUgPT09IFwib25lXCIpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0YUlkUmVxdWlyaW5nS2V5QnVpbGRlcihbLi4udGhpcy5zZWdtZW50cywgYWN0aW9uVHlwZV0pO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZSA9PT0gXCJtYW55XCIpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0YUlkc1JlcXVpcmluZ0tleUJ1aWxkZXIoWy4uLnRoaXMuc2VnbWVudHMsIGFjdGlvblR5cGVdKTtcbiAgICB9XG4gICAgaWYgKFtcImxpc3RcIiwgXCJpbmZpbml0ZVwiXS5pbmNsdWRlcyhhY3Rpb25UeXBlKSkge1xuICAgICAgcmV0dXJuIG5ldyBQYXJhbXNLZXlCdWlsZGVyKFsuLi50aGlzLnNlZ21lbnRzLCBhY3Rpb25UeXBlXSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWN0aW9uIHR5cGVcIik7XG4gIH1cbn1cblxuY2xhc3MgRGF0YUtleUJ1aWxkZXIgZXh0ZW5kcyBCYXNlS2V5QnVpbGRlciB7XG4gIHJlc291cmNlKHJlc291cmNlTmFtZT86IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgRGF0YVJlc291cmNlS2V5QnVpbGRlcihbLi4udGhpcy5zZWdtZW50cywgcmVzb3VyY2VOYW1lXSk7XG4gIH1cblxuICBtdXRhdGlvbihtdXRhdGlvbk5hbWU6IERhdGFNdXRhdGlvbkFjdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFBhcmFtc0tleUJ1aWxkZXIoW1xuICAgICAgLi4uKG11dGF0aW9uTmFtZSA9PT0gXCJjdXN0b21cIiA/IHRoaXMuc2VnbWVudHMgOiBbdGhpcy5zZWdtZW50c1swXV0pLFxuICAgICAgbXV0YXRpb25OYW1lLFxuICAgIF0pO1xuICB9XG59XG5cbmNsYXNzIEF1dGhLZXlCdWlsZGVyIGV4dGVuZHMgQmFzZUtleUJ1aWxkZXIge1xuICBhY3Rpb24oYWN0aW9uVHlwZTogQXV0aEFjdGlvblR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFBhcmFtc0tleUJ1aWxkZXIoWy4uLnRoaXMuc2VnbWVudHMsIGFjdGlvblR5cGVdKTtcbiAgfVxufVxuXG5jbGFzcyBBY2Nlc3NSZXNvdXJjZUtleUJ1aWxkZXIgZXh0ZW5kcyBCYXNlS2V5QnVpbGRlciB7XG4gIGFjdGlvbihyZXNvdXJjZU5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgUGFyYW1zS2V5QnVpbGRlcihbLi4udGhpcy5zZWdtZW50cywgcmVzb3VyY2VOYW1lXSk7XG4gIH1cbn1cblxuY2xhc3MgQWNjZXNzS2V5QnVpbGRlciBleHRlbmRzIEJhc2VLZXlCdWlsZGVyIHtcbiAgcmVzb3VyY2UocmVzb3VyY2VOYW1lPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NSZXNvdXJjZUtleUJ1aWxkZXIoWy4uLnRoaXMuc2VnbWVudHMsIHJlc291cmNlTmFtZV0pO1xuICB9XG59XG5cbmNsYXNzIEF1ZGl0QWN0aW9uS2V5QnVpbGRlciBleHRlbmRzIEJhc2VLZXlCdWlsZGVyIHtcbiAgYWN0aW9uKGFjdGlvblR5cGU6IEV4dHJhY3Q8QXVkaXRBY3Rpb25UeXBlLCBcImxpc3RcIj4pIHtcbiAgICByZXR1cm4gbmV3IFBhcmFtc0tleUJ1aWxkZXIoWy4uLnRoaXMuc2VnbWVudHMsIGFjdGlvblR5cGVdKTtcbiAgfVxufVxuXG5jbGFzcyBBdWRpdEtleUJ1aWxkZXIgZXh0ZW5kcyBCYXNlS2V5QnVpbGRlciB7XG4gIHJlc291cmNlKHJlc291cmNlTmFtZT86IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgQXVkaXRBY3Rpb25LZXlCdWlsZGVyKFsuLi50aGlzLnNlZ21lbnRzLCByZXNvdXJjZU5hbWVdKTtcbiAgfVxuXG4gIGFjdGlvbihhY3Rpb25UeXBlOiBFeHRyYWN0PEF1ZGl0QWN0aW9uVHlwZSwgXCJyZW5hbWVcIiB8IFwibG9nXCI+KSB7XG4gICAgcmV0dXJuIG5ldyBQYXJhbXNLZXlCdWlsZGVyKFsuLi50aGlzLnNlZ21lbnRzLCBhY3Rpb25UeXBlXSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEtleUJ1aWxkZXIgZXh0ZW5kcyBCYXNlS2V5QnVpbGRlciB7XG4gIGRhdGEobmFtZT86IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgRGF0YUtleUJ1aWxkZXIoW1wiZGF0YVwiLCBuYW1lIHx8IFwiZGVmYXVsdFwiXSk7XG4gIH1cblxuICBhdXRoKCkge1xuICAgIHJldHVybiBuZXcgQXV0aEtleUJ1aWxkZXIoW1wiYXV0aFwiXSk7XG4gIH1cblxuICBhY2Nlc3MoKSB7XG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NLZXlCdWlsZGVyKFtcImFjY2Vzc1wiXSk7XG4gIH1cblxuICBhdWRpdCgpIHtcbiAgICByZXR1cm4gbmV3IEF1ZGl0S2V5QnVpbGRlcihbXCJhdWRpdFwiXSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGtleXMgPSAoKSA9PiBuZXcgS2V5QnVpbGRlcihbXSk7XG4iLCIvKlxuICogUmV0dXJucyBmaXJzdCB2YWx1ZSB0aGF0IGlzIG5vdCB1bmRlZmluZWQuXG4gKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBoZWxwZXIgZnVuY3Rpb24uIFBsZWFzZSBkbyBub3QgdXNlIGV4dGVybmFsbHkuXG4gKi9cbmV4cG9ydCBjb25zdCBwaWNrTm90RGVwcmVjYXRlZCA9IDxUIGV4dGVuZHMgdW5rbm93bltdPihcbiAgLi4uYXJnczogVFxuKTogVFtuZXZlcl0gPT4ge1xuICByZXR1cm4gYXJncy5maW5kKChhcmcpID0+IHR5cGVvZiBhcmcgIT09IFwidW5kZWZpbmVkXCIpO1xufTtcbiIsImltcG9ydCB0eXBlIHsgUXVlcnlLZXkgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB0eXBlIHsgSVF1ZXJ5S2V5cywgTWV0YVF1ZXJ5IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB7IGtleXMgYXMgbmV3S2V5cyB9IGZyb20gXCIuLi9rZXlzXCI7XG5pbXBvcnQgeyBwaWNrTm90RGVwcmVjYXRlZCB9IGZyb20gXCIuLi9waWNrTm90RGVwcmVjYXRlZFwiO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIGBxdWVyeUtleXNgIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYGtleXNgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBxdWVyeUtleXMgPSAoXG4gIHJlc291cmNlPzogc3RyaW5nLFxuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nLFxuICBtZXRhPzogTWV0YVF1ZXJ5LFxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICovXG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5IHwgdW5kZWZpbmVkLFxuKTogSVF1ZXJ5S2V5cyA9PiB7XG4gIGNvbnN0IHByb3ZpZGVyTmFtZSA9IGRhdGFQcm92aWRlck5hbWUgfHwgXCJkZWZhdWx0XCI7XG4gIGNvbnN0IGtleXM6IElRdWVyeUtleXMgPSB7XG4gICAgYWxsOiBbcHJvdmlkZXJOYW1lXSxcbiAgICByZXNvdXJjZUFsbDogW3Byb3ZpZGVyTmFtZSwgcmVzb3VyY2UgfHwgXCJcIl0sXG4gICAgbGlzdDogKGNvbmZpZykgPT4gW1xuICAgICAgLi4ua2V5cy5yZXNvdXJjZUFsbCxcbiAgICAgIFwibGlzdFwiLFxuICAgICAge1xuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIC4uLihwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSkgfHwge30pLFxuICAgICAgfSBhcyBRdWVyeUtleSxcbiAgICBdLFxuICAgIG1hbnk6IChpZHMpID0+XG4gICAgICBbXG4gICAgICAgIC4uLmtleXMucmVzb3VyY2VBbGwsXG4gICAgICAgIFwiZ2V0TWFueVwiLFxuICAgICAgICBpZHM/Lm1hcChTdHJpbmcpIGFzIFF1ZXJ5S2V5LFxuICAgICAgICB7IC4uLihwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSkgfHwge30pIH0gYXMgUXVlcnlLZXksXG4gICAgICBdLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gdW5kZWZpbmVkKSxcbiAgICBkZXRhaWw6IChpZCkgPT4gW1xuICAgICAgLi4ua2V5cy5yZXNvdXJjZUFsbCxcbiAgICAgIFwiZGV0YWlsXCIsXG4gICAgICBpZD8udG9TdHJpbmcoKSxcbiAgICAgIHsgLi4uKHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSB8fCB7fSkgfSBhcyBRdWVyeUtleSxcbiAgICBdLFxuICAgIGxvZ0xpc3Q6IChtZXRhKSA9PlxuICAgICAgW1wibG9nTGlzdFwiLCByZXNvdXJjZSwgbWV0YSBhcyBhbnksIG1ldGFEYXRhIGFzIFF1ZXJ5S2V5XS5maWx0ZXIoXG4gICAgICAgIChpdGVtKSA9PiBpdGVtICE9PSB1bmRlZmluZWQsXG4gICAgICApLFxuICB9O1xuICByZXR1cm4ga2V5cztcbn07XG5cbmV4cG9ydCBjb25zdCBxdWVyeUtleXNSZXBsYWNlbWVudCA9IChwcmVmZXJMZWdhY3lLZXlzPzogYm9vbGVhbikgPT4ge1xuICByZXR1cm4gKFxuICAgIHJlc291cmNlPzogc3RyaW5nLFxuICAgIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmcsXG4gICAgbWV0YT86IE1ldGFRdWVyeSxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBgbWV0YURhdGFgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgcmVmaW5lIHdpbGwgcGFzcyBgbWV0YWAgaW5zdGVhZCwgaG93ZXZlciwgd2Ugc3RpbGwgc3VwcG9ydCBgbWV0YURhdGFgIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgICAqL1xuICAgIG1ldGFEYXRhPzogTWV0YVF1ZXJ5IHwgdW5kZWZpbmVkLFxuICApOiBJUXVlcnlLZXlzID0+IHtcbiAgICBjb25zdCBwcm92aWRlck5hbWUgPSBkYXRhUHJvdmlkZXJOYW1lIHx8IFwiZGVmYXVsdFwiO1xuXG4gICAgY29uc3Qga2V5czogSVF1ZXJ5S2V5cyA9IHtcbiAgICAgIGFsbDogbmV3S2V5cygpLmRhdGEocHJvdmlkZXJOYW1lKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICByZXNvdXJjZUFsbDogbmV3S2V5cygpXG4gICAgICAgIC5kYXRhKGRhdGFQcm92aWRlck5hbWUpXG4gICAgICAgIC5yZXNvdXJjZShyZXNvdXJjZSA/PyBcIlwiKVxuICAgICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgbGlzdDogKGNvbmZpZykgPT5cbiAgICAgICAgbmV3S2V5cygpXG4gICAgICAgICAgLmRhdGEoZGF0YVByb3ZpZGVyTmFtZSlcbiAgICAgICAgICAucmVzb3VyY2UocmVzb3VyY2UgPz8gXCJcIilcbiAgICAgICAgICAuYWN0aW9uKFwibGlzdFwiKVxuICAgICAgICAgIC5wYXJhbXMoe1xuICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgLi4uKHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSB8fCB7fSksXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgbWFueTogKGlkcykgPT5cbiAgICAgICAgbmV3S2V5cygpXG4gICAgICAgICAgLmRhdGEoZGF0YVByb3ZpZGVyTmFtZSlcbiAgICAgICAgICAucmVzb3VyY2UocmVzb3VyY2UgPz8gXCJcIilcbiAgICAgICAgICAuYWN0aW9uKFwibWFueVwiKVxuICAgICAgICAgIC5pZHMoLi4uKGlkcyA/PyBbXSkpXG4gICAgICAgICAgLnBhcmFtcyh7XG4gICAgICAgICAgICAuLi4ocGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpIHx8IHt9KSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICBkZXRhaWw6IChpZCkgPT5cbiAgICAgICAgbmV3S2V5cygpXG4gICAgICAgICAgLmRhdGEoZGF0YVByb3ZpZGVyTmFtZSlcbiAgICAgICAgICAucmVzb3VyY2UocmVzb3VyY2UgPz8gXCJcIilcbiAgICAgICAgICAuYWN0aW9uKFwib25lXCIpXG4gICAgICAgICAgLmlkKGlkID8/IFwiXCIpXG4gICAgICAgICAgLnBhcmFtcyh7XG4gICAgICAgICAgICAuLi4ocGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpIHx8IHt9KSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICBsb2dMaXN0OiAobWV0YSkgPT5cbiAgICAgICAgW1xuICAgICAgICAgIC4uLm5ld0tleXMoKVxuICAgICAgICAgICAgLmF1ZGl0KClcbiAgICAgICAgICAgIC5yZXNvdXJjZShyZXNvdXJjZSlcbiAgICAgICAgICAgIC5hY3Rpb24oXCJsaXN0XCIpXG4gICAgICAgICAgICAucGFyYW1zKG1ldGEpXG4gICAgICAgICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgIG1ldGFEYXRhIGFzIFF1ZXJ5S2V5LFxuICAgICAgICBdLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gdW5kZWZpbmVkKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG59O1xuIiwiZXhwb3J0IGNvbnN0IGhhc1Blcm1pc3Npb24gPSAoXG4gIHBlcm1pc3Npb25zOiBzdHJpbmdbXSB8IHVuZGVmaW5lZCxcbiAgYWN0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4pOiBib29sZWFuID0+IHtcbiAgaWYgKCFwZXJtaXNzaW9ucyB8fCAhYWN0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAhIXBlcm1pc3Npb25zLmZpbmQoKGkpID0+IGkgPT09IGFjdGlvbik7XG59O1xuIiwiLyoqXG4gKiBDaGVjayBpZiBhIHNlZ21lbnQgaXMgYSBwYXJhbWV0ZXIuIChlLmcuIDppZClcbiAqL1xuZXhwb3J0IGNvbnN0IGlzUGFyYW1ldGVyID0gKHNlZ21lbnQ6IHN0cmluZykgPT4ge1xuICByZXR1cm4gc2VnbWVudC5zdGFydHNXaXRoKFwiOlwiKTtcbn07XG4iLCIvKipcbiAqIFNwbGl0IGEgcGF0aCB0byBzZWdtZW50cy5cbiAqL1xuZXhwb3J0IGNvbnN0IHNwbGl0VG9TZWdtZW50cyA9IChwYXRoOiBzdHJpbmcpID0+IHtcbiAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKS5maWx0ZXIoKHNlZ21lbnQpID0+IHNlZ21lbnQgIT09IFwiXCIpO1xuICByZXR1cm4gc2VnbWVudHM7XG59O1xuIiwiaW1wb3J0IHsgc3BsaXRUb1NlZ21lbnRzIH0gZnJvbSBcIi4vc3BsaXQtdG8tc2VnbWVudHNcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGJvdGggcm91dGVzIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIHNlZ21lbnRzLlxuICovXG5leHBvcnQgY29uc3QgaXNTZWdtZW50Q291bnRzU2FtZSA9IChyb3V0ZTogc3RyaW5nLCByZXNvdXJjZVJvdXRlOiBzdHJpbmcpID0+IHtcbiAgY29uc3Qgcm91dGVTZWdtZW50cyA9IHNwbGl0VG9TZWdtZW50cyhyb3V0ZSk7XG4gIGNvbnN0IHJlc291cmNlUm91dGVTZWdtZW50cyA9IHNwbGl0VG9TZWdtZW50cyhyZXNvdXJjZVJvdXRlKTtcblxuICByZXR1cm4gcm91dGVTZWdtZW50cy5sZW5ndGggPT09IHJlc291cmNlUm91dGVTZWdtZW50cy5sZW5ndGg7XG59O1xuIiwiLyoqXG4gKiBSZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyBmcm9tIGEgcm91dGUuXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVMZWFkaW5nVHJhaWxpbmdTbGFzaGVzID0gKHJvdXRlOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHJvdXRlLnJlcGxhY2UoL15cXC98XFwvJC9nLCBcIlwiKTtcbn07XG4iLCJpbXBvcnQgeyBpc1BhcmFtZXRlciB9IGZyb20gXCIuL2lzLXBhcmFtZXRlclwiO1xuaW1wb3J0IHsgaXNTZWdtZW50Q291bnRzU2FtZSB9IGZyb20gXCIuL2lzLXNlZ21lbnQtY291bnRzLXNhbWVcIjtcbmltcG9ydCB7IHJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMgfSBmcm9tIFwiLi9yZW1vdmUtbGVhZGluZy10cmFpbGluZy1zbGFzaGVzXCI7XG5pbXBvcnQgeyBzcGxpdFRvU2VnbWVudHMgfSBmcm9tIFwiLi9zcGxpdC10by1zZWdtZW50c1wiO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaWYgdGhlIHJvdXRlIGFuZCByZXNvdXJjZVJvdXRlIG1hdGNoIGJ5IHNlZ21lbnRzLlxuICogLSBGaXJzdCwgdHJhaWxpbmcgYW5kIGxlYWRpbmcgc2xhc2hlcyBhcmUgcmVtb3ZlZFxuICogLSBUaGVuLCB0aGUgcm91dGUgYW5kIHJlc291cmNlUm91dGUgYXJlIHNwbGl0IHRvIHNlZ21lbnRzIGFuZCBjaGVja2VkIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2Ygc2VnbWVudHNcbiAqIC0gVGhlbiwgZWFjaCBzZWdtZW50IGlzIGNoZWNrZWQgaWYgaXQgaXMgYSBwYXJhbWV0ZXIgb3IgaWYgaXQgbWF0Y2hlcyB0aGUgcmVzb3VyY2VSb3V0ZSBzZWdtZW50XG4gKiAtIElmIGFsbCBzZWdtZW50cyBtYXRjaCwgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja0J5U2VnbWVudHMgPSAocm91dGU6IHN0cmluZywgcmVzb3VyY2VSb3V0ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHN0ZFJvdXRlID0gcmVtb3ZlTGVhZGluZ1RyYWlsaW5nU2xhc2hlcyhyb3V0ZSk7XG4gIGNvbnN0IHN0ZFJlc291cmNlUm91dGUgPSByZW1vdmVMZWFkaW5nVHJhaWxpbmdTbGFzaGVzKHJlc291cmNlUm91dGUpO1xuICAvLyB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSByb3V0ZSBhbmQgcmVzb3VyY2VSb3V0ZSBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBzZWdtZW50c1xuICAvLyBpZiBub3QsIHdlIGNhbid0IG1hdGNoIHRoZW1cbiAgaWYgKCFpc1NlZ21lbnRDb3VudHNTYW1lKHN0ZFJvdXRlLCBzdGRSZXNvdXJjZVJvdXRlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHJvdXRlU2VnbWVudHMgPSBzcGxpdFRvU2VnbWVudHMoc3RkUm91dGUpO1xuICBjb25zdCByZXNvdXJjZVJvdXRlU2VnbWVudHMgPSBzcGxpdFRvU2VnbWVudHMoc3RkUmVzb3VyY2VSb3V0ZSk7XG5cbiAgcmV0dXJuIHJlc291cmNlUm91dGVTZWdtZW50cy5ldmVyeSgoc2VnbWVudCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gaXNQYXJhbWV0ZXIoc2VnbWVudCkgfHwgc2VnbWVudCA9PT0gcm91dGVTZWdtZW50c1tpbmRleF07XG4gIH0pO1xufTtcbiIsImltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci90eXBlc1wiO1xuaW1wb3J0IHsgcmVtb3ZlTGVhZGluZ1RyYWlsaW5nU2xhc2hlcyB9IGZyb20gXCIuL3JlbW92ZS1sZWFkaW5nLXRyYWlsaW5nLXNsYXNoZXNcIjtcblxuLyoqXG4gKiBUaGlzIGhlbHBlciBmdW5jdGlvbiByZXR1cm5zIHRoZSBkZWZhdWx0IHBhdGggZm9yIGEgZ2l2ZW4gYWN0aW9uIGFuZCByZXNvdXJjZS5cbiAqIEl0IGFsc28gYXBwbGllcyB0aGUgcGFyZW50UHJlZml4IGlmIHByb3ZpZGVkLlxuICogVGhpcyBpcyB1c2VkIGJ5IHRoZSBsZWdhY3kgcm91dGVyIGFuZCB0aGUgbmV3IHJvdXRlciBpZiB0aGUgcmVzb3VyY2UgZG9lc24ndCBwcm92aWRlIGEgY3VzdG9tIHBhdGguXG4gKi9cbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0QWN0aW9uUGF0aCA9IChcbiAgcmVzb3VyY2VOYW1lOiBzdHJpbmcsXG4gIGFjdGlvbjogQWN0aW9uLFxuICBwYXJlbnRQcmVmaXg/OiBzdHJpbmcsXG4pOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjbGVhblBhcmVudFByZWZpeCA9IHJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMocGFyZW50UHJlZml4IHx8IFwiXCIpO1xuXG4gIGxldCBwYXRoID0gYCR7Y2xlYW5QYXJlbnRQcmVmaXh9JHtcbiAgICBjbGVhblBhcmVudFByZWZpeCA/IFwiL1wiIDogXCJcIlxuICB9JHtyZXNvdXJjZU5hbWV9YDtcblxuICBpZiAoYWN0aW9uID09PSBcImxpc3RcIikge1xuICAgIHBhdGggPSBgJHtwYXRofWA7XG4gIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcImNyZWF0ZVwiKSB7XG4gICAgcGF0aCA9IGAke3BhdGh9L2NyZWF0ZWA7XG4gIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcImVkaXRcIikge1xuICAgIHBhdGggPSBgJHtwYXRofS9lZGl0LzppZGA7XG4gIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcInNob3dcIikge1xuICAgIHBhdGggPSBgJHtwYXRofS9zaG93LzppZGA7XG4gIH0gZWxzZSBpZiAoYWN0aW9uID09PSBcImNsb25lXCIpIHtcbiAgICBwYXRoID0gYCR7cGF0aH0vY2xvbmUvOmlkYDtcbiAgfVxuXG4gIHJldHVybiBgLyR7cGF0aC5yZXBsYWNlKC9eXFwvLywgXCJcIil9YDtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IElSZXNvdXJjZUl0ZW0gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcbmltcG9ydCB7IHBpY2tOb3REZXByZWNhdGVkIH0gZnJvbSBcIi4uL3BpY2tOb3REZXByZWNhdGVkXCI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50IHJlc291cmNlIG9mIHRoZSBnaXZlbiByZXNvdXJjZS5cbiAqIFdvcmtzIGJvdGggd2l0aCB0aGUgZGVwcmVjYXRlZCBgcGFyZW50TmFtZWAgYW5kIHRoZSBuZXcgYHBhcmVudGAgcHJvcGVydHkuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQYXJlbnRSZXNvdXJjZSA9IChcbiAgcmVzb3VyY2U6IElSZXNvdXJjZUl0ZW0sXG4gIHJlc291cmNlczogSVJlc291cmNlSXRlbVtdLFxuKTogSVJlc291cmNlSXRlbSB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IHBhcmVudE5hbWUgPSBwaWNrTm90RGVwcmVjYXRlZChcbiAgICByZXNvdXJjZS5tZXRhPy5wYXJlbnQsXG4gICAgcmVzb3VyY2Uub3B0aW9ucz8ucGFyZW50LFxuICAgIHJlc291cmNlLnBhcmVudE5hbWUsXG4gICk7XG5cbiAgaWYgKCFwYXJlbnROYW1lKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IHBhcmVudFJlc291cmNlID0gcmVzb3VyY2VzLmZpbmQoXG4gICAgKHJlc291cmNlKSA9PiAocmVzb3VyY2UuaWRlbnRpZmllciA/PyByZXNvdXJjZS5uYW1lKSA9PT0gcGFyZW50TmFtZSxcbiAgKTtcblxuICAvKipcbiAgICogSWYgdGhlIHBhcmVudCByZXNvdXJjZSBpcyBub3QgZm91bmQsIHdlIHJldHVybiBhIHJlc291cmNlIG9iamVjdCB3aXRoIHRoZSBuYW1lIG9mIHRoZSBwYXJlbnQgcmVzb3VyY2UuXG4gICAqIEJlY2F1c2Ugd2Ugc3RpbGwgd2FudCB0byBoYXZlIG5lc3RpbmcgYW5kIHByZWZpeGluZyBmb3IgdGhlIHJlc291cmNlIGV2ZW4gaWYgdGhlIHBhcmVudCBpcyBub3QgZXhwbGljaXRseSBkZWZpbmVkLlxuICAgKi9cbiAgcmV0dXJuIHBhcmVudFJlc291cmNlID8/IHsgbmFtZTogcGFyZW50TmFtZSB9O1xufTtcbiIsImltcG9ydCB0eXBlIHsgUmVzb3VyY2VQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuaW1wb3J0IHsgZ2V0UGFyZW50UmVzb3VyY2UgfSBmcm9tIFwiLi9nZXQtcGFyZW50LXJlc291cmNlXCI7XG5pbXBvcnQgeyByZW1vdmVMZWFkaW5nVHJhaWxpbmdTbGFzaGVzIH0gZnJvbSBcIi4vcmVtb3ZlLWxlYWRpbmctdHJhaWxpbmctc2xhc2hlc1wiO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudCBwcmVmaXggZm9yIGEgcmVzb3VyY2VcbiAqIC0gSWYgYGxlZ2FjeWAgaXMgcHJvdmlkZWQsIHRoZSBjb21wdXRhdGlvbiBpcyBiYXNlZCBvbiB0aGUgYHJvdXRlYCBvcHRpb24gb2YgdGhlIHJlc291cmNlXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQYXJlbnRQcmVmaXhGb3JSZXNvdXJjZSA9IChcbiAgcmVzb3VyY2U6IFJlc291cmNlUHJvcHMsXG4gIHJlc291cmNlczogUmVzb3VyY2VQcm9wc1tdLFxuICAvKipcbiAgICogVXNlcyBsZWdhY3kgcm91dGUgaWYgdHJ1ZSAoYG9wdGlvbnMucm91dGVgKVxuICAgKi9cbiAgbGVnYWN5PzogYm9vbGVhbixcbik6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IHBhcmVudHM6IFJlc291cmNlUHJvcHNbXSA9IFtdO1xuXG4gIGxldCBwYXJlbnQgPSBnZXRQYXJlbnRSZXNvdXJjZShyZXNvdXJjZSwgcmVzb3VyY2VzKTtcblxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgcGFyZW50ID0gZ2V0UGFyZW50UmVzb3VyY2UocGFyZW50LCByZXNvdXJjZXMpO1xuICB9XG5cbiAgaWYgKHBhcmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBgLyR7cGFyZW50c1xuICAgIC5yZXZlcnNlKClcbiAgICAubWFwKChwYXJlbnQpID0+IHtcbiAgICAgIGNvbnN0IHYgPSBsZWdhY3kgPyBwYXJlbnQub3B0aW9ucz8ucm91dGUgPz8gcGFyZW50Lm5hbWUgOiBwYXJlbnQubmFtZTtcbiAgICAgIHJldHVybiByZW1vdmVMZWFkaW5nVHJhaWxpbmdTbGFzaGVzKHYpO1xuICAgIH0pXG4gICAgLmpvaW4oXCIvXCIpfWA7XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IEFjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvdHlwZXNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRBY3Rpb25QYXRoIH0gZnJvbSBcIi4vZ2V0LWRlZmF1bHQtYWN0aW9uLXBhdGhcIjtcbmltcG9ydCB7IGdldFBhcmVudFByZWZpeEZvclJlc291cmNlIH0gZnJvbSBcIi4vZ2V0LXBhcmVudC1wcmVmaXgtZm9yLXJlc291cmNlXCI7XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlQWN0aW9uUm91dGUgPSB7XG4gIGFjdGlvbjogQWN0aW9uO1xuICByZXNvdXJjZTogSVJlc291cmNlSXRlbTtcbiAgcm91dGU6IHN0cmluZztcbn07XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGFsbCB0aGUgcm91dGVzIGZvciBhdmFpbGFibGUgYWN0aW9ucyBmb3IgYSByZXNvdXJjZS5cbiAqIC0gSWYgdGhlIGFjdGlvbiBpcyBhIGZ1bmN0aW9uLCBpdCBtZWFucyB3ZSdyZSBmYWxsYmFja2luZyB0byBkZWZhdWx0IHBhdGggZm9yIHRoZSBhY3Rpb25cbiAqIC0gSWYgdGhlIGFjdGlvbiBpcyBhIHN0cmluZywgaXQgbWVhbnMgd2UgZG9uJ3QgaGF2ZSB0aGUgY29tcG9uZW50LCBidXQgd2UgaGF2ZSB0aGUgcm91dGVcbiAqIC0gSWYgdGhlIGFjdGlvbiBpcyBhbiBvYmplY3QsIGl0IG1lYW5zIHdlIGhhdmUgdGhlIGNvbXBvbmVudCBhbmQgdGhlIHJvdXRlXG4gKiAtIEl0IHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCB0aGUgYWN0aW9uLCB0aGUgcmVzb3VyY2UgYW5kIHRoZSByb3V0ZVxuICovXG5leHBvcnQgY29uc3QgZ2V0QWN0aW9uUm91dGVzRnJvbVJlc291cmNlID0gKFxuICByZXNvdXJjZTogSVJlc291cmNlSXRlbSxcbiAgcmVzb3VyY2VzOiBJUmVzb3VyY2VJdGVtW10sXG4gIC8qKlxuICAgKiBVc2VzIGxlZ2FjeSByb3V0ZSBpZiB0cnVlIChgb3B0aW9ucy5yb3V0ZWApXG4gICAqL1xuICBsZWdhY3k/OiBib29sZWFuLFxuKSA9PiB7XG4gIGNvbnN0IGFjdGlvbnM6IFJlc291cmNlQWN0aW9uUm91dGVbXSA9IFtdO1xuXG4gIGNvbnN0IGFjdGlvbkxpc3Q6IEFjdGlvbltdID0gW1wibGlzdFwiLCBcInNob3dcIiwgXCJlZGl0XCIsIFwiY3JlYXRlXCIsIFwiY2xvbmVcIl07XG5cbiAgY29uc3QgcGFyZW50UHJlZml4ID0gZ2V0UGFyZW50UHJlZml4Rm9yUmVzb3VyY2UocmVzb3VyY2UsIHJlc291cmNlcywgbGVnYWN5KTtcblxuICBhY3Rpb25MaXN0LmZvckVhY2goKGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IGl0ZW0gPVxuICAgICAgbGVnYWN5ICYmIGFjdGlvbiA9PT0gXCJjbG9uZVwiID8gcmVzb3VyY2UuY3JlYXRlIDogcmVzb3VyY2VbYWN0aW9uXTtcblxuICAgIGxldCByb3V0ZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIgfHwgbGVnYWN5KSB7XG4gICAgICAvLyBtZWFucyB3ZSdyZSBmYWxsYmFja2luZyB0byBkZWZhdWx0IHBhdGggZm9yIHRoZSBhY3Rpb25cbiAgICAgIHJvdXRlID0gZ2V0RGVmYXVsdEFjdGlvblBhdGgoXG4gICAgICAgIGxlZ2FjeVxuICAgICAgICAgID8gcmVzb3VyY2UubWV0YT8ucm91dGUgPz8gcmVzb3VyY2Uub3B0aW9ucz8ucm91dGUgPz8gcmVzb3VyY2UubmFtZVxuICAgICAgICAgIDogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsZWdhY3kgPyBwYXJlbnRQcmVmaXggOiB1bmRlZmluZWQsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIG1lYW5zIHdlIGRvbid0IGhhdmUgdGhlIGNvbXBvbmVudCwgYnV0IHdlIGhhdmUgdGhlIHJvdXRlXG4gICAgICByb3V0ZSA9IGl0ZW07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgLy8gbWVhbnMgd2UgaGF2ZSB0aGUgY29tcG9uZW50IGFuZCB0aGUgcm91dGVcbiAgICAgIHJvdXRlID0gaXRlbS5wYXRoO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZSkge1xuICAgICAgYWN0aW9ucy5wdXNoKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgcm91dGU6IGAvJHtyb3V0ZS5yZXBsYWNlKC9eXFwvLywgXCJcIil9YCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGFjdGlvbnM7XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBSZXNvdXJjZUFjdGlvblJvdXRlIH0gZnJvbSBcIi4vZ2V0LWFjdGlvbi1yb3V0ZXMtZnJvbS1yZXNvdXJjZVwiO1xuaW1wb3J0IHsgaXNQYXJhbWV0ZXIgfSBmcm9tIFwiLi9pcy1wYXJhbWV0ZXJcIjtcbmltcG9ydCB7IHJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMgfSBmcm9tIFwiLi9yZW1vdmUtbGVhZGluZy10cmFpbGluZy1zbGFzaGVzXCI7XG5pbXBvcnQgeyBzcGxpdFRvU2VnbWVudHMgfSBmcm9tIFwiLi9zcGxpdC10by1zZWdtZW50c1wiO1xuXG4vKipcbiAqIFBpY2tzIHRoZSBtb3N0IGVsaWdpYmxlIHJvdXRlIGZyb20gdGhlIGdpdmVuIG1hdGNoZWQgcm91dGVzLlxuICogLSBJZiB0aGVyZSdzIG9ubHkgb25lIHJvdXRlLCBpdCByZXR1cm5zIGl0LlxuICogLSBJZiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgcm91dGUsIGl0IHBpY2tzIHRoZSBiZXN0IG5vbi1ncmVlZHkgbWF0Y2guXG4gKi9cbmV4cG9ydCBjb25zdCBwaWNrTWF0Y2hlZFJvdXRlID0gKFxuICByb3V0ZXM6IFJlc291cmNlQWN0aW9uUm91dGVbXSxcbik6IFJlc291cmNlQWN0aW9uUm91dGUgfCB1bmRlZmluZWQgPT4ge1xuICAvLyB0aGVzZSByb3V0ZXMgYXJlIGFsbCBtYXRjaGVkLCB3ZSBzaG91bGQgcGljayB0aGUgbGVhc3QgcGFyYW1ldHJpemVkIG9uZVxuXG4gIC8vIG5vIHJvdXRlcywgbm8gbWF0Y2hcbiAgaWYgKHJvdXRlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gbm8gbmVlZCB0byBjYWxjdWxhdGUgdGhlIHJvdXRlIHNlZ21lbnRzIGlmIHRoZXJlJ3Mgb25seSBvbmUgcm91dGVcbiAgaWYgKHJvdXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gcm91dGVzWzBdO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIGFuZCBsZWFkaW5nIHNsYXNoZXNcbiAgLy8gc3BsaXQgdGhlbSB0byBzZWdtZW50c1xuICBjb25zdCBzYW5pdGl6ZWRSb3V0ZXMgPSByb3V0ZXMubWFwKChyb3V0ZSkgPT4gKHtcbiAgICAuLi5yb3V0ZSxcbiAgICBzcGxpdHRlZDogc3BsaXRUb1NlZ21lbnRzKHJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMocm91dGUucm91dGUpKSxcbiAgfSkpO1xuXG4gIC8vIGF0IHRoaXMgcG9pbnQsIGJlZm9yZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIHdlIGFscmVhZHkgY2hlY2tlZCBmb3Igc2VnbWVudCBsZW5naHRzIGFuZCBleHBlY3QgYWxsIG9mIHRoZW0gdG8gYmUgdGhlIHNhbWVcbiAgY29uc3Qgc2VnbWVudHNDb3VudCA9IHNhbml0aXplZFJvdXRlc1swXT8uc3BsaXR0ZWQubGVuZ3RoID8/IDA7XG5cbiAgbGV0IGVsaWdpYmxlUm91dGVzOiBBcnJheTwodHlwZW9mIHNhbml0aXplZFJvdXRlcylbbnVtYmVyXT4gPSBbXG4gICAgLi4uc2FuaXRpemVkUm91dGVzLFxuICBdO1xuXG4gIC8vIGxvb3AgdGhyb3VnaCB0aGUgc2VnbWVudHNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50c0NvdW50OyBpKyspIHtcbiAgICBjb25zdCBub25QYXJhbWV0cml6ZWRSb3V0ZXMgPSBlbGlnaWJsZVJvdXRlcy5maWx0ZXIoXG4gICAgICAocm91dGUpID0+ICFpc1BhcmFtZXRlcihyb3V0ZS5zcGxpdHRlZFtpXSksXG4gICAgKTtcblxuICAgIGlmIChub25QYXJhbWV0cml6ZWRSb3V0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBrZWVwIHRoZSBlbGlnaWJsZSByb3V0ZXMgYXMgdGhleSBhcmVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobm9uUGFyYW1ldHJpemVkUm91dGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gbm8gbmVlZCB0byBjb250aW51ZSwgd2UgZm91bmQgdGhlIHJvdXRlXG4gICAgICBlbGlnaWJsZVJvdXRlcyA9IG5vblBhcmFtZXRyaXplZFJvdXRlcztcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIHdlIGhhdmUgbW9yZSB0aGFuIG9uZSBub24tcGFyYW1ldHJpemVkIHJvdXRlLCB3ZSBuZWVkIHRvIGNoZWNrIHRoZSBuZXh0IHNlZ21lbnRcbiAgICBlbGlnaWJsZVJvdXRlcyA9IG5vblBhcmFtZXRyaXplZFJvdXRlcztcbiAgfVxuXG4gIHJldHVybiBlbGlnaWJsZVJvdXRlc1swXTtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IElSZXNvdXJjZUl0ZW0gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci90eXBlc1wiO1xuaW1wb3J0IHsgY2hlY2tCeVNlZ21lbnRzIH0gZnJvbSBcIi4vY2hlY2stYnktc2VnbWVudHNcIjtcbmltcG9ydCB7IGdldEFjdGlvblJvdXRlc0Zyb21SZXNvdXJjZSB9IGZyb20gXCIuL2dldC1hY3Rpb24tcm91dGVzLWZyb20tcmVzb3VyY2VcIjtcbmltcG9ydCB7IHBpY2tNYXRjaGVkUm91dGUgfSBmcm9tIFwiLi9waWNrLW1hdGNoZWQtcm91dGVcIjtcblxuLyoqXG4gKiBNYXRjaCB0aGUgcmVzb3VyY2UgZnJvbSB0aGUgcm91dGVcbiAqIC0gSXQgd2lsbCBjYWxjdWxhdGUgYWxsIHBvc3NpYmxlIHJvdXRlcyBmb3IgcmVzb3VyY2VzIGFuZCB0aGVpciBhY3Rpb25zXG4gKiAtIEl0IHdpbGwgY2hlY2sgaWYgdGhlIHJvdXRlIG1hdGNoZXMgYW55IG9mIHRoZSBwb3NzaWJsZSByb3V0ZXNcbiAqIC0gSXQgd2lsbCByZXR1cm4gdGhlIG1vc3QgZWxpZ2libGUgcmVzb3VyY2UgYW5kIGFjdGlvblxuICovXG5leHBvcnQgY29uc3QgbWF0Y2hSZXNvdXJjZUZyb21Sb3V0ZSA9IChcbiAgcm91dGU6IHN0cmluZyxcbiAgcmVzb3VyY2VzOiBJUmVzb3VyY2VJdGVtW10sXG4pOiB7XG4gIGZvdW5kOiBib29sZWFuO1xuICByZXNvdXJjZT86IElSZXNvdXJjZUl0ZW07XG4gIGFjdGlvbj86IEFjdGlvbjtcbiAgbWF0Y2hlZFJvdXRlPzogc3RyaW5nO1xufSA9PiB7XG4gIGNvbnN0IGFsbEFjdGlvblJvdXRlcyA9IHJlc291cmNlcy5mbGF0TWFwKChyZXNvdXJjZSkgPT4ge1xuICAgIHJldHVybiBnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UocmVzb3VyY2UsIHJlc291cmNlcyk7XG4gIH0pO1xuXG4gIGNvbnN0IGFsbEZvdW5kID0gYWxsQWN0aW9uUm91dGVzLmZpbHRlcigoYWN0aW9uUm91dGUpID0+IHtcbiAgICByZXR1cm4gY2hlY2tCeVNlZ21lbnRzKHJvdXRlLCBhY3Rpb25Sb3V0ZS5yb3V0ZSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1vc3RFbGlnaWJsZSA9IHBpY2tNYXRjaGVkUm91dGUoYWxsRm91bmQpO1xuXG4gIHJldHVybiB7XG4gICAgZm91bmQ6ICEhbW9zdEVsaWdpYmxlLFxuICAgIHJlc291cmNlOiBtb3N0RWxpZ2libGU/LnJlc291cmNlLFxuICAgIGFjdGlvbjogbW9zdEVsaWdpYmxlPy5hY3Rpb24sXG4gICAgbWF0Y2hlZFJvdXRlOiBtb3N0RWxpZ2libGU/LnJvdXRlLFxuICB9O1xufTtcbiIsImltcG9ydCB0eXBlIHsgUmVzb3VyY2VQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuaW1wb3J0IHsgcGlja05vdERlcHJlY2F0ZWQgfSBmcm9tIFwiLi4vcGlja05vdERlcHJlY2F0ZWRcIjtcbmltcG9ydCB7IGdldFBhcmVudFByZWZpeEZvclJlc291cmNlIH0gZnJvbSBcIi4uL3JvdXRlclwiO1xuXG4vKipcbiAqIGdlbmVyYXRlcyByb3V0ZSBmb3IgdGhlIHJlc291cmNlIGJhc2VkIG9uIHBhcmVudHMgYW5kIGN1c3RvbSByb3V0ZXNcbiAqIEBkZXByZWNhdGVkIHRoaXMgaXMgYSAqKmxlZ2FjeSoqIGZ1bmN0aW9uIGFuZCB3b3JrcyBvbmx5IHdpdGggdGhlIG9sZCByZXNvdXJjZSBkZWZpbml0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCByb3V0ZUdlbmVyYXRvciA9IChcbiAgaXRlbTogUmVzb3VyY2VQcm9wcyxcbiAgcmVzb3VyY2VzRnJvbVByb3BzOiBSZXNvdXJjZVByb3BzW10sXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICBsZXQgcm91dGU7XG5cbiAgY29uc3QgcGFyZW50UHJlZml4ID0gZ2V0UGFyZW50UHJlZml4Rm9yUmVzb3VyY2UoXG4gICAgaXRlbSxcbiAgICByZXNvdXJjZXNGcm9tUHJvcHMsXG4gICAgdHJ1ZSxcbiAgKTtcblxuICBpZiAocGFyZW50UHJlZml4KSB7XG4gICAgY29uc3QgbWV0YSA9IHBpY2tOb3REZXByZWNhdGVkKGl0ZW0ubWV0YSwgaXRlbS5vcHRpb25zKTtcbiAgICByb3V0ZSA9IGAke3BhcmVudFByZWZpeH0vJHttZXRhPy5yb3V0ZSA/PyBpdGVtLm5hbWV9YDtcbiAgfSBlbHNlIHtcbiAgICByb3V0ZSA9IGl0ZW0ub3B0aW9ucz8ucm91dGUgPz8gaXRlbS5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIGAvJHtyb3V0ZS5yZXBsYWNlKC9eXFwvLywgXCJcIil9YDtcbn07XG4iLCJpbXBvcnQgeyBwaWNrTm90RGVwcmVjYXRlZCB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVycy9waWNrTm90RGVwcmVjYXRlZFwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIElNZW51SXRlbSxcbiAgSVJlc291cmNlSXRlbSxcbiAgSVRyZWVNZW51LFxufSBmcm9tIFwiLi4vLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGhlbHBlciBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBjcmVhdGVUcmVlYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlVHJlZVZpZXcgPSAoXG4gIHJlc291cmNlczogSVJlc291cmNlSXRlbVtdIHwgSU1lbnVJdGVtW10sXG4pOiBJVHJlZU1lbnVbXSB8IElUcmVlTWVudVtdID0+IHtcbiAgY29uc3QgdHJlZSA9IFtdO1xuICBjb25zdCByZXNvdXJjZXNSb3V0ZU9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICBjb25zdCByZXNvdXJjZXNOYW1lT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gIGxldCBwYXJlbnQ6IElSZXNvdXJjZUl0ZW0gfCBJTWVudUl0ZW07XG4gIGxldCBjaGlsZDogSVRyZWVNZW51O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFyZW50ID0gcmVzb3VyY2VzW2ldO1xuXG4gICAgY29uc3Qgcm91dGUgPVxuICAgICAgcGFyZW50LnJvdXRlID8/XG4gICAgICBwaWNrTm90RGVwcmVjYXRlZChwYXJlbnQ/Lm1ldGEsIHBhcmVudC5vcHRpb25zKT8ucm91dGUgPz9cbiAgICAgIFwiXCI7XG5cbiAgICByZXNvdXJjZXNSb3V0ZU9iamVjdFtyb3V0ZV0gPSBwYXJlbnQ7XG4gICAgcmVzb3VyY2VzUm91dGVPYmplY3Rbcm91dGVdW1wiY2hpbGRyZW5cIl0gPSBbXTtcblxuICAgIHJlc291cmNlc05hbWVPYmplY3RbcGFyZW50Lm5hbWVdID0gcGFyZW50O1xuICAgIHJlc291cmNlc05hbWVPYmplY3RbcGFyZW50Lm5hbWVdW1wiY2hpbGRyZW5cIl0gPSBbXTtcbiAgfVxuXG4gIGZvciAoY29uc3QgbmFtZSBpbiByZXNvdXJjZXNSb3V0ZU9iamVjdCkge1xuICAgIGlmIChPYmplY3QuaGFzT3duKHJlc291cmNlc1JvdXRlT2JqZWN0LCBuYW1lKSkge1xuICAgICAgY2hpbGQgPSByZXNvdXJjZXNSb3V0ZU9iamVjdFtuYW1lXTtcblxuICAgICAgaWYgKGNoaWxkLnBhcmVudE5hbWUgJiYgcmVzb3VyY2VzTmFtZU9iamVjdFtjaGlsZC5wYXJlbnROYW1lXSkge1xuICAgICAgICByZXNvdXJjZXNOYW1lT2JqZWN0W2NoaWxkLnBhcmVudE5hbWVdW1wiY2hpbGRyZW5cIl0ucHVzaChjaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmVlLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cmVlO1xufTtcbiIsImV4cG9ydCBjb25zdCBodW1hbml6ZVN0cmluZyA9ICh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oW2Etel17MX0pKFtBLVpdezF9KS9nLCBcIiQxLSQyXCIpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oW0EtWl17MX0pKFtBLVpdezF9KShbYS16XXsxfSkvZywgXCIkMS0kMiQzXCIpO1xuXG4gIHRleHQgPSB0ZXh0XG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvW18tXSsvZywgXCIgXCIpXG4gICAgLnJlcGxhY2UoL1xcc3syLH0vZywgXCIgXCIpXG4gICAgLnRyaW0oKTtcbiAgdGV4dCA9IHRleHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0ZXh0LnNsaWNlKDEpO1xuXG4gIHJldHVybiB0ZXh0O1xufTtcbi8vIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2h1bWFuaXplLXN0cmluZ1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgcGx1cmFsaXplIGZyb20gXCJwbHVyYWxpemVcIjtcblxuaW1wb3J0IHsgRGVmYXVsdExheW91dCB9IGZyb20gXCJAY29tcG9uZW50cy9sYXlvdXRXcmFwcGVyL2RlZmF1bHRMYXlvdXRcIjtcblxuaW1wb3J0IHsgaHVtYW5pemVTdHJpbmcgfSBmcm9tIFwiLi4vLi4vZGVmaW5pdGlvbnMvaGVscGVycy9odW1hbml6ZVN0cmluZ1wiO1xuaW1wb3J0IHR5cGUge1xuICBJUmVmaW5lQ29udGV4dCxcbiAgSVJlZmluZUNvbnRleHRPcHRpb25zLFxuICBJUmVmaW5lQ29udGV4dFByb3ZpZGVyLFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG5pbXBvcnQgeyBMb2dpblBhZ2UgYXMgRGVmYXVsdExvZ2luUGFnZSB9IGZyb20gXCJAY29tcG9uZW50cy9wYWdlc1wiO1xuXG5jb25zdCBkZWZhdWx0VGl0bGU6IElSZWZpbmVDb250ZXh0T3B0aW9uc1tcInRpdGxlXCJdID0ge1xuICBpY29uOiAoXG4gICAgPHN2Z1xuICAgICAgd2lkdGg9ezI0fVxuICAgICAgaGVpZ2h0PXsyNH1cbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICBkYXRhLXRlc3RpZD1cInJlZmluZS1sb2dvXCJcbiAgICAgIGlkPVwicmVmaW5lLWRlZmF1bHQtbG9nb1wiXG4gICAgPlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgY2xpcFJ1bGU9XCJldmVub2RkXCJcbiAgICAgICAgZD1cIk0xMy43ODg5IDAuNDIyMjkxQzEyLjY2MjcgLTAuMTQwNzY0IDExLjMzNzMgLTAuMTQwNzY0IDEwLjIxMTEgMC40MjIyOTFMMi4yMTExNSA0LjQyMjI5QzAuODU2MDEgNS4wOTk4NiAwIDYuNDg0OTEgMCA4VjE2QzAgMTcuNTE1MSAwLjg1NjAxIDE4LjkwMDEgMi4yMTExNSAxOS41Nzc3TDEwLjIxMTEgMjMuNTc3N0MxMS4zMzczIDI0LjE0MDggMTIuNjYyNyAyNC4xNDA4IDEzLjc4ODkgMjMuNTc3N0wyMS43ODg5IDE5LjU3NzdDMjMuMTQ0IDE4LjkwMDEgMjQgMTcuNTE1MSAyNCAxNlY4QzI0IDYuNDg0OTEgMjMuMTQ0IDUuMDk5ODYgMjEuNzg4OSA0LjQyMjI5TDEzLjc4ODkgMC40MjIyOTFaTTggOEM4IDUuNzkwODYgOS43OTA4NiA0IDEyIDRDMTQuMjA5MSA0IDE2IDUuNzkwODYgMTYgOFYxNkMxNiAxOC4yMDkxIDE0LjIwOTEgMjAgMTIgMjBDOS43OTA4NiAyMCA4IDE4LjIwOTEgOCAxNlY4WlwiXG4gICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgLz5cbiAgICAgIDxwYXRoXG4gICAgICAgIGQ9XCJNMTQgOEMxNCA5LjEwNDU3IDEzLjEwNDYgMTAgMTIgMTBDMTAuODk1NCAxMCAxMCA5LjEwNDU3IDEwIDhDMTAgNi44OTU0MyAxMC44OTU0IDYgMTIgNkMxMy4xMDQ2IDYgMTQgNi44OTU0MyAxNCA4WlwiXG4gICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKSxcbiAgdGV4dDogXCJSZWZpbmUgUHJvamVjdFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRSZWZpbmVPcHRpb25zOiBJUmVmaW5lQ29udGV4dE9wdGlvbnMgPSB7XG4gIG11dGF0aW9uTW9kZTogXCJwZXNzaW1pc3RpY1wiLFxuICBzeW5jV2l0aExvY2F0aW9uOiBmYWxzZSxcbiAgdW5kb2FibGVUaW1lb3V0OiA1MDAwLFxuICB3YXJuV2hlblVuc2F2ZWRDaGFuZ2VzOiBmYWxzZSxcbiAgbGl2ZU1vZGU6IFwib2ZmXCIsXG4gIHJlZGlyZWN0OiB7XG4gICAgYWZ0ZXJDcmVhdGU6IFwibGlzdFwiLFxuICAgIGFmdGVyQ2xvbmU6IFwibGlzdFwiLFxuICAgIGFmdGVyRWRpdDogXCJsaXN0XCIsXG4gIH0sXG4gIG92ZXJ0aW1lOiB7XG4gICAgaW50ZXJ2YWw6IDEwMDAsXG4gIH0sXG4gIHRleHRUcmFuc2Zvcm1lcnM6IHtcbiAgICBodW1hbml6ZTogaHVtYW5pemVTdHJpbmcsXG4gICAgcGx1cmFsOiBwbHVyYWxpemUucGx1cmFsLFxuICAgIHNpbmd1bGFyOiBwbHVyYWxpemUuc2luZ3VsYXIsXG4gIH0sXG4gIGRpc2FibGVTZXJ2ZXJTaWRlVmFsaWRhdGlvbjogZmFsc2UsXG4gIHRpdGxlOiBkZWZhdWx0VGl0bGUsXG59O1xuXG5leHBvcnQgY29uc3QgUmVmaW5lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SVJlZmluZUNvbnRleHQ+KHtcbiAgaGFzRGFzaGJvYXJkOiBmYWxzZSxcbiAgbXV0YXRpb25Nb2RlOiBcInBlc3NpbWlzdGljXCIsXG4gIHdhcm5XaGVuVW5zYXZlZENoYW5nZXM6IGZhbHNlLFxuICBzeW5jV2l0aExvY2F0aW9uOiBmYWxzZSxcbiAgdW5kb2FibGVUaW1lb3V0OiA1MDAwLFxuICBUaXRsZTogdW5kZWZpbmVkLFxuICBTaWRlcjogdW5kZWZpbmVkLFxuICBIZWFkZXI6IHVuZGVmaW5lZCxcbiAgRm9vdGVyOiB1bmRlZmluZWQsXG4gIExheW91dDogRGVmYXVsdExheW91dCxcbiAgT2ZmTGF5b3V0QXJlYTogdW5kZWZpbmVkLFxuICBsaXZlTW9kZTogXCJvZmZcIixcbiAgb25MaXZlRXZlbnQ6IHVuZGVmaW5lZCxcbiAgb3B0aW9uczogZGVmYXVsdFJlZmluZU9wdGlvbnMsXG59KTtcblxuZXhwb3J0IGNvbnN0IFJlZmluZUNvbnRleHRQcm92aWRlcjogUmVhY3QuRkM8SVJlZmluZUNvbnRleHRQcm92aWRlcj4gPSAoe1xuICBoYXNEYXNoYm9hcmQsXG4gIG11dGF0aW9uTW9kZSxcbiAgd2FybldoZW5VbnNhdmVkQ2hhbmdlcyxcbiAgc3luY1dpdGhMb2NhdGlvbixcbiAgdW5kb2FibGVUaW1lb3V0LFxuICBjaGlsZHJlbixcbiAgRGFzaGJvYXJkUGFnZSxcbiAgVGl0bGUsXG4gIExheW91dCA9IERlZmF1bHRMYXlvdXQsXG4gIEhlYWRlcixcbiAgU2lkZXIsXG4gIEZvb3RlcixcbiAgT2ZmTGF5b3V0QXJlYSxcbiAgTG9naW5QYWdlID0gRGVmYXVsdExvZ2luUGFnZSxcbiAgY2F0Y2hBbGwsXG4gIGxpdmVNb2RlID0gXCJvZmZcIixcbiAgb25MaXZlRXZlbnQsXG4gIG9wdGlvbnMsXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFJlZmluZUNvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7XG4gICAgICAgIF9faW5pdGlhbGl6ZWQ6IHRydWUsXG4gICAgICAgIGhhc0Rhc2hib2FyZCxcbiAgICAgICAgbXV0YXRpb25Nb2RlLFxuICAgICAgICB3YXJuV2hlblVuc2F2ZWRDaGFuZ2VzLFxuICAgICAgICBzeW5jV2l0aExvY2F0aW9uLFxuICAgICAgICBUaXRsZSxcbiAgICAgICAgdW5kb2FibGVUaW1lb3V0LFxuICAgICAgICBMYXlvdXQsXG4gICAgICAgIEhlYWRlcixcbiAgICAgICAgU2lkZXIsXG4gICAgICAgIEZvb3RlcixcbiAgICAgICAgT2ZmTGF5b3V0QXJlYSxcbiAgICAgICAgRGFzaGJvYXJkUGFnZSxcbiAgICAgICAgTG9naW5QYWdlLFxuICAgICAgICBjYXRjaEFsbCxcbiAgICAgICAgbGl2ZU1vZGUsXG4gICAgICAgIG9uTGl2ZUV2ZW50LFxuICAgICAgICBvcHRpb25zLFxuICAgICAgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9SZWZpbmVDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHR5cGUgeyBMYXlvdXRQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yZWZpbmUvdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRMYXlvdXQ6IFJlYWN0LkZDPExheW91dFByb3BzPiA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgcmV0dXJuIDxkaXY+e2NoaWxkcmVufTwvZGl2Pjtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudENvbmZpZyB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgZGVmYXVsdFJlZmluZU9wdGlvbnMgfSBmcm9tIFwiQGNvbnRleHRzL3JlZmluZVwiO1xuXG5pbXBvcnQgdHlwZSB7IE11dGF0aW9uTW9kZSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IExpdmVNb2RlUHJvcHMgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvbGl2ZS90eXBlc1wiO1xuaW1wb3J0IHR5cGUge1xuICBJUmVmaW5lQ29udGV4dE9wdGlvbnMsXG4gIElSZWZpbmVPcHRpb25zLFxufSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVmaW5lL3R5cGVzXCI7XG5cbnR5cGUgSGFuZGxlUmVmaW5lT3B0aW9uc1Byb3BzID0ge1xuICBvcHRpb25zPzogSVJlZmluZU9wdGlvbnM7XG4gIG11dGF0aW9uTW9kZT86IE11dGF0aW9uTW9kZTtcbiAgc3luY1dpdGhMb2NhdGlvbj86IGJvb2xlYW47XG4gIHdhcm5XaGVuVW5zYXZlZENoYW5nZXM/OiBib29sZWFuO1xuICB1bmRvYWJsZVRpbWVvdXQ/OiBudW1iZXI7XG4gIGxpdmVNb2RlPzogTGl2ZU1vZGVQcm9wc1tcImxpdmVNb2RlXCJdO1xuICBkaXNhYmxlVGVsZW1ldHJ5PzogYm9vbGVhbjtcbiAgcmVhY3RRdWVyeUNsaWVudENvbmZpZz86IFF1ZXJ5Q2xpZW50Q29uZmlnO1xuICByZWFjdFF1ZXJ5RGV2dG9vbENvbmZpZz86IGFueSB8IGZhbHNlO1xufTtcblxudHlwZSBIYW5kbGVSZWZpbmVPcHRpb25zUmV0dXJuVmFsdWVzID0ge1xuICBvcHRpb25zV2l0aERlZmF1bHRzOiBJUmVmaW5lQ29udGV4dE9wdGlvbnM7XG4gIGRpc2FibGVUZWxlbWV0cnlXaXRoRGVmYXVsdDogYm9vbGVhbjtcbiAgcmVhY3RRdWVyeVdpdGhEZWZhdWx0czoge1xuICAgIGNsaWVudENvbmZpZzogUXVlcnlDbGllbnRDb25maWcgfCBJbnN0YW5jZVR5cGU8dHlwZW9mIFF1ZXJ5Q2xpZW50PjtcbiAgICBkZXZ0b29sQ29uZmlnOiBmYWxzZSB8IGFueTtcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVSZWZpbmVPcHRpb25zID0gKHtcbiAgb3B0aW9ucyxcbiAgZGlzYWJsZVRlbGVtZXRyeSxcbiAgbGl2ZU1vZGUsXG4gIG11dGF0aW9uTW9kZSxcbiAgcmVhY3RRdWVyeUNsaWVudENvbmZpZyxcbiAgcmVhY3RRdWVyeURldnRvb2xDb25maWcsXG4gIHN5bmNXaXRoTG9jYXRpb24sXG4gIHVuZG9hYmxlVGltZW91dCxcbiAgd2FybldoZW5VbnNhdmVkQ2hhbmdlcyxcbn06IEhhbmRsZVJlZmluZU9wdGlvbnNQcm9wcyA9IHt9KTogSGFuZGxlUmVmaW5lT3B0aW9uc1JldHVyblZhbHVlcyA9PiB7XG4gIGNvbnN0IG9wdGlvbnNXaXRoRGVmYXVsdHM6IElSZWZpbmVDb250ZXh0T3B0aW9ucyA9IHtcbiAgICBicmVhZGNydW1iOiBvcHRpb25zPy5icmVhZGNydW1iLFxuICAgIG11dGF0aW9uTW9kZTpcbiAgICAgIG9wdGlvbnM/Lm11dGF0aW9uTW9kZSA/P1xuICAgICAgbXV0YXRpb25Nb2RlID8/XG4gICAgICBkZWZhdWx0UmVmaW5lT3B0aW9ucy5tdXRhdGlvbk1vZGUsXG4gICAgdW5kb2FibGVUaW1lb3V0OlxuICAgICAgb3B0aW9ucz8udW5kb2FibGVUaW1lb3V0ID8/XG4gICAgICB1bmRvYWJsZVRpbWVvdXQgPz9cbiAgICAgIGRlZmF1bHRSZWZpbmVPcHRpb25zLnVuZG9hYmxlVGltZW91dCxcbiAgICBzeW5jV2l0aExvY2F0aW9uOlxuICAgICAgb3B0aW9ucz8uc3luY1dpdGhMb2NhdGlvbiA/P1xuICAgICAgc3luY1dpdGhMb2NhdGlvbiA/P1xuICAgICAgZGVmYXVsdFJlZmluZU9wdGlvbnMuc3luY1dpdGhMb2NhdGlvbixcbiAgICB3YXJuV2hlblVuc2F2ZWRDaGFuZ2VzOlxuICAgICAgb3B0aW9ucz8ud2FybldoZW5VbnNhdmVkQ2hhbmdlcyA/P1xuICAgICAgd2FybldoZW5VbnNhdmVkQ2hhbmdlcyA/P1xuICAgICAgZGVmYXVsdFJlZmluZU9wdGlvbnMud2FybldoZW5VbnNhdmVkQ2hhbmdlcyxcbiAgICBsaXZlTW9kZTogb3B0aW9ucz8ubGl2ZU1vZGUgPz8gbGl2ZU1vZGUgPz8gZGVmYXVsdFJlZmluZU9wdGlvbnMubGl2ZU1vZGUsXG4gICAgcmVkaXJlY3Q6IHtcbiAgICAgIGFmdGVyQ3JlYXRlOlxuICAgICAgICBvcHRpb25zPy5yZWRpcmVjdD8uYWZ0ZXJDcmVhdGUgPz9cbiAgICAgICAgZGVmYXVsdFJlZmluZU9wdGlvbnMucmVkaXJlY3QuYWZ0ZXJDcmVhdGUsXG4gICAgICBhZnRlckNsb25lOlxuICAgICAgICBvcHRpb25zPy5yZWRpcmVjdD8uYWZ0ZXJDbG9uZSA/P1xuICAgICAgICBkZWZhdWx0UmVmaW5lT3B0aW9ucy5yZWRpcmVjdC5hZnRlckNsb25lLFxuICAgICAgYWZ0ZXJFZGl0OlxuICAgICAgICBvcHRpb25zPy5yZWRpcmVjdD8uYWZ0ZXJFZGl0ID8/IGRlZmF1bHRSZWZpbmVPcHRpb25zLnJlZGlyZWN0LmFmdGVyRWRpdCxcbiAgICB9LFxuICAgIG92ZXJ0aW1lOiBvcHRpb25zPy5vdmVydGltZSA/PyBkZWZhdWx0UmVmaW5lT3B0aW9ucy5vdmVydGltZSxcbiAgICB0ZXh0VHJhbnNmb3JtZXJzOiB7XG4gICAgICBodW1hbml6ZTpcbiAgICAgICAgb3B0aW9ucz8udGV4dFRyYW5zZm9ybWVycz8uaHVtYW5pemUgPz9cbiAgICAgICAgZGVmYXVsdFJlZmluZU9wdGlvbnMudGV4dFRyYW5zZm9ybWVycy5odW1hbml6ZSxcbiAgICAgIHBsdXJhbDpcbiAgICAgICAgb3B0aW9ucz8udGV4dFRyYW5zZm9ybWVycz8ucGx1cmFsID8/XG4gICAgICAgIGRlZmF1bHRSZWZpbmVPcHRpb25zLnRleHRUcmFuc2Zvcm1lcnMucGx1cmFsLFxuICAgICAgc2luZ3VsYXI6XG4gICAgICAgIG9wdGlvbnM/LnRleHRUcmFuc2Zvcm1lcnM/LnNpbmd1bGFyID8/XG4gICAgICAgIGRlZmF1bHRSZWZpbmVPcHRpb25zLnRleHRUcmFuc2Zvcm1lcnMuc2luZ3VsYXIsXG4gICAgfSxcbiAgICBkaXNhYmxlU2VydmVyU2lkZVZhbGlkYXRpb246XG4gICAgICBvcHRpb25zPy5kaXNhYmxlU2VydmVyU2lkZVZhbGlkYXRpb24gPz9cbiAgICAgIGRlZmF1bHRSZWZpbmVPcHRpb25zLmRpc2FibGVTZXJ2ZXJTaWRlVmFsaWRhdGlvbixcbiAgICBwcm9qZWN0SWQ6IG9wdGlvbnM/LnByb2plY3RJZCxcbiAgICB1c2VOZXdRdWVyeUtleXM6IG9wdGlvbnM/LnVzZU5ld1F1ZXJ5S2V5cyxcbiAgICB0aXRsZToge1xuICAgICAgaWNvbjpcbiAgICAgICAgdHlwZW9mIG9wdGlvbnM/LnRpdGxlPy5pY29uID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgPyBkZWZhdWx0UmVmaW5lT3B0aW9ucy50aXRsZS5pY29uXG4gICAgICAgICAgOiBvcHRpb25zPy50aXRsZT8uaWNvbixcbiAgICAgIHRleHQ6XG4gICAgICAgIHR5cGVvZiBvcHRpb25zPy50aXRsZT8udGV4dCA9PT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICAgID8gZGVmYXVsdFJlZmluZU9wdGlvbnMudGl0bGUudGV4dFxuICAgICAgICAgIDogb3B0aW9ucz8udGl0bGU/LnRleHQsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBkaXNhYmxlVGVsZW1ldHJ5V2l0aERlZmF1bHQgPVxuICAgIG9wdGlvbnM/LmRpc2FibGVUZWxlbWV0cnkgPz8gZGlzYWJsZVRlbGVtZXRyeSA/PyBmYWxzZTtcblxuICBjb25zdCByZWFjdFF1ZXJ5V2l0aERlZmF1bHRzID0ge1xuICAgIGNsaWVudENvbmZpZzpcbiAgICAgIG9wdGlvbnM/LnJlYWN0UXVlcnk/LmNsaWVudENvbmZpZyA/PyByZWFjdFF1ZXJ5Q2xpZW50Q29uZmlnID8/IHt9LFxuICAgIGRldnRvb2xDb25maWc6XG4gICAgICBvcHRpb25zPy5yZWFjdFF1ZXJ5Py5kZXZ0b29sQ29uZmlnID8/IHJlYWN0UXVlcnlEZXZ0b29sQ29uZmlnID8/IHt9LFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgb3B0aW9uc1dpdGhEZWZhdWx0cyxcbiAgICBkaXNhYmxlVGVsZW1ldHJ5V2l0aERlZmF1bHQsXG4gICAgcmVhY3RRdWVyeVdpdGhEZWZhdWx0cyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IElSZWZpbmVDb250ZXh0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yZWZpbmUvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBSZWRpcmVjdEFjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9ob29rcy9mb3JtL3R5cGVzXCI7XG5cbnR5cGUgUmVkaXJlY3RQYWdlUHJvcHMgPSB7XG4gIHJlZGlyZWN0RnJvbVByb3BzPzogUmVkaXJlY3RBY3Rpb247XG4gIGFjdGlvbjogQWN0aW9uO1xuICByZWRpcmVjdE9wdGlvbnM6IElSZWZpbmVDb250ZXh0T3B0aW9uc1tcInJlZGlyZWN0XCJdO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZGlyZWN0UGFnZSA9ICh7XG4gIHJlZGlyZWN0RnJvbVByb3BzLFxuICBhY3Rpb24sXG4gIHJlZGlyZWN0T3B0aW9ucyxcbn06IFJlZGlyZWN0UGFnZVByb3BzKTogUmVkaXJlY3RBY3Rpb24gPT4ge1xuICBpZiAocmVkaXJlY3RGcm9tUHJvcHMgfHwgcmVkaXJlY3RGcm9tUHJvcHMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHJlZGlyZWN0RnJvbVByb3BzO1xuICB9XG5cbiAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICBjYXNlIFwiY2xvbmVcIjpcbiAgICAgIHJldHVybiByZWRpcmVjdE9wdGlvbnMuYWZ0ZXJDbG9uZTtcbiAgICBjYXNlIFwiY3JlYXRlXCI6XG4gICAgICByZXR1cm4gcmVkaXJlY3RPcHRpb25zLmFmdGVyQ3JlYXRlO1xuICAgIGNhc2UgXCJlZGl0XCI6XG4gICAgICByZXR1cm4gcmVkaXJlY3RPcHRpb25zLmFmdGVyRWRpdDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuIiwidHlwZSBFYWNoUmVzb2x2ZTxUUmVzb2x2ZSwgUmVzcG9uc2U+ID0gKFxuICByZXN1bHQ6IFRSZXNvbHZlLFxuICBpbmRleDogbnVtYmVyLFxuKSA9PiBSZXNwb25zZTtcbnR5cGUgRWFjaFJlamVjdDxUUmVqZWN0LCBSZXNwb25zZT4gPSAoXG4gIGVycm9yOiBUUmVqZWN0LFxuICBpbmRleDogbnVtYmVyLFxuKSA9PiBSZXNwb25zZTtcblxuZXhwb3J0IGNvbnN0IHNlcXVlbnRpYWxQcm9taXNlcyA9IGFzeW5jIDxcbiAgVFJlc29sdmUgPSB1bmtub3duLFxuICBUUmVqZWN0ID0gdW5rbm93bixcbiAgVFJlc29sdmVSZXNwb25zZSA9IHVua25vd24sXG4gIFRSZWplY3RSZXNwb25zZSA9IHVua25vd24sXG4+KFxuICBwcm9taXNlczogKCgpID0+IFByb21pc2U8VFJlc29sdmU+KVtdLFxuICBvbkVhY2hSZXNvbHZlOiBFYWNoUmVzb2x2ZTxUUmVzb2x2ZSwgVFJlc29sdmVSZXNwb25zZT4sXG4gIG9uRWFjaFJlamVjdDogRWFjaFJlamVjdDxUUmVqZWN0LCBUUmVqZWN0UmVzcG9uc2U+LFxuKTogUHJvbWlzZTwoVFJlc29sdmVSZXNwb25zZSB8IFRSZWplY3RSZXNwb25zZSlbXT4gPT4ge1xuICBjb25zdCByZXN1bHRzID0gW107XG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgUmVtb3ZlIHRoaXMgd2hlbiB3ZSBlbmFibGUgYGRvd25MZXZlbEl0ZXJhdGlvbnNgXG4gIGZvciAoY29uc3QgW2luZGV4LCBwcm9taXNlXSBvZiBwcm9taXNlcy5lbnRyaWVzKCkpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvbWlzZSgpO1xuXG4gICAgICByZXN1bHRzLnB1c2gob25FYWNoUmVzb2x2ZShyZXN1bHQsIGluZGV4KSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlc3VsdHMucHVzaChvbkVhY2hSZWplY3QoZXJyb3IgYXMgVFJlamVjdCwgaW5kZXgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5pbXBvcnQgeyByZW1vdmVMZWFkaW5nVHJhaWxpbmdTbGFzaGVzIH0gZnJvbSBcIi4uL3JvdXRlci9yZW1vdmUtbGVhZGluZy10cmFpbGluZy1zbGFzaGVzXCI7XG5cbi8qKlxuICogUGlja3MgdGhlIHJlc291cmNlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyLlxuICogSWRlbnRpZmllciBmYWxsYmFja3MgdG8gYG5hbWVgIGlmIGBpZGVudGlmaWVyYCBpcyBub3QgZXhwbGljaXRseSBwcm92aWRlZCB0byB0aGUgcmVzb3VyY2UuXG4gKiBJZiBsZWdhY3kgaXMgdHJ1ZSwgdGhlbiByZXNvdXJjZSBpcyBtYXRjaGVkIGJ5IGByb3V0ZWAgZmlyc3QgYW5kIHRoZW4gYnkgYG5hbWVgLlxuICovXG5leHBvcnQgY29uc3QgcGlja1Jlc291cmNlID0gKFxuICBpZGVudGlmaWVyPzogc3RyaW5nLFxuICByZXNvdXJjZXM6IElSZXNvdXJjZUl0ZW1bXSA9IFtdLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGlkZW50aWZpZXIgd2lsbCBiZSBjaGVja2VkIGZvciBgcm91dGVgIGFuZCBgbmFtZWAgcHJvcGVydGllc1xuICAgKi9cbiAgbGVnYWN5ID0gZmFsc2UsXG4pOiBJUmVzb3VyY2VJdGVtIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKCFpZGVudGlmaWVyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChsZWdhY3kpIHtcbiAgICBjb25zdCByZXNvdXJjZUJ5Um91dGUgPSByZXNvdXJjZXMuZmluZChcbiAgICAgIChyKSA9PlxuICAgICAgICByZW1vdmVMZWFkaW5nVHJhaWxpbmdTbGFzaGVzKHIucm91dGUgPz8gXCJcIikgPT09XG4gICAgICAgIHJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMoaWRlbnRpZmllciksXG4gICAgKTtcblxuICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VCeVJvdXRlXG4gICAgICA/IHJlc291cmNlQnlSb3V0ZVxuICAgICAgOiByZXNvdXJjZXMuZmluZCgocikgPT4gci5uYW1lID09PSBpZGVudGlmaWVyKTtcblxuICAgIHJldHVybiByZXNvdXJjZTtcbiAgfVxuXG4gIGxldCByZXNvdXJjZSA9IHJlc291cmNlcy5maW5kKChyKSA9PiByLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpO1xuICBpZiAoIXJlc291cmNlKSB7XG4gICAgcmVzb3VyY2UgPSByZXNvdXJjZXMuZmluZCgocikgPT4gci5uYW1lID09PSBpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiByZXNvdXJjZTtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IElSZXNvdXJjZUl0ZW0gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcbmltcG9ydCB7IHBpY2tSZXNvdXJjZSB9IGZyb20gXCIuLi9waWNrLXJlc291cmNlXCI7XG5pbXBvcnQgeyBwaWNrTm90RGVwcmVjYXRlZCB9IGZyb20gXCIuLi9waWNrTm90RGVwcmVjYXRlZFwiO1xuXG4vKipcbiAqIFBpY2tzIHRoZSBkYXRhIHByb3ZpZGVyIG5hbWUgYmFzZWQgb24gdGhlIHByb3ZpZGVkIG5hbWUgb3IgZmFsbGJhY2tzIHRvIHJlc291cmNlIGRlZmluaXRpb24sIG9yIGBkZWZhdWx0YC5cbiAqL1xuZXhwb3J0IGNvbnN0IHBpY2tEYXRhUHJvdmlkZXIgPSAoXG4gIHJlc291cmNlTmFtZT86IHN0cmluZyxcbiAgZGF0YVByb3ZpZGVyTmFtZT86IHN0cmluZyxcbiAgcmVzb3VyY2VzPzogSVJlc291cmNlSXRlbVtdLFxuKSA9PiB7XG4gIGlmIChkYXRhUHJvdmlkZXJOYW1lKSB7XG4gICAgcmV0dXJuIGRhdGFQcm92aWRlck5hbWU7XG4gIH1cblxuICAvKipcbiAgICogSW4gdGhpcyBoZWxwZXIsIHdlIGRvbid0IGRvIGByb3V0ZWAgYmFzZWQgbWF0Y2hpbmcgdGhlcmVmb3JlIHRoZXJlJ3Mgbm8gbmVlZCB0byBjaGVjayBmb3IgYGxlZ2FjeWAgYmVoYXZpb3JzLlxuICAgKi9cbiAgY29uc3QgcmVzb3VyY2UgPSBwaWNrUmVzb3VyY2UocmVzb3VyY2VOYW1lLCByZXNvdXJjZXMpO1xuXG4gIGNvbnN0IG1ldGEgPSBwaWNrTm90RGVwcmVjYXRlZChyZXNvdXJjZT8ubWV0YSwgcmVzb3VyY2U/Lm9wdGlvbnMpO1xuXG4gIGlmIChtZXRhPy5kYXRhUHJvdmlkZXJOYW1lKSB7XG4gICAgcmV0dXJuIG1ldGEuZGF0YVByb3ZpZGVyTmFtZTtcbiAgfVxuXG4gIHJldHVybiBcImRlZmF1bHRcIjtcbn07XG4iLCJleHBvcnQgY29uc3QgaGFuZGxlTXVsdGlwbGUgPSBhc3luYyA8VERhdGEgPSB1bmtub3duPihcbiAgcHJvbWlzZXM6IFByb21pc2U8eyBkYXRhOiBURGF0YSB9PltdLFxuKTogUHJvbWlzZTx7IGRhdGE6IFREYXRhW10gfT4gPT4ge1xuICByZXR1cm4ge1xuICAgIGRhdGE6IChhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcykpLm1hcCgocmVzKSA9PiByZXMuZGF0YSksXG4gIH07XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBHZXRMaXN0UmVzcG9uc2UgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgZ2V0TmV4dFBhZ2VQYXJhbSA9IChsYXN0UGFnZTogR2V0TGlzdFJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHsgcGFnaW5hdGlvbiwgY3Vyc29yIH0gPSBsYXN0UGFnZTtcblxuICAvLyBjdXJzb3IgcGFnaW5hdGlvblxuICBpZiAoY3Vyc29yPy5uZXh0KSB7XG4gICAgcmV0dXJuIGN1cnNvci5uZXh0O1xuICB9XG5cbiAgY29uc3QgY3VycmVudCA9IHBhZ2luYXRpb24/LmN1cnJlbnQgfHwgMTtcblxuICBjb25zdCBwYWdlU2l6ZSA9IHBhZ2luYXRpb24/LnBhZ2VTaXplIHx8IDEwO1xuICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKChsYXN0UGFnZS50b3RhbCB8fCAwKSAvIHBhZ2VTaXplKTtcblxuICByZXR1cm4gY3VycmVudCA8IHRvdGFsUGFnZXMgPyBOdW1iZXIoY3VycmVudCkgKyAxIDogdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFByZXZpb3VzUGFnZVBhcmFtID0gKGxhc3RQYWdlOiBHZXRMaXN0UmVzcG9uc2UpID0+IHtcbiAgY29uc3QgeyBwYWdpbmF0aW9uLCBjdXJzb3IgfSA9IGxhc3RQYWdlO1xuXG4gIC8vIGN1cnNvciBwYWdpbmF0aW9uXG4gIGlmIChjdXJzb3I/LnByZXYpIHtcbiAgICByZXR1cm4gY3Vyc29yLnByZXY7XG4gIH1cblxuICBjb25zdCBjdXJyZW50ID0gcGFnaW5hdGlvbj8uY3VycmVudCB8fCAxO1xuXG4gIHJldHVybiBjdXJyZW50ID09PSAxID8gdW5kZWZpbmVkIDogY3VycmVudCAtIDE7XG59O1xuIiwiaW1wb3J0IHR5cGUge1xuICBJUmVzb3VyY2VJdGVtLFxuICBSZXNvdXJjZVByb3BzLFxufSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcbmltcG9ydCB7IHJvdXRlR2VuZXJhdG9yIH0gZnJvbSBcIi4uL3JvdXRlR2VuZXJhdG9yXCI7XG5cbi8qKlxuICogRm9yIHRoZSBsZWdhY3kgZGVmaW5pdGlvbiBvZiByZXNvdXJjZXMsIHdlIGRpZCBhIGJhc2ljIHRyYW5zZm9ybWF0aW9uIGZvciBwcm92aWRlZCByZXNvdXJjZXNcbiAqIC0gVGhpcyBpcyBtZWFudCB0byBwcm92aWRlIGFuIGVhc2llciB3YXkgdG8gYWNjZXNzIHByb3BlcnRpZXMuXG4gKiAtIEluIHRoZSBuZXcgZGVmaW5pdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBkbyB0cmFuc2Zvcm1hdGlvbnMgYW5kIHByb3BlcnRpZXMgY2FuIGJlIGFjY2Vzc2VkIHZpYSBoZWxwZXJzIG9yIG1hbnVhbGx5LlxuICogVGhpcyBpcyBrZXB0IGZvciBiYWNrd2FyZCBjb21wYWJpbGl0eVxuICovXG5leHBvcnQgY29uc3QgbGVnYWN5UmVzb3VyY2VUcmFuc2Zvcm0gPSAocmVzb3VyY2VzOiBSZXNvdXJjZVByb3BzW10pID0+IHtcbiAgY29uc3QgX3Jlc291cmNlczogSVJlc291cmNlSXRlbVtdID0gW107XG5cbiAgcmVzb3VyY2VzLmZvckVhY2goKHJlc291cmNlKSA9PiB7XG4gICAgX3Jlc291cmNlcy5wdXNoKHtcbiAgICAgIC4uLnJlc291cmNlLFxuICAgICAgbGFiZWw6IHJlc291cmNlLm1ldGE/LmxhYmVsID8/IHJlc291cmNlLm9wdGlvbnM/LmxhYmVsLFxuICAgICAgcm91dGU6IHJvdXRlR2VuZXJhdG9yKHJlc291cmNlLCByZXNvdXJjZXMpLFxuICAgICAgY2FuQ3JlYXRlOiAhIXJlc291cmNlLmNyZWF0ZSxcbiAgICAgIGNhbkVkaXQ6ICEhcmVzb3VyY2UuZWRpdCxcbiAgICAgIGNhblNob3c6ICEhcmVzb3VyY2Uuc2hvdyxcbiAgICAgIGNhbkRlbGV0ZTogcmVzb3VyY2UuY2FuRGVsZXRlLFxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gX3Jlc291cmNlcztcbn07XG4iLCJpbXBvcnQgeyBzcGxpdFRvU2VnbWVudHMgfSBmcm9tIFwiLi9zcGxpdC10by1zZWdtZW50c1wiO1xuaW1wb3J0IHsgcmVtb3ZlTGVhZGluZ1RyYWlsaW5nU2xhc2hlcyB9IGZyb20gXCIuL3JlbW92ZS1sZWFkaW5nLXRyYWlsaW5nLXNsYXNoZXNcIjtcbmltcG9ydCB7IGlzUGFyYW1ldGVyIH0gZnJvbSBcIi4vaXMtcGFyYW1ldGVyXCI7XG5cbi8qKlxuICogUGlja3MgdGhlIHJvdXRlIHBhcmFtZXRlcnMgZnJvbSB0aGUgZ2l2ZW4gcm91dGUuXG4gKiAoZS5nLiAvdXNlcnMvOmlkL3Bvc3RzLzpwb3N0SWQgPT4gWydpZCcsICdwb3N0SWQnXSlcbiAqL1xuZXhwb3J0IGNvbnN0IHBpY2tSb3V0ZVBhcmFtcyA9IChyb3V0ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHNlZ21lbnRzID0gc3BsaXRUb1NlZ21lbnRzKHJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMocm91dGUpKTtcblxuICByZXR1cm4gc2VnbWVudHMuZmxhdE1hcCgocykgPT4ge1xuICAgIGlmIChpc1BhcmFtZXRlcihzKSkge1xuICAgICAgcmV0dXJuIFtzLnNsaWNlKDEpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH0pO1xufTtcbiIsIi8qKlxuICogUHJlcGFyZXMgdGhlIHJvdXRlIHBhcmFtcyBieSBjaGVja2luZyB0aGUgZXhpc3RpbmcgcGFyYW1zIGFuZCBtZXRhIGRhdGEuXG4gKiBNZXRhIGRhdGEgaXMgcHJpb3JpdGl6ZWQgb3ZlciBwYXJhbXMuXG4gKiBQYXJhbXMgYXJlIHByaW9yaXRpemVkIG92ZXIgcHJlZGV0ZXJtaW5lZCBpZCwgYWN0aW9uIGFuZCByZXNvdXJjZS5cbiAqIFRoaXMgbWVhbnMsIHdlIGNhbiB1c2UgYG1ldGFgIGZvciB1c2VyIHN1cHBsaWVkIHBhcmFtcyAoYm90aCBtYW51YWxseSBvciBmcm9tIHRoZSBxdWVyeSBzdHJpbmcpXG4gKi9cbmV4cG9ydCBjb25zdCBwcmVwYXJlUm91dGVQYXJhbXMgPSA8XG4gIFRSb3V0ZVBhcmFtcyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4+KFxuICByb3V0ZVBhcmFtczogKGtleW9mIFRSb3V0ZVBhcmFtcylbXSxcbiAgbWV0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fSxcbik6IFBhcnRpYWw8VFJvdXRlUGFyYW1zPiA9PiB7XG4gIHJldHVybiByb3V0ZVBhcmFtcy5yZWR1Y2UoXG4gICAgKGFjYywga2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1ldGFba2V5IGFzIHN0cmluZ107XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGFjY1trZXldID0gdmFsdWUgYXMgVFJvdXRlUGFyYW1zW2tleW9mIFRSb3V0ZVBhcmFtc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sXG4gICAge30gYXMgUGFydGlhbDxUUm91dGVQYXJhbXM+LFxuICApO1xufTtcbiIsImltcG9ydCB0eXBlIHsgTWV0YVF1ZXJ5IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUGFyc2VSZXNwb25zZSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvdHlwZXNcIjtcbmltcG9ydCB7IHBpY2tSb3V0ZVBhcmFtcyB9IGZyb20gXCIuL3BpY2stcm91dGUtcGFyYW1zXCI7XG5pbXBvcnQgeyBwcmVwYXJlUm91dGVQYXJhbXMgfSBmcm9tIFwiLi9wcmVwYXJlLXJvdXRlLXBhcmFtc1wiO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBjb21wb3NlIGEgcm91dGUgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1zIGFuZCBtZXRhLlxuICogLSBBIHJvdXRlIGNhbiBoYXZlIHBhcmFtZXRlcnMgbGlrZSAoZWc6IC91c2Vycy86aWQpXG4gKiAtIEZpcnN0IHdlIHBpY2sgdGhlIHJvdXRlIHBhcmFtcyBmcm9tIHRoZSByb3V0ZSAoZWc6IFtpZF0pXG4gKiAtIFRoZW4gd2UgcHJlcGFyZSB0aGUgcm91dGUgcGFyYW1zIHdpdGggdGhlIGdpdmVuIHBhcmFtcyBhbmQgbWV0YSAoZWc6IHsgaWQ6IDEgfSlcbiAqIC0gVGhlbiB3ZSByZXBsYWNlIHRoZSByb3V0ZSBwYXJhbXMgd2l0aCB0aGUgcHJlcGFyZWQgcm91dGUgcGFyYW1zIChlZzogL3VzZXJzLzEpXG4gKi9cbmV4cG9ydCBjb25zdCBjb21wb3NlUm91dGUgPSAoXG4gIGRlc2lnbmF0ZWRSb3V0ZTogc3RyaW5nLFxuICByZXNvdXJjZU1ldGE6IE1ldGFRdWVyeSA9IHt9LFxuICBwYXJzZWQ6IFBhcnNlUmVzcG9uc2UgPSB7fSxcbiAgbWV0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fSxcbik6IHN0cmluZyA9PiB7XG4gIC8vIHBpY2tSb3V0ZVBhcmFtcyAoZnJvbSB0aGUgcm91dGUpXG4gIGNvbnN0IHJvdXRlUGFyYW1zID0gcGlja1JvdXRlUGFyYW1zKGRlc2lnbmF0ZWRSb3V0ZSk7XG4gIC8vIHByZXBhcmVSb3V0ZVBhcmFtcyAoZnJvbSByb3V0ZSBwYXJhbXMsIHBhcmFtcyBhbmQgbWV0YSlcbiAgY29uc3QgcHJlcGFyZWRSb3V0ZVBhcmFtcyA9IHByZXBhcmVSb3V0ZVBhcmFtcyhyb3V0ZVBhcmFtcywge1xuICAgIC4uLnJlc291cmNlTWV0YSxcbiAgICAuLi4odHlwZW9mIHBhcnNlZD8uaWQgIT09IFwidW5kZWZpbmVkXCIgPyB7IGlkOiBwYXJzZWQuaWQgfSA6IHt9KSxcbiAgICAuLi4odHlwZW9mIHBhcnNlZD8uYWN0aW9uICE9PSBcInVuZGVmaW5lZFwiID8geyBhY3Rpb246IHBhcnNlZC5hY3Rpb24gfSA6IHt9KSxcbiAgICAuLi4odHlwZW9mIHBhcnNlZD8ucmVzb3VyY2UgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgID8geyByZXNvdXJjZTogcGFyc2VkLnJlc291cmNlIH1cbiAgICAgIDoge30pLFxuICAgIC4uLnBhcnNlZD8ucGFyYW1zLFxuICAgIC4uLm1ldGEsXG4gIH0pO1xuICAvLyByZXBsYWNlIHJvdXRlIHBhcmFtcyB3aXRoIHByZXBhcmVkIHJvdXRlIHBhcmFtc1xuICByZXR1cm4gZGVzaWduYXRlZFJvdXRlLnJlcGxhY2UoLzooW15cXC9dKykvZywgKG1hdGNoLCBrZXkpID0+IHtcbiAgICBjb25zdCBmcm9tUGFyYW1zID0gcHJlcGFyZWRSb3V0ZVBhcmFtc1trZXldO1xuICAgIGlmICh0eXBlb2YgZnJvbVBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGAke2Zyb21QYXJhbXN9YDtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoO1xuICB9KTtcbn07XG4iLCJpbXBvcnQgeyB1c2VBdXRoQmluZGluZ3NDb250ZXh0LCB1c2VMZWdhY3lBdXRoQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvYXV0aFwiO1xuXG4vKipcbiAqIEByZXR1cm5zIGF1dGhQcm92aWRlciBvciBsZWdhY3lBdXRoUHJvdmlkZXIgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBudWxsXG4gKiBAaW50ZXJuYWxcbiAqIE5PVEU6IFdpbGwgYmUgcmVtb3ZlZCBpbiB2NVxuICovXG5leHBvcnQgY29uc3QgdXNlQWN0aXZlQXV0aFByb3ZpZGVyID0gKCkgPT4ge1xuICBjb25zdCBsZWdhY3lBdXRoUHJvdmlkZXIgPSB1c2VMZWdhY3lBdXRoQ29udGV4dCgpO1xuICBjb25zdCBhdXRoUHJvdmlkZXIgPSB1c2VBdXRoQmluZGluZ3NDb250ZXh0KCk7XG5cbiAgaWYgKGF1dGhQcm92aWRlci5pc1Byb3ZpZGVkKSB7XG4gICAgcmV0dXJuIHsgaXNMZWdhY3k6IGZhbHNlLCAuLi5hdXRoUHJvdmlkZXIgfTtcbiAgfVxuXG4gIGlmIChsZWdhY3lBdXRoUHJvdmlkZXIuaXNQcm92aWRlZCkge1xuICAgIC8vIGxlZ2FjeUF1dGhQcm92aWRlciBpbnRlcmZhY2UgaXMgZGlmZmVyZW50IGZyb20gYXV0aFByb3ZpZGVyIGludGVyZmFjZVxuICAgIC8vIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBhdXRoUHJvdmlkZXIgaW50ZXJmYWNlIGZvciBzaW1wbGUgdXNhZ2VcbiAgICAvLyBpbiB0aGUgZnV0dXJlLCB3ZSB3aWxsIHJlbW92ZSBsZWdhY3lBdXRoUHJvdmlkZXJcbiAgICByZXR1cm4ge1xuICAgICAgaXNMZWdhY3k6IHRydWUsXG4gICAgICAuLi5sZWdhY3lBdXRoUHJvdmlkZXIsXG4gICAgICBjaGVjazogbGVnYWN5QXV0aFByb3ZpZGVyLmNoZWNrQXV0aCxcbiAgICAgIG9uRXJyb3I6IGxlZ2FjeUF1dGhQcm92aWRlci5jaGVja0Vycm9yLFxuICAgICAgZ2V0SWRlbnRpdHk6IGxlZ2FjeUF1dGhQcm92aWRlci5nZXRVc2VySWRlbnRpdHksXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbiIsImltcG9ydCB0eXBlIHsgUGFnaW5hdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgeyBwaWNrTm90RGVwcmVjYXRlZCB9IGZyb20gXCIuLi9waWNrTm90RGVwcmVjYXRlZFwiO1xuXG50eXBlIEhhbmRsZVBhZ2luYXRpb25QYXJhbXNQcm9wcyA9IHtcbiAgaGFzUGFnaW5hdGlvbj86IGJvb2xlYW47XG4gIHBhZ2luYXRpb24/OiBQYWdpbmF0aW9uO1xuICBjb25maWdQYWdpbmF0aW9uPzogUGFnaW5hdGlvbjtcbn07XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVQYWdpbmF0aW9uUGFyYW1zID0gKHtcbiAgaGFzUGFnaW5hdGlvbixcbiAgcGFnaW5hdGlvbixcbiAgY29uZmlnUGFnaW5hdGlvbixcbn06IEhhbmRsZVBhZ2luYXRpb25QYXJhbXNQcm9wcyA9IHt9KTogUmVxdWlyZWQ8UGFnaW5hdGlvbj4gPT4ge1xuICBjb25zdCBoYXNQYWdpbmF0aW9uU3RyaW5nID0gaGFzUGFnaW5hdGlvbiA9PT0gZmFsc2UgPyBcIm9mZlwiIDogXCJzZXJ2ZXJcIjtcbiAgY29uc3QgbW9kZSA9IHBhZ2luYXRpb24/Lm1vZGUgPz8gaGFzUGFnaW5hdGlvblN0cmluZztcblxuICBjb25zdCBjdXJyZW50ID1cbiAgICBwaWNrTm90RGVwcmVjYXRlZChwYWdpbmF0aW9uPy5jdXJyZW50LCBjb25maWdQYWdpbmF0aW9uPy5jdXJyZW50KSA/PyAxO1xuXG4gIGNvbnN0IHBhZ2VTaXplID1cbiAgICBwaWNrTm90RGVwcmVjYXRlZChwYWdpbmF0aW9uPy5wYWdlU2l6ZSwgY29uZmlnUGFnaW5hdGlvbj8ucGFnZVNpemUpID8/IDEwO1xuXG4gIHJldHVybiB7XG4gICAgY3VycmVudCxcbiAgICBwYWdlU2l6ZSxcbiAgICBtb2RlLFxuICB9O1xufTtcbiIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IHVzZU1lZGlhUXVlcnkgPSAocXVlcnk6IHN0cmluZykgPT4ge1xuICBjb25zdCBbbWF0Y2hlcywgc2V0TWF0Y2hlc10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBtZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KTtcbiAgICBpZiAobWVkaWEubWF0Y2hlcyAhPT0gbWF0Y2hlcykge1xuICAgICAgc2V0TWF0Y2hlcyhtZWRpYS5tYXRjaGVzKTtcbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiBzZXRNYXRjaGVzKG1lZGlhLm1hdGNoZXMpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGxpc3RlbmVyKTtcbiAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbGlzdGVuZXIpO1xuICB9LCBbbWF0Y2hlcywgcXVlcnldKTtcblxuICByZXR1cm4gbWF0Y2hlcztcbn07XG4iLCJpbXBvcnQgdHlwZSB7IHVzZVRyYW5zbGF0ZSB9IGZyb20gXCJAaG9va3MvaTE4blwiO1xuXG5leHBvcnQgY29uc3Qgc2FmZVRyYW5zbGF0ZSA9IChcbiAgdHJhbnNsYXRlOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VUcmFuc2xhdGU+LFxuICBrZXk6IHN0cmluZyxcbiAgZGVmYXVsdE1lc3NhZ2U/OiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBhbnksXG4pID0+IHtcbiAgY29uc3QgdHJhbnNsYXRlZCA9IG9wdGlvbnNcbiAgICA/IHRyYW5zbGF0ZShrZXksIG9wdGlvbnMsIGRlZmF1bHRNZXNzYWdlKVxuICAgIDogdHJhbnNsYXRlKGtleSwgZGVmYXVsdE1lc3NhZ2UpO1xuXG4gIGNvbnN0IGZhbGxiYWNrID0gZGVmYXVsdE1lc3NhZ2UgPz8ga2V5O1xuXG4gIGlmICh0cmFuc2xhdGVkID09PSBrZXkgfHwgdHlwZW9mIHRyYW5zbGF0ZWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cblxuICByZXR1cm4gdHJhbnNsYXRlZDtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IHVzZVRyYW5zbGF0ZSB9IGZyb20gXCJAaG9va3MvaTE4blwiO1xuXG5pbXBvcnQgdHlwZSB7IElSZXNvdXJjZUl0ZW0gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcbmltcG9ydCB7IHNhZmVUcmFuc2xhdGUgfSBmcm9tIFwiLi4vc2FmZS10cmFuc2xhdGVcIjtcbmltcG9ydCB7IHVzZXJGcmllbmRseVJlc291cmNlTmFtZSB9IGZyb20gXCIuLi91c2VyRnJpZW5kbHlSZXNvdXJjZU5hbWVcIjtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgZG9jdW1lbnQgdGl0bGUgZm9yIHRoZSBnaXZlbiByZXNvdXJjZSBhbmQgYWN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVEZWZhdWx0RG9jdW1lbnRUaXRsZShcbiAgdHJhbnNsYXRlOiBSZXR1cm5UeXBlPHR5cGVvZiB1c2VUcmFuc2xhdGU+LFxuICByZXNvdXJjZT86IElSZXNvdXJjZUl0ZW0sXG4gIGFjdGlvbj86IHN0cmluZyxcbiAgaWQ/OiBzdHJpbmcsXG4gIHJlc291cmNlTmFtZT86IHN0cmluZyxcbikge1xuICBjb25zdCBhY3Rpb25QcmVmaXhNYXRjaGVyID0ge1xuICAgIGNyZWF0ZTogXCJDcmVhdGUgbmV3IFwiLFxuICAgIGNsb25lOiBgIyR7aWQgPz8gXCJcIn0gQ2xvbmUgYCxcbiAgICBlZGl0OiBgIyR7aWQgPz8gXCJcIn0gRWRpdCBgLFxuICAgIHNob3c6IGAjJHtpZCA/PyBcIlwifSBTaG93IGAsXG4gICAgbGlzdDogXCJcIixcbiAgfTtcblxuICBjb25zdCBpZGVudGlmaWVyID0gcmVzb3VyY2U/LmlkZW50aWZpZXIgPz8gcmVzb3VyY2U/Lm5hbWU7XG5cbiAgY29uc3QgcmVzb3VyY2VOYW1lRmFsbGJhY2sgPVxuICAgIHJlc291cmNlPy5sYWJlbCA/P1xuICAgIHJlc291cmNlPy5tZXRhPy5sYWJlbCA/P1xuICAgIHVzZXJGcmllbmRseVJlc291cmNlTmFtZShcbiAgICAgIGlkZW50aWZpZXIsXG4gICAgICBhY3Rpb24gPT09IFwibGlzdFwiID8gXCJwbHVyYWxcIiA6IFwic2luZ3VsYXJcIixcbiAgICApO1xuXG4gIGNvbnN0IHJlc291cmNlTmFtZVdpdGhGYWxsYmFjayA9IHJlc291cmNlTmFtZSA/PyByZXNvdXJjZU5hbWVGYWxsYmFjaztcblxuICBjb25zdCBkZWZhdWx0VGl0bGUgPSBzYWZlVHJhbnNsYXRlKFxuICAgIHRyYW5zbGF0ZSxcbiAgICBcImRvY3VtZW50VGl0bGUuZGVmYXVsdFwiLFxuICAgIFwiUmVmaW5lXCIsXG4gICk7XG4gIGNvbnN0IHN1ZmZpeCA9IHNhZmVUcmFuc2xhdGUodHJhbnNsYXRlLCBcImRvY3VtZW50VGl0bGUuc3VmZml4XCIsIFwiIHwgUmVmaW5lXCIpO1xuICBsZXQgYXV0b0dlbmVyYXRlZFRpdGxlID0gZGVmYXVsdFRpdGxlO1xuXG4gIGlmIChhY3Rpb24gJiYgaWRlbnRpZmllcikge1xuICAgIGF1dG9HZW5lcmF0ZWRUaXRsZSA9IHNhZmVUcmFuc2xhdGUoXG4gICAgICB0cmFuc2xhdGUsXG4gICAgICBgZG9jdW1lbnRUaXRsZS4ke2lkZW50aWZpZXJ9LiR7YWN0aW9ufWAsXG4gICAgICBgJHtcbiAgICAgICAgYWN0aW9uUHJlZml4TWF0Y2hlclthY3Rpb24gYXMga2V5b2YgdHlwZW9mIGFjdGlvblByZWZpeE1hdGNoZXJdID8/IFwiXCJcbiAgICAgIH0ke3Jlc291cmNlTmFtZVdpdGhGYWxsYmFja30ke3N1ZmZpeH1gLFxuICAgICAgeyBpZCB9LFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gYXV0b0dlbmVyYXRlZFRpdGxlO1xufVxuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBSZWZpbmVDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9yZWZpbmVcIjtcbmltcG9ydCB0eXBlIHsgSVJlZmluZUNvbnRleHRPcHRpb25zIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL3JlZmluZS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBNdXRhdGlvbk1vZGUgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuXG50eXBlIFVzZU11dGF0aW9uTW9kZVR5cGUgPSAoXG4gIHByZWZlcnJlZE11dGF0aW9uTW9kZT86IE11dGF0aW9uTW9kZSxcbiAgcHJlZmVycmVkVW5kb2FibGVUaW1lb3V0PzogbnVtYmVyLFxuKSA9PiB7XG4gIG11dGF0aW9uTW9kZTogSVJlZmluZUNvbnRleHRPcHRpb25zW1wibXV0YXRpb25Nb2RlXCJdO1xuICB1bmRvYWJsZVRpbWVvdXQ6IElSZWZpbmVDb250ZXh0T3B0aW9uc1tcInVuZG9hYmxlVGltZW91dFwiXTtcbn07XG5cbi8qKlxuICogTXV0YXRpb24gbW9kZSBkZXRlcm1pbmVzIHdoaWNoIG1vZGUgdGhlIG11dGF0aW9uIHJ1bnMgd2l0aC5cbiAqIE11dGF0aW9ucyBjYW4gcnVuIHVuZGVyIHRocmVlIGRpZmZlcmVudCBtb2RlczogYHBlc3NpbWlzdGljYCwgYG9wdGltaXN0aWNgIGFuZCBgdW5kb2FibGVgLlxuICogRWFjaCBtb2RlIGNvcnJlc3BvbmRzIHRvIGEgZGlmZmVyZW50IHR5cGUgb2YgdXNlciBleHBlcmllbmNlLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2d1aWRlcy1hbmQtY29uY2VwdHMvbXV0YXRpb24tbW9kZX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZU11dGF0aW9uTW9kZTogVXNlTXV0YXRpb25Nb2RlVHlwZSA9IChcbiAgcHJlZmVycmVkTXV0YXRpb25Nb2RlPzogTXV0YXRpb25Nb2RlLFxuICBwcmVmZXJyZWRVbmRvYWJsZVRpbWVvdXQ/OiBudW1iZXIsXG4pID0+IHtcbiAgY29uc3QgeyBtdXRhdGlvbk1vZGUsIHVuZG9hYmxlVGltZW91dCB9ID0gdXNlQ29udGV4dChSZWZpbmVDb250ZXh0KTtcblxuICByZXR1cm4ge1xuICAgIG11dGF0aW9uTW9kZTogcHJlZmVycmVkTXV0YXRpb25Nb2RlID8/IG11dGF0aW9uTW9kZSxcbiAgICB1bmRvYWJsZVRpbWVvdXQ6IHByZWZlcnJlZFVuZG9hYmxlVGltZW91dCA/PyB1bmRvYWJsZVRpbWVvdXQsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBSZWZpbmVDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9yZWZpbmVcIjtcbmltcG9ydCB7IFVuc2F2ZWRXYXJuQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvdW5zYXZlZFdhcm5cIjtcbmltcG9ydCB0eXBlIHsgSVJlZmluZUNvbnRleHRPcHRpb25zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JlZmluZS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBJVW5zYXZlZFdhcm5Db250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Vuc2F2ZWRXYXJuL3R5cGVzXCI7XG5cbnR5cGUgVXNlV2FybkFib3V0Q2hhbmdlVHlwZSA9ICgpID0+IHtcbiAgd2FybldoZW5VbnNhdmVkQ2hhbmdlczogSVJlZmluZUNvbnRleHRPcHRpb25zW1wid2FybldoZW5VbnNhdmVkQ2hhbmdlc1wiXTtcbiAgd2FybldoZW46IE5vbk51bGxhYmxlPElVbnNhdmVkV2FybkNvbnRleHRbXCJ3YXJuV2hlblwiXT47XG4gIHNldFdhcm5XaGVuOiBOb25OdWxsYWJsZTxJVW5zYXZlZFdhcm5Db250ZXh0W1wic2V0V2FybldoZW5cIl0+O1xufTtcblxuLyoqXG4gKiBXaGVuIHlvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcyBhbmQgdHJ5IHRvIGxlYXZlIHRoZSBjdXJyZW50IHBhZ2UsICoqcmVmaW5lKiogc2hvd3MgYSBjb25maXJtYXRpb24gbW9kYWwgYm94LlxuICogVG8gYWN0aXZhdGUgdGhpcyBmZWF0dXJlLCBzZXQgdGhlIGB3YXJuV2hlblVuc2F2ZWRDaGFuZ2VzYCB0byBgdHJ1ZWAuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2NvbXBvbmVudHMvcmVmaW5lLWNvbmZpZyN3YXJud2hlbnVuc2F2ZWRjaGFuZ2VzfSBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgY29uc3QgdXNlV2FybkFib3V0Q2hhbmdlOiBVc2VXYXJuQWJvdXRDaGFuZ2VUeXBlID0gKCkgPT4ge1xuICBjb25zdCB7IHdhcm5XaGVuVW5zYXZlZENoYW5nZXMgfSA9IHVzZUNvbnRleHQoUmVmaW5lQ29udGV4dCk7XG5cbiAgY29uc3QgeyB3YXJuV2hlbiwgc2V0V2FybldoZW4gfSA9IHVzZUNvbnRleHQoVW5zYXZlZFdhcm5Db250ZXh0KTtcblxuICByZXR1cm4ge1xuICAgIHdhcm5XaGVuVW5zYXZlZENoYW5nZXMsXG4gICAgd2FybldoZW46IEJvb2xlYW4od2FybldoZW4pLFxuICAgIHNldFdhcm5XaGVuOiBzZXRXYXJuV2hlbiA/PyAoKCkgPT4gdW5kZWZpbmVkKSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHR5cGUgUHJvcHNXaXRoQ2hpbGRyZW4gfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHR5cGUgeyBJVW5zYXZlZFdhcm5Db250ZXh0IH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IFVuc2F2ZWRXYXJuQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SVVuc2F2ZWRXYXJuQ29udGV4dD4oe30pO1xuXG5leHBvcnQgY29uc3QgVW5zYXZlZFdhcm5Db250ZXh0UHJvdmlkZXI6IFJlYWN0LkZDPFByb3BzV2l0aENoaWxkcmVuPiA9ICh7XG4gIGNoaWxkcmVuLFxufSkgPT4ge1xuICBjb25zdCBbd2FybldoZW4sIHNldFdhcm5XaGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICByZXR1cm4gKFxuICAgIDxVbnNhdmVkV2FybkNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgd2FybldoZW4sIHNldFdhcm5XaGVuIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVW5zYXZlZFdhcm5Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgUmVmaW5lQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvcmVmaW5lXCI7XG5pbXBvcnQgdHlwZSB7IElSZWZpbmVDb250ZXh0T3B0aW9ucyB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9yZWZpbmUvdHlwZXNcIjtcblxudHlwZSBVc2VTeW5jV2l0aExvY2F0aW9uVHlwZSA9ICgpID0+IHtcbiAgc3luY1dpdGhMb2NhdGlvbjogSVJlZmluZUNvbnRleHRPcHRpb25zW1wic3luY1dpdGhMb2NhdGlvblwiXTtcbn07XG5cbi8qKlxuICogTGlzdCBxdWVyeSBwYXJhbWV0ZXIgdmFsdWVzIGNhbiBiZSBlZGl0ZWQgbWFudWFsbHkgYnkgdHlwaW5nIGRpcmVjdGx5IGluIHRoZSBVUkwuXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIGZlYXR1cmUgYHN5bmNXaXRoTG9jYXRpb25gIG5lZWRzIHRvIGJlIHNldCB0byBgdHJ1ZWAuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2NvbXBvbmVudHMvcmVmaW5lLWNvbmZpZy8jc3luY3dpdGhsb2NhdGlvbn0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVN5bmNXaXRoTG9jYXRpb246IFVzZVN5bmNXaXRoTG9jYXRpb25UeXBlID0gKCkgPT4ge1xuICBjb25zdCB7IHN5bmNXaXRoTG9jYXRpb24gfSA9IHVzZUNvbnRleHQoUmVmaW5lQ29udGV4dCk7XG5cbiAgcmV0dXJuIHsgc3luY1dpdGhMb2NhdGlvbiB9O1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgUmVmaW5lQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvcmVmaW5lXCI7XG5cbmltcG9ydCB0eXBlIHsgVGl0bGVQcm9wcyB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9yZWZpbmUvdHlwZXNcIjtcblxuLyoqXG4gKiBgdXNlVGl0bGVgIHJldHVybnMgYSBjb21wb25lbnQgdGhhdCBjYWxscyB0aGUgYDxUaXRsZT5gIHBhc3NlZCB0byB0aGUgYDxSZWZpbmU+YC5cbiAqIEluIHRoaXMgd2F5LCBpdCBiZWNvbWVzIGVhc2llciBmb3IgdXMgdG8gYWNjZXNzIHRoaXMgY29tcG9uZW50IGluIHZhcmlvdXMgcGFydHMgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9yZWZpbmUvdXNlVGl0bGV9IGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VUaXRsZTogKCkgPT4gUmVhY3QuRkM8VGl0bGVQcm9wcz4gfCB1bmRlZmluZWQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgVGl0bGUgfSA9IHVzZUNvbnRleHQoUmVmaW5lQ29udGV4dCk7XG5cbiAgcmV0dXJuIFRpdGxlO1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgUmVmaW5lQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvcmVmaW5lXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VSZWZpbmVDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCB7XG4gICAgRm9vdGVyLFxuICAgIEhlYWRlcixcbiAgICBMYXlvdXQsXG4gICAgT2ZmTGF5b3V0QXJlYSxcbiAgICBTaWRlcixcbiAgICBUaXRsZSxcbiAgICBoYXNEYXNoYm9hcmQsXG4gICAgbXV0YXRpb25Nb2RlLFxuICAgIHN5bmNXaXRoTG9jYXRpb24sXG4gICAgdW5kb2FibGVUaW1lb3V0LFxuICAgIHdhcm5XaGVuVW5zYXZlZENoYW5nZXMsXG4gICAgRGFzaGJvYXJkUGFnZSxcbiAgICBMb2dpblBhZ2UsXG4gICAgY2F0Y2hBbGwsXG4gICAgb3B0aW9ucyxcbiAgICBfX2luaXRpYWxpemVkLFxuICB9ID0gdXNlQ29udGV4dChSZWZpbmVDb250ZXh0KTtcblxuICByZXR1cm4ge1xuICAgIF9faW5pdGlhbGl6ZWQsXG4gICAgRm9vdGVyLFxuICAgIEhlYWRlcixcbiAgICBMYXlvdXQsXG4gICAgT2ZmTGF5b3V0QXJlYSxcbiAgICBTaWRlcixcbiAgICBUaXRsZSxcbiAgICBoYXNEYXNoYm9hcmQsXG4gICAgbXV0YXRpb25Nb2RlLFxuICAgIHN5bmNXaXRoTG9jYXRpb24sXG4gICAgdW5kb2FibGVUaW1lb3V0LFxuICAgIHdhcm5XaGVuVW5zYXZlZENoYW5nZXMsXG4gICAgRGFzaGJvYXJkUGFnZSxcbiAgICBMb2dpblBhZ2UsXG4gICAgY2F0Y2hBbGwsXG4gICAgb3B0aW9ucyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyB1c2VSZWZpbmVDb250ZXh0IH0gZnJvbSBcIkBob29rcy9yZWZpbmVcIjtcblxuLyoqXG4gKiBBIG1ldGhvZCB0aGF0IHRoZSBpbnRlcm5hbCB1c2VzXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVVzZXJGcmllbmRseU5hbWUgPSAoKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zOiB7IHRleHRUcmFuc2Zvcm1lcnMgfSxcbiAgfSA9IHVzZVJlZmluZUNvbnRleHQoKTtcblxuICBjb25zdCBnZXRGcmllbmRseU5hbWUgPSAobmFtZSA9IFwiXCIsIHR5cGU6IFwic2luZ3VsYXJcIiB8IFwicGx1cmFsXCIpOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IGh1bWFuaXplTmFtZSA9IHRleHRUcmFuc2Zvcm1lcnMuaHVtYW5pemUobmFtZSk7XG4gICAgaWYgKHR5cGUgPT09IFwic2luZ3VsYXJcIikge1xuICAgICAgcmV0dXJuIHRleHRUcmFuc2Zvcm1lcnMuc2luZ3VsYXIoaHVtYW5pemVOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHRUcmFuc2Zvcm1lcnMucGx1cmFsKGh1bWFuaXplTmFtZSk7XG4gIH07XG5cbiAgcmV0dXJuIGdldEZyaWVuZGx5TmFtZTtcbn07XG4iLCJjb25zdCBpc05lc3RlZCA9IChvYmo6IGFueSkgPT4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGw7XG5jb25zdCBpc0FycmF5ID0gKG9iajogYW55KSA9PiBBcnJheS5pc0FycmF5KG9iaik7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuT2JqZWN0S2V5cyA9IChvYmo6IGFueSwgcHJlZml4ID0gXCJcIikgPT4ge1xuICBpZiAoIWlzTmVzdGVkKG9iaikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW3ByZWZpeF06IG9iaixcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKFxuICAgIChhY2MsIGtleSkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFByZWZpeCA9IHByZWZpeC5sZW5ndGggPyBgJHtwcmVmaXh9LmAgOiBcIlwiO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQob2JqW2tleV0pICYmIE9iamVjdC5rZXlzKG9ialtrZXldKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkob2JqW2tleV0pICYmIG9ialtrZXldLmxlbmd0aCkge1xuICAgICAgICAgIG9ialtrZXldLmZvckVhY2goKGl0ZW06IHVua25vd25bXSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgYWNjLFxuICAgICAgICAgICAgICBmbGF0dGVuT2JqZWN0S2V5cyhpdGVtLCBgJHtjdXJyZW50UHJlZml4ICsga2V5fS4ke2luZGV4fWApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGFjYywgZmxhdHRlbk9iamVjdEtleXMob2JqW2tleV0sIGN1cnJlbnRQcmVmaXggKyBrZXkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFdmVuIGlmIGl0J3MgYSBuZXN0ZWQgb2JqZWN0LCBpdCBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIGtleSBhcyB3ZWxsXG4gICAgICAgIGFjY1tjdXJyZW50UHJlZml4ICsga2V5XSA9IG9ialtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjW2N1cnJlbnRQcmVmaXggKyBrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sXG4gICAge30gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICk7XG59O1xuIiwiZXhwb3J0IGNvbnN0IHByb3BlcnR5UGF0aFRvQXJyYXkgPSAocHJvcGVydHlQYXRoOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHByb3BlcnR5UGF0aFxuICAgIC5zcGxpdChcIi5cIilcbiAgICAubWFwKChpdGVtKSA9PiAoIU51bWJlci5pc05hTihOdW1iZXIoaXRlbSkpID8gTnVtYmVyKGl0ZW0pIDogaXRlbSkpO1xufTtcbiIsImV4cG9ydCBjb25zdCBkb3dubG9hZEluQnJvd3NlciA9IChcbiAgZmlsZW5hbWU6IHN0cmluZyxcbiAgY29udGVudDogc3RyaW5nLFxuICB0eXBlPzogc3RyaW5nLFxuKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtjb250ZW50XSwgeyB0eXBlIH0pO1xuXG4gIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgbGluay5zZXRBdHRyaWJ1dGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xuICBsaW5rLmRvd25sb2FkID0gZmlsZW5hbWU7XG4gIGNvbnN0IGJsb2JVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICBsaW5rLmhyZWYgPSBibG9iVXJsO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICBsaW5rLmNsaWNrKCk7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gIC8vIEFzIHBlciBkb2N1bWVudGF0aW9uLCBjYWxsIFVSTC5yZXZva2VPYmplY3RVUkwgdG8gcmVtb3ZlIHRoZSBibG9iIGZyb20gbWVtb3J5LlxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBVUkwucmV2b2tlT2JqZWN0VVJMKGJsb2JVcmwpO1xuICB9KTtcbn07XG4iLCIvKipcbiAqIERlbGF5cyB0aGUgZXhlY3V0aW9uIG9mIGEgY2FsbGJhY2sgZnVuY3Rpb24gYXN5bmNocm9ub3VzbHkuXG4gKiBUaGlzIHV0aWxpdHkgZnVuY3Rpb24gaXMgdXNlZCB0byBkZWZlciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBwcm92aWRlZFxuICogY2FsbGJhY2ssIGFsbG93aW5nIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgdG8gY2xlYXIgYmVmb3JlIHRoZSBjYWxsYmFja1xuICogaXMgaW52b2tlZC4gSXQgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3IgZW5zdXJpbmcgbm9uLWJsb2NraW5nIGJlaGF2aW9yXG4gKiBhbmQgcHJvdmlkaW5nIGEgY2xlYXIgaW50ZW50IHdoZW4gYSAwIG1zIHRpbWVvdXQgaXMgdXNlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmVyRXhlY3V0aW9uID0gKGZuOiBGdW5jdGlvbikgPT4ge1xuICBzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG4iLCJpbXBvcnQgZGVib3VuY2UgZnJvbSBcImxvZGFzaC1lcy9kZWJvdW5jZS5qc1wiO1xuXG50eXBlIENhbGxiYWNrczxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueSkgPT4gYW55PiA9IHtcbiAgcmVzb2x2ZT86ICh2YWx1ZTogQXdhaXRlZDxSZXR1cm5UeXBlPFQ+PikgPT4gdm9pZDtcbiAgcmVqZWN0PzogKHJlYXNvbj86IGFueSkgPT4gdm9pZDtcbn07XG5cbnR5cGUgRGVib3VuY2VkRnVuY3Rpb248VCBleHRlbmRzICguLi5hcmdzOiBhbnkpID0+IGFueT4gPSB7XG4gICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KTogUHJvbWlzZTxBd2FpdGVkPFJldHVyblR5cGU8VD4+PjtcbiAgZmx1c2g6ICgpID0+IHZvaWQ7XG4gIGNhbmNlbDogKCkgPT4gdm9pZDtcbn07XG5cbi8qKlxuICogRGVib3VuY2VzIHN5bmMgYW5kIGFzeW5jIGZ1bmN0aW9ucyB3aXRoIGdpdmVuIHdhaXQgdGltZS4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm5zIGEgcHJvbWlzZSB3aGljaCBjYW4gYmUgYXdhaXRlZCBvciBjYXRjaGVkLlxuICogT25seSB0aGUgbGFzdCBjYWxsIG9mIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2lsbCByZXNvbHZlIG9yIHJlamVjdC5cbiAqIFByZXZpb3VzIGNhbGxzIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gY2FuY2VsUmVhc29uLlxuICpcbiAqIFRoZSBvcmlnaW5hbCBkZWJvdW5jZSBmdW5jdGlvbiBkb2Vzbid0IHdvcmsgd2VsbCB3aXRoIGFzeW5jIGZ1bmN0aW9ucyxcbiAqIEl0IHdvbid0IHJldHVybiBhIHByb21pc2UgdG8gcmVzb2x2ZS9yZWplY3QgYW5kIHRoZXJlZm9yZSBpdCdzIG5vdCBwb3NzaWJsZSB0byBhd2FpdCB0aGUgcmVzdWx0LlxuICogVGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gYSBwcm9taXNlIHRvIGhhbmRsZSBhbmQgYXdhaXQgdGhlIHJlc3VsdC5cbiAqIFByZXZpb3VzIGNhbGxzIHdpbGwgYmUgcmVqZWN0ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgYSBuZXcgY2FsbCBtYWRlLlxuICovXG5leHBvcnQgY29uc3QgYXN5bmNEZWJvdW5jZSA9IDxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxuICBmdW5jOiBULFxuICB3YWl0ID0gMTAwMCxcbiAgY2FuY2VsUmVhc29uPzogc3RyaW5nLFxuKTogRGVib3VuY2VkRnVuY3Rpb248VD4gPT4ge1xuICBsZXQgY2FsbGJhY2tzOiBBcnJheTxDYWxsYmFja3M8VD4+ID0gW107XG5cbiAgY29uc3QgY2FuY2VsUHJldmlvdXMgPSAoKSA9PiB7XG4gICAgY2FsbGJhY2tzLmZvckVhY2goKGNiKSA9PiBjYi5yZWplY3Q/LihjYW5jZWxSZWFzb24pKTtcbiAgICBjYWxsYmFja3MgPSBbXTtcbiAgfTtcblxuICBjb25zdCBkZWJvdW5jZWRGdW5jID0gZGVib3VuY2UoKC4uLmFyZ3M6IFBhcmFtZXRlcnM8VD4pID0+IHtcbiAgICBjb25zdCB7IHJlc29sdmUsIHJlamVjdCB9ID0gY2FsbGJhY2tzLnBvcCgpIHx8IHt9O1xuICAgIFByb21pc2UucmVzb2x2ZShmdW5jKC4uLmFyZ3MpKVxuICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgIC5jYXRjaChyZWplY3QpO1xuICB9LCB3YWl0KTtcblxuICBjb25zdCBydW5uZXIgPSAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxBd2FpdGVkPFJldHVyblR5cGU8VD4+PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjYW5jZWxQcmV2aW91cygpO1xuXG4gICAgICBjYWxsYmFja3MucHVzaCh7XG4gICAgICAgIHJlc29sdmUsXG4gICAgICAgIHJlamVjdCxcbiAgICAgIH0pO1xuXG4gICAgICBkZWJvdW5jZWRGdW5jKC4uLmFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJ1bm5lci5mbHVzaCA9ICgpID0+IGRlYm91bmNlZEZ1bmMuZmx1c2goKTtcbiAgcnVubmVyLmNhbmNlbCA9ICgpID0+IHtcbiAgICBkZWJvdW5jZWRGdW5jLmNhbmNlbCgpO1xuICAgIGNhbmNlbFByZXZpb3VzKCk7XG4gIH07XG5cbiAgcmV0dXJuIHJ1bm5lcjtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IFF1ZXJ5RnVuY3Rpb25Db250ZXh0LCBRdWVyeUtleSB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuZXhwb3J0IGNvbnN0IHByZXBhcmVRdWVyeUNvbnRleHQgPSAoXG4gIGNvbnRleHQ6IFF1ZXJ5RnVuY3Rpb25Db250ZXh0PFF1ZXJ5S2V5LCBhbnk+LFxuKTogT21pdDxRdWVyeUZ1bmN0aW9uQ29udGV4dDxRdWVyeUtleSwgYW55PiwgXCJtZXRhXCI+ID0+IHtcbiAgY29uc3QgcXVlcnlDb250ZXh0ID0ge1xuICAgIHF1ZXJ5S2V5OiBjb250ZXh0LnF1ZXJ5S2V5LFxuICAgIHBhZ2VQYXJhbTogY29udGV4dC5wYWdlUGFyYW0sXG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHF1ZXJ5Q29udGV4dCwgXCJzaWduYWxcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiAoKSA9PiB7XG4gICAgICByZXR1cm4gY29udGV4dC5zaWduYWw7XG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHF1ZXJ5Q29udGV4dDtcbn07XG4iLCJleHBvcnQgY29uc3QgZmlsZTJCYXNlNjQgPSAoZmlsZTogYW55KTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgY29uc3QgcmVzdWx0SGFuZGxlciA9ICgpID0+IHtcbiAgICAgIGlmIChyZWFkZXIucmVzdWx0KSB7XG4gICAgICAgIHJlYWRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCByZXN1bHRIYW5kbGVyLCBmYWxzZSk7XG5cbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0IGFzIHN0cmluZyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCByZXN1bHRIYW5kbGVyLCBmYWxzZSk7XG5cbiAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlLm9yaWdpbkZpbGVPYmogYXMgQmxvYik7XG4gICAgcmVhZGVyLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgIHJlYWRlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCByZXN1bHRIYW5kbGVyLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICB9O1xuICB9KTtcbn07XG4iLCJpbXBvcnQgeyB1c2VSZWZpbmVDb250ZXh0IH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgeyBrZXlzIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9pbmRleFwiO1xuXG5leHBvcnQgY29uc3QgdXNlS2V5cyA9ICgpID0+IHtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnM6IHsgdXNlTmV3UXVlcnlLZXlzIH0sXG4gIH0gPSB1c2VSZWZpbmVDb250ZXh0KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBrZXlzLFxuICAgIHByZWZlckxlZ2FjeUtleXM6ICF1c2VOZXdRdWVyeUtleXMsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZVF1ZXJ5T3B0aW9ucyxcbiAgdHlwZSBVc2VRdWVyeVJlc3VsdCxcbiAgdXNlUXVlcnksXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgdXNlQXV0aEJpbmRpbmdzQ29udGV4dCwgdXNlTGVnYWN5QXV0aENvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2F1dGhcIjtcbmltcG9ydCB7IHVzZUtleXMgfSBmcm9tIFwiQGhvb2tzL3VzZUtleXNcIjtcblxuaW1wb3J0IHR5cGUgeyBJZGVudGl0eVJlc3BvbnNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2F1dGgvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgVXNlR2V0SWRlbnRpdHlMZWdhY3lQcm9wczxURGF0YT4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogdHJ1ZTtcbiAgcXVlcnlPcHRpb25zPzogVXNlUXVlcnlPcHRpb25zPFREYXRhPjtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZUdldElkZW50aXR5UHJvcHM8VERhdGEgPSBJZGVudGl0eVJlc3BvbnNlPiA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlPzogZmFsc2U7XG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxURGF0YT47XG59O1xuXG5leHBvcnQgdHlwZSBVc2VHZXRJZGVudGl0eUNvbWJpbmVkUHJvcHM8VERhdGEgPSBhbnk+ID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IGJvb2xlYW47XG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxURGF0YT4gfCBVc2VRdWVyeU9wdGlvbnM8SWRlbnRpdHlSZXNwb25zZT47XG59O1xuXG5leHBvcnQgdHlwZSBVc2VHZXRJZGVudGl0eUxlZ2FjeVJldHVyblR5cGU8VERhdGE+ID0gVXNlUXVlcnlSZXN1bHQ8XG4gIFREYXRhLFxuICB1bmtub3duXG4+O1xuXG5leHBvcnQgdHlwZSBVc2VHZXRJZGVudGl0eVJldHVyblR5cGU8VERhdGEgPSBJZGVudGl0eVJlc3BvbnNlPiA9IFVzZVF1ZXJ5UmVzdWx0PFxuICBURGF0YSxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlUGVybWlzc2lvbnNDb21iaW5lZFJldHVyblR5cGU8VERhdGEgPSBhbnk+ID1cbiAgfCBVc2VRdWVyeVJlc3VsdDxURGF0YSwgdW5rbm93bj5cbiAgfCBVc2VRdWVyeVJlc3VsdDxJZGVudGl0eVJlc3BvbnNlLCB1bmtub3duPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUdldElkZW50aXR5PFREYXRhID0gYW55PihcbiAgcHJvcHM6IFVzZUdldElkZW50aXR5TGVnYWN5UHJvcHM8VERhdGE+LFxuKTogVXNlR2V0SWRlbnRpdHlMZWdhY3lSZXR1cm5UeXBlPFREYXRhPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUdldElkZW50aXR5PFREYXRhID0gSWRlbnRpdHlSZXNwb25zZT4oXG4gIHByb3BzPzogVXNlR2V0SWRlbnRpdHlQcm9wczxURGF0YT4sXG4pOiBVc2VHZXRJZGVudGl0eVJldHVyblR5cGU8VERhdGE+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlR2V0SWRlbnRpdHk8VERhdGEgPSBhbnk+KFxuICBwcm9wcz86IFVzZUdldElkZW50aXR5Q29tYmluZWRQcm9wczxURGF0YT4sXG4pOiBVc2VQZXJtaXNzaW9uc0NvbWJpbmVkUmV0dXJuVHlwZTxURGF0YT47XG5cbi8qKlxuICogYHVzZUdldElkZW50aXR5YCBjYWxscyB0aGUgYGdldFVzZXJJZGVudGl0eWAgbWV0aG9kIGZyb20gdGhlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL3Byb3ZpZGVycy9hdXRoLXByb3ZpZGVyIGBhdXRoUHJvdmlkZXJgfSB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXV0aC91c2VHZXRJZGVudGl0eX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgb2YgdGhlIHF1ZXJ5XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlR2V0SWRlbnRpdHk8VERhdGEgPSBhbnk+KHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID0gZmFsc2UsXG4gIHF1ZXJ5T3B0aW9ucyxcbn06IFVzZUdldElkZW50aXR5UHJvcHM8VERhdGE+IHwgVXNlR2V0SWRlbnRpdHlMZWdhY3lQcm9wczxURGF0YT4gPSB7fSk6XG4gIHwgVXNlR2V0SWRlbnRpdHlSZXR1cm5UeXBlPFREYXRhPlxuICB8IFVzZUdldElkZW50aXR5TGVnYWN5UmV0dXJuVHlwZTxURGF0YT4ge1xuICBjb25zdCB7IGdldFVzZXJJZGVudGl0eTogbGVnYWN5R2V0VXNlcklkZW50aXR5IH0gPSB1c2VMZWdhY3lBdXRoQ29udGV4dCgpO1xuICBjb25zdCB7IGdldElkZW50aXR5IH0gPSB1c2VBdXRoQmluZGluZ3NDb250ZXh0KCk7XG4gIGNvbnN0IHsga2V5cywgcHJlZmVyTGVnYWN5S2V5cyB9ID0gdXNlS2V5cygpO1xuXG4gIGNvbnN0IHF1ZXJ5UmVzcG9uc2UgPSB1c2VRdWVyeTxURGF0YT4oe1xuICAgIHF1ZXJ5S2V5OiBrZXlzKCkuYXV0aCgpLmFjdGlvbihcImlkZW50aXR5XCIpLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAvLyBFbmFibGVkIGNoZWNrIGZvciBgZ2V0SWRlbnRpdHlgIGlzIGVub3VnaCB0byBiZSBzdXJlIHRoYXQgaXQncyBkZWZpbmVkIGluIHRoZSBxdWVyeSBmdW5jdGlvbiBidXQgVFMgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBrbm93IHRoYXQuXG4gICAgcXVlcnlGbjpcbiAgICAgIChnZXRJZGVudGl0eSBhcyAocGFyYW1zPzogdW5rbm93bikgPT4gUHJvbWlzZTxURGF0YT4pID8/XG4gICAgICAoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSksXG4gICAgZW5hYmxlZDogIXYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSAmJiAhIWdldElkZW50aXR5LFxuICAgIHJldHJ5OiBmYWxzZSxcbiAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID09PSB0cnVlID8ge30gOiBxdWVyeU9wdGlvbnMpLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPT09IHRydWUgPyB7fSA6IHF1ZXJ5T3B0aW9ucz8ubWV0YSksXG4gICAgICAuLi5nZXRYUmF5KFwidXNlR2V0SWRlbnRpdHlcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgbGVnYWN5UXVlcnlSZXNwb25zZSA9IHVzZVF1ZXJ5PFREYXRhPih7XG4gICAgcXVlcnlLZXk6IFtcbiAgICAgIC4uLmtleXMoKS5hdXRoKCkuYWN0aW9uKFwiaWRlbnRpdHlcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgXCJ2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcIixcbiAgICBdLFxuICAgIC8vIEVuYWJsZWQgY2hlY2sgZm9yIGBnZXRVc2VySWRlbnRpdHlgIGlzIGVub3VnaCB0byBiZSBzdXJlIHRoYXQgaXQncyBkZWZpbmVkIGluIHRoZSBxdWVyeSBmdW5jdGlvbiBidXQgVFMgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBrbm93IHRoYXQuXG4gICAgcXVlcnlGbjogbGVnYWN5R2V0VXNlcklkZW50aXR5ID8/ICgoKSA9PiBQcm9taXNlLnJlc29sdmUoe30pKSxcbiAgICBlbmFibGVkOiB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgJiYgISFsZWdhY3lHZXRVc2VySWRlbnRpdHksXG4gICAgcmV0cnk6IGZhbHNlLFxuICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPyBxdWVyeU9wdGlvbnMgOiB7fSksXG4gICAgbWV0YToge1xuICAgICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA/IHF1ZXJ5T3B0aW9ucz8ubWV0YSA6IHt9KSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VHZXRJZGVudGl0eVwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gbGVnYWN5UXVlcnlSZXNwb25zZSA6IHF1ZXJ5UmVzcG9uc2U7XG59XG4iLCJpbXBvcnQgeyBnZXRYUmF5IH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtaW50ZXJuYWxcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTXV0YXRpb25PcHRpb25zLFxuICB0eXBlIFVzZU11dGF0aW9uUmVzdWx0LFxuICB1c2VNdXRhdGlvbixcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQgeyB1c2VBdXRoQmluZGluZ3NDb250ZXh0LCB1c2VMZWdhY3lBdXRoQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvYXV0aFwiO1xuaW1wb3J0IHtcbiAgdXNlR28sXG4gIHVzZUtleXMsXG4gIHVzZU5hdmlnYXRpb24sXG4gIHVzZU5vdGlmaWNhdGlvbixcbiAgdXNlUm91dGVyVHlwZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgU3VjY2Vzc05vdGlmaWNhdGlvblJlc3BvbnNlLFxuICBUTG9nb3V0RGF0YSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2F1dGgvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUmVmaW5lRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBPcGVuTm90aWZpY2F0aW9uUGFyYW1zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHsgdXNlSW52YWxpZGF0ZUF1dGhTdG9yZSB9IGZyb20gXCIuLi91c2VJbnZhbGlkYXRlQXV0aFN0b3JlXCI7XG5cbnR5cGUgVmFyaWFibGVzID0ge1xuICByZWRpcmVjdFBhdGg/OiBzdHJpbmcgfCBmYWxzZTtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZUxvZ291dExlZ2FjeVByb3BzPFRWYXJpYWJsZXM+ID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IHRydWU7XG4gIG11dGF0aW9uT3B0aW9ucz86IE9taXQ8XG4gICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgVExvZ291dERhdGEsXG4gICAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgICAgKFRWYXJpYWJsZXMgJiBWYXJpYWJsZXMpIHwgdm9pZCxcbiAgICAgIHVua25vd25cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiIHwgXCJvbkVycm9yXCIgfCBcIm9uU3VjY2Vzc1wiXG4gID47XG59O1xuXG5leHBvcnQgdHlwZSBVc2VMb2dvdXRQcm9wczxUVmFyaWFibGVzPiA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlPzogZmFsc2U7XG4gIG11dGF0aW9uT3B0aW9ucz86IE9taXQ8XG4gICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgQXV0aEFjdGlvblJlc3BvbnNlLFxuICAgICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICAgIChUVmFyaWFibGVzICYgVmFyaWFibGVzKSB8IHZvaWQsXG4gICAgICB1bmtub3duXG4gICAgPixcbiAgICBcIm11dGF0aW9uRm5cIlxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgVXNlTG9nb3V0Q29tYmluZWRQcm9wczxUVmFyaWFibGVzPiA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBib29sZWFuO1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIEF1dGhBY3Rpb25SZXNwb25zZSB8IFRMb2dvdXREYXRhLFxuICAgICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICAgIChUVmFyaWFibGVzICYgVmFyaWFibGVzKSB8IHZvaWQsXG4gICAgICB1bmtub3duXG4gICAgPixcbiAgICBcIm11dGF0aW9uRm5cIlxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgVXNlTG9nb3V0TGVnYWN5UmV0dXJuVHlwZTxUVmFyaWFibGVzPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBUTG9nb3V0RGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgKFRWYXJpYWJsZXMgJiBWYXJpYWJsZXMpIHwgdm9pZCxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlTG9nb3V0UmV0dXJuVHlwZTxUVmFyaWFibGVzPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBBdXRoQWN0aW9uUmVzcG9uc2UsXG4gIEVycm9yIHwgUmVmaW5lRXJyb3IsXG4gIChUVmFyaWFibGVzICYgVmFyaWFibGVzKSB8IHZvaWQsXG4gIHVua25vd25cbj47XG5cbmV4cG9ydCB0eXBlIFVzZUxvZ291dENvbWJpbmVkUmV0dXJuVHlwZTxUVmFyaWFibGVzPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBBdXRoQWN0aW9uUmVzcG9uc2UgfCBUTG9nb3V0RGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgKFRWYXJpYWJsZXMgJiBWYXJpYWJsZXMpIHwgdm9pZCxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvZ291dDxUVmFyaWFibGVzID0ge30+KFxuICBwcm9wczogVXNlTG9nb3V0TGVnYWN5UHJvcHM8VFZhcmlhYmxlcz4sXG4pOiBVc2VMb2dvdXRMZWdhY3lSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9nb3V0PFRWYXJpYWJsZXMgPSB7fT4oXG4gIHByb3BzPzogVXNlTG9nb3V0UHJvcHM8VFZhcmlhYmxlcz4sXG4pOiBVc2VMb2dvdXRSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9nb3V0PFRWYXJpYWJsZXMgPSB7fT4oXG4gIHByb3BzPzogVXNlTG9nb3V0Q29tYmluZWRQcm9wczxUVmFyaWFibGVzPixcbik6IFVzZUxvZ291dENvbWJpbmVkUmV0dXJuVHlwZTxUVmFyaWFibGVzPjtcblxuLyoqXG4gKiBgdXNlTG9nb3V0YCBjYWxscyB0aGUgYGxvZ291dGAgbWV0aG9kIGZyb20gdGhlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvcHJvdmlkZXJzL2F1dGgtcHJvdmlkZXIgYGF1dGhQcm92aWRlcmB9IHVuZGVyIHRoZSBob29kLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9hdXRoL3VzZUxvZ291dH0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2dvdXQ8VFZhcmlhYmxlcyA9IHt9Pih7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSxcbiAgbXV0YXRpb25PcHRpb25zLFxufTogVXNlTG9nb3V0UHJvcHM8VFZhcmlhYmxlcz4gfCBVc2VMb2dvdXRMZWdhY3lQcm9wczxUVmFyaWFibGVzPiA9IHt9KTpcbiAgfCBVc2VMb2dvdXRMZWdhY3lSZXR1cm5UeXBlPFRWYXJpYWJsZXM+XG4gIHwgVXNlTG9nb3V0UmV0dXJuVHlwZTxUVmFyaWFibGVzPiB7XG4gIGNvbnN0IGludmFsaWRhdGVBdXRoU3RvcmUgPSB1c2VJbnZhbGlkYXRlQXV0aFN0b3JlKCk7XG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG4gIGNvbnN0IGdvID0gdXNlR28oKTtcbiAgY29uc3QgeyBwdXNoIH0gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIGNvbnN0IHsgb3BlbiwgY2xvc2UgfSA9IHVzZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCB7IGxvZ291dDogbGVnYWN5TG9nb3V0RnJvbUNvbnRleHQgfSA9IHVzZUxlZ2FjeUF1dGhDb250ZXh0KCk7XG4gIGNvbnN0IHsgbG9nb3V0OiBsb2dvdXRGcm9tQ29udGV4dCB9ID0gdXNlQXV0aEJpbmRpbmdzQ29udGV4dCgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBtdXRhdGlvbiA9IHVzZU11dGF0aW9uPFxuICAgIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgIChUVmFyaWFibGVzICYgVmFyaWFibGVzKSB8IHZvaWQsXG4gICAgdW5rbm93blxuICA+KHtcbiAgICBtdXRhdGlvbktleToga2V5cygpLmF1dGgoKS5hY3Rpb24oXCJsb2dvdXRcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgIG11dGF0aW9uRm46IGxvZ291dEZyb21Db250ZXh0LFxuICAgIG9uU3VjY2VzczogYXN5bmMgKGRhdGEsIHZhcmlhYmxlcykgPT4ge1xuICAgICAgY29uc3QgeyBzdWNjZXNzLCBlcnJvciwgcmVkaXJlY3RUbywgc3VjY2Vzc05vdGlmaWNhdGlvbiB9ID0gZGF0YTtcbiAgICAgIGNvbnN0IHsgcmVkaXJlY3RQYXRoIH0gPSB2YXJpYWJsZXMgPz8ge307XG5cbiAgICAgIGNvbnN0IHJlZGlyZWN0ID0gcmVkaXJlY3RQYXRoID8/IHJlZGlyZWN0VG87XG5cbiAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgIGNsb3NlPy4oXCJ1c2VMb2dvdXQtZXJyb3JcIik7XG5cbiAgICAgICAgaWYgKHN1Y2Nlc3NOb3RpZmljYXRpb24pIHtcbiAgICAgICAgICBvcGVuPy4oYnVpbGRTdWNjZXNzTm90aWZpY2F0aW9uKHN1Y2Nlc3NOb3RpZmljYXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZXJyb3IgfHwgIXN1Y2Nlc3MpIHtcbiAgICAgICAgb3Blbj8uKGJ1aWxkTm90aWZpY2F0aW9uKGVycm9yKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWRpcmVjdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICBwdXNoKHJlZGlyZWN0ID8/IFwiL2xvZ2luXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgICAgICAgZ28oeyB0bzogcmVkaXJlY3QgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IGludmFsaWRhdGVBdXRoU3RvcmUoKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICBvcGVuPy4oYnVpbGROb3RpZmljYXRpb24oZXJyb3IpKTtcbiAgICB9LFxuICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPT09IHRydWUgPyB7fSA6IG11dGF0aW9uT3B0aW9ucyksXG4gICAgbWV0YToge1xuICAgICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA9PT0gdHJ1ZSA/IHt9IDogbXV0YXRpb25PcHRpb25zPy5tZXRhKSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VMb2dvdXRcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlTXV0YXRpb24gPSB1c2VNdXRhdGlvbjxcbiAgICBUTG9nb3V0RGF0YSxcbiAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgIChUVmFyaWFibGVzICYgVmFyaWFibGVzKSB8IHZvaWQsXG4gICAgdW5rbm93blxuICA+KHtcbiAgICBtdXRhdGlvbktleTogW1xuICAgICAgLi4ua2V5cygpLmF1dGgoKS5hY3Rpb24oXCJsb2dvdXRcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgXCJ2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcIixcbiAgICBdLFxuICAgIG11dGF0aW9uRm46IGxlZ2FjeUxvZ291dEZyb21Db250ZXh0LFxuICAgIG9uU3VjY2VzczogYXN5bmMgKGRhdGEsIHZhcmlhYmxlcykgPT4ge1xuICAgICAgY29uc3QgcmVkaXJlY3RQYXRoID0gdmFyaWFibGVzPy5yZWRpcmVjdFBhdGggPz8gZGF0YTtcblxuICAgICAgaWYgKHJlZGlyZWN0UGF0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVkaXJlY3RQYXRoKSB7XG4gICAgICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICAgICAgcHVzaChyZWRpcmVjdFBhdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdvKHsgdG86IHJlZGlyZWN0UGF0aCB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICAgIHB1c2goXCIvbG9naW5cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbyh7IHRvOiBcIi9sb2dpblwiIH0pO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCBpbnZhbGlkYXRlQXV0aFN0b3JlKCk7XG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgb3Blbj8uKGJ1aWxkTm90aWZpY2F0aW9uKGVycm9yKSk7XG4gICAgfSxcbiAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gbXV0YXRpb25PcHRpb25zIDoge30pLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPyBtdXRhdGlvbk9wdGlvbnM/Lm1ldGEgOiB7fSksXG4gICAgICAuLi5nZXRYUmF5KFwidXNlTG9nb3V0XCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcbiAgICA/IHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZU11dGF0aW9uXG4gICAgOiBtdXRhdGlvbjtcbn1cblxuY29uc3QgYnVpbGROb3RpZmljYXRpb24gPSAoXG4gIGVycm9yPzogRXJyb3IgfCBSZWZpbmVFcnJvcixcbik6IE9wZW5Ob3RpZmljYXRpb25QYXJhbXMgPT4ge1xuICByZXR1cm4ge1xuICAgIGtleTogXCJ1c2VMb2dvdXQtZXJyb3JcIixcbiAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgbWVzc2FnZTogZXJyb3I/Lm5hbWUgfHwgXCJMb2dvdXQgRXJyb3JcIixcbiAgICBkZXNjcmlwdGlvbjogZXJyb3I/Lm1lc3NhZ2UgfHwgXCJTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgbG9nb3V0XCIsXG4gIH07XG59O1xuXG5jb25zdCBidWlsZFN1Y2Nlc3NOb3RpZmljYXRpb24gPSAoXG4gIHN1Y2Nlc3NOb3RpZmljYXRpb246IFN1Y2Nlc3NOb3RpZmljYXRpb25SZXNwb25zZSxcbik6IE9wZW5Ob3RpZmljYXRpb25QYXJhbXMgPT4ge1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IHN1Y2Nlc3NOb3RpZmljYXRpb24ubWVzc2FnZSxcbiAgICBkZXNjcmlwdGlvbjogc3VjY2Vzc05vdGlmaWNhdGlvbi5kZXNjcmlwdGlvbixcbiAgICBrZXk6IFwibG9nb3V0LXN1Y2Nlc3NcIixcbiAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyB1c2VLZXlzIH0gZnJvbSBcIkBob29rcy91c2VLZXlzXCI7XG5pbXBvcnQgeyB1c2VRdWVyeUNsaWVudCB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUludmFsaWRhdGVBdXRoU3RvcmUgPSAoKSA9PiB7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgaW52YWxpZGF0ZSA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIChbXCJjaGVja1wiLCBcImlkZW50aXR5XCIsIFwicGVybWlzc2lvbnNcIl0gYXMgY29uc3QpLm1hcCgoYWN0aW9uKSA9PlxuICAgICAgICBxdWVyeUNsaWVudC5pbnZhbGlkYXRlUXVlcmllcyhcbiAgICAgICAgICBrZXlzKCkuYXV0aCgpLmFjdGlvbihhY3Rpb24pLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gaW52YWxpZGF0ZTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IGdldFhSYXkgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VNdXRhdGlvbk9wdGlvbnMsXG4gIHR5cGUgVXNlTXV0YXRpb25SZXN1bHQsXG4gIHVzZU11dGF0aW9uLFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgcXMgZnJvbSBcInFzXCI7XG5cbmltcG9ydCB7IHVzZUF1dGhCaW5kaW5nc0NvbnRleHQsIHVzZUxlZ2FjeUF1dGhDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9hdXRoXCI7XG5pbXBvcnQge1xuICB1c2VHbyxcbiAgdXNlS2V5cyxcbiAgdXNlTmF2aWdhdGlvbixcbiAgdXNlTm90aWZpY2F0aW9uLFxuICB1c2VQYXJzZWQsXG4gIHVzZVJvdXRlckNvbnRleHQsXG4gIHVzZVJvdXRlclR5cGUsXG59IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUge1xuICBBdXRoQWN0aW9uUmVzcG9uc2UsXG4gIFN1Y2Nlc3NOb3RpZmljYXRpb25SZXNwb25zZSxcbiAgVExvZ2luRGF0YSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2F1dGgvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUmVmaW5lRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBPcGVuTm90aWZpY2F0aW9uUGFyYW1zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHsgdXNlSW52YWxpZGF0ZUF1dGhTdG9yZSB9IGZyb20gXCIuLi91c2VJbnZhbGlkYXRlQXV0aFN0b3JlXCI7XG5cbmV4cG9ydCB0eXBlIFVzZUxvZ2luTGVnYWN5UHJvcHM8VFZhcmlhYmxlcz4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogdHJ1ZTtcbiAgbXV0YXRpb25PcHRpb25zPzogT21pdDxcbiAgICBVc2VNdXRhdGlvbk9wdGlvbnM8VExvZ2luRGF0YSwgRXJyb3IgfCBSZWZpbmVFcnJvciwgVFZhcmlhYmxlcywgdW5rbm93bj4sXG4gICAgXCJtdXRhdGlvbkZuXCIgfCBcIm9uRXJyb3JcIiB8IFwib25TdWNjZXNzXCJcbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZUxvZ2luUHJvcHM8VFZhcmlhYmxlcz4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZT86IGZhbHNlO1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgICAgIEVycm9yIHwgUmVmaW5lRXJyb3IsXG4gICAgICBUVmFyaWFibGVzLFxuICAgICAgdW5rbm93blxuICAgID4sXG4gICAgXCJtdXRhdGlvbkZuXCJcbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZUxvZ2luQ29tYmluZWRQcm9wczxUVmFyaWFibGVzPiA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBib29sZWFuO1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIEF1dGhBY3Rpb25SZXNwb25zZSB8IFRMb2dpbkRhdGEsXG4gICAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgICAgVFZhcmlhYmxlcyxcbiAgICAgIHVua25vd25cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiXG4gID47XG59O1xuXG5leHBvcnQgdHlwZSBVc2VMb2dpbkxlZ2FjeVJldHVyblR5cGU8VFZhcmlhYmxlcz4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgVExvZ2luRGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlTG9naW5SZXR1cm5UeXBlPFRWYXJpYWJsZXM+ID0gVXNlTXV0YXRpb25SZXN1bHQ8XG4gIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlTG9naW5Db21iaW5lZFJldHVyblR5cGU8VFZhcmlhYmxlcz4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgQXV0aEFjdGlvblJlc3BvbnNlIHwgVExvZ2luRGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvZ2luPFRWYXJpYWJsZXMgPSB7fT4oXG4gIHByb3BzOiBVc2VMb2dpbkxlZ2FjeVByb3BzPFRWYXJpYWJsZXM+LFxuKTogVXNlTG9naW5MZWdhY3lSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9naW48VFZhcmlhYmxlcyA9IHt9PihcbiAgcHJvcHM/OiBVc2VMb2dpblByb3BzPFRWYXJpYWJsZXM+LFxuKTogVXNlTG9naW5SZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9naW48VFZhcmlhYmxlcyA9IHt9PihcbiAgcHJvcHM/OiBVc2VMb2dpbkNvbWJpbmVkUHJvcHM8VFZhcmlhYmxlcz4sXG4pOiBVc2VMb2dpbkNvbWJpbmVkUmV0dXJuVHlwZTxUVmFyaWFibGVzPjtcblxuLyoqXG4gKiBgdXNlTG9naW5gIGNhbGxzIGBsb2dpbmAgbWV0aG9kIGZyb20ge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9wcm92aWRlcnMvYXV0aC1wcm92aWRlciBgYXV0aFByb3ZpZGVyYH0gdW5kZXIgdGhlIGhvb2QuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2F1dGgvdXNlTG9naW59IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIG9mIHRoZSBxdWVyeVxuICogQHR5cGVQYXJhbSBUVmFyaWFibGVzIC0gVmFsdWVzIGZvciBtdXRhdGlvbiBmdW5jdGlvbi4gZGVmYXVsdCBge31gXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9naW48VFZhcmlhYmxlcyA9IHt9Pih7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSxcbiAgbXV0YXRpb25PcHRpb25zLFxufTogVXNlTG9naW5Qcm9wczxUVmFyaWFibGVzPiB8IFVzZUxvZ2luTGVnYWN5UHJvcHM8VFZhcmlhYmxlcz4gPSB7fSk6XG4gIHwgVXNlTG9naW5MZWdhY3lSZXR1cm5UeXBlPFRWYXJpYWJsZXM+XG4gIHwgVXNlTG9naW5SZXR1cm5UeXBlPFRWYXJpYWJsZXM+IHtcbiAgY29uc3QgaW52YWxpZGF0ZUF1dGhTdG9yZSA9IHVzZUludmFsaWRhdGVBdXRoU3RvcmUoKTtcbiAgY29uc3Qgcm91dGVyVHlwZSA9IHVzZVJvdXRlclR5cGUoKTtcblxuICBjb25zdCBnbyA9IHVzZUdvKCk7XG4gIGNvbnN0IHsgcmVwbGFjZSB9ID0gdXNlTmF2aWdhdGlvbigpO1xuXG4gIGNvbnN0IHBhcnNlZCA9IHVzZVBhcnNlZCgpO1xuXG4gIGNvbnN0IHsgdXNlTG9jYXRpb24gfSA9IHVzZVJvdXRlckNvbnRleHQoKTtcbiAgY29uc3QgeyBzZWFyY2ggfSA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgY29uc3QgeyBjbG9zZSwgb3BlbiB9ID0gdXNlTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IHsgbG9naW46IGxlZ2FjeUxvZ2luRnJvbUNvbnRleHQgfSA9IHVzZUxlZ2FjeUF1dGhDb250ZXh0KCk7XG4gIGNvbnN0IHsgbG9naW46IGxvZ2luRnJvbUNvbnRleHQgfSA9IHVzZUF1dGhCaW5kaW5nc0NvbnRleHQoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgdG8gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBpZiAocm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIikge1xuICAgICAgY29uc3QgbGVnYWN5U2VhcmNoID0gcXMucGFyc2Uoc2VhcmNoLCB7XG4gICAgICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiB0cnVlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbGVnYWN5U2VhcmNoLnRvO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkLnBhcmFtcz8udG87XG4gIH0sIFtyb3V0ZXJUeXBlLCBwYXJzZWQucGFyYW1zLCBzZWFyY2hdKTtcblxuICBjb25zdCBtdXRhdGlvbiA9IHVzZU11dGF0aW9uPFxuICAgIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgIFRWYXJpYWJsZXMsXG4gICAgdW5rbm93blxuICA+KHtcbiAgICBtdXRhdGlvbktleToga2V5cygpLmF1dGgoKS5hY3Rpb24oXCJsb2dpblwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgbXV0YXRpb25GbjogbG9naW5Gcm9tQ29udGV4dCxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jICh7IHN1Y2Nlc3MsIHJlZGlyZWN0VG8sIGVycm9yLCBzdWNjZXNzTm90aWZpY2F0aW9uIH0pID0+IHtcbiAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgIGNsb3NlPy4oXCJsb2dpbi1lcnJvclwiKTtcblxuICAgICAgICBpZiAoc3VjY2Vzc05vdGlmaWNhdGlvbikge1xuICAgICAgICAgIG9wZW4/LihidWlsZFN1Y2Nlc3NOb3RpZmljYXRpb24oc3VjY2Vzc05vdGlmaWNhdGlvbikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvciB8fCAhc3VjY2Vzcykge1xuICAgICAgICBvcGVuPy4oYnVpbGROb3RpZmljYXRpb24oZXJyb3IpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRvICYmIHN1Y2Nlc3MpIHtcbiAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICByZXBsYWNlKHRvIGFzIHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ28oeyB0bzogdG8gYXMgc3RyaW5nLCB0eXBlOiBcInJlcGxhY2VcIiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChyZWRpcmVjdFRvKSB7XG4gICAgICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICAgICAgcmVwbGFjZShyZWRpcmVjdFRvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnbyh7IHRvOiByZWRpcmVjdFRvLCB0eXBlOiBcInJlcGxhY2VcIiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICByZXBsYWNlKFwiL1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhd2FpdCBpbnZhbGlkYXRlQXV0aFN0b3JlKCk7XG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgb3Blbj8uKGJ1aWxkTm90aWZpY2F0aW9uKGVycm9yKSk7XG4gICAgfSxcbiAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID09PSB0cnVlID8ge30gOiBtdXRhdGlvbk9wdGlvbnMpLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPT09IHRydWUgPyB7fSA6IG11dGF0aW9uT3B0aW9ucz8ubWV0YSksXG4gICAgICAuLi5nZXRYUmF5KFwidXNlTG9naW5cIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlTXV0YXRpb24gPSB1c2VNdXRhdGlvbjxcbiAgICBUTG9naW5EYXRhLFxuICAgIEVycm9yIHwgUmVmaW5lRXJyb3IsXG4gICAgVFZhcmlhYmxlcyxcbiAgICB1bmtub3duXG4gID4oe1xuICAgIG11dGF0aW9uS2V5OiBbXG4gICAgICAuLi5rZXlzKCkuYXV0aCgpLmFjdGlvbihcImxvZ2luXCIpLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgIFwidjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlXCIsXG4gICAgXSxcbiAgICBtdXRhdGlvbkZuOiBsZWdhY3lMb2dpbkZyb21Db250ZXh0LFxuICAgIG9uU3VjY2VzczogYXN5bmMgKHJlZGlyZWN0UGF0aEZyb21BdXRoKSA9PiB7XG4gICAgICBpZiAodG8pIHtcbiAgICAgICAgcmVwbGFjZSh0byBhcyBzdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVkaXJlY3RQYXRoRnJvbUF1dGggIT09IGZhbHNlICYmICF0bykge1xuICAgICAgICBpZiAodHlwZW9mIHJlZGlyZWN0UGF0aEZyb21BdXRoID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICAgIHJlcGxhY2UocmVkaXJlY3RQYXRoRnJvbUF1dGgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbyh7IHRvOiByZWRpcmVjdFBhdGhGcm9tQXV0aCwgdHlwZTogXCJyZXBsYWNlXCIgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICAgICAgICByZXBsYWNlKFwiL1wiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ28oeyB0bzogXCIvXCIsIHR5cGU6IFwicmVwbGFjZVwiIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhd2FpdCBpbnZhbGlkYXRlQXV0aFN0b3JlKCk7XG5cbiAgICAgIGNsb3NlPy4oXCJsb2dpbi1lcnJvclwiKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICBvcGVuPy4oYnVpbGROb3RpZmljYXRpb24oZXJyb3IpKTtcbiAgICB9LFxuICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPyBtdXRhdGlvbk9wdGlvbnMgOiB7fSksXG4gICAgbWV0YToge1xuICAgICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA/IG11dGF0aW9uT3B0aW9ucz8ubWV0YSA6IHt9KSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VMb2dpblwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlXG4gICAgPyB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVNdXRhdGlvblxuICAgIDogbXV0YXRpb247XG59XG5cbmNvbnN0IGJ1aWxkTm90aWZpY2F0aW9uID0gKFxuICBlcnJvcj86IEVycm9yIHwgUmVmaW5lRXJyb3IsXG4pOiBPcGVuTm90aWZpY2F0aW9uUGFyYW1zID0+IHtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBlcnJvcj8ubmFtZSB8fCBcIkxvZ2luIEVycm9yXCIsXG4gICAgZGVzY3JpcHRpb246IGVycm9yPy5tZXNzYWdlIHx8IFwiSW52YWxpZCBjcmVkZW50aWFsc1wiLFxuICAgIGtleTogXCJsb2dpbi1lcnJvclwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfTtcbn07XG5cbmNvbnN0IGJ1aWxkU3VjY2Vzc05vdGlmaWNhdGlvbiA9IChcbiAgc3VjY2Vzc05vdGlmaWNhdGlvbjogU3VjY2Vzc05vdGlmaWNhdGlvblJlc3BvbnNlLFxuKTogT3Blbk5vdGlmaWNhdGlvblBhcmFtcyA9PiB7XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogc3VjY2Vzc05vdGlmaWNhdGlvbi5tZXNzYWdlLFxuICAgIGRlc2NyaXB0aW9uOiBzdWNjZXNzTm90aWZpY2F0aW9uLmRlc2NyaXB0aW9uLFxuICAgIGtleTogXCJsb2dpbi1zdWNjZXNzXCIsXG4gICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZU11dGF0aW9uT3B0aW9ucyxcbiAgdHlwZSBVc2VNdXRhdGlvblJlc3VsdCxcbiAgdXNlTXV0YXRpb24sXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgdXNlQXV0aEJpbmRpbmdzQ29udGV4dCwgdXNlTGVnYWN5QXV0aENvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2F1dGhcIjtcbmltcG9ydCB7XG4gIHVzZUdvLFxuICB1c2VLZXlzLFxuICB1c2VOYXZpZ2F0aW9uLFxuICB1c2VOb3RpZmljYXRpb24sXG4gIHVzZVJvdXRlclR5cGUsXG59IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUge1xuICBBdXRoQWN0aW9uUmVzcG9uc2UsXG4gIFN1Y2Nlc3NOb3RpZmljYXRpb25SZXNwb25zZSxcbiAgVExvZ2luRGF0YSxcbiAgVFJlZ2lzdGVyRGF0YSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2F1dGgvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUmVmaW5lRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBPcGVuTm90aWZpY2F0aW9uUGFyYW1zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHsgdXNlSW52YWxpZGF0ZUF1dGhTdG9yZSB9IGZyb20gXCIuLi91c2VJbnZhbGlkYXRlQXV0aFN0b3JlXCI7XG5cbmV4cG9ydCB0eXBlIFVzZVJlZ2lzdGVyTGVnYWN5UHJvcHM8VFZhcmlhYmxlcz4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogdHJ1ZTtcbiAgbXV0YXRpb25PcHRpb25zPzogT21pdDxcbiAgICBVc2VNdXRhdGlvbk9wdGlvbnM8VFJlZ2lzdGVyRGF0YSwgRXJyb3IgfCBSZWZpbmVFcnJvciwgVFZhcmlhYmxlcywgdW5rbm93bj4sXG4gICAgXCJtdXRhdGlvbkZuXCIgfCBcIm9uRXJyb3JcIiB8IFwib25TdWNjZXNzXCJcbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZVJlZ2lzdGVyUHJvcHM8VFZhcmlhYmxlcz4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZT86IGZhbHNlO1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgICAgIEVycm9yIHwgUmVmaW5lRXJyb3IsXG4gICAgICBUVmFyaWFibGVzLFxuICAgICAgdW5rbm93blxuICAgID4sXG4gICAgXCJtdXRhdGlvbkZuXCJcbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZVJlZ2lzdGVyQ29tYmluZWRQcm9wczxUVmFyaWFibGVzPiA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBib29sZWFuO1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIEF1dGhBY3Rpb25SZXNwb25zZSB8IFRSZWdpc3RlckRhdGEsXG4gICAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgICAgVFZhcmlhYmxlcyxcbiAgICAgIHVua25vd25cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiXG4gID47XG59O1xuXG5leHBvcnQgdHlwZSBVc2VSZWdpc3RlckxlZ2FjeVJldHVyblR5cGU8VFZhcmlhYmxlcz4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgVFJlZ2lzdGVyRGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlUmVnaXN0ZXJSZXR1cm5UeXBlPFRWYXJpYWJsZXM+ID0gVXNlTXV0YXRpb25SZXN1bHQ8XG4gIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlUmVnaXN0ZXJDb21iaW5lZFJldHVyblR5cGU8VFZhcmlhYmxlcz4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgQXV0aEFjdGlvblJlc3BvbnNlIHwgVExvZ2luRGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZ2lzdGVyPFRWYXJpYWJsZXMgPSB7fT4oXG4gIHByb3BzOiBVc2VSZWdpc3RlckxlZ2FjeVByb3BzPFRWYXJpYWJsZXM+LFxuKTogVXNlUmVnaXN0ZXJMZWdhY3lSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVnaXN0ZXI8VFZhcmlhYmxlcyA9IHt9PihcbiAgcHJvcHM/OiBVc2VSZWdpc3RlclByb3BzPFRWYXJpYWJsZXM+LFxuKTogVXNlUmVnaXN0ZXJSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVnaXN0ZXI8VFZhcmlhYmxlcyA9IHt9PihcbiAgcHJvcHM/OiBVc2VSZWdpc3RlckNvbWJpbmVkUHJvcHM8VFZhcmlhYmxlcz4sXG4pOiBVc2VSZWdpc3RlckNvbWJpbmVkUmV0dXJuVHlwZTxUVmFyaWFibGVzPjtcblxuLyoqXG4gKiBgdXNlUmVnaXN0ZXJgIGNhbGxzIGByZWdpc3RlcmAgbWV0aG9kIGZyb20ge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9wcm92aWRlcnMvYXV0aC1wcm92aWRlciBgYXV0aFByb3ZpZGVyYH0gdW5kZXIgdGhlIGhvb2QuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2F1dGgvdXNlUmVnaXN0ZXJ9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIG9mIHRoZSBxdWVyeVxuICogQHR5cGVQYXJhbSBUVmFyaWFibGVzIC0gVmFsdWVzIGZvciBtdXRhdGlvbiBmdW5jdGlvbi4gZGVmYXVsdCBge31gXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVnaXN0ZXI8VFZhcmlhYmxlcyA9IHt9Pih7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSxcbiAgbXV0YXRpb25PcHRpb25zLFxufTogVXNlUmVnaXN0ZXJQcm9wczxUVmFyaWFibGVzPiB8IFVzZVJlZ2lzdGVyTGVnYWN5UHJvcHM8VFZhcmlhYmxlcz4gPSB7fSk6XG4gIHwgVXNlUmVnaXN0ZXJSZXR1cm5UeXBlPFRWYXJpYWJsZXM+XG4gIHwgVXNlUmVnaXN0ZXJMZWdhY3lSZXR1cm5UeXBlPFRWYXJpYWJsZXM+IHtcbiAgY29uc3QgaW52YWxpZGF0ZUF1dGhTdG9yZSA9IHVzZUludmFsaWRhdGVBdXRoU3RvcmUoKTtcbiAgY29uc3Qgcm91dGVyVHlwZSA9IHVzZVJvdXRlclR5cGUoKTtcbiAgY29uc3QgZ28gPSB1c2VHbygpO1xuICBjb25zdCB7IHJlcGxhY2UgfSA9IHVzZU5hdmlnYXRpb24oKTtcbiAgY29uc3QgeyByZWdpc3RlcjogbGVnYWN5UmVnaXN0ZXJGcm9tQ29udGV4dCB9ID0gdXNlTGVnYWN5QXV0aENvbnRleHQoKTtcbiAgY29uc3QgeyByZWdpc3RlcjogcmVnaXN0ZXJGcm9tQ29udGV4dCB9ID0gdXNlQXV0aEJpbmRpbmdzQ29udGV4dCgpO1xuICBjb25zdCB7IGNsb3NlLCBvcGVuIH0gPSB1c2VOb3RpZmljYXRpb24oKTtcblxuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBtdXRhdGlvbiA9IHVzZU11dGF0aW9uPFxuICAgIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgIFRWYXJpYWJsZXMsXG4gICAgdW5rbm93blxuICA+KHtcbiAgICBtdXRhdGlvbktleToga2V5cygpLmF1dGgoKS5hY3Rpb24oXCJyZWdpc3RlclwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgbXV0YXRpb25GbjogcmVnaXN0ZXJGcm9tQ29udGV4dCxcbiAgICBvblN1Y2Nlc3M6IGFzeW5jICh7IHN1Y2Nlc3MsIHJlZGlyZWN0VG8sIGVycm9yLCBzdWNjZXNzTm90aWZpY2F0aW9uIH0pID0+IHtcbiAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgIGNsb3NlPy4oXCJyZWdpc3Rlci1lcnJvclwiKTtcblxuICAgICAgICBpZiAoc3VjY2Vzc05vdGlmaWNhdGlvbikge1xuICAgICAgICAgIG9wZW4/LihidWlsZFN1Y2Nlc3NOb3RpZmljYXRpb24oc3VjY2Vzc05vdGlmaWNhdGlvbikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvciB8fCAhc3VjY2Vzcykge1xuICAgICAgICBvcGVuPy4oYnVpbGROb3RpZmljYXRpb24oZXJyb3IpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlZGlyZWN0VG8pIHtcbiAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICByZXBsYWNlKHJlZGlyZWN0VG8pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdvKHsgdG86IHJlZGlyZWN0VG8sIHR5cGU6IFwicmVwbGFjZVwiIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIikge1xuICAgICAgICAgIHJlcGxhY2UoXCIvXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IGludmFsaWRhdGVBdXRoU3RvcmUoKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICBvcGVuPy4oYnVpbGROb3RpZmljYXRpb24oZXJyb3IpKTtcbiAgICB9LFxuICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPT09IHRydWUgPyB7fSA6IG11dGF0aW9uT3B0aW9ucyksXG4gICAgbWV0YToge1xuICAgICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA9PT0gdHJ1ZSA/IHt9IDogbXV0YXRpb25PcHRpb25zPy5tZXRhKSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VSZWdpc3RlclwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVNdXRhdGlvbiA9IHVzZU11dGF0aW9uPFxuICAgIFRSZWdpc3RlckRhdGEsXG4gICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICBUVmFyaWFibGVzLFxuICAgIHVua25vd25cbiAgPih7XG4gICAgbXV0YXRpb25LZXk6IFtcbiAgICAgIC4uLmtleXMoKS5hdXRoKCkuYWN0aW9uKFwicmVnaXN0ZXJcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgXCJ2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcIixcbiAgICBdLFxuICAgIG11dGF0aW9uRm46IGxlZ2FjeVJlZ2lzdGVyRnJvbUNvbnRleHQsXG4gICAgb25TdWNjZXNzOiBhc3luYyAocmVkaXJlY3RQYXRoRnJvbUF1dGgpID0+IHtcbiAgICAgIGlmIChyZWRpcmVjdFBhdGhGcm9tQXV0aCAhPT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHJlZGlyZWN0UGF0aEZyb21BdXRoKSB7XG4gICAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICAgIHJlcGxhY2UocmVkaXJlY3RQYXRoRnJvbUF1dGgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbyh7IHRvOiByZWRpcmVjdFBhdGhGcm9tQXV0aCwgdHlwZTogXCJyZXBsYWNlXCIgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICAgICAgICByZXBsYWNlKFwiL1wiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ28oeyB0bzogXCIvXCIsIHR5cGU6IFwicmVwbGFjZVwiIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IGludmFsaWRhdGVBdXRoU3RvcmUoKTtcblxuICAgICAgICBjbG9zZT8uKFwicmVnaXN0ZXItZXJyb3JcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgb3Blbj8uKGJ1aWxkTm90aWZpY2F0aW9uKGVycm9yKSk7XG4gICAgfSxcbiAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gbXV0YXRpb25PcHRpb25zIDoge30pLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPyBtdXRhdGlvbk9wdGlvbnM/Lm1ldGEgOiB7fSksXG4gICAgICAuLi5nZXRYUmF5KFwidXNlUmVnaXN0ZXJcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZVxuICAgID8gdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlTXV0YXRpb25cbiAgICA6IG11dGF0aW9uO1xufVxuXG5jb25zdCBidWlsZE5vdGlmaWNhdGlvbiA9IChcbiAgZXJyb3I/OiBFcnJvciB8IFJlZmluZUVycm9yLFxuKTogT3Blbk5vdGlmaWNhdGlvblBhcmFtcyA9PiB7XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogZXJyb3I/Lm5hbWUgfHwgXCJSZWdpc3RlciBFcnJvclwiLFxuICAgIGRlc2NyaXB0aW9uOiBlcnJvcj8ubWVzc2FnZSB8fCBcIkVycm9yIHdoaWxlIHJlZ2lzdGVyaW5nXCIsXG4gICAga2V5OiBcInJlZ2lzdGVyLWVycm9yXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9O1xufTtcblxuY29uc3QgYnVpbGRTdWNjZXNzTm90aWZpY2F0aW9uID0gKFxuICBzdWNjZXNzTm90aWZpY2F0aW9uOiBTdWNjZXNzTm90aWZpY2F0aW9uUmVzcG9uc2UsXG4pOiBPcGVuTm90aWZpY2F0aW9uUGFyYW1zID0+IHtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBzdWNjZXNzTm90aWZpY2F0aW9uLm1lc3NhZ2UsXG4gICAgZGVzY3JpcHRpb246IHN1Y2Nlc3NOb3RpZmljYXRpb24uZGVzY3JpcHRpb24sXG4gICAga2V5OiBcInJlZ2lzdGVyLXN1Y2Nlc3NcIixcbiAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBnZXRYUmF5IH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtaW50ZXJuYWxcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTXV0YXRpb25PcHRpb25zLFxuICB0eXBlIFVzZU11dGF0aW9uUmVzdWx0LFxuICB1c2VNdXRhdGlvbixcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQgeyB1c2VBdXRoQmluZGluZ3NDb250ZXh0LCB1c2VMZWdhY3lBdXRoQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvYXV0aFwiO1xuaW1wb3J0IHtcbiAgdXNlR28sXG4gIHVzZUtleXMsXG4gIHVzZU5hdmlnYXRpb24sXG4gIHVzZU5vdGlmaWNhdGlvbixcbiAgdXNlUm91dGVyVHlwZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgU3VjY2Vzc05vdGlmaWNhdGlvblJlc3BvbnNlLFxuICBURm9yZ290UGFzc3dvcmREYXRhLFxufSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvYXV0aC90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBSZWZpbmVFcnJvciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IE9wZW5Ob3RpZmljYXRpb25QYXJhbXMgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvbm90aWZpY2F0aW9uL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFVzZUZvcmdvdFBhc3N3b3JkTGVnYWN5UHJvcHM8VFZhcmlhYmxlcz4gPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogdHJ1ZTtcbiAgbXV0YXRpb25PcHRpb25zPzogT21pdDxcbiAgICBVc2VNdXRhdGlvbk9wdGlvbnM8XG4gICAgICBURm9yZ290UGFzc3dvcmREYXRhLFxuICAgICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICAgIFRWYXJpYWJsZXMsXG4gICAgICB1bmtub3duXG4gICAgPixcbiAgICBcIm11dGF0aW9uRm5cIiB8IFwib25FcnJvclwiIHwgXCJvblN1Y2Nlc3NcIlxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgVXNlRm9yZ290UGFzc3dvcmRQcm9wczxUVmFyaWFibGVzPiA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlPzogZmFsc2U7XG4gIG11dGF0aW9uT3B0aW9ucz86IE9taXQ8XG4gICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgQXV0aEFjdGlvblJlc3BvbnNlLFxuICAgICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICAgIFRWYXJpYWJsZXMsXG4gICAgICB1bmtub3duXG4gICAgPixcbiAgICBcIm11dGF0aW9uRm5cIlxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgVXNlRm9yZ290UGFzc3dvcmRDb21iaW5lZFByb3BzPFRWYXJpYWJsZXM+ID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IGJvb2xlYW47XG4gIG11dGF0aW9uT3B0aW9ucz86IE9taXQ8XG4gICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgQXV0aEFjdGlvblJlc3BvbnNlIHwgVEZvcmdvdFBhc3N3b3JkRGF0YSxcbiAgICAgIEVycm9yIHwgUmVmaW5lRXJyb3IsXG4gICAgICBUVmFyaWFibGVzLFxuICAgICAgdW5rbm93blxuICAgID4sXG4gICAgXCJtdXRhdGlvbkZuXCJcbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZUZvcmdvdFBhc3N3b3JkTGVnYWN5UmV0dXJuVHlwZTxUVmFyaWFibGVzPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBURm9yZ290UGFzc3dvcmREYXRhLFxuICBFcnJvciB8IFJlZmluZUVycm9yLFxuICBUVmFyaWFibGVzLFxuICB1bmtub3duXG4+O1xuXG5leHBvcnQgdHlwZSBVc2VGb3Jnb3RQYXNzd29yZFJldHVyblR5cGU8VFZhcmlhYmxlcz4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgQXV0aEFjdGlvblJlc3BvbnNlLFxuICBFcnJvciB8IFJlZmluZUVycm9yLFxuICBUVmFyaWFibGVzLFxuICB1bmtub3duXG4+O1xuXG5leHBvcnQgdHlwZSBVc2VGb3Jnb3RQYXNzd29yZENvbWJpbmVkUmV0dXJuVHlwZTxUVmFyaWFibGVzPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBBdXRoQWN0aW9uUmVzcG9uc2UgfCBURm9yZ290UGFzc3dvcmREYXRhLFxuICBFcnJvciB8IFJlZmluZUVycm9yLFxuICBUVmFyaWFibGVzLFxuICB1bmtub3duXG4+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9yZ290UGFzc3dvcmQ8VFZhcmlhYmxlcyA9IHt9PihcbiAgcHJvcHM6IFVzZUZvcmdvdFBhc3N3b3JkTGVnYWN5UHJvcHM8VFZhcmlhYmxlcz4sXG4pOiBVc2VGb3Jnb3RQYXNzd29yZExlZ2FjeVJldHVyblR5cGU8VFZhcmlhYmxlcz47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3Jnb3RQYXNzd29yZDxUVmFyaWFibGVzID0ge30+KFxuICBwcm9wcz86IFVzZUZvcmdvdFBhc3N3b3JkUHJvcHM8VFZhcmlhYmxlcz4sXG4pOiBVc2VGb3Jnb3RQYXNzd29yZFJldHVyblR5cGU8VFZhcmlhYmxlcz47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3Jnb3RQYXNzd29yZDxUVmFyaWFibGVzID0ge30+KFxuICBwcm9wcz86IFVzZUZvcmdvdFBhc3N3b3JkQ29tYmluZWRQcm9wczxUVmFyaWFibGVzPixcbik6IFVzZUZvcmdvdFBhc3N3b3JkQ29tYmluZWRSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG4vKipcbiAqIGB1c2VGb3Jnb3RQYXNzd29yZGAgY2FsbHMgYGZvcmdvdFBhc3N3b3JkYCBtZXRob2QgZnJvbSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL3Byb3ZpZGVycy9hdXRoLXByb3ZpZGVyIGBhdXRoUHJvdmlkZXJgfSB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXV0aC91c2VGb3Jnb3RQYXNzd29yZH0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgb2YgdGhlIHF1ZXJ5XG4gKiBAdHlwZVBhcmFtIFRWYXJpYWJsZXMgLSBWYWx1ZXMgZm9yIG11dGF0aW9uIGZ1bmN0aW9uLiBkZWZhdWx0IGB7fWBcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3Jnb3RQYXNzd29yZDxUVmFyaWFibGVzID0ge30+KHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlLFxuICBtdXRhdGlvbk9wdGlvbnMsXG59OlxuICB8IFVzZUZvcmdvdFBhc3N3b3JkUHJvcHM8VFZhcmlhYmxlcz5cbiAgfCBVc2VGb3Jnb3RQYXNzd29yZExlZ2FjeVByb3BzPFRWYXJpYWJsZXM+ID0ge30pOlxuICB8IFVzZUZvcmdvdFBhc3N3b3JkUmV0dXJuVHlwZTxUVmFyaWFibGVzPlxuICB8IFVzZUZvcmdvdFBhc3N3b3JkTGVnYWN5UmV0dXJuVHlwZTxUVmFyaWFibGVzPiB7XG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG4gIGNvbnN0IGdvID0gdXNlR28oKTtcbiAgY29uc3QgeyByZXBsYWNlIH0gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIGNvbnN0IHtcbiAgICBmb3Jnb3RQYXNzd29yZDogdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlRm9yZ290UGFzc3dvcmRGcm9tQ29udGV4dCxcbiAgfSA9IHVzZUxlZ2FjeUF1dGhDb250ZXh0KCk7XG4gIGNvbnN0IHsgZm9yZ290UGFzc3dvcmQ6IGZvcmdvdFBhc3N3b3JkRnJvbUNvbnRleHQgfSA9XG4gICAgdXNlQXV0aEJpbmRpbmdzQ29udGV4dCgpO1xuICBjb25zdCB7IGNsb3NlLCBvcGVuIH0gPSB1c2VOb3RpZmljYXRpb24oKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgbXV0YXRpb24gPSB1c2VNdXRhdGlvbjxcbiAgICBBdXRoQWN0aW9uUmVzcG9uc2UsXG4gICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICBUVmFyaWFibGVzLFxuICAgIHVua25vd25cbiAgPih7XG4gICAgbXV0YXRpb25LZXk6IGtleXMoKS5hdXRoKCkuYWN0aW9uKFwiZm9yZ290UGFzc3dvcmRcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgIG11dGF0aW9uRm46IGZvcmdvdFBhc3N3b3JkRnJvbUNvbnRleHQsXG4gICAgb25TdWNjZXNzOiAoeyBzdWNjZXNzLCByZWRpcmVjdFRvLCBlcnJvciwgc3VjY2Vzc05vdGlmaWNhdGlvbiB9KSA9PiB7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICBjbG9zZT8uKFwiZm9yZ290LXBhc3N3b3JkLWVycm9yXCIpO1xuXG4gICAgICAgIGlmIChzdWNjZXNzTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgb3Blbj8uKGJ1aWxkU3VjY2Vzc05vdGlmaWNhdGlvbihzdWNjZXNzTm90aWZpY2F0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yIHx8ICFzdWNjZXNzKSB7XG4gICAgICAgIG9wZW4/LihidWlsZE5vdGlmaWNhdGlvbihlcnJvcikpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVkaXJlY3RUbykge1xuICAgICAgICBpZiAocm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIikge1xuICAgICAgICAgIHJlcGxhY2UocmVkaXJlY3RUbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ28oeyB0bzogcmVkaXJlY3RUbywgdHlwZTogXCJyZXBsYWNlXCIgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICBvcGVuPy4oYnVpbGROb3RpZmljYXRpb24oZXJyb3IpKTtcbiAgICB9LFxuICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPT09IHRydWUgPyB7fSA6IG11dGF0aW9uT3B0aW9ucyksXG4gICAgbWV0YToge1xuICAgICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA9PT0gdHJ1ZSA/IHt9IDogbXV0YXRpb25PcHRpb25zPy5tZXRhKSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VGb3Jnb3RQYXNzd29yZFwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVNdXRhdGlvbiA9IHVzZU11dGF0aW9uPFxuICAgIFRGb3Jnb3RQYXNzd29yZERhdGEsXG4gICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICBUVmFyaWFibGVzLFxuICAgIHVua25vd25cbiAgPih7XG4gICAgbXV0YXRpb25LZXk6IFtcbiAgICAgIC4uLmtleXMoKS5hdXRoKCkuYWN0aW9uKFwiZm9yZ290UGFzc3dvcmRcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgXCJ2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcIixcbiAgICBdLFxuICAgIG11dGF0aW9uRm46IHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZUZvcmdvdFBhc3N3b3JkRnJvbUNvbnRleHQsXG4gICAgb25TdWNjZXNzOiAocmVkaXJlY3RQYXRoRnJvbUF1dGgpID0+IHtcbiAgICAgIGlmIChyZWRpcmVjdFBhdGhGcm9tQXV0aCAhPT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHJlZGlyZWN0UGF0aEZyb21BdXRoKSB7XG4gICAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICAgIHJlcGxhY2UocmVkaXJlY3RQYXRoRnJvbUF1dGgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbyh7IHRvOiByZWRpcmVjdFBhdGhGcm9tQXV0aCwgdHlwZTogXCJyZXBsYWNlXCIgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjbG9zZT8uKFwiZm9yZ290LXBhc3N3b3JkLWVycm9yXCIpO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycm9yOiBhbnkpID0+IHtcbiAgICAgIG9wZW4/LihidWlsZE5vdGlmaWNhdGlvbihlcnJvcikpO1xuICAgIH0sXG4gICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA/IG11dGF0aW9uT3B0aW9ucyA6IHt9KSxcbiAgICBtZXRhOiB7XG4gICAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gbXV0YXRpb25PcHRpb25zPy5tZXRhIDoge30pLFxuICAgICAgLi4uZ2V0WFJheShcInVzZUZvcmdvdFBhc3N3b3JkXCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcbiAgICA/IHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZU11dGF0aW9uXG4gICAgOiBtdXRhdGlvbjtcbn1cblxuY29uc3QgYnVpbGROb3RpZmljYXRpb24gPSAoXG4gIGVycm9yPzogRXJyb3IgfCBSZWZpbmVFcnJvcixcbik6IE9wZW5Ob3RpZmljYXRpb25QYXJhbXMgPT4ge1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IGVycm9yPy5uYW1lIHx8IFwiRm9yZ290IFBhc3N3b3JkIEVycm9yXCIsXG4gICAgZGVzY3JpcHRpb246IGVycm9yPy5tZXNzYWdlIHx8IFwiRXJyb3Igd2hpbGUgcmVzZXR0aW5nIHBhc3N3b3JkXCIsXG4gICAga2V5OiBcImZvcmdvdC1wYXNzd29yZC1lcnJvclwiLFxuICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgfTtcbn07XG5cbmNvbnN0IGJ1aWxkU3VjY2Vzc05vdGlmaWNhdGlvbiA9IChcbiAgc3VjY2Vzc05vdGlmaWNhdGlvbjogU3VjY2Vzc05vdGlmaWNhdGlvblJlc3BvbnNlLFxuKTogT3Blbk5vdGlmaWNhdGlvblBhcmFtcyA9PiB7XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogc3VjY2Vzc05vdGlmaWNhdGlvbi5tZXNzYWdlLFxuICAgIGRlc2NyaXB0aW9uOiBzdWNjZXNzTm90aWZpY2F0aW9uLmRlc2NyaXB0aW9uLFxuICAgIGtleTogXCJmb3Jnb3QtcGFzc3dvcmQtc3VjY2Vzc1wiLFxuICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZU11dGF0aW9uT3B0aW9ucyxcbiAgdHlwZSBVc2VNdXRhdGlvblJlc3VsdCxcbiAgdXNlTXV0YXRpb24sXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCBxcyBmcm9tIFwicXNcIjtcblxuaW1wb3J0IHsgdXNlQXV0aEJpbmRpbmdzQ29udGV4dCwgdXNlTGVnYWN5QXV0aENvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2F1dGhcIjtcbmltcG9ydCB7XG4gIHVzZUdvLFxuICB1c2VLZXlzLFxuICB1c2VOYXZpZ2F0aW9uLFxuICB1c2VOb3RpZmljYXRpb24sXG4gIHVzZVBhcnNlZCxcbiAgdXNlUm91dGVyQ29udGV4dCxcbiAgdXNlUm91dGVyVHlwZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7IFVwZGF0ZVBhc3N3b3JkRm9ybVR5cGVzIH0gZnJvbSBcIi4uLy4uLy4uL2NvbXBvbmVudHMvcGFnZXMvYXV0aC90eXBlc1wiO1xuaW1wb3J0IHR5cGUge1xuICBBdXRoQWN0aW9uUmVzcG9uc2UsXG4gIFN1Y2Nlc3NOb3RpZmljYXRpb25SZXNwb25zZSxcbiAgVFVwZGF0ZVBhc3N3b3JkRGF0YSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2F1dGgvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgUmVmaW5lRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBPcGVuTm90aWZpY2F0aW9uUGFyYW1zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBVc2VVcGRhdGVQYXNzd29yZExlZ2FjeVByb3BzPFxuICBUVmFyaWFibGVzIGV4dGVuZHMgVXBkYXRlUGFzc3dvcmRGb3JtVHlwZXMsXG4+ID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IHRydWU7XG4gIG11dGF0aW9uT3B0aW9ucz86IE9taXQ8XG4gICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgVFVwZGF0ZVBhc3N3b3JkRGF0YSxcbiAgICAgIEVycm9yIHwgUmVmaW5lRXJyb3IsXG4gICAgICBUVmFyaWFibGVzLFxuICAgICAgdW5rbm93blxuICAgID4sXG4gICAgXCJtdXRhdGlvbkZuXCIgfCBcIm9uRXJyb3JcIiB8IFwib25TdWNjZXNzXCJcbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZVVwZGF0ZVBhc3N3b3JkUHJvcHM8VFZhcmlhYmxlcyBleHRlbmRzIFVwZGF0ZVBhc3N3b3JkRm9ybVR5cGVzPiA9XG4gIHtcbiAgICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU/OiBmYWxzZTtcbiAgICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgICBBdXRoQWN0aW9uUmVzcG9uc2UsXG4gICAgICAgIEVycm9yIHwgUmVmaW5lRXJyb3IsXG4gICAgICAgIFRWYXJpYWJsZXMsXG4gICAgICAgIHVua25vd25cbiAgICAgID4sXG4gICAgICBcIm11dGF0aW9uRm5cIlxuICAgID47XG4gIH07XG5cbmV4cG9ydCB0eXBlIFVzZVVwZGF0ZVBhc3N3b3JkQ29tYmluZWRQcm9wczxcbiAgVFZhcmlhYmxlcyBleHRlbmRzIFVwZGF0ZVBhc3N3b3JkRm9ybVR5cGVzLFxuPiA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBib29sZWFuO1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIEF1dGhBY3Rpb25SZXNwb25zZSB8IFRVcGRhdGVQYXNzd29yZERhdGEsXG4gICAgICBFcnJvciB8IFJlZmluZUVycm9yLFxuICAgICAgVFZhcmlhYmxlcyxcbiAgICAgIHVua25vd25cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiXG4gID47XG59O1xuXG5leHBvcnQgdHlwZSBVc2VVcGRhdGVQYXNzd29yZExlZ2FjeVJldHVyblR5cGU8XG4gIFRWYXJpYWJsZXMgZXh0ZW5kcyBVcGRhdGVQYXNzd29yZEZvcm1UeXBlcyxcbj4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgVFVwZGF0ZVBhc3N3b3JkRGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlVXBkYXRlUGFzc3dvcmRSZXR1cm5UeXBlPFxuICBUVmFyaWFibGVzIGV4dGVuZHMgVXBkYXRlUGFzc3dvcmRGb3JtVHlwZXMsXG4+ID0gVXNlTXV0YXRpb25SZXN1bHQ8XG4gIEF1dGhBY3Rpb25SZXNwb25zZSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlVXBkYXRlUGFzc3dvcmRDb21iaW5lZFJldHVyblR5cGU8XG4gIFRWYXJpYWJsZXMgZXh0ZW5kcyBVcGRhdGVQYXNzd29yZEZvcm1UeXBlcyxcbj4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgQXV0aEFjdGlvblJlc3BvbnNlIHwgVFVwZGF0ZVBhc3N3b3JkRGF0YSxcbiAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgVFZhcmlhYmxlcyxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVVwZGF0ZVBhc3N3b3JkPFRWYXJpYWJsZXMgZXh0ZW5kcyBVcGRhdGVQYXNzd29yZEZvcm1UeXBlcz4oXG4gIHByb3BzOiBVc2VVcGRhdGVQYXNzd29yZExlZ2FjeVByb3BzPFRWYXJpYWJsZXM+LFxuKTogVXNlVXBkYXRlUGFzc3dvcmRMZWdhY3lSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlVXBkYXRlUGFzc3dvcmQ8VFZhcmlhYmxlcyBleHRlbmRzIFVwZGF0ZVBhc3N3b3JkRm9ybVR5cGVzPihcbiAgcHJvcHM/OiBVc2VVcGRhdGVQYXNzd29yZFByb3BzPFRWYXJpYWJsZXM+LFxuKTogVXNlVXBkYXRlUGFzc3dvcmRSZXR1cm5UeXBlPFRWYXJpYWJsZXM+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlVXBkYXRlUGFzc3dvcmQ8VFZhcmlhYmxlcyBleHRlbmRzIFVwZGF0ZVBhc3N3b3JkRm9ybVR5cGVzPihcbiAgcHJvcHM/OiBVc2VVcGRhdGVQYXNzd29yZENvbWJpbmVkUHJvcHM8VFZhcmlhYmxlcz4sXG4pOiBVc2VVcGRhdGVQYXNzd29yZENvbWJpbmVkUmV0dXJuVHlwZTxUVmFyaWFibGVzPjtcblxuLyoqXG4gKiBgdXNlVXBkYXRlUGFzc3dvcmRgIGNhbGxzIGB1cGRhdGVQYXNzd29yZGAgbWV0aG9kIGZyb20ge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9wcm92aWRlcnMvYXV0aC1wcm92aWRlciBgYXV0aFByb3ZpZGVyYH0gdW5kZXIgdGhlIGhvb2QuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2F1dGgvdXNlVXBkYXRlUGFzc3dvcmR9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIG9mIHRoZSBxdWVyeVxuICogQHR5cGVQYXJhbSBUVmFyaWFibGVzIC0gVmFsdWVzIGZvciBtdXRhdGlvbiBmdW5jdGlvbi4gZGVmYXVsdCBge31gXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlVXBkYXRlUGFzc3dvcmQ8XG4gIFRWYXJpYWJsZXMgZXh0ZW5kcyBVcGRhdGVQYXNzd29yZEZvcm1UeXBlcyA9IHt9LFxuPih7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSxcbiAgbXV0YXRpb25PcHRpb25zLFxufTpcbiAgfCBVc2VVcGRhdGVQYXNzd29yZFByb3BzPFRWYXJpYWJsZXM+XG4gIHwgVXNlVXBkYXRlUGFzc3dvcmRMZWdhY3lQcm9wczxUVmFyaWFibGVzPiA9IHt9KTpcbiAgfCBVc2VVcGRhdGVQYXNzd29yZFJldHVyblR5cGU8VFZhcmlhYmxlcz5cbiAgfCBVc2VVcGRhdGVQYXNzd29yZExlZ2FjeVJldHVyblR5cGU8VFZhcmlhYmxlcz4ge1xuICBjb25zdCByb3V0ZXJUeXBlID0gdXNlUm91dGVyVHlwZSgpO1xuXG4gIGNvbnN0IGdvID0gdXNlR28oKTtcbiAgY29uc3QgeyByZXBsYWNlIH0gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIGNvbnN0IHsgdXBkYXRlUGFzc3dvcmQ6IGxlZ2FjeVVwZGF0ZVBhc3N3b3JkRnJvbUNvbnRleHQgfSA9XG4gICAgdXNlTGVnYWN5QXV0aENvbnRleHQoKTtcbiAgY29uc3QgeyB1cGRhdGVQYXNzd29yZDogdXBkYXRlUGFzc3dvcmRGcm9tQ29udGV4dCB9ID1cbiAgICB1c2VBdXRoQmluZGluZ3NDb250ZXh0KCk7XG4gIGNvbnN0IHsgY2xvc2UsIG9wZW4gfSA9IHVzZU5vdGlmaWNhdGlvbigpO1xuXG4gIGNvbnN0IHsga2V5cywgcHJlZmVyTGVnYWN5S2V5cyB9ID0gdXNlS2V5cygpO1xuXG4gIGNvbnN0IHBhcnNlZCA9IHVzZVBhcnNlZCgpO1xuICBjb25zdCB7IHVzZUxvY2F0aW9uIH0gPSB1c2VSb3V0ZXJDb250ZXh0KCk7XG4gIGNvbnN0IHsgc2VhcmNoIH0gPSB1c2VMb2NhdGlvbigpO1xuXG4gIGNvbnN0IHBhcmFtcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICBjb25zdCBxdWVyeVN0cmluZ3MgPSBxcy5wYXJzZShzZWFyY2gsIHtcbiAgICAgICAgaWdub3JlUXVlcnlQcmVmaXg6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBxdWVyeVN0cmluZ3MgPz8ge307XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQucGFyYW1zID8/IHt9O1xuICB9LCBbc2VhcmNoLCBwYXJzZWQsIHJvdXRlclR5cGVdKTtcblxuICBjb25zdCBtdXRhdGlvbiA9IHVzZU11dGF0aW9uPEF1dGhBY3Rpb25SZXNwb25zZSwgRXJyb3IsIFRWYXJpYWJsZXMsIHVua25vd24+KHtcbiAgICBtdXRhdGlvbktleToga2V5cygpLmF1dGgoKS5hY3Rpb24oXCJ1cGRhdGVQYXNzd29yZFwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgbXV0YXRpb25GbjogYXN5bmMgKHZhcmlhYmxlcykgPT4ge1xuICAgICAgcmV0dXJuIHVwZGF0ZVBhc3N3b3JkRnJvbUNvbnRleHQ/Lih7XG4gICAgICAgIC4uLnBhcmFtcyxcbiAgICAgICAgLi4udmFyaWFibGVzLFxuICAgICAgfSkgYXMgUHJvbWlzZTxBdXRoQWN0aW9uUmVzcG9uc2U+O1xuICAgIH0sXG4gICAgb25TdWNjZXNzOiAoeyBzdWNjZXNzLCByZWRpcmVjdFRvLCBlcnJvciwgc3VjY2Vzc05vdGlmaWNhdGlvbiB9KSA9PiB7XG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICBjbG9zZT8uKFwidXBkYXRlLXBhc3N3b3JkLWVycm9yXCIpO1xuXG4gICAgICAgIGlmIChzdWNjZXNzTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgb3Blbj8uKGJ1aWxkU3VjY2Vzc05vdGlmaWNhdGlvbihzdWNjZXNzTm90aWZpY2F0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVycm9yIHx8ICFzdWNjZXNzKSB7XG4gICAgICAgIG9wZW4/LihidWlsZE5vdGlmaWNhdGlvbihlcnJvcikpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVkaXJlY3RUbykge1xuICAgICAgICBpZiAocm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIikge1xuICAgICAgICAgIHJlcGxhY2UocmVkaXJlY3RUbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ28oeyB0bzogcmVkaXJlY3RUbywgdHlwZTogXCJyZXBsYWNlXCIgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICBvcGVuPy4oYnVpbGROb3RpZmljYXRpb24oZXJyb3IpKTtcbiAgICB9LFxuICAgIC4uLih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPT09IHRydWUgPyB7fSA6IG11dGF0aW9uT3B0aW9ucyksXG4gICAgbWV0YToge1xuICAgICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA9PT0gdHJ1ZSA/IHt9IDogbXV0YXRpb25PcHRpb25zPy5tZXRhKSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VVcGRhdGVQYXNzd29yZFwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVNdXRhdGlvbiA9IHVzZU11dGF0aW9uPFxuICAgIFRVcGRhdGVQYXNzd29yZERhdGEsXG4gICAgRXJyb3IgfCBSZWZpbmVFcnJvcixcbiAgICBUVmFyaWFibGVzLFxuICAgIHVua25vd25cbiAgPih7XG4gICAgbXV0YXRpb25LZXk6IFtcbiAgICAgIC4uLmtleXMoKS5hdXRoKCkuYWN0aW9uKFwidXBkYXRlUGFzc3dvcmRcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgXCJ2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcIixcbiAgICBdLFxuICAgIG11dGF0aW9uRm46IGFzeW5jICh2YXJpYWJsZXMpID0+IHtcbiAgICAgIHJldHVybiBsZWdhY3lVcGRhdGVQYXNzd29yZEZyb21Db250ZXh0Py4oe1xuICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgIC4uLnZhcmlhYmxlcyxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25TdWNjZXNzOiAocmVkaXJlY3RQYXRoRnJvbUF1dGgpID0+IHtcbiAgICAgIGlmIChyZWRpcmVjdFBhdGhGcm9tQXV0aCAhPT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHJlZGlyZWN0UGF0aEZyb21BdXRoKSB7XG4gICAgICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgICAgICAgIHJlcGxhY2UocmVkaXJlY3RQYXRoRnJvbUF1dGgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbyh7IHRvOiByZWRpcmVjdFBhdGhGcm9tQXV0aCwgdHlwZTogXCJyZXBsYWNlXCIgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjbG9zZT8uKFwidXBkYXRlLXBhc3N3b3JkLWVycm9yXCIpO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycm9yOiBhbnkpID0+IHtcbiAgICAgIG9wZW4/LihidWlsZE5vdGlmaWNhdGlvbihlcnJvcikpO1xuICAgIH0sXG4gICAgLi4uKHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZSA/IG11dGF0aW9uT3B0aW9ucyA6IHt9KSxcbiAgICBtZXRhOiB7XG4gICAgICAuLi4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gbXV0YXRpb25PcHRpb25zPy5tZXRhIDoge30pLFxuICAgICAgLi4uZ2V0WFJheShcInVzZVVwZGF0ZVBhc3N3b3JkXCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVcbiAgICA/IHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZU11dGF0aW9uXG4gICAgOiBtdXRhdGlvbjtcbn1cblxuY29uc3QgYnVpbGROb3RpZmljYXRpb24gPSAoXG4gIGVycm9yPzogRXJyb3IgfCBSZWZpbmVFcnJvcixcbik6IE9wZW5Ob3RpZmljYXRpb25QYXJhbXMgPT4ge1xuICByZXR1cm4ge1xuICAgIG1lc3NhZ2U6IGVycm9yPy5uYW1lIHx8IFwiVXBkYXRlIFBhc3N3b3JkIEVycm9yXCIsXG4gICAgZGVzY3JpcHRpb246IGVycm9yPy5tZXNzYWdlIHx8IFwiRXJyb3Igd2hpbGUgdXBkYXRpbmcgcGFzc3dvcmRcIixcbiAgICBrZXk6IFwidXBkYXRlLXBhc3N3b3JkLWVycm9yXCIsXG4gICAgdHlwZTogXCJlcnJvclwiLFxuICB9O1xufTtcblxuY29uc3QgYnVpbGRTdWNjZXNzTm90aWZpY2F0aW9uID0gKFxuICBzdWNjZXNzTm90aWZpY2F0aW9uOiBTdWNjZXNzTm90aWZpY2F0aW9uUmVzcG9uc2UsXG4pOiBPcGVuTm90aWZpY2F0aW9uUGFyYW1zID0+IHtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBzdWNjZXNzTm90aWZpY2F0aW9uLm1lc3NhZ2UsXG4gICAgZGVzY3JpcHRpb246IHN1Y2Nlc3NOb3RpZmljYXRpb24uZGVzY3JpcHRpb24sXG4gICAga2V5OiBcInVwZGF0ZS1wYXNzd29yZC1zdWNjZXNzXCIsXG4gICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQgeyB0eXBlIFVzZVF1ZXJ5UmVzdWx0LCB1c2VRdWVyeSB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgdXNlQXV0aEJpbmRpbmdzQ29udGV4dCwgdXNlTGVnYWN5QXV0aENvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2F1dGhcIjtcbmltcG9ydCB7IHVzZUtleXMgfSBmcm9tIFwiQGhvb2tzL3VzZUtleXNcIjtcblxuaW1wb3J0IHR5cGUgeyBDaGVja1Jlc3BvbnNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2F1dGgvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgVXNlSXNBdXRoZW50aWNhdGVkTGVnYWN5UHJvcHMgPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogdHJ1ZTtcbiAgcGFyYW1zPzogYW55O1xufTtcblxuZXhwb3J0IHR5cGUgVXNlSXNBdXRoZW50aWNhdGVkUHJvcHMgPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZT86IGZhbHNlO1xuICBwYXJhbXM/OiBhbnk7XG59O1xuXG5leHBvcnQgdHlwZSBVc2VJc0F1dGhlbnRpY2F0ZWRDb21iaW5lZFByb3BzID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IGJvb2xlYW47XG4gIHBhcmFtcz86IGFueTtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZUlzQXV0aGVudGljYXRlZExlZ2FjeVJldHVyblR5cGUgPSBVc2VRdWVyeVJlc3VsdDxhbnksIGFueT47XG5cbmV4cG9ydCB0eXBlIFVzZUlzQXV0aGVudGljYXRlZFJldHVyblR5cGUgPSBVc2VRdWVyeVJlc3VsdDxDaGVja1Jlc3BvbnNlLCBhbnk+O1xuXG5leHBvcnQgdHlwZSBVc2VJc0F1dGhlbnRpY2F0ZWRDb21iaW5lZFJldHVyblR5cGUgPSBVc2VRdWVyeVJlc3VsdDxcbiAgQ2hlY2tSZXNwb25zZSB8IGFueSxcbiAgYW55XG4+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlSXNBdXRoZW50aWNhdGVkKFxuICBwcm9wczogVXNlSXNBdXRoZW50aWNhdGVkTGVnYWN5UHJvcHMsXG4pOiBVc2VJc0F1dGhlbnRpY2F0ZWRMZWdhY3lSZXR1cm5UeXBlO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlSXNBdXRoZW50aWNhdGVkKFxuICBwcm9wcz86IFVzZUlzQXV0aGVudGljYXRlZFByb3BzLFxuKTogVXNlSXNBdXRoZW50aWNhdGVkUmV0dXJuVHlwZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUlzQXV0aGVudGljYXRlZChcbiAgcHJvcHM/OiBVc2VJc0F1dGhlbnRpY2F0ZWRDb21iaW5lZFByb3BzLFxuKTogVXNlSXNBdXRoZW50aWNhdGVkQ29tYmluZWRSZXR1cm5UeXBlO1xuXG4vKipcbiAqICBgdXNlSXNBdXRoZW50aWNhdGVkYCBjYWxscyB0aGUgYGNoZWNrQXV0aGAgbWV0aG9kIGZyb20gdGhlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL3Byb3ZpZGVycy9hdXRoLXByb3ZpZGVyIGBhdXRoUHJvdmlkZXJgfSB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXV0aC91c2VBdXRoZW50aWNhdGVkfSBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSXNBdXRoZW50aWNhdGVkKHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID0gZmFsc2UsXG4gIHBhcmFtcyxcbn06IFVzZUlzQXV0aGVudGljYXRlZFByb3BzIHwgVXNlSXNBdXRoZW50aWNhdGVkTGVnYWN5UHJvcHMgPSB7fSk6XG4gIHwgVXNlSXNBdXRoZW50aWNhdGVkUmV0dXJuVHlwZVxuICB8IFVzZUlzQXV0aGVudGljYXRlZExlZ2FjeVJldHVyblR5cGUge1xuICBjb25zdCB7IGNoZWNrQXV0aCB9ID0gdXNlTGVnYWN5QXV0aENvbnRleHQoKTtcbiAgY29uc3QgeyBjaGVjayB9ID0gdXNlQXV0aEJpbmRpbmdzQ29udGV4dCgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBxdWVyeVJlc3BvbnNlID0gdXNlUXVlcnkoe1xuICAgIHF1ZXJ5S2V5OiBrZXlzKClcbiAgICAgIC5hdXRoKClcbiAgICAgIC5hY3Rpb24oXCJjaGVja1wiKVxuICAgICAgLnBhcmFtcyhwYXJhbXMpXG4gICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgIHF1ZXJ5Rm46IGFzeW5jICgpID0+IChhd2FpdCBjaGVjaz8uKHBhcmFtcykpID8/IHt9LFxuICAgIHJldHJ5OiBmYWxzZSxcbiAgICBlbmFibGVkOiAhdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VJc0F1dGhlbnRpY2F0ZWRcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgbGVnYWN5UXVlcnlSZXNwb25zZSA9IHVzZVF1ZXJ5KHtcbiAgICBxdWVyeUtleTogW1xuICAgICAgLi4ua2V5cygpLmF1dGgoKS5hY3Rpb24oXCJjaGVja1wiKS5wYXJhbXMocGFyYW1zKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICBcInYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZVwiLFxuICAgIF0sXG4gICAgcXVlcnlGbjogYXN5bmMgKCkgPT4gKGF3YWl0IGNoZWNrQXV0aD8uKHBhcmFtcykpID8/IHt9LFxuICAgIHJldHJ5OiBmYWxzZSxcbiAgICBlbmFibGVkOiB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUsXG4gICAgbWV0YToge1xuICAgICAgLi4uZ2V0WFJheShcInVzZUlzQXV0aGVudGljYXRlZFwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlID8gbGVnYWN5UXVlcnlSZXNwb25zZSA6IHF1ZXJ5UmVzcG9uc2U7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgYHVzZUF1dGhlbnRpY2F0ZWRgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgdXNlIGB1c2VJc0F1dGhlbnRpY2F0ZWRgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYHVzZUF1dGhlbnRpY2F0ZWRgIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY29uc3QgdXNlQXV0aGVudGljYXRlZCA9IHVzZUlzQXV0aGVudGljYXRlZDtcbiIsImltcG9ydCB7IGdldFhSYXkgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHsgdHlwZSBVc2VNdXRhdGlvblJlc3VsdCwgdXNlTXV0YXRpb24gfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB7IHVzZUF1dGhCaW5kaW5nc0NvbnRleHQsIHVzZUxlZ2FjeUF1dGhDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9hdXRoXCI7XG5pbXBvcnQgeyB1c2VHbywgdXNlTG9nb3V0LCB1c2VOYXZpZ2F0aW9uLCB1c2VSb3V0ZXJUeXBlIH0gZnJvbSBcIkBob29rc1wiO1xuaW1wb3J0IHsgdXNlS2V5cyB9IGZyb20gXCJAaG9va3MvdXNlS2V5c1wiO1xuXG5pbXBvcnQgdHlwZSB7IE9uRXJyb3JSZXNwb25zZSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9hdXRoL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFVzZU9uRXJyb3JMZWdhY3lQcm9wcyA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiB0cnVlO1xufTtcblxuZXhwb3J0IHR5cGUgVXNlT25FcnJvclByb3BzID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU/OiBmYWxzZTtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZU9uRXJyb3JDb21iaW5lZFByb3BzID0ge1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBVc2VPbkVycm9yTGVnYWN5UmV0dXJuVHlwZSA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICB2b2lkLFxuICBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGFueSxcbiAgdW5rbm93blxuPjtcblxuZXhwb3J0IHR5cGUgVXNlT25FcnJvclJldHVyblR5cGUgPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgT25FcnJvclJlc3BvbnNlLFxuICB1bmtub3duLFxuICB1bmtub3duLFxuICB1bmtub3duXG4+O1xuZXhwb3J0IHR5cGUgVXNlT25FcnJvckNvbWJpbmVkUmV0dXJuVHlwZSA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBPbkVycm9yUmVzcG9uc2UgfCB2b2lkLFxuICB1bmtub3duLFxuICB1bmtub3duLFxuICB1bmtub3duXG4+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlT25FcnJvcihcbiAgcHJvcHM6IFVzZU9uRXJyb3JMZWdhY3lQcm9wcyxcbik6IFVzZU9uRXJyb3JMZWdhY3lSZXR1cm5UeXBlO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlT25FcnJvcihwcm9wcz86IFVzZU9uRXJyb3JQcm9wcyk6IFVzZU9uRXJyb3JSZXR1cm5UeXBlO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlT25FcnJvcihcbiAgcHJvcHM/OiBVc2VPbkVycm9yQ29tYmluZWRQcm9wcyxcbik6IFVzZU9uRXJyb3JDb21iaW5lZFJldHVyblR5cGU7XG5cbi8qKlxuICogYHVzZU9uRXJyb3JgIGNhbGxzIHRoZSBgY2hlY2tFcnJvcmAgbWV0aG9kIGZyb20gdGhlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL3Byb3ZpZGVycy9hdXRoLXByb3ZpZGVyIGBhdXRoUHJvdmlkZXJgfSB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXV0aC91c2VDaGVja0Vycm9yfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU9uRXJyb3Ioe1xuICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUgPSBmYWxzZSxcbn06IFVzZU9uRXJyb3JQcm9wcyB8IFVzZU9uRXJyb3JMZWdhY3lQcm9wcyA9IHt9KTpcbiAgfCBVc2VPbkVycm9yUmV0dXJuVHlwZVxuICB8IFVzZU9uRXJyb3JMZWdhY3lSZXR1cm5UeXBlIHtcbiAgY29uc3Qgcm91dGVyVHlwZSA9IHVzZVJvdXRlclR5cGUoKTtcbiAgY29uc3QgZ28gPSB1c2VHbygpO1xuICBjb25zdCB7IHJlcGxhY2UgfSA9IHVzZU5hdmlnYXRpb24oKTtcblxuICBjb25zdCB7IGNoZWNrRXJyb3I6IGxlZ2FjeUNoZWNrRXJyb3JGcm9tQ29udGV4dCB9ID0gdXNlTGVnYWN5QXV0aENvbnRleHQoKTtcbiAgY29uc3QgeyBvbkVycm9yOiBvbkVycm9yRnJvbUNvbnRleHQgfSA9IHVzZUF1dGhCaW5kaW5nc0NvbnRleHQoKTtcblxuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCB7IG11dGF0ZTogbGVnYWN5TG9nb3V0IH0gPSB1c2VMb2dvdXQoe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbih2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGUpLFxuICB9KTtcbiAgY29uc3QgeyBtdXRhdGU6IGxvZ291dCB9ID0gdXNlTG9nb3V0KHtcbiAgICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IEJvb2xlYW4odjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlKSxcbiAgfSk7XG5cbiAgY29uc3QgbXV0YXRpb24gPSB1c2VNdXRhdGlvbjxPbkVycm9yUmVzcG9uc2UsIHVua25vd24sIHVua25vd24sIHVua25vd24+KHtcbiAgICBtdXRhdGlvbktleToga2V5cygpLmF1dGgoKS5hY3Rpb24oXCJvbkVycm9yXCIpLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAuLi4ob25FcnJvckZyb21Db250ZXh0XG4gICAgICA/IHtcbiAgICAgICAgICBtdXRhdGlvbkZuOiBvbkVycm9yRnJvbUNvbnRleHQsXG4gICAgICAgICAgb25TdWNjZXNzOiAoeyBsb2dvdXQ6IHNob3VsZExvZ291dCwgcmVkaXJlY3RUbyB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkTG9nb3V0KSB7XG4gICAgICAgICAgICAgIGxvZ291dCh7IHJlZGlyZWN0UGF0aDogcmVkaXJlY3RUbyB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVkaXJlY3RUbykge1xuICAgICAgICAgICAgICBpZiAocm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIikge1xuICAgICAgICAgICAgICAgIHJlcGxhY2UocmVkaXJlY3RUbyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oeyB0bzogcmVkaXJlY3RUbywgdHlwZTogXCJyZXBsYWNlXCIgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICAgIDoge1xuICAgICAgICAgIG11dGF0aW9uRm46ICgpID0+ICh7fSkgYXMgUHJvbWlzZTxPbkVycm9yUmVzcG9uc2U+LFxuICAgICAgICB9KSxcbiAgICBtZXRhOiB7XG4gICAgICAuLi5nZXRYUmF5KFwidXNlT25FcnJvclwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVNdXRhdGlvbiA9IHVzZU11dGF0aW9uKHtcbiAgICBtdXRhdGlvbktleTogW1xuICAgICAgLi4ua2V5cygpLmF1dGgoKS5hY3Rpb24oXCJvbkVycm9yXCIpLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgIFwidjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlXCIsXG4gICAgXSxcbiAgICBtdXRhdGlvbkZuOiBsZWdhY3lDaGVja0Vycm9yRnJvbUNvbnRleHQsXG4gICAgb25FcnJvcjogKHJlZGlyZWN0UGF0aD86IHN0cmluZykgPT4ge1xuICAgICAgbGVnYWN5TG9nb3V0KHsgcmVkaXJlY3RQYXRoIH0pO1xuICAgIH0sXG4gICAgbWV0YToge1xuICAgICAgLi4uZ2V0WFJheShcInVzZU9uRXJyb3JcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZVxuICAgID8gdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlTXV0YXRpb25cbiAgICA6IG11dGF0aW9uO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIGB1c2VDaGVja0Vycm9yYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHVzZSBgdXNlT25FcnJvcmAgaW5zdGVhZCwgaG93ZXZlciwgd2Ugc3RpbGwgc3VwcG9ydCBgdXNlQ2hlY2tFcnJvcmAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDaGVja0Vycm9yID0gdXNlT25FcnJvcjtcbiIsImltcG9ydCB7IHVzZUF1dGhCaW5kaW5nc0NvbnRleHQsIHVzZUxlZ2FjeUF1dGhDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9hdXRoXCI7XG5cbi8qKlxuICogQSBob29rIHRoYXQgdGhlIFVJIHVzZXNcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdXNlSXNFeGlzdEF1dGhlbnRpY2F0aW9uID0gKCk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCB7IGlzUHJvdmlkZWQ6IGxlZ2FjeUlzUHJvdmlkZWQgfSA9IHVzZUxlZ2FjeUF1dGhDb250ZXh0KCk7XG4gIGNvbnN0IHsgaXNQcm92aWRlZCB9ID0gdXNlQXV0aEJpbmRpbmdzQ29udGV4dCgpO1xuXG4gIHJldHVybiBCb29sZWFuKGlzUHJvdmlkZWQgfHwgbGVnYWN5SXNQcm92aWRlZCk7XG59O1xuIiwiaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQsXG4gIHR5cGUgVXNlUXVlcnlPcHRpb25zLFxuICB1c2VRdWVyeSxcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQge1xuICBoYW5kbGVQYWdpbmF0aW9uUGFyYW1zLFxuICBwaWNrRGF0YVByb3ZpZGVyLFxuICBwaWNrTm90RGVwcmVjYXRlZCxcbiAgcHJlcGFyZVF1ZXJ5Q29udGV4dCxcbiAgdXNlQWN0aXZlQXV0aFByb3ZpZGVyLFxufSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnNcIjtcbmltcG9ydCB7XG4gIHVzZURhdGFQcm92aWRlcixcbiAgdXNlSGFuZGxlTm90aWZpY2F0aW9uLFxuICB1c2VLZXlzLFxuICB1c2VNZXRhLFxuICB1c2VPbkVycm9yLFxuICB1c2VSZXNvdXJjZSxcbiAgdXNlUmVzb3VyY2VTdWJzY3JpcHRpb24sXG4gIHVzZVRyYW5zbGF0ZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VSZWNvcmQsXG4gIENydWRGaWx0ZXIsXG4gIENydWRTb3J0LFxuICBHZXRMaXN0UmVzcG9uc2UsXG4gIEh0dHBFcnJvcixcbiAgTWV0YVF1ZXJ5LFxuICBQYWdpbmF0aW9uLFxuICBQcmV0dGlmeSxcbn0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgTGl2ZU1vZGVQcm9wcyB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9saXZlL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9ub3RpZmljYXRpb24vdHlwZXNcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lT3B0aW9uc1Byb3BzLFxuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGUsXG4gIHVzZUxvYWRpbmdPdmVydGltZSxcbn0gZnJvbSBcIi4uL3VzZUxvYWRpbmdPdmVydGltZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZUxpc3RDb25maWcge1xuICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbjtcbiAgaGFzUGFnaW5hdGlvbj86IGJvb2xlYW47XG4gIHNvcnQ/OiBDcnVkU29ydFtdO1xuICBmaWx0ZXJzPzogQ3J1ZEZpbHRlcltdO1xufVxuXG5leHBvcnQgdHlwZSBCYXNlTGlzdFByb3BzID0ge1xuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgcGFnaW5hdGlvbiwgc29ydGluZyBhbmQgZmlsdGVyaW5nXG4gICAqIEB0eXBlIFtgVXNlTGlzdENvbmZpZ2BdKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZUxpc3QvI2NvbmZpZy1wYXJhbWV0ZXJzKVxuICAgKiBAZGVwcmVjYXRlZCBgY29uZmlnYCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiBVc2UgYHBhZ2luYXRpb25gLCBgaGFzUGFnaW5hdGlvbmAsIGBzb3J0ZXJzYCBhbmQgYGZpbHRlcnNgIGluc3RlYWQuXG4gICAqL1xuICBjb25maWc/OiBVc2VMaXN0Q29uZmlnO1xuICAvKipcbiAgICogUGFnaW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAqL1xuICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdXNlIHNlcnZlci1zaWRlIHBhZ2luYXRpb24gb3Igbm90XG4gICAqIEBkZXByZWNhdGVkIGBoYXNQYWdpbmF0aW9uYCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiBVc2UgYHBhZ2luYXRpb24ubW9kZWAgaW5zdGVhZC5cbiAgICovXG4gIGhhc1BhZ2luYXRpb24/OiBib29sZWFuO1xuICAvKipcbiAgICogU29ydGVyIHBhcmFtZXRlcnNcbiAgICovXG4gIHNvcnRlcnM/OiBDcnVkU29ydFtdO1xuICAvKipcbiAgICogRmlsdGVyIHBhcmFtZXRlcnNcbiAgICovXG4gIGZpbHRlcnM/OiBDcnVkRmlsdGVyW107XG4gIC8qKlxuICAgKiBNZXRhIGRhdGEgcXVlcnkgZm9yIGBkYXRhUHJvdmlkZXJgXG4gICAqL1xuICBtZXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogTWV0YSBkYXRhIHF1ZXJ5IGZvciBgZGF0YVByb3ZpZGVyYFxuICAgKiBAZGVwcmVjYXRlZCBgbWV0YURhdGFgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgcmVmaW5lIHdpbGwgcGFzcyBgbWV0YWAgaW5zdGVhZCwgaG93ZXZlciwgd2Ugc3RpbGwgc3VwcG9ydCBgbWV0YURhdGFgIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgKi9cbiAgbWV0YURhdGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGBkYXRhUHJvdmlkZXJgLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYGRhdGFQcm92aWRlck5hbWVgIHRoYXQgeW91IHdpbGwgdXNlXG4gICAqL1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVXNlTGlzdFByb3BzPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YT4gPSB7XG4gIC8qKlxuICAgKiBSZXNvdXJjZSBuYW1lIGZvciBBUEkgZGF0YSBpbnRlcmFjdGlvbnNcbiAgICovXG4gIHJlc291cmNlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUYW5zdGFjayBRdWVyeSdzIFt1c2VRdWVyeV0oaHR0cHM6Ly90YW5zdGFjay5jb20vcXVlcnkvdjQvZG9jcy9yZWZlcmVuY2UvdXNlUXVlcnkpIG9wdGlvbnNcbiAgICovXG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxcbiAgICBHZXRMaXN0UmVzcG9uc2U8VFF1ZXJ5Rm5EYXRhPixcbiAgICBURXJyb3IsXG4gICAgR2V0TGlzdFJlc3BvbnNlPFREYXRhPlxuICA+O1xufSAmIEJhc2VMaXN0UHJvcHMgJlxuICBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb248XG4gICAgR2V0TGlzdFJlc3BvbnNlPFREYXRhPixcbiAgICBURXJyb3IsXG4gICAgUHJldHRpZnk8QmFzZUxpc3RQcm9wcz5cbiAgPiAmXG4gIExpdmVNb2RlUHJvcHMgJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHM7XG5cbi8qKlxuICogYHVzZUxpc3RgIGlzIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiBgcmVhY3QtcXVlcnlgJ3Mge0BsaW5rIGh0dHBzOi8vcmVhY3QtcXVlcnkudGFuc3RhY2suY29tL2d1aWRlcy9xdWVyaWVzIGB1c2VRdWVyeWB9IHVzZWQgZm9yIHJldHJpZXZpbmcgaXRlbXMgZnJvbSBhIGByZXNvdXJjZWAgd2l0aCBwYWdpbmF0aW9uLCBzb3J0LCBhbmQgZmlsdGVyIGNvbmZpZ3VyYXRpb25zLlxuICpcbiAqIEl0IHVzZXMgdGhlIGBnZXRMaXN0YCBtZXRob2QgYXMgdGhlIHF1ZXJ5IGZ1bmN0aW9uIGZyb20gdGhlIGBkYXRhUHJvdmlkZXJgIHdoaWNoIGlzIHBhc3NlZCB0byBgPFJlZmluZT5gLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZUxpc3R9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBUUXVlcnlGbkRhdGEgLSBSZXN1bHQgZGF0YSByZXR1cm5lZCBieSB0aGUgcXVlcnkgZnVuY3Rpb24uIEV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBURXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjaHR0cGVycm9yIGBIdHRwRXJyb3JgfVxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIHJldHVybmVkIGJ5IHRoZSBgc2VsZWN0YCBmdW5jdGlvbi4gRXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9LiBEZWZhdWx0cyB0byBgVFF1ZXJ5Rm5EYXRhYFxuICpcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlTGlzdCA9IDxcbiAgVFF1ZXJ5Rm5EYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gVFF1ZXJ5Rm5EYXRhLFxuPih7XG4gIHJlc291cmNlOiByZXNvdXJjZUZyb21Qcm9wLFxuICBjb25maWcsXG4gIGZpbHRlcnMsXG4gIGhhc1BhZ2luYXRpb24sXG4gIHBhZ2luYXRpb24sXG4gIHNvcnRlcnMsXG4gIHF1ZXJ5T3B0aW9ucyxcbiAgc3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgZXJyb3JOb3RpZmljYXRpb24sXG4gIG1ldGEsXG4gIG1ldGFEYXRhLFxuICBsaXZlTW9kZSxcbiAgb25MaXZlRXZlbnQsXG4gIGxpdmVQYXJhbXMsXG4gIGRhdGFQcm92aWRlck5hbWUsXG4gIG92ZXJ0aW1lT3B0aW9ucyxcbn06IFVzZUxpc3RQcm9wczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+ID0ge30pOiBRdWVyeU9ic2VydmVyUmVzdWx0PFxuICBHZXRMaXN0UmVzcG9uc2U8VERhdGE+LFxuICBURXJyb3Jcbj4gJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZXMsIHJlc291cmNlLCBpZGVudGlmaWVyIH0gPSB1c2VSZXNvdXJjZShyZXNvdXJjZUZyb21Qcm9wKTtcblxuICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VEYXRhUHJvdmlkZXIoKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuICBjb25zdCB7IG11dGF0ZTogY2hlY2tFcnJvciB9ID0gdXNlT25FcnJvcih7XG4gICAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBCb29sZWFuKGF1dGhQcm92aWRlcj8uaXNMZWdhY3kpLFxuICB9KTtcbiAgY29uc3QgaGFuZGxlTm90aWZpY2F0aW9uID0gdXNlSGFuZGxlTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG4gIGNvbnN0IHsga2V5cywgcHJlZmVyTGVnYWN5S2V5cyB9ID0gdXNlS2V5cygpO1xuXG4gIGNvbnN0IHBpY2tlZERhdGFQcm92aWRlciA9IHBpY2tEYXRhUHJvdmlkZXIoXG4gICAgaWRlbnRpZmllcixcbiAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgIHJlc291cmNlcyxcbiAgKTtcbiAgY29uc3QgcHJlZmVycmVkTWV0YSA9IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKTtcbiAgY29uc3QgcHJlZmZlcmVkRmlsdGVycyA9IHBpY2tOb3REZXByZWNhdGVkKGZpbHRlcnMsIGNvbmZpZz8uZmlsdGVycyk7XG4gIGNvbnN0IHByZWZmZXJlZFNvcnRlcnMgPSBwaWNrTm90RGVwcmVjYXRlZChzb3J0ZXJzLCBjb25maWc/LnNvcnQpO1xuICBjb25zdCBwcmVmZmVyZWRIYXNQYWdpbmF0aW9uID0gcGlja05vdERlcHJlY2F0ZWQoXG4gICAgaGFzUGFnaW5hdGlvbixcbiAgICBjb25maWc/Lmhhc1BhZ2luYXRpb24sXG4gICk7XG4gIGNvbnN0IHByZWZmZXJlZFBhZ2luYXRpb24gPSBoYW5kbGVQYWdpbmF0aW9uUGFyYW1zKHtcbiAgICBwYWdpbmF0aW9uLFxuICAgIGNvbmZpZ1BhZ2luYXRpb246IGNvbmZpZz8ucGFnaW5hdGlvbixcbiAgICBoYXNQYWdpbmF0aW9uOiBwcmVmZmVyZWRIYXNQYWdpbmF0aW9uLFxuICB9KTtcbiAgY29uc3QgaXNTZXJ2ZXJQYWdpbmF0aW9uID0gcHJlZmZlcmVkUGFnaW5hdGlvbi5tb2RlID09PSBcInNlcnZlclwiO1xuXG4gIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoeyByZXNvdXJjZSwgbWV0YTogcHJlZmVycmVkTWV0YSB9KTtcblxuICBjb25zdCBub3RpZmljYXRpb25WYWx1ZXMgPSB7XG4gICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgIG1ldGFEYXRhOiBjb21iaW5lZE1ldGEsXG4gICAgZmlsdGVyczogcHJlZmZlcmVkRmlsdGVycyxcbiAgICBoYXNQYWdpbmF0aW9uOiBpc1NlcnZlclBhZ2luYXRpb24sXG4gICAgcGFnaW5hdGlvbjogcHJlZmZlcmVkUGFnaW5hdGlvbixcbiAgICBzb3J0ZXJzOiBwcmVmZmVyZWRTb3J0ZXJzLFxuICAgIGNvbmZpZzoge1xuICAgICAgLi4uY29uZmlnLFxuICAgICAgc29ydDogcHJlZmZlcmVkU29ydGVycyxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IGlzRW5hYmxlZCA9XG4gICAgcXVlcnlPcHRpb25zPy5lbmFibGVkID09PSB1bmRlZmluZWQgfHwgcXVlcnlPcHRpb25zPy5lbmFibGVkID09PSB0cnVlO1xuXG4gIGNvbnN0IHsgZ2V0TGlzdCB9ID0gZGF0YVByb3ZpZGVyKHBpY2tlZERhdGFQcm92aWRlcik7XG5cbiAgdXNlUmVzb3VyY2VTdWJzY3JpcHRpb24oe1xuICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgIHR5cGVzOiBbXCIqXCJdLFxuICAgIHBhcmFtczoge1xuICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgIHBhZ2luYXRpb246IHByZWZmZXJlZFBhZ2luYXRpb24sXG4gICAgICBoYXNQYWdpbmF0aW9uOiBpc1NlcnZlclBhZ2luYXRpb24sXG4gICAgICBzb3J0OiBwcmVmZmVyZWRTb3J0ZXJzLFxuICAgICAgc29ydGVyczogcHJlZmZlcmVkU29ydGVycyxcbiAgICAgIGZpbHRlcnM6IHByZWZmZXJlZEZpbHRlcnMsXG4gICAgICBzdWJzY3JpcHRpb25UeXBlOiBcInVzZUxpc3RcIixcbiAgICAgIC4uLmxpdmVQYXJhbXMsXG4gICAgfSxcbiAgICBjaGFubmVsOiBgcmVzb3VyY2VzLyR7cmVzb3VyY2U/Lm5hbWV9YCxcbiAgICBlbmFibGVkOiBpc0VuYWJsZWQsXG4gICAgbGl2ZU1vZGUsXG4gICAgb25MaXZlRXZlbnQsXG4gICAgZGF0YVByb3ZpZGVyTmFtZTogcGlja2VkRGF0YVByb3ZpZGVyLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLm1ldGEsXG4gICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHF1ZXJ5UmVzcG9uc2UgPSB1c2VRdWVyeTxcbiAgICBHZXRMaXN0UmVzcG9uc2U8VFF1ZXJ5Rm5EYXRhPixcbiAgICBURXJyb3IsXG4gICAgR2V0TGlzdFJlc3BvbnNlPFREYXRhPlxuICA+KHtcbiAgICBxdWVyeUtleToga2V5cygpXG4gICAgICAuZGF0YShwaWNrZWREYXRhUHJvdmlkZXIpXG4gICAgICAucmVzb3VyY2UoaWRlbnRpZmllciA/PyBcIlwiKVxuICAgICAgLmFjdGlvbihcImxpc3RcIilcbiAgICAgIC5wYXJhbXMoe1xuICAgICAgICAuLi4ocHJlZmVycmVkTWV0YSB8fCB7fSksXG4gICAgICAgIGZpbHRlcnM6IHByZWZmZXJlZEZpbHRlcnMsXG4gICAgICAgIGhhc1BhZ2luYXRpb246IGlzU2VydmVyUGFnaW5hdGlvbixcbiAgICAgICAgLi4uKGlzU2VydmVyUGFnaW5hdGlvbiAmJiB7XG4gICAgICAgICAgcGFnaW5hdGlvbjogcHJlZmZlcmVkUGFnaW5hdGlvbixcbiAgICAgICAgfSksXG4gICAgICAgIC4uLihzb3J0ZXJzICYmIHtcbiAgICAgICAgICBzb3J0ZXJzLFxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKGNvbmZpZz8uc29ydCAmJiB7XG4gICAgICAgICAgc29ydDogY29uZmlnPy5zb3J0LFxuICAgICAgICB9KSxcbiAgICAgIH0pXG4gICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgIHF1ZXJ5Rm46IChjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICAuLi5jb21iaW5lZE1ldGEsXG4gICAgICAgIHF1ZXJ5Q29udGV4dDogcHJlcGFyZVF1ZXJ5Q29udGV4dChjb250ZXh0KSxcbiAgICAgIH07XG4gICAgICByZXR1cm4gZ2V0TGlzdDxUUXVlcnlGbkRhdGE+KHtcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlPy5uYW1lID8/IFwiXCIsXG4gICAgICAgIHBhZ2luYXRpb246IHByZWZmZXJlZFBhZ2luYXRpb24sXG4gICAgICAgIGhhc1BhZ2luYXRpb246IGlzU2VydmVyUGFnaW5hdGlvbixcbiAgICAgICAgZmlsdGVyczogcHJlZmZlcmVkRmlsdGVycyxcbiAgICAgICAgc29ydDogcHJlZmZlcmVkU29ydGVycyxcbiAgICAgICAgc29ydGVyczogcHJlZmZlcmVkU29ydGVycyxcbiAgICAgICAgbWV0YSxcbiAgICAgICAgbWV0YURhdGE6IG1ldGEsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIC4uLnF1ZXJ5T3B0aW9ucyxcbiAgICBlbmFibGVkOlxuICAgICAgdHlwZW9mIHF1ZXJ5T3B0aW9ucz8uZW5hYmxlZCAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgICA/IHF1ZXJ5T3B0aW9ucz8uZW5hYmxlZFxuICAgICAgICA6ICEhcmVzb3VyY2U/Lm5hbWUsXG4gICAgc2VsZWN0OiAocmF3RGF0YSkgPT4ge1xuICAgICAgbGV0IGRhdGEgPSByYXdEYXRhO1xuXG4gICAgICBjb25zdCB7IGN1cnJlbnQsIG1vZGUsIHBhZ2VTaXplIH0gPSBwcmVmZmVyZWRQYWdpbmF0aW9uO1xuXG4gICAgICBpZiAobW9kZSA9PT0gXCJjbGllbnRcIikge1xuICAgICAgICBkYXRhID0ge1xuICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgZGF0YTogZGF0YS5kYXRhLnNsaWNlKChjdXJyZW50IC0gMSkgKiBwYWdlU2l6ZSwgY3VycmVudCAqIHBhZ2VTaXplKSxcbiAgICAgICAgICB0b3RhbDogZGF0YS50b3RhbCxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHF1ZXJ5T3B0aW9ucz8uc2VsZWN0KSB7XG4gICAgICAgIHJldHVybiBxdWVyeU9wdGlvbnM/LnNlbGVjdD8uKGRhdGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YSBhcyB1bmtub3duIGFzIEdldExpc3RSZXNwb25zZTxURGF0YT47XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IChkYXRhKSA9PiB7XG4gICAgICBxdWVyeU9wdGlvbnM/Lm9uU3VjY2Vzcz8uKGRhdGEpO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2Ygc3VjY2Vzc05vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdWNjZXNzTm90aWZpY2F0aW9uKGRhdGEsIG5vdGlmaWNhdGlvblZhbHVlcywgaWRlbnRpZmllcilcbiAgICAgICAgICA6IHN1Y2Nlc3NOb3RpZmljYXRpb247XG5cbiAgICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25Db25maWcpO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycjogVEVycm9yKSA9PiB7XG4gICAgICBjaGVja0Vycm9yKGVycik7XG4gICAgICBxdWVyeU9wdGlvbnM/Lm9uRXJyb3I/LihlcnIpO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2YgZXJyb3JOb3RpZmljYXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZXJyb3JOb3RpZmljYXRpb24oZXJyLCBub3RpZmljYXRpb25WYWx1ZXMsIGlkZW50aWZpZXIpXG4gICAgICAgICAgOiBlcnJvck5vdGlmaWNhdGlvbjtcblxuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICBrZXk6IGAke2lkZW50aWZpZXJ9LXVzZUxpc3Qtbm90aWZpY2F0aW9uYCxcbiAgICAgICAgbWVzc2FnZTogdHJhbnNsYXRlKFxuICAgICAgICAgIFwibm90aWZpY2F0aW9ucy5lcnJvclwiLFxuICAgICAgICAgIHsgc3RhdHVzQ29kZTogZXJyLnN0YXR1c0NvZGUgfSxcbiAgICAgICAgICBgRXJyb3IgKHN0YXR1cyBjb2RlOiAke2Vyci5zdGF0dXNDb2RlfSlgLFxuICAgICAgICApLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbWV0YToge1xuICAgICAgLi4ucXVlcnlPcHRpb25zPy5tZXRhLFxuICAgICAgLi4uZ2V0WFJheShcInVzZUxpc3RcIiwgcHJlZmVyTGVnYWN5S2V5cywgcmVzb3VyY2U/Lm5hbWUpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHsgZWxhcHNlZFRpbWUgfSA9IHVzZUxvYWRpbmdPdmVydGltZSh7XG4gICAgaXNMb2FkaW5nOiBxdWVyeVJlc3BvbnNlLmlzRmV0Y2hpbmcsXG4gICAgaW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8uaW50ZXJ2YWwsXG4gICAgb25JbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5vbkludGVydmFsLFxuICB9KTtcblxuICByZXR1cm4geyAuLi5xdWVyeVJlc3BvbnNlLCBvdmVydGltZTogeyBlbGFwc2VkVGltZSB9IH07XG59O1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlUmVmaW5lQ29udGV4dCB9IGZyb20gXCIuLlwiO1xuXG5leHBvcnQgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVSZWZpbmVDb250ZXh0ID0gT21pdDxcbiAgVXNlTG9hZGluZ092ZXJ0aW1lQ29yZVByb3BzLFxuICBcImlzTG9hZGluZ1wiIHwgXCJpbnRlcnZhbFwiXG4+ICZcbiAgUmVxdWlyZWQ8UGljazxVc2VMb2FkaW5nT3ZlcnRpbWVDb3JlUHJvcHMsIFwiaW50ZXJ2YWxcIj4+O1xuXG5leHBvcnQgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMgPSB7XG4gIG92ZXJ0aW1lT3B0aW9ucz86IFVzZUxvYWRpbmdPdmVydGltZUNvcmVPcHRpb25zO1xufTtcblxuZXhwb3J0IHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSA9IHtcbiAgb3ZlcnRpbWU6IHtcbiAgICBlbGFwc2VkVGltZT86IG51bWJlcjtcbiAgfTtcbn07XG5cbnR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lQ29yZU9wdGlvbnMgPSBPbWl0PFxuICBVc2VMb2FkaW5nT3ZlcnRpbWVDb3JlUHJvcHMsXG4gIFwiaXNMb2FkaW5nXCJcbj47XG5cbnR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lQ29yZVJldHVyblR5cGUgPSB7XG4gIGVsYXBzZWRUaW1lPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lQ29yZVByb3BzID0ge1xuICAvKipcbiAgICogVGhlIGxvYWRpbmcgc3RhdGUuIElmIHRydWUsIHRoZSBlbGFwc2VkIHRpbWUgd2lsbCBiZSBjYWxjdWxhdGVkLlxuICAgKi9cbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgaW50ZXJ2YWwgaW4gbWlsbGlzZWNvbmRzLiBJZiB0aGUgbG9hZGluZyB0aW1lIGV4Y2VlZHMgdGhpcyB0aW1lLCB0aGUgYG9uSW50ZXJ2YWxgIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkLlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgYGludGVydmFsYCB2YWx1ZSBmcm9tIHRoZSBgb3ZlcnRpbWVgIG9wdGlvbiBvZiB0aGUgYFJlZmluZVByb3ZpZGVyYCB3aWxsIGJlIHVzZWQuXG4gICAqXG4gICAqIEBkZWZhdWx0OiAxMDAwICgxIHNlY29uZClcbiAgICovXG4gIGludGVydmFsPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBsb2FkaW5nIHRpbWUgZXhjZWVkcyB0aGUgc3BlY2lmaWVkIHRpbWUuXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBgb25JbnRlcnZhbGAgdmFsdWUgZnJvbSB0aGUgYG92ZXJ0aW1lYCBvcHRpb24gb2YgdGhlIGBSZWZpbmVQcm92aWRlcmAgd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAcGFyYW0gZWxhcHNlZEludGVydmFsIFRoZSBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICAgKi9cbiAgb25JbnRlcnZhbD86IChlbGFwc2VkSW50ZXJ2YWw6IG51bWJlcikgPT4gdm9pZDtcbn07XG5cbi8qKlxuICogaWYgeW91IG5lZWQgdG8gZG8gc29tZXRoaW5nIHdoZW4gdGhlIGxvYWRpbmcgdGltZSBleGNlZWRzIHRoZSBzcGVjaWZpZWQgdGltZSwgcmVmaW5lIHByb3ZpZGVzIHRoZSBgdXNlTG9hZGluZ092ZXJ0aW1lYCBob29rLlxuICogSXQgcmV0dXJucyB0aGUgZWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgeyBlbGFwc2VkVGltZSB9ID0gdXNlTG9hZGluZ092ZXJ0aW1lKHtcbiAqICAgIGlzTG9hZGluZyxcbiAqICAgIGludGVydmFsOiAxMDAwLFxuICogICAgb25JbnRlcnZhbChlbGFwc2VkSW50ZXJ2YWwpIHtcbiAqICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgb3ZlcnRpbWVcIiwgZWxhcHNlZEludGVydmFsKTtcbiAqICAgIH0sXG4gKiB9KTtcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUxvYWRpbmdPdmVydGltZSA9ICh7XG4gIGlzTG9hZGluZyxcbiAgaW50ZXJ2YWw6IGludGVydmFsUHJvcCxcbiAgb25JbnRlcnZhbDogb25JbnRlcnZhbFByb3AsXG59OiBVc2VMb2FkaW5nT3ZlcnRpbWVDb3JlUHJvcHMpOiBVc2VMb2FkaW5nT3ZlcnRpbWVDb3JlUmV0dXJuVHlwZSA9PiB7XG4gIGNvbnN0IFtlbGFwc2VkVGltZSwgc2V0RWxhcHNlZFRpbWVdID0gdXNlU3RhdGU8bnVtYmVyIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICAvLyBnZXQgb3ZlcnRpbWUgb3B0aW9ucyBmcm9tIHJlZmluZSBjb250ZXh0XG4gIGNvbnN0IHsgb3B0aW9ucyB9ID0gdXNlUmVmaW5lQ29udGV4dCgpO1xuICBjb25zdCB7IG92ZXJ0aW1lIH0gPSBvcHRpb25zO1xuXG4gIC8vIHBpY2sgcHJvcHMgb3IgcmVmaW5lIGNvbnRleHQgb3B0aW9uc1xuICBjb25zdCBpbnRlcnZhbCA9IGludGVydmFsUHJvcCA/PyBvdmVydGltZS5pbnRlcnZhbDtcbiAgY29uc3Qgb25JbnRlcnZhbCA9IG9uSW50ZXJ2YWxQcm9wID8/IG92ZXJ0aW1lPy5vbkludGVydmFsO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGludGVydmFsRm46IFJldHVyblR5cGU8dHlwZW9mIHNldEludGVydmFsPjtcblxuICAgIGlmIChpc0xvYWRpbmcpIHtcbiAgICAgIGludGVydmFsRm4gPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIC8vIGluY3JlYXNlIGVsYXBzZWQgdGltZVxuICAgICAgICBzZXRFbGFwc2VkVGltZSgocHJldkVsYXBzZWRUaW1lKSA9PiB7XG4gICAgICAgICAgaWYgKHByZXZFbGFwc2VkVGltZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJ2YWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHByZXZFbGFwc2VkVGltZSArIGludGVydmFsO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGludGVydmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbEZuKTtcbiAgICAgIC8vIHJlc2V0IGVsYXBzZWQgdGltZVxuICAgICAgc2V0RWxhcHNlZFRpbWUodW5kZWZpbmVkKTtcbiAgICB9O1xuICB9LCBbaXNMb2FkaW5nLCBpbnRlcnZhbF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gY2FsbCBvbkludGVydmFsIGNhbGxiYWNrXG4gICAgaWYgKG9uSW50ZXJ2YWwgJiYgZWxhcHNlZFRpbWUpIHtcbiAgICAgIG9uSW50ZXJ2YWwoZWxhcHNlZFRpbWUpO1xuICAgIH1cbiAgfSwgW2VsYXBzZWRUaW1lXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBlbGFwc2VkVGltZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBnZXRYUmF5IH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtaW50ZXJuYWxcIjtcbmltcG9ydCB7XG4gIHR5cGUgUXVlcnlPYnNlcnZlclJlc3VsdCxcbiAgdHlwZSBVc2VRdWVyeU9wdGlvbnMsXG4gIHVzZVF1ZXJ5LFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB7XG4gIHBpY2tEYXRhUHJvdmlkZXIsXG4gIHBpY2tOb3REZXByZWNhdGVkLFxuICBwcmVwYXJlUXVlcnlDb250ZXh0LFxuICB1c2VBY3RpdmVBdXRoUHJvdmlkZXIsXG59IGZyb20gXCJAZGVmaW5pdGlvbnNcIjtcbmltcG9ydCB7XG4gIHVzZURhdGFQcm92aWRlcixcbiAgdXNlSGFuZGxlTm90aWZpY2F0aW9uLFxuICB1c2VLZXlzLFxuICB1c2VNZXRhLFxuICB1c2VPbkVycm9yLFxuICB1c2VSZXNvdXJjZSxcbiAgdXNlUmVzb3VyY2VTdWJzY3JpcHRpb24sXG4gIHVzZVRyYW5zbGF0ZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VLZXksXG4gIEJhc2VSZWNvcmQsXG4gIEdldE9uZVJlc3BvbnNlLFxuICBIdHRwRXJyb3IsXG4gIE1ldGFRdWVyeSxcbiAgUHJldHRpZnksXG59IGZyb20gXCIuLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IExpdmVNb2RlUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvbGl2ZS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvbm90aWZpY2F0aW9uL3R5cGVzXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZU9wdGlvbnNQcm9wcyxcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlLFxuICB1c2VMb2FkaW5nT3ZlcnRpbWUsXG59IGZyb20gXCIuLi91c2VMb2FkaW5nT3ZlcnRpbWVcIjtcblxuZXhwb3J0IHR5cGUgVXNlT25lUHJvcHM8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhPiA9IHtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBpZCBvZiB0aGUgaXRlbSBpbiB0aGUgcmVzb3VyY2VcbiAgICogQHR5cGUgW2BCYXNlS2V5YF0oL2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMvI2Jhc2VrZXkpXG4gICAqL1xuICBpZD86IEJhc2VLZXk7XG4gIC8qKlxuICAgKiByZWFjdC1xdWVyeSdzIFt1c2VRdWVyeV0oaHR0cHM6Ly90YW5zdGFjay5jb20vcXVlcnkvdjQvZG9jcy9yZWZlcmVuY2UvdXNlUXVlcnkpIG9wdGlvbnNcbiAgICovXG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxcbiAgICBHZXRPbmVSZXNwb25zZTxUUXVlcnlGbkRhdGE+LFxuICAgIFRFcnJvcixcbiAgICBHZXRPbmVSZXNwb25zZTxURGF0YT5cbiAgPjtcbiAgLyoqXG4gICAqIE1ldGFkYXRhIHF1ZXJ5IGZvciBgZGF0YVByb3ZpZGVyYCxcbiAgICovXG4gIG1ldGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBNZXRhIGRhdGEgcXVlcnkgZm9yIGBkYXRhUHJvdmlkZXJgLFxuICAgKiBAZGVwcmVjYXRlZCBgbWV0YURhdGFgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgcmVmaW5lIHdpbGwgcGFzcyBgbWV0YWAgaW5zdGVhZCwgaG93ZXZlciwgd2Ugc3RpbGwgc3VwcG9ydCBgbWV0YURhdGFgIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgKi9cbiAgbWV0YURhdGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGBkYXRhUHJvdmlkZXJgLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYGRhdGFQcm92aWRlck5hbWVgIHRoYXQgeW91IHdpbGwgdXNlLlxuICAgKiBAZGVmYXVsdCBgXCJkZWZhdWx0XCJgYFxuICAgKi9cbiAgZGF0YVByb3ZpZGVyTmFtZT86IHN0cmluZztcbn0gJiBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb248XG4gIEdldE9uZVJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yLFxuICBQcmV0dGlmeTx7IGlkPzogQmFzZUtleSB9ICYgTWV0YVF1ZXJ5PlxuPiAmXG4gIExpdmVNb2RlUHJvcHMgJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHM7XG5cbi8qKlxuICogYHVzZU9uZWAgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGByZWFjdC1xdWVyeWAncyB7QGxpbmsgaHR0cHM6Ly9yZWFjdC1xdWVyeS50YW5zdGFjay5jb20vZ3VpZGVzL3F1ZXJpZXMgYHVzZVF1ZXJ5YH0gdXNlZCBmb3IgcmV0cmlldmluZyBzaW5nbGUgaXRlbXMgZnJvbSBhIGByZXNvdXJjZWAuXG4gKlxuICogSXQgdXNlcyBgZ2V0T25lYCBtZXRob2QgYXMgcXVlcnkgZnVuY3Rpb24gZnJvbSB0aGUgYGRhdGFQcm92aWRlcmAgd2hpY2ggaXMgcGFzc2VkIHRvIGA8UmVmaW5lPmAuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2RhdGEvdXNlT25lfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEB0eXBlUGFyYW0gVFF1ZXJ5Rm5EYXRhIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IGZ1bmN0aW9uLiBFeHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH1cbiAqIEB0eXBlUGFyYW0gVEVycm9yIC0gQ3VzdG9tIGVycm9yIG9iamVjdCB0aGF0IGV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2h0dHBlcnJvciBgSHR0cEVycm9yYH1cbiAqIEB0eXBlUGFyYW0gVERhdGEgLSBSZXN1bHQgZGF0YSByZXR1cm5lZCBieSB0aGUgYHNlbGVjdGAgZnVuY3Rpb24uIEV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfS4gRGVmYXVsdHMgdG8gYFRRdWVyeUZuRGF0YWBcbiAqXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZU9uZSA9IDxcbiAgVFF1ZXJ5Rm5EYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gVFF1ZXJ5Rm5EYXRhLFxuPih7XG4gIHJlc291cmNlOiByZXNvdXJjZUZyb21Qcm9wLFxuICBpZCxcbiAgcXVlcnlPcHRpb25zLFxuICBzdWNjZXNzTm90aWZpY2F0aW9uLFxuICBlcnJvck5vdGlmaWNhdGlvbixcbiAgbWV0YSxcbiAgbWV0YURhdGEsXG4gIGxpdmVNb2RlLFxuICBvbkxpdmVFdmVudCxcbiAgbGl2ZVBhcmFtcyxcbiAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgb3ZlcnRpbWVPcHRpb25zLFxufTogVXNlT25lUHJvcHM8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhPik6IFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8XG4gIEdldE9uZVJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yXG4+ICZcbiAgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2VzLCByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gdXNlUmVzb3VyY2UocmVzb3VyY2VGcm9tUHJvcCk7XG5cbiAgY29uc3QgZGF0YVByb3ZpZGVyID0gdXNlRGF0YVByb3ZpZGVyKCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuICBjb25zdCBhdXRoUHJvdmlkZXIgPSB1c2VBY3RpdmVBdXRoUHJvdmlkZXIoKTtcbiAgY29uc3QgeyBtdXRhdGU6IGNoZWNrRXJyb3IgfSA9IHVzZU9uRXJyb3Ioe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbihhdXRoUHJvdmlkZXI/LmlzTGVnYWN5KSxcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUhhbmRsZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCBnZXRNZXRhID0gdXNlTWV0YSgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBwcmVmZXJyZWRNZXRhID0gcGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpO1xuICBjb25zdCBwaWNrZWREYXRhUHJvdmlkZXIgPSBwaWNrRGF0YVByb3ZpZGVyKFxuICAgIGlkZW50aWZpZXIsXG4gICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICByZXNvdXJjZXMsXG4gICk7XG5cbiAgY29uc3QgeyBnZXRPbmUgfSA9IGRhdGFQcm92aWRlcihwaWNrZWREYXRhUHJvdmlkZXIpO1xuXG4gIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoeyByZXNvdXJjZSwgbWV0YTogcHJlZmVycmVkTWV0YSB9KTtcblxuICB1c2VSZXNvdXJjZVN1YnNjcmlwdGlvbih7XG4gICAgcmVzb3VyY2U6IGlkZW50aWZpZXIsXG4gICAgdHlwZXM6IFtcIipcIl0sXG4gICAgY2hhbm5lbDogYHJlc291cmNlcy8ke3Jlc291cmNlPy5uYW1lfWAsXG4gICAgcGFyYW1zOiB7XG4gICAgICBpZHM6IGlkID8gW2lkXSA6IFtdLFxuICAgICAgaWQ6IGlkLFxuICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgIHN1YnNjcmlwdGlvblR5cGU6IFwidXNlT25lXCIsXG4gICAgICAuLi5saXZlUGFyYW1zLFxuICAgIH0sXG4gICAgZW5hYmxlZDpcbiAgICAgIHR5cGVvZiBxdWVyeU9wdGlvbnM/LmVuYWJsZWQgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBxdWVyeU9wdGlvbnM/LmVuYWJsZWRcbiAgICAgICAgOiB0eXBlb2YgcmVzb3VyY2U/Lm5hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGlkICE9PSBcInVuZGVmaW5lZFwiLFxuICAgIGxpdmVNb2RlLFxuICAgIG9uTGl2ZUV2ZW50LFxuICAgIGRhdGFQcm92aWRlck5hbWU6IHBpY2tlZERhdGFQcm92aWRlcixcbiAgICBtZXRhOiB7XG4gICAgICAuLi5tZXRhLFxuICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBxdWVyeVJlc3BvbnNlID0gdXNlUXVlcnk8XG4gICAgR2V0T25lUmVzcG9uc2U8VFF1ZXJ5Rm5EYXRhPixcbiAgICBURXJyb3IsXG4gICAgR2V0T25lUmVzcG9uc2U8VERhdGE+XG4gID4oe1xuICAgIHF1ZXJ5S2V5OiBrZXlzKClcbiAgICAgIC5kYXRhKHBpY2tlZERhdGFQcm92aWRlcilcbiAgICAgIC5yZXNvdXJjZShpZGVudGlmaWVyID8/IFwiXCIpXG4gICAgICAuYWN0aW9uKFwib25lXCIpXG4gICAgICAuaWQoaWQgPz8gXCJcIilcbiAgICAgIC5wYXJhbXMoe1xuICAgICAgICAuLi4ocHJlZmVycmVkTWV0YSB8fCB7fSksXG4gICAgICB9KVxuICAgICAgLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICBxdWVyeUZuOiAoY29udGV4dCkgPT5cbiAgICAgIGdldE9uZTxUUXVlcnlGbkRhdGE+KHtcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlPy5uYW1lID8/IFwiXCIsXG4gICAgICAgIGlkOiBpZCEsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAuLi5jb21iaW5lZE1ldGEsXG4gICAgICAgICAgcXVlcnlDb250ZXh0OiBwcmVwYXJlUXVlcnlDb250ZXh0KGNvbnRleHQpLFxuICAgICAgICB9LFxuICAgICAgICBtZXRhRGF0YToge1xuICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICBxdWVyeUNvbnRleHQ6IHByZXBhcmVRdWVyeUNvbnRleHQoY29udGV4dCksXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAuLi5xdWVyeU9wdGlvbnMsXG4gICAgZW5hYmxlZDpcbiAgICAgIHR5cGVvZiBxdWVyeU9wdGlvbnM/LmVuYWJsZWQgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgPyBxdWVyeU9wdGlvbnM/LmVuYWJsZWRcbiAgICAgICAgOiB0eXBlb2YgaWQgIT09IFwidW5kZWZpbmVkXCIsXG4gICAgb25TdWNjZXNzOiAoZGF0YSkgPT4ge1xuICAgICAgcXVlcnlPcHRpb25zPy5vblN1Y2Nlc3M/LihkYXRhKTtcblxuICAgICAgY29uc3Qgbm90aWZpY2F0aW9uQ29uZmlnID1cbiAgICAgICAgdHlwZW9mIHN1Y2Nlc3NOb3RpZmljYXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gc3VjY2Vzc05vdGlmaWNhdGlvbihcbiAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHN1Y2Nlc3NOb3RpZmljYXRpb247XG5cbiAgICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25Db25maWcpO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycjogVEVycm9yKSA9PiB7XG4gICAgICBjaGVja0Vycm9yKGVycik7XG4gICAgICBxdWVyeU9wdGlvbnM/Lm9uRXJyb3I/LihlcnIpO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2YgZXJyb3JOb3RpZmljYXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZXJyb3JOb3RpZmljYXRpb24oXG4gICAgICAgICAgICAgIGVycixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IGVycm9yTm90aWZpY2F0aW9uO1xuXG4gICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnLCB7XG4gICAgICAgIGtleTogYCR7aWR9LSR7aWRlbnRpZmllcn0tZ2V0T25lLW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZXJyb3JcIixcbiAgICAgICAgICB7IHN0YXR1c0NvZGU6IGVyci5zdGF0dXNDb2RlIH0sXG4gICAgICAgICAgYEVycm9yIChzdGF0dXMgY29kZTogJHtlcnIuc3RhdHVzQ29kZX0pYCxcbiAgICAgICAgKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGVyci5tZXNzYWdlLFxuICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLnF1ZXJ5T3B0aW9ucz8ubWV0YSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VPbmVcIiwgcHJlZmVyTGVnYWN5S2V5cywgcmVzb3VyY2U/Lm5hbWUpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHsgZWxhcHNlZFRpbWUgfSA9IHVzZUxvYWRpbmdPdmVydGltZSh7XG4gICAgaXNMb2FkaW5nOiBxdWVyeVJlc3BvbnNlLmlzRmV0Y2hpbmcsXG4gICAgaW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8uaW50ZXJ2YWwsXG4gICAgb25JbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5vbkludGVydmFsLFxuICB9KTtcblxuICByZXR1cm4geyAuLi5xdWVyeVJlc3BvbnNlLCBvdmVydGltZTogeyBlbGFwc2VkVGltZSB9IH07XG59O1xuIiwiaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQsXG4gIHR5cGUgVXNlUXVlcnlPcHRpb25zLFxuICB1c2VRdWVyeSxcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQge1xuICBoYW5kbGVNdWx0aXBsZSxcbiAgcGlja0RhdGFQcm92aWRlcixcbiAgcGlja05vdERlcHJlY2F0ZWQsXG4gIHByZXBhcmVRdWVyeUNvbnRleHQsXG4gIHVzZUFjdGl2ZUF1dGhQcm92aWRlcixcbn0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5pbXBvcnQge1xuICB1c2VEYXRhUHJvdmlkZXIsXG4gIHVzZUhhbmRsZU5vdGlmaWNhdGlvbixcbiAgdXNlS2V5cyxcbiAgdXNlTWV0YSxcbiAgdXNlT25FcnJvcixcbiAgdXNlUmVzb3VyY2UsXG4gIHVzZVJlc291cmNlU3Vic2NyaXB0aW9uLFxuICB1c2VUcmFuc2xhdGUsXG59IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUge1xuICBCYXNlS2V5LFxuICBCYXNlUmVjb3JkLFxuICBHZXRNYW55UmVzcG9uc2UsXG4gIEh0dHBFcnJvcixcbiAgTWV0YVF1ZXJ5LFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBMaXZlTW9kZVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2xpdmUvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMsXG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSxcbiAgdXNlTG9hZGluZ092ZXJ0aW1lLFxufSBmcm9tIFwiLi4vdXNlTG9hZGluZ092ZXJ0aW1lXCI7XG5cbmV4cG9ydCB0eXBlIFVzZU1hbnlQcm9wczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+ID0ge1xuICAvKipcbiAgICogUmVzb3VyY2UgbmFtZSBmb3IgQVBJIGRhdGEgaW50ZXJhY3Rpb25zXG4gICAqL1xuICByZXNvdXJjZTogc3RyaW5nO1xuICAvKipcbiAgICogaWRzIG9mIHRoZSBpdGVtIGluIHRoZSByZXNvdXJjZVxuICAgKiBAdHlwZSBbYEJhc2VLZXlbXWBdKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzLyNiYXNla2V5KVxuICAgKi9cbiAgaWRzOiBCYXNlS2V5W107XG4gIC8qKlxuICAgKiByZWFjdC1xdWVyeSdzIFt1c2VRdWVyeV0oaHR0cHM6Ly90YW5zdGFjay5jb20vcXVlcnkvdjQvZG9jcy9yZWZlcmVuY2UvdXNlUXVlcnkpIG9wdGlvbnNcbiAgICovXG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxcbiAgICBHZXRNYW55UmVzcG9uc2U8VFF1ZXJ5Rm5EYXRhPixcbiAgICBURXJyb3IsXG4gICAgR2V0TWFueVJlc3BvbnNlPFREYXRhPlxuICA+O1xuICAvKipcbiAgICogTWV0YWRhdGEgcXVlcnkgZm9yIGBkYXRhUHJvdmlkZXJgLFxuICAgKi9cbiAgbWV0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqIE1ldGFkYXRhIHF1ZXJ5IGZvciBgZGF0YVByb3ZpZGVyYCxcbiAgICogQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICovXG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBgZGF0YVByb3ZpZGVyYCwgeW91IHNob3VsZCB1c2UgdGhlIGBkYXRhUHJvdmlkZXJOYW1lYCB0aGF0IHlvdSB3aWxsIHVzZS5cbiAgICogQGRlZmF1bHQgXCJkZWZhdWx0XCJcbiAgICovXG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmc7XG59ICYgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uPEdldE1hbnlSZXNwb25zZTxURGF0YT4sIFRFcnJvciwgQmFzZUtleVtdPiAmXG4gIExpdmVNb2RlUHJvcHMgJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHM7XG5cbi8qKlxuICogYHVzZU1hbnlgIGlzIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiBgcmVhY3QtcXVlcnlgJ3Mge0BsaW5rIGh0dHBzOi8vcmVhY3QtcXVlcnkudGFuc3RhY2suY29tL2d1aWRlcy9xdWVyaWVzIGB1c2VRdWVyeWB9IHVzZWQgZm9yIHJldHJpZXZpbmcgbXVsdGlwbGUgaXRlbXMgZnJvbSBhIGByZXNvdXJjZWAuXG4gKlxuICogSXQgdXNlcyBgZ2V0TWFueWAgbWV0aG9kIGFzIHF1ZXJ5IGZ1bmN0aW9uIGZyb20gdGhlIGBkYXRhUHJvdmlkZXJgIHdoaWNoIGlzIHBhc3NlZCB0byBgPFJlZmluZT5gLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZU1hbnl9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBUUXVlcnlGbkRhdGEgLSBSZXN1bHQgZGF0YSByZXR1cm5lZCBieSB0aGUgcXVlcnkgZnVuY3Rpb24uIEV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBURXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjaHR0cGVycm9yIGBIdHRwRXJyb3JgfVxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIHJldHVybmVkIGJ5IHRoZSBgc2VsZWN0YCBmdW5jdGlvbi4gRXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9LiBEZWZhdWx0cyB0byBgVFF1ZXJ5Rm5EYXRhYFxuICpcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlTWFueSA9IDxcbiAgVFF1ZXJ5Rm5EYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gVFF1ZXJ5Rm5EYXRhLFxuPih7XG4gIHJlc291cmNlOiByZXNvdXJjZUZyb21Qcm9wLFxuICBpZHMsXG4gIHF1ZXJ5T3B0aW9ucyxcbiAgc3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgZXJyb3JOb3RpZmljYXRpb24sXG4gIG1ldGEsXG4gIG1ldGFEYXRhLFxuICBsaXZlTW9kZSxcbiAgb25MaXZlRXZlbnQsXG4gIGxpdmVQYXJhbXMsXG4gIGRhdGFQcm92aWRlck5hbWUsXG4gIG92ZXJ0aW1lT3B0aW9ucyxcbn06IFVzZU1hbnlQcm9wczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+KTogUXVlcnlPYnNlcnZlclJlc3VsdDxcbiAgR2V0TWFueVJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yXG4+ICZcbiAgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSA9PiB7XG4gIGNvbnN0IHsgcmVzb3VyY2VzLCByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gdXNlUmVzb3VyY2UocmVzb3VyY2VGcm9tUHJvcCk7XG4gIGNvbnN0IGRhdGFQcm92aWRlciA9IHVzZURhdGFQcm92aWRlcigpO1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgYXV0aFByb3ZpZGVyID0gdXNlQWN0aXZlQXV0aFByb3ZpZGVyKCk7XG4gIGNvbnN0IHsgbXV0YXRlOiBjaGVja0Vycm9yIH0gPSB1c2VPbkVycm9yKHtcbiAgICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IEJvb2xlYW4oYXV0aFByb3ZpZGVyPy5pc0xlZ2FjeSksXG4gIH0pO1xuICBjb25zdCBoYW5kbGVOb3RpZmljYXRpb24gPSB1c2VIYW5kbGVOb3RpZmljYXRpb24oKTtcbiAgY29uc3QgZ2V0TWV0YSA9IHVzZU1ldGEoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgcHJlZmVycmVkTWV0YSA9IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKTtcbiAgY29uc3QgcGlja2VkRGF0YVByb3ZpZGVyID0gcGlja0RhdGFQcm92aWRlcihcbiAgICBpZGVudGlmaWVyLFxuICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgcmVzb3VyY2VzLFxuICApO1xuICBjb25zdCBpc0VuYWJsZWQgPVxuICAgIHF1ZXJ5T3B0aW9ucz8uZW5hYmxlZCA9PT0gdW5kZWZpbmVkIHx8IHF1ZXJ5T3B0aW9ucz8uZW5hYmxlZCA9PT0gdHJ1ZTtcblxuICBjb25zdCB7IGdldE1hbnksIGdldE9uZSB9ID0gZGF0YVByb3ZpZGVyKHBpY2tlZERhdGFQcm92aWRlcik7XG5cbiAgY29uc3QgY29tYmluZWRNZXRhID0gZ2V0TWV0YSh7IHJlc291cmNlLCBtZXRhOiBwcmVmZXJyZWRNZXRhIH0pO1xuXG4gIHVzZVJlc291cmNlU3Vic2NyaXB0aW9uKHtcbiAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICB0eXBlczogW1wiKlwiXSxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGlkczogaWRzLFxuICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgIHN1YnNjcmlwdGlvblR5cGU6IFwidXNlTWFueVwiLFxuICAgICAgLi4ubGl2ZVBhcmFtcyxcbiAgICB9LFxuICAgIGNoYW5uZWw6IGByZXNvdXJjZXMvJHtyZXNvdXJjZS5uYW1lfWAsXG4gICAgZW5hYmxlZDogaXNFbmFibGVkLFxuICAgIGxpdmVNb2RlLFxuICAgIG9uTGl2ZUV2ZW50LFxuICAgIGRhdGFQcm92aWRlck5hbWU6IHBpY2tlZERhdGFQcm92aWRlcixcbiAgICBtZXRhOiB7XG4gICAgICAuLi5tZXRhLFxuICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBxdWVyeVJlc3BvbnNlID0gdXNlUXVlcnk8XG4gICAgR2V0TWFueVJlc3BvbnNlPFRRdWVyeUZuRGF0YT4sXG4gICAgVEVycm9yLFxuICAgIEdldE1hbnlSZXNwb25zZTxURGF0YT5cbiAgPih7XG4gICAgcXVlcnlLZXk6IGtleXMoKVxuICAgICAgLmRhdGEocGlja2VkRGF0YVByb3ZpZGVyKVxuICAgICAgLnJlc291cmNlKGlkZW50aWZpZXIpXG4gICAgICAuYWN0aW9uKFwibWFueVwiKVxuICAgICAgLmlkcyguLi5pZHMpXG4gICAgICAucGFyYW1zKHtcbiAgICAgICAgLi4uKHByZWZlcnJlZE1ldGEgfHwge30pLFxuICAgICAgfSlcbiAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgcXVlcnlGbjogKGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgcXVlcnlDb250ZXh0OiBwcmVwYXJlUXVlcnlDb250ZXh0KGNvbnRleHQpLFxuICAgICAgfTtcblxuICAgICAgaWYgKGdldE1hbnkpIHtcbiAgICAgICAgcmV0dXJuIGdldE1hbnkoe1xuICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZT8ubmFtZSxcbiAgICAgICAgICBpZHMsXG4gICAgICAgICAgbWV0YSxcbiAgICAgICAgICBtZXRhRGF0YTogbWV0YSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFuZGxlTXVsdGlwbGUoXG4gICAgICAgIGlkcy5tYXAoKGlkKSA9PlxuICAgICAgICAgIGdldE9uZTxUUXVlcnlGbkRhdGE+KHtcbiAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZT8ubmFtZSxcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbWV0YSxcbiAgICAgICAgICAgIG1ldGFEYXRhOiBtZXRhLFxuICAgICAgICAgIH0pLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9LFxuICAgIC4uLnF1ZXJ5T3B0aW9ucyxcbiAgICBvblN1Y2Nlc3M6IChkYXRhKSA9PiB7XG4gICAgICBxdWVyeU9wdGlvbnM/Lm9uU3VjY2Vzcz8uKGRhdGEpO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2Ygc3VjY2Vzc05vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdWNjZXNzTm90aWZpY2F0aW9uKGRhdGEsIGlkcywgaWRlbnRpZmllcilcbiAgICAgICAgICA6IHN1Y2Nlc3NOb3RpZmljYXRpb247XG5cbiAgICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25Db25maWcpO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycjogVEVycm9yKSA9PiB7XG4gICAgICBjaGVja0Vycm9yKGVycik7XG4gICAgICBxdWVyeU9wdGlvbnM/Lm9uRXJyb3I/LihlcnIpO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2YgZXJyb3JOb3RpZmljYXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZXJyb3JOb3RpZmljYXRpb24oZXJyLCBpZHMsIGlkZW50aWZpZXIpXG4gICAgICAgICAgOiBlcnJvck5vdGlmaWNhdGlvbjtcblxuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICBrZXk6IGAke2lkc1swXX0tJHtpZGVudGlmaWVyfS1nZXRNYW55LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZXJyb3JcIixcbiAgICAgICAgICB7IHN0YXR1c0NvZGU6IGVyci5zdGF0dXNDb2RlIH0sXG4gICAgICAgICAgYEVycm9yIChzdGF0dXMgY29kZTogJHtlcnIuc3RhdHVzQ29kZX0pYCxcbiAgICAgICAgKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGVyci5tZXNzYWdlLFxuICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLnF1ZXJ5T3B0aW9ucz8ubWV0YSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VNYW55XCIsIHByZWZlckxlZ2FjeUtleXMsIHJlc291cmNlPy5uYW1lKSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB7IGVsYXBzZWRUaW1lIH0gPSB1c2VMb2FkaW5nT3ZlcnRpbWUoe1xuICAgIGlzTG9hZGluZzogcXVlcnlSZXNwb25zZS5pc0ZldGNoaW5nLFxuICAgIGludGVydmFsOiBvdmVydGltZU9wdGlvbnM/LmludGVydmFsLFxuICAgIG9uSW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8ub25JbnRlcnZhbCxcbiAgfSk7XG5cbiAgcmV0dXJuIHsgLi4ucXVlcnlSZXNwb25zZSwgb3ZlcnRpbWU6IHsgZWxhcHNlZFRpbWUgfSB9O1xufTtcbiIsImltcG9ydCB7IGdldFhSYXkgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VNdXRhdGlvbk9wdGlvbnMsXG4gIHR5cGUgTXV0YXRlT3B0aW9ucyxcbiAgdXNlTXV0YXRpb24sXG4gIHVzZVF1ZXJ5Q2xpZW50LFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB7XG4gIHBpY2tEYXRhUHJvdmlkZXIsXG4gIHBpY2tOb3REZXByZWNhdGVkLFxuICBxdWVyeUtleXNSZXBsYWNlbWVudCxcbiAgdXNlQWN0aXZlQXV0aFByb3ZpZGVyLFxufSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnNcIjtcbmltcG9ydCB7XG4gIHVzZUNhbmNlbE5vdGlmaWNhdGlvbixcbiAgdXNlRGF0YVByb3ZpZGVyLFxuICB1c2VIYW5kbGVOb3RpZmljYXRpb24sXG4gIHVzZUludmFsaWRhdGUsXG4gIHVzZUtleXMsXG4gIHVzZUxvZyxcbiAgdXNlTWV0YSxcbiAgdXNlTXV0YXRpb25Nb2RlLFxuICB1c2VPbkVycm9yLFxuICB1c2VQdWJsaXNoLFxuICB1c2VSZWZpbmVDb250ZXh0LFxuICB1c2VSZXNvdXJjZSxcbiAgdXNlVHJhbnNsYXRlLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQmFzZUtleSxcbiAgQmFzZVJlY29yZCxcbiAgR2V0TGlzdFJlc3BvbnNlLFxuICBHZXRNYW55UmVzcG9uc2UsXG4gIEdldE9uZVJlc3BvbnNlLFxuICBIdHRwRXJyb3IsXG4gIElRdWVyeUtleXMsXG4gIE1ldGFRdWVyeSxcbiAgTXV0YXRpb25Nb2RlLFxuICBQcmV2Q29udGV4dCBhcyBVcGRhdGVDb250ZXh0LFxuICBQcmV2aW91c1F1ZXJ5LFxuICBVcGRhdGVSZXNwb25zZSxcbn0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgVXNlTXV0YXRpb25SZXN1bHQgfSBmcm9tIFwiLi4vLi4vZGVmaW5pdGlvbnMvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvdW5kb2FibGVRdWV1ZS90eXBlc1wiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMsXG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSxcbiAgdXNlTG9hZGluZ092ZXJ0aW1lLFxufSBmcm9tIFwiLi4vdXNlTG9hZGluZ092ZXJ0aW1lXCI7XG5cbmV4cG9ydCB0eXBlIE9wdGltaXN0aWNVcGRhdGVNYXBUeXBlPFREYXRhLCBUVmFyaWFibGVzPiA9IHtcbiAgbGlzdD86XG4gICAgfCAoKFxuICAgICAgICBwcmV2aW91czogR2V0TGlzdFJlc3BvbnNlPFREYXRhPiB8IG51bGwgfCB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlczogVFZhcmlhYmxlcyxcbiAgICAgICAgaWQ6IEJhc2VLZXksXG4gICAgICApID0+IEdldExpc3RSZXNwb25zZTxURGF0YT4gfCBudWxsKVxuICAgIHwgYm9vbGVhbjtcbiAgbWFueT86XG4gICAgfCAoKFxuICAgICAgICBwcmV2aW91czogR2V0TWFueVJlc3BvbnNlPFREYXRhPiB8IG51bGwgfCB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlczogVFZhcmlhYmxlcyxcbiAgICAgICAgaWQ6IEJhc2VLZXksXG4gICAgICApID0+IEdldE1hbnlSZXNwb25zZTxURGF0YT4gfCBudWxsKVxuICAgIHwgYm9vbGVhbjtcbiAgZGV0YWlsPzpcbiAgICB8ICgoXG4gICAgICAgIHByZXZpb3VzOiBHZXRPbmVSZXNwb25zZTxURGF0YT4gfCBudWxsIHwgdW5kZWZpbmVkLFxuICAgICAgICB2YWx1ZXM6IFRWYXJpYWJsZXMsXG4gICAgICAgIGlkOiBCYXNlS2V5LFxuICAgICAgKSA9PiBHZXRPbmVSZXNwb25zZTxURGF0YT4gfCBudWxsKVxuICAgIHwgYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFVwZGF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPiA9IHtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBpZCBmb3IgbXV0YXRpb24gZnVuY3Rpb25cbiAgICovXG4gIGlkPzogQmFzZUtleTtcbiAgLyoqXG4gICAqIFtEZXRlcm1pbmVzIHdoZW4gbXV0YXRpb25zIGFyZSBleGVjdXRlZF0oL2FkdmFuY2VkLXR1dG9yaWFscy9tdXRhdGlvbi1tb2RlLm1kKVxuICAgKi9cbiAgbXV0YXRpb25Nb2RlPzogTXV0YXRpb25Nb2RlO1xuICAvKipcbiAgICogRHVyYXRpb24gaW4gbXMgdG8gd2FpdCBiZWZvcmUgZXhlY3V0aW5nIHRoZSBtdXRhdGlvbiB3aGVuIGBtdXRhdGlvbk1vZGUgPSBcInVuZG9hYmxlXCJgXG4gICAqL1xuICB1bmRvYWJsZVRpbWVvdXQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGZ1bmN0aW9uIHRvIGNhbmNlbCB0aGUgbXV0YXRpb24gd2hlbiBgbXV0YXRpb25Nb2RlID0gXCJ1bmRvYWJsZVwiYFxuICAgKi9cbiAgb25DYW5jZWw/OiAoY2FuY2VsTXV0YXRpb246ICgpID0+IHZvaWQpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBWYWx1ZXMgZm9yIG11dGF0aW9uIGZ1bmN0aW9uXG4gICAqL1xuICB2YWx1ZXM/OiBUVmFyaWFibGVzO1xuICAvKipcbiAgICogTWV0YWRhdGEgcXVlcnkgZm9yIGRhdGFQcm92aWRlclxuICAgKi9cbiAgbWV0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqIE1ldGFkYXRhIHF1ZXJ5IGZvciBkYXRhUHJvdmlkZXJcbiAgICogQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICovXG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBgZGF0YVByb3ZpZGVyYCwgeW91IHNob3VsZCB1c2UgdGhlIGBkYXRhUHJvdmlkZXJOYW1lYCB0aGF0IHlvdSB3aWxsIHVzZS5cbiAgICogQGRlZmF1bHQgXCJkZWZhdWx0XCJcbiAgICovXG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAgWW91IGNhbiB1c2UgaXQgdG8gbWFuYWdlIHRoZSBpbnZhbGlkYXRpb25zIHRoYXQgd2lsbCBvY2N1ciBhdCB0aGUgZW5kIG9mIHRoZSBtdXRhdGlvbi5cbiAgICovXG4gIGludmFsaWRhdGVzPzogQXJyYXk8a2V5b2YgSVF1ZXJ5S2V5cz47XG4gIC8qKlxuICAgKiBZb3UgY2FuIHVzZSBpdCB0byBjdXN0b21pemUgdGhlIG9wdGltaXN0aWMgdXBkYXRlIGxvZ2ljLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgbGlzdDogdHJ1ZSxcbiAgICogICBtYW55OiB0cnVlLFxuICAgKiAgIGRldGFpbDogdHJ1ZSxcbiAgICogfVxuICAgKi9cbiAgb3B0aW1pc3RpY1VwZGF0ZU1hcD86IE9wdGltaXN0aWNVcGRhdGVNYXBUeXBlPFREYXRhLCBUVmFyaWFibGVzPjtcbn0gJiBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb248XG4gIFVwZGF0ZVJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yLFxuICB7IGlkOiBCYXNlS2V5OyB2YWx1ZXM6IFRWYXJpYWJsZXMgfVxuPjtcblxuZXhwb3J0IHR5cGUgVXNlVXBkYXRlUmV0dXJuVHlwZTxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0ge30sXG4+ID0gVXNlTXV0YXRpb25SZXN1bHQ8XG4gIFVwZGF0ZVJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yLFxuICBVcGRhdGVQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gIFVwZGF0ZUNvbnRleHQ8VERhdGE+XG4+ICZcbiAgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZTtcblxuZXhwb3J0IHR5cGUgVXNlVXBkYXRlUHJvcHM8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPiA9IHtcbiAgbXV0YXRpb25PcHRpb25zPzogT21pdDxcbiAgICBVc2VNdXRhdGlvbk9wdGlvbnM8XG4gICAgICBVcGRhdGVSZXNwb25zZTxURGF0YT4sXG4gICAgICBURXJyb3IsXG4gICAgICBVcGRhdGVQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgICBVcGRhdGVDb250ZXh0PFREYXRhPlxuICAgID4sXG4gICAgXCJtdXRhdGlvbkZuXCIgfCBcIm9uTXV0YXRlXCJcbiAgPjtcbn0gJiBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMgJlxuICBVcGRhdGVQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz47XG5cbi8qKlxuICogYHVzZVVwZGF0ZWAgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGByZWFjdC1xdWVyeWAncyB7QGxpbmsgaHR0cHM6Ly9yZWFjdC1xdWVyeS50YW5zdGFjay5jb20vcmVmZXJlbmNlL3VzZU11dGF0aW9uIGB1c2VNdXRhdGlvbmB9IGZvciB1cGRhdGUgbXV0YXRpb25zLlxuICpcbiAqIEl0IHVzZXMgYHVwZGF0ZWAgbWV0aG9kIGFzIG11dGF0aW9uIGZ1bmN0aW9uIGZyb20gdGhlIGBkYXRhUHJvdmlkZXJgIHdoaWNoIGlzIHBhc3NlZCB0byBgPFJlZmluZT5gLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZVVwZGF0ZX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgb2YgdGhlIHF1ZXJ5IGV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBURXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMvI2h0dHBlcnJvciBgSHR0cEVycm9yYH1cbiAqIEB0eXBlUGFyYW0gVFZhcmlhYmxlcyAtIFZhbHVlcyBmb3IgbXV0YXRpb24gZnVuY3Rpb25cbiAqXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VVcGRhdGUgPSA8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPih7XG4gIGlkOiBpZEZyb21Qcm9wcyxcbiAgcmVzb3VyY2U6IHJlc291cmNlRnJvbVByb3BzLFxuICB2YWx1ZXM6IHZhbHVlc0Zyb21Qcm9wcyxcbiAgZGF0YVByb3ZpZGVyTmFtZTogZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wcyxcbiAgc3VjY2Vzc05vdGlmaWNhdGlvbjogc3VjY2Vzc05vdGlmaWNhdGlvbkZyb21Qcm9wcyxcbiAgZXJyb3JOb3RpZmljYXRpb246IGVycm9yTm90aWZpY2F0aW9uRnJvbVByb3BzLFxuICBtZXRhOiBtZXRhRnJvbVByb3BzLFxuICBtZXRhRGF0YTogbWV0YURhdGFGcm9tUHJvcHMsXG4gIG11dGF0aW9uTW9kZTogbXV0YXRpb25Nb2RlRnJvbVByb3BzLFxuICB1bmRvYWJsZVRpbWVvdXQ6IHVuZG9hYmxlVGltZW91dEZyb21Qcm9wcyxcbiAgb25DYW5jZWw6IG9uQ2FuY2VsRnJvbVByb3BzLFxuICBvcHRpbWlzdGljVXBkYXRlTWFwOiBvcHRpbWlzdGljVXBkYXRlTWFwRnJvbVByb3BzLFxuICBpbnZhbGlkYXRlczogaW52YWxpZGF0ZXNGcm9tUHJvcHMsXG4gIG11dGF0aW9uT3B0aW9ucyxcbiAgb3ZlcnRpbWVPcHRpb25zLFxufTogVXNlVXBkYXRlUHJvcHM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4gPSB7fSk6IFVzZVVwZGF0ZVJldHVyblR5cGU8XG4gIFREYXRhLFxuICBURXJyb3IsXG4gIFRWYXJpYWJsZXNcbj4gPT4ge1xuICBjb25zdCB7IHJlc291cmNlcywgc2VsZWN0IH0gPSB1c2VSZXNvdXJjZSgpO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIGNvbnN0IGRhdGFQcm92aWRlciA9IHVzZURhdGFQcm92aWRlcigpO1xuXG4gIGNvbnN0IHtcbiAgICBtdXRhdGlvbk1vZGU6IG11dGF0aW9uTW9kZUNvbnRleHQsXG4gICAgdW5kb2FibGVUaW1lb3V0OiB1bmRvYWJsZVRpbWVvdXRDb250ZXh0LFxuICB9ID0gdXNlTXV0YXRpb25Nb2RlKCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuICBjb25zdCBhdXRoUHJvdmlkZXIgPSB1c2VBY3RpdmVBdXRoUHJvdmlkZXIoKTtcbiAgY29uc3QgeyBtdXRhdGU6IGNoZWNrRXJyb3IgfSA9IHVzZU9uRXJyb3Ioe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbihhdXRoUHJvdmlkZXI/LmlzTGVnYWN5KSxcbiAgfSk7XG4gIGNvbnN0IHB1Ymxpc2ggPSB1c2VQdWJsaXNoKCk7XG4gIGNvbnN0IHsgbG9nIH0gPSB1c2VMb2coKTtcbiAgY29uc3QgeyBub3RpZmljYXRpb25EaXNwYXRjaCB9ID0gdXNlQ2FuY2VsTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUhhbmRsZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCBpbnZhbGlkYXRlU3RvcmUgPSB1c2VJbnZhbGlkYXRlKCk7XG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zOiB7IHRleHRUcmFuc2Zvcm1lcnMgfSxcbiAgfSA9IHVzZVJlZmluZUNvbnRleHQoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgbXV0YXRpb25SZXN1bHQgPSB1c2VNdXRhdGlvbjxcbiAgICBVcGRhdGVSZXNwb25zZTxURGF0YT4sXG4gICAgVEVycm9yLFxuICAgIFVwZGF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICBVcGRhdGVDb250ZXh0PFREYXRhPlxuICA+KHtcbiAgICBtdXRhdGlvbkZuOiAoe1xuICAgICAgaWQgPSBpZEZyb21Qcm9wcyxcbiAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUgPSByZXNvdXJjZUZyb21Qcm9wcyxcbiAgICAgIG11dGF0aW9uTW9kZSA9IG11dGF0aW9uTW9kZUZyb21Qcm9wcyxcbiAgICAgIHVuZG9hYmxlVGltZW91dCA9IHVuZG9hYmxlVGltZW91dEZyb21Qcm9wcyxcbiAgICAgIG9uQ2FuY2VsID0gb25DYW5jZWxGcm9tUHJvcHMsXG4gICAgICBtZXRhID0gbWV0YUZyb21Qcm9wcyxcbiAgICAgIG1ldGFEYXRhID0gbWV0YURhdGFGcm9tUHJvcHMsXG4gICAgICBkYXRhUHJvdmlkZXJOYW1lID0gZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wcyxcbiAgICB9KSA9PiB7XG4gICAgICBpZiAoIWlkKSB0aHJvdyBtaXNzaW5nSWRFcnJvcjtcbiAgICAgIGlmICghdmFsdWVzKSB0aHJvdyBtaXNzaW5nVmFsdWVzRXJyb3I7XG4gICAgICBpZiAoIXJlc291cmNlTmFtZSkgdGhyb3cgbWlzc2luZ1Jlc291cmNlRXJyb3I7XG5cbiAgICAgIGNvbnN0IHsgcmVzb3VyY2UsIGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtdXRhdGlvbk1vZGVQcm9wT3JDb250ZXh0ID0gbXV0YXRpb25Nb2RlID8/IG11dGF0aW9uTW9kZUNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IHVuZG9hYmxlVGltZW91dFByb3BPckNvbnRleHQgPVxuICAgICAgICB1bmRvYWJsZVRpbWVvdXQgPz8gdW5kb2FibGVUaW1lb3V0Q29udGV4dDtcblxuICAgICAgaWYgKCEobXV0YXRpb25Nb2RlUHJvcE9yQ29udGV4dCA9PT0gXCJ1bmRvYWJsZVwiKSkge1xuICAgICAgICByZXR1cm4gZGF0YVByb3ZpZGVyKFxuICAgICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICAgKS51cGRhdGU8VERhdGEsIFRWYXJpYWJsZXM+KHtcbiAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB2YXJpYWJsZXM6IHZhbHVlcyxcbiAgICAgICAgICBtZXRhOiBjb21iaW5lZE1ldGEsXG4gICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCB1cGRhdGVQcm9taXNlID0gbmV3IFByb21pc2U8VXBkYXRlUmVzcG9uc2U8VERhdGE+PihcbiAgICAgICAgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGRvTXV0YXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICBkYXRhUHJvdmlkZXIoXG4gICAgICAgICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgLnVwZGF0ZTxURGF0YSwgVFZhcmlhYmxlcz4oe1xuICAgICAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFsdWVzLFxuICAgICAgICAgICAgICAgIG1ldGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgICBtZXRhRGF0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiByZXNvbHZlKHJlc3VsdCkpXG4gICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGNhbmNlbE11dGF0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHsgbWVzc2FnZTogXCJtdXRhdGlvbkNhbmNlbGxlZFwiIH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAob25DYW5jZWwpIHtcbiAgICAgICAgICAgIG9uQ2FuY2VsKGNhbmNlbE11dGF0aW9uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub3RpZmljYXRpb25EaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BREQsXG4gICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgcmVzb3VyY2U6IGlkZW50aWZpZXIsXG4gICAgICAgICAgICAgIGNhbmNlbE11dGF0aW9uOiBjYW5jZWxNdXRhdGlvbixcbiAgICAgICAgICAgICAgZG9NdXRhdGlvbjogZG9NdXRhdGlvbixcbiAgICAgICAgICAgICAgc2Vjb25kczogdW5kb2FibGVUaW1lb3V0UHJvcE9yQ29udGV4dCxcbiAgICAgICAgICAgICAgaXNTaWxlbnQ6ICEhb25DYW5jZWwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICAgIHJldHVybiB1cGRhdGVQcm9taXNlO1xuICAgIH0sXG4gICAgb25NdXRhdGU6IGFzeW5jICh7XG4gICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lID0gcmVzb3VyY2VGcm9tUHJvcHMsXG4gICAgICBpZCA9IGlkRnJvbVByb3BzLFxuICAgICAgbXV0YXRpb25Nb2RlID0gbXV0YXRpb25Nb2RlRnJvbVByb3BzLFxuICAgICAgdmFsdWVzID0gdmFsdWVzRnJvbVByb3BzLFxuICAgICAgZGF0YVByb3ZpZGVyTmFtZSA9IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcHMsXG4gICAgICBtZXRhID0gbWV0YUZyb21Qcm9wcyxcbiAgICAgIG1ldGFEYXRhID0gbWV0YURhdGFGcm9tUHJvcHMsXG4gICAgICBvcHRpbWlzdGljVXBkYXRlTWFwID0gb3B0aW1pc3RpY1VwZGF0ZU1hcEZyb21Qcm9wcyA/PyB7XG4gICAgICAgIGxpc3Q6IHRydWUsXG4gICAgICAgIG1hbnk6IHRydWUsXG4gICAgICAgIGRldGFpbDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSkgPT4ge1xuICAgICAgaWYgKCFpZCkgdGhyb3cgbWlzc2luZ0lkRXJyb3I7XG4gICAgICBpZiAoIXZhbHVlcykgdGhyb3cgbWlzc2luZ1ZhbHVlc0Vycm9yO1xuICAgICAgaWYgKCFyZXNvdXJjZU5hbWUpIHRocm93IG1pc3NpbmdSZXNvdXJjZUVycm9yO1xuXG4gICAgICBjb25zdCB7IGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGdxbE11dGF0aW9uOiBfLFxuICAgICAgICBncWxRdWVyeTogX18sXG4gICAgICAgIC4uLnByZWZlcnJlZE1ldGFcbiAgICAgIH0gPSBwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSkgPz8ge307XG5cbiAgICAgIGNvbnN0IHF1ZXJ5S2V5ID0gcXVlcnlLZXlzUmVwbGFjZW1lbnQocHJlZmVyTGVnYWN5S2V5cykoXG4gICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICAgcHJlZmVycmVkTWV0YSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlS2V5cyA9IGtleXMoKVxuICAgICAgICAuZGF0YShwaWNrRGF0YVByb3ZpZGVyKGlkZW50aWZpZXIsIGRhdGFQcm92aWRlck5hbWUsIHJlc291cmNlcykpXG4gICAgICAgIC5yZXNvdXJjZShpZGVudGlmaWVyKTtcblxuICAgICAgY29uc3QgcHJldmlvdXNRdWVyaWVzOiBQcmV2aW91c1F1ZXJ5PFREYXRhPltdID1cbiAgICAgICAgcXVlcnlDbGllbnQuZ2V0UXVlcmllc0RhdGEocmVzb3VyY2VLZXlzLmdldChwcmVmZXJMZWdhY3lLZXlzKSk7XG5cbiAgICAgIGNvbnN0IG11dGF0aW9uTW9kZVByb3BPckNvbnRleHQgPSBtdXRhdGlvbk1vZGUgPz8gbXV0YXRpb25Nb2RlQ29udGV4dDtcblxuICAgICAgYXdhaXQgcXVlcnlDbGllbnQuY2FuY2VsUXVlcmllcyhcbiAgICAgICAgcmVzb3VyY2VLZXlzLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB7XG4gICAgICAgICAgc2lsZW50OiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgaWYgKG11dGF0aW9uTW9kZVByb3BPckNvbnRleHQgIT09IFwicGVzc2ltaXN0aWNcIikge1xuICAgICAgICBpZiAob3B0aW1pc3RpY1VwZGF0ZU1hcC5saXN0KSB7XG4gICAgICAgICAgLy8gU2V0IHRoZSBwcmV2aW91cyBxdWVyaWVzIHRvIHRoZSBuZXcgb25lczpcbiAgICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyaWVzRGF0YShcbiAgICAgICAgICAgIHJlc291cmNlS2V5c1xuICAgICAgICAgICAgICAuYWN0aW9uKFwibGlzdFwiKVxuICAgICAgICAgICAgICAucGFyYW1zKHByZWZlcnJlZE1ldGEgPz8ge30pXG4gICAgICAgICAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgICAocHJldmlvdXM/OiBHZXRMaXN0UmVzcG9uc2U8VERhdGE+IHwgbnVsbCkgPT4ge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGltaXN0aWNVcGRhdGVNYXAubGlzdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGltaXN0aWNVcGRhdGVNYXAubGlzdChwcmV2aW91cywgdmFsdWVzLCBpZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcHJldmlvdXMuZGF0YS5tYXAoKHJlY29yZDogVERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLmlkPy50b1N0cmluZygpID09PSBpZD8udG9TdHJpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIC4uLnJlY29yZCxcbiAgICAgICAgICAgICAgICAgICAgLi4udmFsdWVzLFxuICAgICAgICAgICAgICAgICAgfSBhcyB1bmtub3duIGFzIFREYXRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnByZXZpb3VzLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW1pc3RpY1VwZGF0ZU1hcC5tYW55KSB7XG4gICAgICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcmllc0RhdGEoXG4gICAgICAgICAgICByZXNvdXJjZUtleXMuYWN0aW9uKFwibWFueVwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgICAocHJldmlvdXM/OiBHZXRNYW55UmVzcG9uc2U8VERhdGE+IHwgbnVsbCkgPT4ge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGltaXN0aWNVcGRhdGVNYXAubWFueSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGltaXN0aWNVcGRhdGVNYXAubWFueShwcmV2aW91cywgdmFsdWVzLCBpZCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcHJldmlvdXMuZGF0YS5tYXAoKHJlY29yZDogVERhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLmlkPy50b1N0cmluZygpID09PSBpZD8udG9TdHJpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgcmVjb3JkID0ge1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgLi4ucmVjb3JkLFxuICAgICAgICAgICAgICAgICAgICAuLi52YWx1ZXMsXG4gICAgICAgICAgICAgICAgICB9IGFzIHVua25vd24gYXMgVERhdGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnByZXZpb3VzLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW1pc3RpY1VwZGF0ZU1hcC5kZXRhaWwpIHtcbiAgICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyaWVzRGF0YShcbiAgICAgICAgICAgIHJlc291cmNlS2V5c1xuICAgICAgICAgICAgICAuYWN0aW9uKFwib25lXCIpXG4gICAgICAgICAgICAgIC5pZChpZClcbiAgICAgICAgICAgICAgLnBhcmFtcyhwcmVmZXJyZWRNZXRhID8/IHt9KVxuICAgICAgICAgICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgICAgKHByZXZpb3VzPzogR2V0T25lUmVzcG9uc2U8VERhdGE+IHwgbnVsbCkgPT4ge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGltaXN0aWNVcGRhdGVNYXAuZGV0YWlsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW1pc3RpY1VwZGF0ZU1hcC5kZXRhaWwocHJldmlvdXMsIHZhbHVlcywgaWQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5wcmV2aW91cyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAuLi5wcmV2aW91cy5kYXRhLFxuICAgICAgICAgICAgICAgICAgLi4udmFsdWVzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJldmlvdXNRdWVyaWVzLFxuICAgICAgICBxdWVyeUtleSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBvblNldHRsZWQ6IChkYXRhLCBlcnJvciwgdmFyaWFibGVzLCBjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlkID0gaWRGcm9tUHJvcHMsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUgPSByZXNvdXJjZUZyb21Qcm9wcyxcbiAgICAgICAgZGF0YVByb3ZpZGVyTmFtZSA9IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcHMsXG4gICAgICAgIGludmFsaWRhdGVzID0gaW52YWxpZGF0ZXNGcm9tUHJvcHMgPz8gW1wibGlzdFwiLCBcIm1hbnlcIiwgXCJkZXRhaWxcIl0sXG4gICAgICB9ID0gdmFyaWFibGVzO1xuICAgICAgaWYgKCFpZCkgdGhyb3cgbWlzc2luZ0lkRXJyb3I7XG4gICAgICBpZiAoIXJlc291cmNlTmFtZSkgdGhyb3cgbWlzc2luZ1Jlc291cmNlRXJyb3I7XG5cbiAgICAgIGNvbnN0IHsgaWRlbnRpZmllciB9ID0gc2VsZWN0KHJlc291cmNlTmFtZSk7XG5cbiAgICAgIGludmFsaWRhdGVTdG9yZSh7XG4gICAgICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lOiBwaWNrRGF0YVByb3ZpZGVyKFxuICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgICksXG4gICAgICAgIGludmFsaWRhdGVzLFxuICAgICAgICBpZCxcbiAgICAgIH0pO1xuXG4gICAgICBub3RpZmljYXRpb25EaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFTU9WRSxcbiAgICAgICAgcGF5bG9hZDogeyBpZCwgcmVzb3VyY2U6IGlkZW50aWZpZXIgfSxcbiAgICAgIH0pO1xuXG4gICAgICBtdXRhdGlvbk9wdGlvbnM/Lm9uU2V0dGxlZD8uKGRhdGEsIGVycm9yLCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH0sXG4gICAgb25TdWNjZXNzOiAoZGF0YSwgdmFyaWFibGVzLCBjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlkID0gaWRGcm9tUHJvcHMsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUgPSByZXNvdXJjZUZyb21Qcm9wcyxcbiAgICAgICAgc3VjY2Vzc05vdGlmaWNhdGlvbiA9IHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcHMsXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWU6IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcCA9IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcHMsXG4gICAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgICAgbWV0YSA9IG1ldGFGcm9tUHJvcHMsXG4gICAgICAgIG1ldGFEYXRhID0gbWV0YURhdGFGcm9tUHJvcHMsXG4gICAgICB9ID0gdmFyaWFibGVzO1xuICAgICAgaWYgKCFpZCkgdGhyb3cgbWlzc2luZ0lkRXJyb3I7XG4gICAgICBpZiAoIXZhbHVlcykgdGhyb3cgbWlzc2luZ1ZhbHVlc0Vycm9yO1xuICAgICAgaWYgKCFyZXNvdXJjZU5hbWUpIHRocm93IG1pc3NpbmdSZXNvdXJjZUVycm9yO1xuXG4gICAgICBjb25zdCB7IHJlc291cmNlLCBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcbiAgICAgIGNvbnN0IHJlc291cmNlU2luZ3VsYXIgPSB0ZXh0VHJhbnNmb3JtZXJzLnNpbmd1bGFyKGlkZW50aWZpZXIpO1xuXG4gICAgICBjb25zdCBkYXRhUHJvdmlkZXJOYW1lID0gcGlja0RhdGFQcm92aWRlcihcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICApO1xuXG4gICAgICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2Ygc3VjY2Vzc05vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdWNjZXNzTm90aWZpY2F0aW9uKGRhdGEsIHsgaWQsIHZhbHVlcyB9LCBpZGVudGlmaWVyKVxuICAgICAgICAgIDogc3VjY2Vzc05vdGlmaWNhdGlvbjtcblxuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICBrZXk6IGAke2lkfS0ke2lkZW50aWZpZXJ9LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0cmFuc2xhdGUoXCJub3RpZmljYXRpb25zLnN1Y2Nlc3NcIiwgXCJTdWNjZXNzZnVsXCIpLFxuICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgXCJub3RpZmljYXRpb25zLmVkaXRTdWNjZXNzXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVzb3VyY2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgYCR7aWRlbnRpZmllcn0uJHtpZGVudGlmaWVyfWAsXG4gICAgICAgICAgICAgIHJlc291cmNlU2luZ3VsYXIsXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYFN1Y2Nlc3NmdWxseSB1cGRhdGVkICR7cmVzb3VyY2VTaW5ndWxhcn1gLFxuICAgICAgICApLFxuICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgIH0pO1xuXG4gICAgICBwdWJsaXNoPy4oe1xuICAgICAgICBjaGFubmVsOiBgcmVzb3VyY2VzLyR7cmVzb3VyY2UubmFtZX1gLFxuICAgICAgICB0eXBlOiBcInVwZGF0ZWRcIixcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGlkczogZGF0YS5kYXRhPy5pZCA/IFtkYXRhLmRhdGEuaWRdIDogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgLi4uY29tYmluZWRNZXRhLFxuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgbGV0IHByZXZpb3VzRGF0YTogYW55O1xuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgcXVlcnlEYXRhID0gcXVlcnlDbGllbnQuZ2V0UXVlcnlEYXRhPFVwZGF0ZVJlc3BvbnNlPFREYXRhPj4oXG4gICAgICAgICAgY29udGV4dC5xdWVyeUtleS5kZXRhaWwoaWQpLFxuICAgICAgICApO1xuXG4gICAgICAgIHByZXZpb3VzRGF0YSA9IE9iamVjdC5rZXlzKHZhbHVlcyB8fCB7fSkucmVkdWNlPGFueT4oKGFjYywgaXRlbSkgPT4ge1xuICAgICAgICAgIGFjY1tpdGVtXSA9IHF1ZXJ5RGF0YT8uZGF0YT8uW2l0ZW1dO1xuICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge1xuICAgICAgICBmaWVsZHM6IF9maWVsZHMsXG4gICAgICAgIG9wZXJhdGlvbjogX29wZXJhdGlvbixcbiAgICAgICAgdmFyaWFibGVzOiBfdmFyaWFibGVzLFxuICAgICAgICAuLi5yZXN0XG4gICAgICB9ID0gY29tYmluZWRNZXRhIHx8IHt9O1xuICAgICAgbG9nPy5tdXRhdGUoe1xuICAgICAgICBhY3Rpb246IFwidXBkYXRlXCIsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICBkYXRhOiB2YWx1ZXMsXG4gICAgICAgIHByZXZpb3VzRGF0YSxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBtdXRhdGlvbk9wdGlvbnM/Lm9uU3VjY2Vzcz8uKGRhdGEsIHZhcmlhYmxlcywgY29udGV4dCk7XG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyOiBURXJyb3IsIHZhcmlhYmxlcywgY29udGV4dCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpZCA9IGlkRnJvbVByb3BzLFxuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lID0gcmVzb3VyY2VGcm9tUHJvcHMsXG4gICAgICAgIGVycm9yTm90aWZpY2F0aW9uID0gZXJyb3JOb3RpZmljYXRpb25Gcm9tUHJvcHMsXG4gICAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgIH0gPSB2YXJpYWJsZXM7XG4gICAgICBpZiAoIWlkKSB0aHJvdyBtaXNzaW5nSWRFcnJvcjtcbiAgICAgIGlmICghdmFsdWVzKSB0aHJvdyBtaXNzaW5nVmFsdWVzRXJyb3I7XG4gICAgICBpZiAoIXJlc291cmNlTmFtZSkgdGhyb3cgbWlzc2luZ1Jlc291cmNlRXJyb3I7XG5cbiAgICAgIGNvbnN0IHsgaWRlbnRpZmllciB9ID0gc2VsZWN0KHJlc291cmNlTmFtZSk7XG5cbiAgICAgIC8vIHNldCBiYWNrIHRoZSBxdWVyaWVzIHRvIHRoZSBjb250ZXh0OlxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgZm9yIChjb25zdCBxdWVyeSBvZiBjb250ZXh0LnByZXZpb3VzUXVlcmllcykge1xuICAgICAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJ5RGF0YShxdWVyeVswXSwgcXVlcnlbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnIubWVzc2FnZSAhPT0gXCJtdXRhdGlvbkNhbmNlbGxlZFwiKSB7XG4gICAgICAgIGNoZWNrRXJyb3I/LihlcnIpO1xuXG4gICAgICAgIGNvbnN0IHJlc291cmNlU2luZ3VsYXIgPSB0ZXh0VHJhbnNmb3JtZXJzLnNpbmd1bGFyKGlkZW50aWZpZXIpO1xuXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgICAgdHlwZW9mIGVycm9yTm90aWZpY2F0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gZXJyb3JOb3RpZmljYXRpb24oZXJyLCB7IGlkLCB2YWx1ZXMgfSwgaWRlbnRpZmllcilcbiAgICAgICAgICAgIDogZXJyb3JOb3RpZmljYXRpb247XG5cbiAgICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICAgIGtleTogYCR7aWR9LSR7aWRlbnRpZmllcn0tbm90aWZpY2F0aW9uYCxcbiAgICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZWRpdEVycm9yXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJlc291cmNlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgICAgICAgYCR7aWRlbnRpZmllcn0uJHtpZGVudGlmaWVyfWAsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VTaW5ndWxhcixcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogZXJyLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYEVycm9yIHdoZW4gdXBkYXRpbmcgJHtyZXNvdXJjZVNpbmd1bGFyfSAoc3RhdHVzIGNvZGU6ICR7ZXJyLnN0YXR1c0NvZGV9KWAsXG4gICAgICAgICAgKSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgbXV0YXRpb25PcHRpb25zPy5vbkVycm9yPy4oZXJyLCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH0sXG4gICAgbXV0YXRpb25LZXk6IGtleXMoKS5kYXRhKCkubXV0YXRpb24oXCJ1cGRhdGVcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgIC4uLm11dGF0aW9uT3B0aW9ucyxcbiAgICBtZXRhOiB7XG4gICAgICAuLi5tdXRhdGlvbk9wdGlvbnM/Lm1ldGEsXG4gICAgICAuLi5nZXRYUmF5KFwidXNlVXBkYXRlXCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgIH0sXG4gIH0pO1xuICBjb25zdCB7IG11dGF0ZSwgbXV0YXRlQXN5bmMsIC4uLm11dGF0aW9uIH0gPSBtdXRhdGlvblJlc3VsdDtcblxuICBjb25zdCB7IGVsYXBzZWRUaW1lIH0gPSB1c2VMb2FkaW5nT3ZlcnRpbWUoe1xuICAgIGlzTG9hZGluZzogbXV0YXRpb24uaXNMb2FkaW5nLFxuICAgIGludGVydmFsOiBvdmVydGltZU9wdGlvbnM/LmludGVydmFsLFxuICAgIG9uSW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8ub25JbnRlcnZhbCxcbiAgfSk7XG5cbiAgLy8gdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIG1ha2UgdGhlIGB2YXJpYWJsZXNgIHBhcmFtZXRlciBvcHRpb25hbFxuICBjb25zdCBoYW5kbGVNdXRhdGlvbiA9IChcbiAgICB2YXJpYWJsZXM/OiBVcGRhdGVQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgb3B0aW9ucz86IE11dGF0ZU9wdGlvbnM8XG4gICAgICBVcGRhdGVSZXNwb25zZTxURGF0YT4sXG4gICAgICBURXJyb3IsXG4gICAgICBVcGRhdGVQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgICBVcGRhdGVDb250ZXh0PFREYXRhPlxuICAgID4sXG4gICkgPT4ge1xuICAgIHJldHVybiBtdXRhdGUodmFyaWFibGVzIHx8IHt9LCBvcHRpb25zKTtcbiAgfTtcblxuICAvLyB0aGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gbWFrZSB0aGUgYHZhcmlhYmxlc2AgcGFyYW1ldGVyIG9wdGlvbmFsXG4gIGNvbnN0IGhhbmRsZU11dGF0ZUFzeW5jID0gKFxuICAgIHZhcmlhYmxlcz86IFVwZGF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICBvcHRpb25zPzogTXV0YXRlT3B0aW9uczxcbiAgICAgIFVwZGF0ZVJlc3BvbnNlPFREYXRhPixcbiAgICAgIFRFcnJvcixcbiAgICAgIFVwZGF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICAgIFVwZGF0ZUNvbnRleHQ8VERhdGE+XG4gICAgPixcbiAgKSA9PiB7XG4gICAgcmV0dXJuIG11dGF0ZUFzeW5jKHZhcmlhYmxlcyB8fCB7fSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5tdXRhdGlvbixcbiAgICBtdXRhdGU6IGhhbmRsZU11dGF0aW9uLFxuICAgIG11dGF0ZUFzeW5jOiBoYW5kbGVNdXRhdGVBc3luYyxcbiAgICBvdmVydGltZTogeyBlbGFwc2VkVGltZSB9LFxuICB9O1xufTtcblxuY29uc3QgbWlzc2luZ1Jlc291cmNlRXJyb3IgPSBuZXcgRXJyb3IoXG4gIFwiW3VzZVVwZGF0ZV06IGByZXNvdXJjZWAgaXMgbm90IGRlZmluZWQgb3Igbm90IG1hdGNoZWQgYnV0IGlzIHJlcXVpcmVkXCIsXG4pO1xuXG5jb25zdCBtaXNzaW5nSWRFcnJvciA9IG5ldyBFcnJvcihcbiAgXCJbdXNlVXBkYXRlXTogYGlkYCBpcyBub3QgZGVmaW5lZCBidXQgaXMgcmVxdWlyZWQgaW4gZWRpdCBhbmQgY2xvbmUgYWN0aW9uc1wiLFxuKTtcblxuY29uc3QgbWlzc2luZ1ZhbHVlc0Vycm9yID0gbmV3IEVycm9yKFxuICBcIlt1c2VVcGRhdGVdOiBgdmFsdWVzYCBpcyBub3QgcHJvdmlkZWQgYnV0IGlzIHJlcXVpcmVkXCIsXG4pO1xuIiwiaW1wb3J0IHR5cGUgeyBCYXNlS2V5IH0gZnJvbSBcIi4uL2RhdGEvdHlwZXNcIjtcblxuZXhwb3J0IGVudW0gQWN0aW9uVHlwZXMge1xuICBBREQgPSBcIkFERFwiLFxuICBSRU1PVkUgPSBcIlJFTU9WRVwiLFxuICBERUNSRUFTRV9OT1RJRklDQVRJT05fU0VDT05EID0gXCJERUNSRUFTRV9OT1RJRklDQVRJT05fU0VDT05EXCIsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVuZG9hYmxlUXVldWUge1xuICBpZDogQmFzZUtleTtcbiAgcmVzb3VyY2U6IHN0cmluZztcbiAgY2FuY2VsTXV0YXRpb246ICgpID0+IHZvaWQ7XG4gIGRvTXV0YXRpb246ICgpID0+IHZvaWQ7XG4gIHNlY29uZHM6IG51bWJlcjtcbiAgaXNSdW5uaW5nOiBib29sZWFuO1xuICBpc1NpbGVudDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVW5kb2FibGVRdWV1ZUNvbnRleHQge1xuICBub3RpZmljYXRpb25zOiBJVW5kb2FibGVRdWV1ZVtdO1xuICBub3RpZmljYXRpb25EaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8YW55Pjtcbn1cbiIsImltcG9ydCB7XG4gIHBpY2tEYXRhUHJvdmlkZXIsXG4gIHBpY2tOb3REZXByZWNhdGVkLFxuICB1c2VBY3RpdmVBdXRoUHJvdmlkZXIsXG59IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZU11dGF0aW9uT3B0aW9ucyxcbiAgdHlwZSBNdXRhdGVPcHRpb25zLFxuICB1c2VNdXRhdGlvbixcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQge1xuICB1c2VEYXRhUHJvdmlkZXIsXG4gIHVzZUhhbmRsZU5vdGlmaWNhdGlvbixcbiAgdXNlSW52YWxpZGF0ZSxcbiAgdXNlS2V5cyxcbiAgdXNlTG9nLFxuICB1c2VNZXRhLFxuICB1c2VPbkVycm9yLFxuICB1c2VQdWJsaXNoLFxuICB1c2VSZWZpbmVDb250ZXh0LFxuICB1c2VSZXNvdXJjZSxcbiAgdXNlVHJhbnNsYXRlLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQmFzZVJlY29yZCxcbiAgQ3JlYXRlUmVzcG9uc2UsXG4gIEh0dHBFcnJvcixcbiAgSVF1ZXJ5S2V5cyxcbiAgTWV0YVF1ZXJ5LFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBVc2VNdXRhdGlvblJlc3VsdCB9IGZyb20gXCIuLi8uLi9kZWZpbml0aW9ucy90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvbm90aWZpY2F0aW9uL3R5cGVzXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZU9wdGlvbnNQcm9wcyxcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlLFxuICB1c2VMb2FkaW5nT3ZlcnRpbWUsXG59IGZyb20gXCIuLi91c2VMb2FkaW5nT3ZlcnRpbWVcIjtcblxuZXhwb3J0IHR5cGUgVXNlQ3JlYXRlUGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+ID0ge1xuICAvKipcbiAgICogUmVzb3VyY2UgbmFtZSBmb3IgQVBJIGRhdGEgaW50ZXJhY3Rpb25zXG4gICAqL1xuICByZXNvdXJjZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFZhbHVlcyBmb3IgbXV0YXRpb24gZnVuY3Rpb25cbiAgICovXG4gIHZhbHVlcz86IFRWYXJpYWJsZXM7XG4gIC8qKlxuICAgKiBNZXRhIGRhdGEgZm9yIGBkYXRhUHJvdmlkZXJgXG4gICAqL1xuICBtZXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogTWV0YSBkYXRhIGZvciBgZGF0YVByb3ZpZGVyYFxuICAgKiBAZGVwcmVjYXRlZCBgbWV0YURhdGFgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgcmVmaW5lIHdpbGwgcGFzcyBgbWV0YWAgaW5zdGVhZCwgaG93ZXZlciwgd2Ugc3RpbGwgc3VwcG9ydCBgbWV0YURhdGFgIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgKi9cbiAgbWV0YURhdGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGBkYXRhUHJvdmlkZXJgLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYGRhdGFQcm92aWRlck5hbWVgIHRoYXQgeW91IHdpbGwgdXNlLlxuICAgKi9cbiAgZGF0YVByb3ZpZGVyTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFlvdSBjYW4gdXNlIGl0IHRvIG1hbmFnZSB0aGUgaW52YWxpZGF0aW9ucyB0aGF0IHdpbGwgb2NjdXIgYXQgdGhlIGVuZCBvZiB0aGUgbXV0YXRpb24uXG4gICAqL1xuICBpbnZhbGlkYXRlcz86IEFycmF5PGtleW9mIElRdWVyeUtleXM+O1xufSAmIFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbjxDcmVhdGVSZXNwb25zZTxURGF0YT4sIFRFcnJvciwgVFZhcmlhYmxlcz47XG5cbmV4cG9ydCB0eXBlIFVzZUNyZWF0ZVJldHVyblR5cGU8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBDcmVhdGVSZXNwb25zZTxURGF0YT4sXG4gIFRFcnJvcixcbiAgVXNlQ3JlYXRlUGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICB1bmtub3duXG4+O1xuXG5leHBvcnQgdHlwZSBVc2VDcmVhdGVQcm9wczxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0ge30sXG4+ID0ge1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIENyZWF0ZVJlc3BvbnNlPFREYXRhPixcbiAgICAgIFRFcnJvcixcbiAgICAgIFVzZUNyZWF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICAgIHVua25vd25cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiXG4gID47XG59ICYgVXNlTG9hZGluZ092ZXJ0aW1lT3B0aW9uc1Byb3BzICZcbiAgVXNlQ3JlYXRlUGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+O1xuXG4vKipcbiAqIGB1c2VDcmVhdGVgIGlzIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiBgcmVhY3QtcXVlcnlgJ3Mge0BsaW5rIGh0dHBzOi8vcmVhY3QtcXVlcnkudGFuc3RhY2suY29tL3JlZmVyZW5jZS91c2VNdXRhdGlvbiBgdXNlTXV0YXRpb25gfSBmb3IgY3JlYXRlIG11dGF0aW9ucy5cbiAqXG4gKiBJdCB1c2VzIGBjcmVhdGVgIG1ldGhvZCBhcyBtdXRhdGlvbiBmdW5jdGlvbiBmcm9tIHRoZSBgZGF0YVByb3ZpZGVyYCB3aGljaCBpcyBwYXNzZWQgdG8gYDxSZWZpbmU+YC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvZGF0YS91c2VDcmVhdGV9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIG9mIHRoZSBxdWVyeSBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH1cbiAqIEB0eXBlUGFyYW0gVEVycm9yIC0gQ3VzdG9tIGVycm9yIG9iamVjdCB0aGF0IGV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzLyNodHRwZXJyb3IgYEh0dHBFcnJvcmB9XG4gKiBAdHlwZVBhcmFtIFRWYXJpYWJsZXMgLSBWYWx1ZXMgZm9yIG11dGF0aW9uIGZ1bmN0aW9uXG4gKlxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VDcmVhdGUgPSA8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPih7XG4gIHJlc291cmNlOiByZXNvdXJjZUZyb21Qcm9wcyxcbiAgdmFsdWVzOiB2YWx1ZXNGcm9tUHJvcHMsXG4gIGRhdGFQcm92aWRlck5hbWU6IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcHMsXG4gIHN1Y2Nlc3NOb3RpZmljYXRpb246IHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcHMsXG4gIGVycm9yTm90aWZpY2F0aW9uOiBlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wcyxcbiAgaW52YWxpZGF0ZXM6IGludmFsaWRhdGVzRnJvbVByb3BzLFxuICBtZXRhOiBtZXRhRnJvbVByb3BzLFxuICBtZXRhRGF0YTogbWV0YURhdGFGcm9tUHJvcHMsXG4gIG11dGF0aW9uT3B0aW9ucyxcbiAgb3ZlcnRpbWVPcHRpb25zLFxufTogVXNlQ3JlYXRlUHJvcHM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4gPSB7fSk6IFVzZUNyZWF0ZVJldHVyblR5cGU8XG4gIFREYXRhLFxuICBURXJyb3IsXG4gIFRWYXJpYWJsZXNcbj4gJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlID0+IHtcbiAgY29uc3QgYXV0aFByb3ZpZGVyID0gdXNlQWN0aXZlQXV0aFByb3ZpZGVyKCk7XG4gIGNvbnN0IHsgbXV0YXRlOiBjaGVja0Vycm9yIH0gPSB1c2VPbkVycm9yKHtcbiAgICB2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGU6IEJvb2xlYW4oYXV0aFByb3ZpZGVyPy5pc0xlZ2FjeSksXG4gIH0pO1xuICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VEYXRhUHJvdmlkZXIoKTtcbiAgY29uc3QgaW52YWxpZGF0ZVN0b3JlID0gdXNlSW52YWxpZGF0ZSgpO1xuICBjb25zdCB7IHJlc291cmNlcywgc2VsZWN0IH0gPSB1c2VSZXNvdXJjZSgpO1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgcHVibGlzaCA9IHVzZVB1Ymxpc2goKTtcbiAgY29uc3QgeyBsb2cgfSA9IHVzZUxvZygpO1xuICBjb25zdCBoYW5kbGVOb3RpZmljYXRpb24gPSB1c2VIYW5kbGVOb3RpZmljYXRpb24oKTtcbiAgY29uc3QgZ2V0TWV0YSA9IHVzZU1ldGEoKTtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnM6IHsgdGV4dFRyYW5zZm9ybWVycyB9LFxuICB9ID0gdXNlUmVmaW5lQ29udGV4dCgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBtdXRhdGlvblJlc3VsdCA9IHVzZU11dGF0aW9uPFxuICAgIENyZWF0ZVJlc3BvbnNlPFREYXRhPixcbiAgICBURXJyb3IsXG4gICAgVXNlQ3JlYXRlUGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICAgIHVua25vd25cbiAgPih7XG4gICAgbXV0YXRpb25GbjogKHtcbiAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUgPSByZXNvdXJjZUZyb21Qcm9wcyxcbiAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgIG1ldGEgPSBtZXRhRnJvbVByb3BzLFxuICAgICAgbWV0YURhdGEgPSBtZXRhRGF0YUZyb21Qcm9wcyxcbiAgICAgIGRhdGFQcm92aWRlck5hbWUgPSBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3BzLFxuICAgIH06IFVzZUNyZWF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPikgPT4ge1xuICAgICAgaWYgKCF2YWx1ZXMpIHRocm93IG1pc3NpbmdWYWx1ZXNFcnJvcjtcbiAgICAgIGlmICghcmVzb3VyY2VOYW1lKSB0aHJvdyBtaXNzaW5nUmVzb3VyY2VFcnJvcjtcblxuICAgICAgY29uc3QgeyByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gc2VsZWN0KHJlc291cmNlTmFtZSk7XG5cbiAgICAgIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoe1xuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgbWV0YTogcGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkYXRhUHJvdmlkZXIoXG4gICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICkuY3JlYXRlPFREYXRhLCBUVmFyaWFibGVzPih7XG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICB2YXJpYWJsZXM6IHZhbHVlcyxcbiAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICBtZXRhRGF0YTogY29tYmluZWRNZXRhLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IChkYXRhLCB2YXJpYWJsZXMsIGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlTmFtZSA9IHJlc291cmNlRnJvbVByb3BzLFxuICAgICAgICBzdWNjZXNzTm90aWZpY2F0aW9uOlxuICAgICAgICAgIHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcCA9IHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcHMsXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWU6IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcCA9IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcHMsXG4gICAgICAgIGludmFsaWRhdGVzID0gaW52YWxpZGF0ZXNGcm9tUHJvcHMgPz8gW1wibGlzdFwiLCBcIm1hbnlcIl0sXG4gICAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgICAgbWV0YSA9IG1ldGFGcm9tUHJvcHMsXG4gICAgICAgIG1ldGFEYXRhID0gbWV0YURhdGFGcm9tUHJvcHMsXG4gICAgICB9ID0gdmFyaWFibGVzO1xuICAgICAgaWYgKCF2YWx1ZXMpIHRocm93IG1pc3NpbmdWYWx1ZXNFcnJvcjtcbiAgICAgIGlmICghcmVzb3VyY2VOYW1lKSB0aHJvdyBtaXNzaW5nUmVzb3VyY2VFcnJvcjtcblxuICAgICAgY29uc3QgeyByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gc2VsZWN0KHJlc291cmNlTmFtZSk7XG4gICAgICBjb25zdCByZXNvdXJjZVNpbmd1bGFyID0gdGV4dFRyYW5zZm9ybWVycy5zaW5ndWxhcihpZGVudGlmaWVyKTtcblxuICAgICAgY29uc3QgZGF0YVByb3ZpZGVyTmFtZSA9IHBpY2tEYXRhUHJvdmlkZXIoXG4gICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcCxcbiAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgY29tYmluZWRNZXRhID0gZ2V0TWV0YSh7XG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBtZXRhOiBwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSksXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgbm90aWZpY2F0aW9uQ29uZmlnID1cbiAgICAgICAgdHlwZW9mIHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdWNjZXNzTm90aWZpY2F0aW9uRnJvbVByb3AoZGF0YSwgdmFsdWVzLCBpZGVudGlmaWVyKVxuICAgICAgICAgIDogc3VjY2Vzc05vdGlmaWNhdGlvbkZyb21Qcm9wO1xuXG4gICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnLCB7XG4gICAgICAgIGtleTogYGNyZWF0ZS0ke2lkZW50aWZpZXJ9LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuY3JlYXRlU3VjY2Vzc1wiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlc291cmNlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgICAgIGAke2lkZW50aWZpZXJ9LiR7aWRlbnRpZmllcn1gLFxuICAgICAgICAgICAgICByZXNvdXJjZVNpbmd1bGFyLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGBTdWNjZXNzZnVsbHkgY3JlYXRlZCAke3Jlc291cmNlU2luZ3VsYXJ9YCxcbiAgICAgICAgKSxcbiAgICAgICAgZGVzY3JpcHRpb246IHRyYW5zbGF0ZShcIm5vdGlmaWNhdGlvbnMuc3VjY2Vzc1wiLCBcIlN1Y2Nlc3NcIiksXG4gICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgfSk7XG5cbiAgICAgIGludmFsaWRhdGVTdG9yZSh7XG4gICAgICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICBpbnZhbGlkYXRlcyxcbiAgICAgIH0pO1xuXG4gICAgICBwdWJsaXNoPy4oe1xuICAgICAgICBjaGFubmVsOiBgcmVzb3VyY2VzLyR7cmVzb3VyY2UubmFtZX1gLFxuICAgICAgICB0eXBlOiBcImNyZWF0ZWRcIixcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGlkczogZGF0YT8uZGF0YT8uaWQgPyBbZGF0YS5kYXRhLmlkXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZmllbGRzOiBfZmllbGRzLFxuICAgICAgICBvcGVyYXRpb246IF9vcGVyYXRpb24sXG4gICAgICAgIHZhcmlhYmxlczogX3ZhcmlhYmxlcyxcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSA9IGNvbWJpbmVkTWV0YSB8fCB7fTtcbiAgICAgIGxvZz8ubXV0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBcImNyZWF0ZVwiLFxuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgZGF0YTogdmFsdWVzLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgICBpZDogZGF0YT8uZGF0YT8uaWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgbXV0YXRpb25PcHRpb25zPy5vblN1Y2Nlc3M/LihkYXRhLCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH0sXG4gICAgb25FcnJvcjogKGVycjogVEVycm9yLCB2YXJpYWJsZXMsIGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlTmFtZSA9IHJlc291cmNlRnJvbVByb3BzLFxuICAgICAgICBlcnJvck5vdGlmaWNhdGlvbjpcbiAgICAgICAgICBlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wID0gZXJyb3JOb3RpZmljYXRpb25Gcm9tUHJvcHMsXG4gICAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgIH0gPSB2YXJpYWJsZXM7XG4gICAgICBpZiAoIXZhbHVlcykgdGhyb3cgbWlzc2luZ1ZhbHVlc0Vycm9yO1xuICAgICAgaWYgKCFyZXNvdXJjZU5hbWUpIHRocm93IG1pc3NpbmdSZXNvdXJjZUVycm9yO1xuXG4gICAgICBjaGVja0Vycm9yKGVycik7XG5cbiAgICAgIGNvbnN0IHsgaWRlbnRpZmllciB9ID0gc2VsZWN0KHJlc291cmNlTmFtZSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlU2luZ3VsYXIgPSB0ZXh0VHJhbnNmb3JtZXJzLnNpbmd1bGFyKGlkZW50aWZpZXIpO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2YgZXJyb3JOb3RpZmljYXRpb25Gcm9tUHJvcCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wKGVyciwgdmFsdWVzLCBpZGVudGlmaWVyKVxuICAgICAgICAgIDogZXJyb3JOb3RpZmljYXRpb25Gcm9tUHJvcDtcblxuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICBrZXk6IGBjcmVhdGUtJHtpZGVudGlmaWVyfS1ub3RpZmljYXRpb25gLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuY3JlYXRlRXJyb3JcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXNvdXJjZTogdHJhbnNsYXRlKFxuICAgICAgICAgICAgICBgJHtpZGVudGlmaWVyfS4ke2lkZW50aWZpZXJ9YCxcbiAgICAgICAgICAgICAgcmVzb3VyY2VTaW5ndWxhcixcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiBlcnIuc3RhdHVzQ29kZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGBUaGVyZSB3YXMgYW4gZXJyb3IgY3JlYXRpbmcgJHtyZXNvdXJjZVNpbmd1bGFyfSAoc3RhdHVzIGNvZGU6ICR7ZXJyLnN0YXR1c0NvZGV9KWAsXG4gICAgICAgICksXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgIH0pO1xuXG4gICAgICBtdXRhdGlvbk9wdGlvbnM/Lm9uRXJyb3I/LihlcnIsIHZhcmlhYmxlcywgY29udGV4dCk7XG4gICAgfSxcbiAgICBtdXRhdGlvbktleToga2V5cygpLmRhdGEoKS5tdXRhdGlvbihcImNyZWF0ZVwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgLi4ubXV0YXRpb25PcHRpb25zLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLm11dGF0aW9uT3B0aW9ucz8ubWV0YSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VDcmVhdGVcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG4gIGNvbnN0IHsgbXV0YXRlLCBtdXRhdGVBc3luYywgLi4ubXV0YXRpb24gfSA9IG11dGF0aW9uUmVzdWx0O1xuXG4gIGNvbnN0IHsgZWxhcHNlZFRpbWUgfSA9IHVzZUxvYWRpbmdPdmVydGltZSh7XG4gICAgaXNMb2FkaW5nOiBtdXRhdGlvbi5pc0xvYWRpbmcsXG4gICAgaW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8uaW50ZXJ2YWwsXG4gICAgb25JbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5vbkludGVydmFsLFxuICB9KTtcblxuICAvLyB0aGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gbWFrZSB0aGUgYHZhcmlhYmxlc2AgcGFyYW1ldGVyIG9wdGlvbmFsXG4gIGNvbnN0IGhhbmRsZU11dGF0aW9uID0gKFxuICAgIHZhcmlhYmxlcz86IFVzZUNyZWF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICBvcHRpb25zPzogTXV0YXRlT3B0aW9uczxcbiAgICAgIENyZWF0ZVJlc3BvbnNlPFREYXRhPixcbiAgICAgIFRFcnJvcixcbiAgICAgIFVzZUNyZWF0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICAgIHVua25vd25cbiAgICA+LFxuICApID0+IHtcbiAgICByZXR1cm4gbXV0YXRlKHZhcmlhYmxlcyB8fCB7fSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIG1ha2UgdGhlIGB2YXJpYWJsZXNgIHBhcmFtZXRlciBvcHRpb25hbFxuICBjb25zdCBoYW5kbGVNdXRhdGVBc3luYyA9IChcbiAgICB2YXJpYWJsZXM/OiBVc2VDcmVhdGVQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgb3B0aW9ucz86IE11dGF0ZU9wdGlvbnM8XG4gICAgICBDcmVhdGVSZXNwb25zZTxURGF0YT4sXG4gICAgICBURXJyb3IsXG4gICAgICBVc2VDcmVhdGVQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgICB1bmtub3duXG4gICAgPixcbiAgKSA9PiB7XG4gICAgcmV0dXJuIG11dGF0ZUFzeW5jKHZhcmlhYmxlcyB8fCB7fSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5tdXRhdGlvbixcbiAgICBtdXRhdGU6IGhhbmRsZU11dGF0aW9uLFxuICAgIG11dGF0ZUFzeW5jOiBoYW5kbGVNdXRhdGVBc3luYyxcbiAgICBvdmVydGltZTogeyBlbGFwc2VkVGltZSB9LFxuICB9O1xufTtcblxuY29uc3QgbWlzc2luZ1Jlc291cmNlRXJyb3IgPSBuZXcgRXJyb3IoXG4gIFwiW3VzZUNyZWF0ZV06IGByZXNvdXJjZWAgaXMgbm90IGRlZmluZWQgb3Igbm90IG1hdGNoZWQgYnV0IGlzIHJlcXVpcmVkXCIsXG4pO1xuXG5jb25zdCBtaXNzaW5nVmFsdWVzRXJyb3IgPSBuZXcgRXJyb3IoXG4gIFwiW3VzZUNyZWF0ZV06IGB2YWx1ZXNgIGlzIG5vdCBwcm92aWRlZCBidXQgaXMgcmVxdWlyZWRcIixcbik7XG4iLCJpbXBvcnQgeyBnZXRYUmF5IH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtaW50ZXJuYWxcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTXV0YXRpb25PcHRpb25zLFxuICB0eXBlIFVzZU11dGF0aW9uUmVzdWx0LFxuICB1c2VNdXRhdGlvbixcbiAgdXNlUXVlcnlDbGllbnQsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHtcbiAgcGlja0RhdGFQcm92aWRlcixcbiAgcGlja05vdERlcHJlY2F0ZWQsXG4gIHF1ZXJ5S2V5c1JlcGxhY2VtZW50LFxuICB1c2VBY3RpdmVBdXRoUHJvdmlkZXIsXG59IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuaW1wb3J0IHtcbiAgdXNlQ2FuY2VsTm90aWZpY2F0aW9uLFxuICB1c2VEYXRhUHJvdmlkZXIsXG4gIHVzZUhhbmRsZU5vdGlmaWNhdGlvbixcbiAgdXNlSW52YWxpZGF0ZSxcbiAgdXNlS2V5cyxcbiAgdXNlTG9nLFxuICB1c2VNZXRhLFxuICB1c2VNdXRhdGlvbk1vZGUsXG4gIHVzZU9uRXJyb3IsXG4gIHVzZVB1Ymxpc2gsXG4gIHVzZVJlZmluZUNvbnRleHQsXG4gIHVzZVJlc291cmNlLFxuICB1c2VUcmFuc2xhdGUsXG59IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUge1xuICBCYXNlS2V5LFxuICBCYXNlUmVjb3JkLFxuICBEZWxldGVPbmVSZXNwb25zZSxcbiAgR2V0TGlzdFJlc3BvbnNlLFxuICBIdHRwRXJyb3IsXG4gIElRdWVyeUtleXMsXG4gIE1ldGFRdWVyeSxcbiAgTXV0YXRpb25Nb2RlLFxuICBQcmV2Q29udGV4dCBhcyBEZWxldGVDb250ZXh0LFxuICBQcmV2aW91c1F1ZXJ5LFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvbm90aWZpY2F0aW9uL3R5cGVzXCI7XG5pbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy91bmRvYWJsZVF1ZXVlL3R5cGVzXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZU9wdGlvbnNQcm9wcyxcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlLFxuICB1c2VMb2FkaW5nT3ZlcnRpbWUsXG59IGZyb20gXCIuLi91c2VMb2FkaW5nT3ZlcnRpbWVcIjtcblxuZXhwb3J0IHR5cGUgRGVsZXRlUGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+ID0ge1xuICAvKipcbiAgICogaWQgZm9yIG11dGF0aW9uIGZ1bmN0aW9uXG4gICAqL1xuICBpZDogQmFzZUtleTtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFtEZXRlcm1pbmVzIHdoZW4gbXV0YXRpb25zIGFyZSBleGVjdXRlZF0oL2FkdmFuY2VkLXR1dG9yaWFscy9tdXRhdGlvbi1tb2RlLm1kKVxuICAgKi9cbiAgbXV0YXRpb25Nb2RlPzogTXV0YXRpb25Nb2RlO1xuICAvKipcbiAgICogRHVyYXRpb24gaW4gbXMgdG8gd2FpdCBiZWZvcmUgZXhlY3V0aW5nIHRoZSBtdXRhdGlvbiB3aGVuIGBtdXRhdGlvbk1vZGUgPSBcInVuZG9hYmxlXCJgXG4gICAqL1xuICB1bmRvYWJsZVRpbWVvdXQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGZ1bmN0aW9uIHRvIGNhbmNlbCB0aGUgbXV0YXRpb24gd2hlbiBgbXV0YXRpb25Nb2RlID0gXCJ1bmRvYWJsZVwiYFxuICAgKi9cbiAgb25DYW5jZWw/OiAoY2FuY2VsTXV0YXRpb246ICgpID0+IHZvaWQpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBNZXRhZGF0YSBxdWVyeSBmb3IgZGF0YVByb3ZpZGVyXG4gICAqL1xuICBtZXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICovXG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBgZGF0YVByb3ZpZGVyYCwgeW91IHNob3VsZCB1c2UgdGhlIGBkYXRhUHJvdmlkZXJOYW1lYCB0aGF0IHlvdSB3aWxsIHVzZS5cbiAgICogQGRlZmF1bHQgXCJkZWZhdWx0XCJcbiAgICovXG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAgWW91IGNhbiB1c2UgaXQgdG8gbWFuYWdlIHRoZSBpbnZhbGlkYXRpb25zIHRoYXQgd2lsbCBvY2N1ciBhdCB0aGUgZW5kIG9mIHRoZSBtdXRhdGlvbi5cbiAgICovXG4gIGludmFsaWRhdGVzPzogQXJyYXk8a2V5b2YgSVF1ZXJ5S2V5cz47XG4gIC8qKlxuICAgKiBWYWx1ZXMgZm9yIG11dGF0aW9uIGZ1bmN0aW9uXG4gICAqL1xuICB2YWx1ZXM/OiBUVmFyaWFibGVzO1xufSAmIFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbjxEZWxldGVPbmVSZXNwb25zZTxURGF0YT4sIFRFcnJvciwgQmFzZUtleT47XG5cbmV4cG9ydCB0eXBlIFVzZURlbGV0ZVJldHVyblR5cGU8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBEZWxldGVPbmVSZXNwb25zZTxURGF0YT4sXG4gIFRFcnJvcixcbiAgRGVsZXRlUGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICBEZWxldGVDb250ZXh0PFREYXRhPlxuPiAmXG4gIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGU7XG5cbmV4cG9ydCB0eXBlIFVzZURlbGV0ZVByb3BzPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFRWYXJpYWJsZXMgPSB7fSxcbj4gPSB7XG4gIG11dGF0aW9uT3B0aW9ucz86IE9taXQ8XG4gICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgRGVsZXRlT25lUmVzcG9uc2U8VERhdGE+LFxuICAgICAgVEVycm9yLFxuICAgICAgRGVsZXRlUGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICAgICAgRGVsZXRlQ29udGV4dDxURGF0YT5cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiIHwgXCJvbkVycm9yXCIgfCBcIm9uU3VjY2Vzc1wiIHwgXCJvblNldHRsZWRcIiB8IFwib25NdXRhdGVcIlxuICA+O1xufSAmIFVzZUxvYWRpbmdPdmVydGltZU9wdGlvbnNQcm9wcztcblxuLyoqXG4gKiBgdXNlRGVsZXRlYCBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgYHJlYWN0LXF1ZXJ5YCdzIHtAbGluayBodHRwczovL3JlYWN0LXF1ZXJ5LnRhbnN0YWNrLmNvbS9yZWZlcmVuY2UvdXNlTXV0YXRpb24gYHVzZU11dGF0aW9uYH0gZm9yIGRlbGV0ZSBtdXRhdGlvbnMuXG4gKlxuICogSXQgdXNlcyBgZGVsZXRlT25lYCBtZXRob2QgYXMgbXV0YXRpb24gZnVuY3Rpb24gZnJvbSB0aGUgYGRhdGFQcm92aWRlcmAgd2hpY2ggaXMgcGFzc2VkIHRvIGA8UmVmaW5lPmAuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2RhdGEvdXNlRGVsZXRlfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEB0eXBlUGFyYW0gVERhdGEgLSBSZXN1bHQgZGF0YSBvZiB0aGUgcXVlcnkgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9XG4gKiBAdHlwZVBhcmFtIFRFcnJvciAtIEN1c3RvbSBlcnJvciBvYmplY3QgdGhhdCBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcy8jaHR0cGVycm9yIGBIdHRwRXJyb3JgfVxuICogQHR5cGVQYXJhbSBUVmFyaWFibGVzIC0gVmFsdWVzIGZvciBwYXJhbXMuIGRlZmF1bHQgYHt9YFxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZURlbGV0ZSA9IDxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0ge30sXG4+KHtcbiAgbXV0YXRpb25PcHRpb25zLFxuICBvdmVydGltZU9wdGlvbnMsXG59OiBVc2VEZWxldGVQcm9wczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPiA9IHt9KTogVXNlRGVsZXRlUmV0dXJuVHlwZTxcbiAgVERhdGEsXG4gIFRFcnJvcixcbiAgVFZhcmlhYmxlc1xuPiA9PiB7XG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuICBjb25zdCB7IG11dGF0ZTogY2hlY2tFcnJvciB9ID0gdXNlT25FcnJvcih7XG4gICAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBCb29sZWFuKGF1dGhQcm92aWRlcj8uaXNMZWdhY3kpLFxuICB9KTtcbiAgY29uc3QgZGF0YVByb3ZpZGVyID0gdXNlRGF0YVByb3ZpZGVyKCk7XG5cbiAgY29uc3QgeyByZXNvdXJjZXMsIHNlbGVjdCB9ID0gdXNlUmVzb3VyY2UoKTtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuXG4gIGNvbnN0IHtcbiAgICBtdXRhdGlvbk1vZGU6IG11dGF0aW9uTW9kZUNvbnRleHQsXG4gICAgdW5kb2FibGVUaW1lb3V0OiB1bmRvYWJsZVRpbWVvdXRDb250ZXh0LFxuICB9ID0gdXNlTXV0YXRpb25Nb2RlKCk7XG5cbiAgY29uc3QgeyBub3RpZmljYXRpb25EaXNwYXRjaCB9ID0gdXNlQ2FuY2VsTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuICBjb25zdCBwdWJsaXNoID0gdXNlUHVibGlzaCgpO1xuICBjb25zdCB7IGxvZyB9ID0gdXNlTG9nKCk7XG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUhhbmRsZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCBpbnZhbGlkYXRlU3RvcmUgPSB1c2VJbnZhbGlkYXRlKCk7XG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zOiB7IHRleHRUcmFuc2Zvcm1lcnMgfSxcbiAgfSA9IHVzZVJlZmluZUNvbnRleHQoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgbXV0YXRpb24gPSB1c2VNdXRhdGlvbjxcbiAgICBEZWxldGVPbmVSZXNwb25zZTxURGF0YT4sXG4gICAgVEVycm9yLFxuICAgIERlbGV0ZVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICBEZWxldGVDb250ZXh0PFREYXRhPlxuICA+KHtcbiAgICBtdXRhdGlvbkZuOiAoe1xuICAgICAgaWQsXG4gICAgICBtdXRhdGlvbk1vZGUsXG4gICAgICB1bmRvYWJsZVRpbWVvdXQsXG4gICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lLFxuICAgICAgb25DYW5jZWwsXG4gICAgICBtZXRhLFxuICAgICAgbWV0YURhdGEsXG4gICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgdmFsdWVzLFxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzb3VyY2UsIGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtdXRhdGlvbk1vZGVQcm9wT3JDb250ZXh0ID0gbXV0YXRpb25Nb2RlID8/IG11dGF0aW9uTW9kZUNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IHVuZG9hYmxlVGltZW91dFByb3BPckNvbnRleHQgPVxuICAgICAgICB1bmRvYWJsZVRpbWVvdXQgPz8gdW5kb2FibGVUaW1lb3V0Q29udGV4dDtcblxuICAgICAgaWYgKCEobXV0YXRpb25Nb2RlUHJvcE9yQ29udGV4dCA9PT0gXCJ1bmRvYWJsZVwiKSkge1xuICAgICAgICByZXR1cm4gZGF0YVByb3ZpZGVyKFxuICAgICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICAgKS5kZWxldGVPbmU8VERhdGEsIFRWYXJpYWJsZXM+KHtcbiAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBtZXRhOiBjb21iaW5lZE1ldGEsXG4gICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICB2YXJpYWJsZXM6IHZhbHVlcyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRlbGV0ZVByb21pc2UgPSBuZXcgUHJvbWlzZTxEZWxldGVPbmVSZXNwb25zZTxURGF0YT4+KFxuICAgICAgICAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgZG9NdXRhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIGRhdGFQcm92aWRlcihcbiAgICAgICAgICAgICAgcGlja0RhdGFQcm92aWRlcihpZGVudGlmaWVyLCBkYXRhUHJvdmlkZXJOYW1lLCByZXNvdXJjZXMpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAuZGVsZXRlT25lPFREYXRhLCBUVmFyaWFibGVzPih7XG4gICAgICAgICAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlLm5hbWUsXG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgICAgIG1ldGFEYXRhOiBjb21iaW5lZE1ldGEsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YWx1ZXMsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHJlc29sdmUocmVzdWx0KSlcbiAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgY2FuY2VsTXV0YXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoeyBtZXNzYWdlOiBcIm11dGF0aW9uQ2FuY2VsbGVkXCIgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChvbkNhbmNlbCkge1xuICAgICAgICAgICAgb25DYW5jZWwoY2FuY2VsTXV0YXRpb24pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vdGlmaWNhdGlvbkRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFERCxcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgICAgICAgICAgICBjYW5jZWxNdXRhdGlvbjogY2FuY2VsTXV0YXRpb24sXG4gICAgICAgICAgICAgIGRvTXV0YXRpb246IGRvTXV0YXRpb24sXG4gICAgICAgICAgICAgIHNlY29uZHM6IHVuZG9hYmxlVGltZW91dFByb3BPckNvbnRleHQsXG4gICAgICAgICAgICAgIGlzU2lsZW50OiAhIW9uQ2FuY2VsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZGVsZXRlUHJvbWlzZTtcbiAgICB9LFxuICAgIG9uTXV0YXRlOiBhc3luYyAoe1xuICAgICAgaWQsXG4gICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lLFxuICAgICAgbXV0YXRpb25Nb2RlLFxuICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgIG1ldGEsXG4gICAgICBtZXRhRGF0YSxcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCB7IGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGdxbE11dGF0aW9uOiBfLFxuICAgICAgICBncWxRdWVyeTogX18sXG4gICAgICAgIC4uLnByZWZlcnJlZE1ldGFcbiAgICAgIH0gPSBwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSkgPz8ge307XG5cbiAgICAgIGNvbnN0IHF1ZXJ5S2V5ID0gcXVlcnlLZXlzUmVwbGFjZW1lbnQocHJlZmVyTGVnYWN5S2V5cykoXG4gICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICAgcHJlZmVycmVkTWV0YSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlS2V5cyA9IGtleXMoKVxuICAgICAgICAuZGF0YShwaWNrRGF0YVByb3ZpZGVyKGlkZW50aWZpZXIsIGRhdGFQcm92aWRlck5hbWUsIHJlc291cmNlcykpXG4gICAgICAgIC5yZXNvdXJjZShpZGVudGlmaWVyKTtcblxuICAgICAgY29uc3QgbXV0YXRpb25Nb2RlUHJvcE9yQ29udGV4dCA9IG11dGF0aW9uTW9kZSA/PyBtdXRhdGlvbk1vZGVDb250ZXh0O1xuXG4gICAgICBhd2FpdCBxdWVyeUNsaWVudC5jYW5jZWxRdWVyaWVzKFxuICAgICAgICByZXNvdXJjZUtleXMuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHtcbiAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBwcmV2aW91c1F1ZXJpZXM6IFByZXZpb3VzUXVlcnk8VERhdGE+W10gPVxuICAgICAgICBxdWVyeUNsaWVudC5nZXRRdWVyaWVzRGF0YShyZXNvdXJjZUtleXMuZ2V0KHByZWZlckxlZ2FjeUtleXMpKTtcblxuICAgICAgaWYgKG11dGF0aW9uTW9kZVByb3BPckNvbnRleHQgIT09IFwicGVzc2ltaXN0aWNcIikge1xuICAgICAgICAvLyBTZXQgdGhlIHByZXZpb3VzIHF1ZXJpZXMgdG8gdGhlIG5ldyBvbmVzOlxuICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyaWVzRGF0YShcbiAgICAgICAgICByZXNvdXJjZUtleXNcbiAgICAgICAgICAgIC5hY3Rpb24oXCJsaXN0XCIpXG4gICAgICAgICAgICAucGFyYW1zKHByZWZlcnJlZE1ldGEgPz8ge30pXG4gICAgICAgICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgIChwcmV2aW91cz86IEdldExpc3RSZXNwb25zZTxURGF0YT4gfCBudWxsKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHByZXZpb3VzLmRhdGEuZmlsdGVyKFxuICAgICAgICAgICAgICAocmVjb3JkOiBURGF0YSkgPT4gcmVjb3JkLmlkPy50b1N0cmluZygpICE9PSBpZC50b1N0cmluZygpLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgdG90YWw6IHByZXZpb3VzLnRvdGFsIC0gMSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyaWVzRGF0YShcbiAgICAgICAgICByZXNvdXJjZUtleXMuYWN0aW9uKFwibWFueVwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgKHByZXZpb3VzPzogR2V0TGlzdFJlc3BvbnNlPFREYXRhPiB8IG51bGwpID0+IHtcbiAgICAgICAgICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcHJldmlvdXMuZGF0YS5maWx0ZXIoKHJlY29yZDogVERhdGEpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZC5pZD8udG9TdHJpbmcoKSAhPT0gaWQ/LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4ucHJldmlvdXMsXG4gICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZXZpb3VzUXVlcmllcyxcbiAgICAgICAgcXVlcnlLZXksXG4gICAgICB9O1xuICAgIH0sXG4gICAgb25TZXR0bGVkOiAoXG4gICAgICBfZGF0YSxcbiAgICAgIF9lcnJvcixcbiAgICAgIHtcbiAgICAgICAgaWQsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUsXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIGludmFsaWRhdGVzID0gW1wibGlzdFwiLCBcIm1hbnlcIl0sXG4gICAgICB9LFxuICAgICkgPT4ge1xuICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcblxuICAgICAgLy8gaW52YWxpZGF0ZSB0aGUgY2FjaGUgZm9yIHRoZSBsaXN0IGFuZCBtYW55IHF1ZXJpZXM6XG4gICAgICBpbnZhbGlkYXRlU3RvcmUoe1xuICAgICAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICAgICAgZGF0YVByb3ZpZGVyTmFtZTogcGlja0RhdGFQcm92aWRlcihcbiAgICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICApLFxuICAgICAgICBpbnZhbGlkYXRlcyxcbiAgICAgIH0pO1xuXG4gICAgICBub3RpZmljYXRpb25EaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFTU9WRSxcbiAgICAgICAgcGF5bG9hZDogeyBpZCwgcmVzb3VyY2U6IGlkZW50aWZpZXIgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25TdWNjZXNzOiAoXG4gICAgICBfZGF0YSxcbiAgICAgIHtcbiAgICAgICAgaWQsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUsXG4gICAgICAgIHN1Y2Nlc3NOb3RpZmljYXRpb24sXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWU6IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcCxcbiAgICAgICAgbWV0YSxcbiAgICAgICAgbWV0YURhdGEsXG4gICAgICB9LFxuICAgICAgY29udGV4dCxcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzb3VyY2UsIGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuICAgICAgY29uc3QgcmVzb3VyY2VTaW5ndWxhciA9IHRleHRUcmFuc2Zvcm1lcnMuc2luZ3VsYXIoaWRlbnRpZmllcik7XG5cbiAgICAgIGNvbnN0IGRhdGFQcm92aWRlck5hbWUgPSBwaWNrRGF0YVByb3ZpZGVyKFxuICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3AsXG4gICAgICAgIHJlc291cmNlcyxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoe1xuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgbWV0YTogcGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlbW92ZSB0aGUgcXVlcmllcyBmcm9tIHRoZSBjYWNoZTpcbiAgICAgIHF1ZXJ5Q2xpZW50LnJlbW92ZVF1ZXJpZXMoY29udGV4dD8ucXVlcnlLZXkuZGV0YWlsKGlkKSk7XG5cbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgIHR5cGVvZiBzdWNjZXNzTm90aWZpY2F0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHN1Y2Nlc3NOb3RpZmljYXRpb24oX2RhdGEsIGlkLCBpZGVudGlmaWVyKVxuICAgICAgICAgIDogc3VjY2Vzc05vdGlmaWNhdGlvbjtcblxuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICBrZXk6IGAke2lkfS0ke2lkZW50aWZpZXJ9LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0cmFuc2xhdGUoXCJub3RpZmljYXRpb25zLnN1Y2Nlc3NcIiwgXCJTdWNjZXNzXCIpLFxuICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgXCJub3RpZmljYXRpb25zLmRlbGV0ZVN1Y2Nlc3NcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXNvdXJjZTogdHJhbnNsYXRlKFxuICAgICAgICAgICAgICBgJHtpZGVudGlmaWVyfS4ke2lkZW50aWZpZXJ9YCxcbiAgICAgICAgICAgICAgcmVzb3VyY2VTaW5ndWxhcixcbiAgICAgICAgICAgICksXG4gICAgICAgICAgfSxcbiAgICAgICAgICBgU3VjY2Vzc2Z1bGx5IGRlbGV0ZWQgYSAke3Jlc291cmNlU2luZ3VsYXJ9YCxcbiAgICAgICAgKSxcbiAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICB9KTtcblxuICAgICAgcHVibGlzaD8uKHtcbiAgICAgICAgY2hhbm5lbDogYHJlc291cmNlcy8ke3Jlc291cmNlLm5hbWV9YCxcbiAgICAgICAgdHlwZTogXCJkZWxldGVkXCIsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBpZHM6IFtpZF0sXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAuLi5jb21iaW5lZE1ldGEsXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGZpZWxkczogX2ZpZWxkcyxcbiAgICAgICAgb3BlcmF0aW9uOiBfb3BlcmF0aW9uLFxuICAgICAgICB2YXJpYWJsZXM6IF92YXJpYWJsZXMsXG4gICAgICAgIC4uLnJlc3RcbiAgICAgIH0gPSBjb21iaW5lZE1ldGEgfHwge307XG4gICAgICBsb2c/Lm11dGF0ZSh7XG4gICAgICAgIGFjdGlvbjogXCJkZWxldGVcIixcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlLm5hbWUsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBxdWVyaWVzIGZyb20gdGhlIGNhY2hlOlxuICAgICAgcXVlcnlDbGllbnQucmVtb3ZlUXVlcmllcyhjb250ZXh0Py5xdWVyeUtleS5kZXRhaWwoaWQpKTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChcbiAgICAgIGVycjogVEVycm9yLFxuICAgICAgeyBpZCwgcmVzb3VyY2U6IHJlc291cmNlTmFtZSwgZXJyb3JOb3RpZmljYXRpb24gfSxcbiAgICAgIGNvbnRleHQsXG4gICAgKSA9PiB7XG4gICAgICBjb25zdCB7IGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICAvLyBzZXQgYmFjayB0aGUgcXVlcmllcyB0byB0aGUgY29udGV4dDpcbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIGZvciAoY29uc3QgcXVlcnkgb2YgY29udGV4dC5wcmV2aW91c1F1ZXJpZXMpIHtcbiAgICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyeURhdGEocXVlcnlbMF0sIHF1ZXJ5WzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZXJyLm1lc3NhZ2UgIT09IFwibXV0YXRpb25DYW5jZWxsZWRcIikge1xuICAgICAgICBjaGVja0Vycm9yKGVycik7XG5cbiAgICAgICAgY29uc3QgcmVzb3VyY2VTaW5ndWxhciA9IHRleHRUcmFuc2Zvcm1lcnMuc2luZ3VsYXIoaWRlbnRpZmllcik7XG5cbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uQ29uZmlnID1cbiAgICAgICAgICB0eXBlb2YgZXJyb3JOb3RpZmljYXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBlcnJvck5vdGlmaWNhdGlvbihlcnIsIGlkLCBpZGVudGlmaWVyKVxuICAgICAgICAgICAgOiBlcnJvck5vdGlmaWNhdGlvbjtcblxuICAgICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnLCB7XG4gICAgICAgICAga2V5OiBgJHtpZH0tJHtpZGVudGlmaWVyfS1ub3RpZmljYXRpb25gLFxuICAgICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICAgIFwibm90aWZpY2F0aW9ucy5kZWxldGVFcnJvclwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2VTaW5ndWxhcixcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogZXJyLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYEVycm9yIChzdGF0dXMgY29kZTogJHtlcnIuc3RhdHVzQ29kZX0pYCxcbiAgICAgICAgICApLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbXV0YXRpb25LZXk6IGtleXMoKS5kYXRhKCkubXV0YXRpb24oXCJkZWxldGVcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgIC4uLm11dGF0aW9uT3B0aW9ucyxcbiAgICBtZXRhOiB7XG4gICAgICAuLi5tdXRhdGlvbk9wdGlvbnM/Lm1ldGEsXG4gICAgICAuLi5nZXRYUmF5KFwidXNlRGVsZXRlXCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHsgZWxhcHNlZFRpbWUgfSA9IHVzZUxvYWRpbmdPdmVydGltZSh7XG4gICAgaXNMb2FkaW5nOiBtdXRhdGlvbi5pc0xvYWRpbmcsXG4gICAgaW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8uaW50ZXJ2YWwsXG4gICAgb25JbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5vbkludGVydmFsLFxuICB9KTtcblxuICByZXR1cm4geyAuLi5tdXRhdGlvbiwgb3ZlcnRpbWU6IHsgZWxhcHNlZFRpbWUgfSB9O1xufTtcbiIsImltcG9ydCB7IGdldFhSYXkgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VNdXRhdGlvbk9wdGlvbnMsXG4gIHR5cGUgTXV0YXRlT3B0aW9ucyxcbiAgdXNlTXV0YXRpb24sXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHtcbiAgaGFuZGxlTXVsdGlwbGUsXG4gIHBpY2tEYXRhUHJvdmlkZXIsXG4gIHBpY2tOb3REZXByZWNhdGVkLFxufSBmcm9tIFwiQGRlZmluaXRpb25zXCI7XG5pbXBvcnQge1xuICB1c2VEYXRhUHJvdmlkZXIsXG4gIHVzZUhhbmRsZU5vdGlmaWNhdGlvbixcbiAgdXNlSW52YWxpZGF0ZSxcbiAgdXNlS2V5cyxcbiAgdXNlTG9nLFxuICB1c2VNZXRhLFxuICB1c2VQdWJsaXNoLFxuICB1c2VSZWZpbmVDb250ZXh0LFxuICB1c2VSZXNvdXJjZSxcbiAgdXNlVHJhbnNsYXRlLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQmFzZVJlY29yZCxcbiAgQ3JlYXRlTWFueVJlc3BvbnNlLFxuICBIdHRwRXJyb3IsXG4gIElRdWVyeUtleXMsXG4gIE1ldGFRdWVyeSxcbn0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgVXNlTXV0YXRpb25SZXN1bHQgfSBmcm9tIFwiLi4vLi4vZGVmaW5pdGlvbnMvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMsXG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSxcbiAgdXNlTG9hZGluZ092ZXJ0aW1lLFxufSBmcm9tIFwiLi4vdXNlTG9hZGluZ092ZXJ0aW1lXCI7XG5cbmV4cG9ydCB0eXBlIFVzZUNyZWF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4gPSB7XG4gIHJlc291cmNlPzogc3RyaW5nO1xuICB2YWx1ZXM/OiBUVmFyaWFibGVzW107XG4gIG1ldGE/OiBNZXRhUXVlcnk7XG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xuICBpbnZhbGlkYXRlcz86IEFycmF5PGtleW9mIElRdWVyeUtleXM+O1xufSAmIFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbjxDcmVhdGVNYW55UmVzcG9uc2U8VERhdGE+LCBURXJyb3IsIFRWYXJpYWJsZXNbXT47XG5cbmV4cG9ydCB0eXBlIFVzZUNyZWF0ZU1hbnlSZXR1cm5UeXBlPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgPSBIdHRwRXJyb3IsXG4gIFRWYXJpYWJsZXMgPSB7fSxcbj4gPSBVc2VNdXRhdGlvblJlc3VsdDxcbiAgQ3JlYXRlTWFueVJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yLFxuICBVc2VDcmVhdGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICB1bmtub3duXG4+O1xuXG5leHBvcnQgdHlwZSBVc2VDcmVhdGVNYW55UHJvcHM8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPiA9IHtcbiAgbXV0YXRpb25PcHRpb25zPzogT21pdDxcbiAgICBVc2VNdXRhdGlvbk9wdGlvbnM8XG4gICAgICBDcmVhdGVNYW55UmVzcG9uc2U8VERhdGE+LFxuICAgICAgVEVycm9yLFxuICAgICAgVXNlQ3JlYXRlTWFueVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPlxuICAgID4sXG4gICAgXCJtdXRhdGlvbkZuXCJcbiAgPjtcbn0gJiBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMgJlxuICBVc2VDcmVhdGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+O1xuXG4vKipcbiAqIGB1c2VDcmVhdGVNYW55YCBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgYHJlYWN0LXF1ZXJ5YCdzIHtAbGluayBodHRwczovL3JlYWN0LXF1ZXJ5LnRhbnN0YWNrLmNvbS9yZWZlcmVuY2UvdXNlTXV0YXRpb24gYHVzZU11dGF0aW9uYH0gZm9yIG11bHRpcGxlIGNyZWF0ZSBtdXRhdGlvbnMuXG4gKlxuICogSXQgdXNlcyBgY3JlYXRlTWFueWAgbWV0aG9kIGFzIG11dGF0aW9uIGZ1bmN0aW9uIGZyb20gdGhlIGBkYXRhUHJvdmlkZXJgIHdoaWNoIGlzIHBhc3NlZCB0byBgPFJlZmluZT5gLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZUNyZWF0ZU1hbnl9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIG9mIHRoZSBxdWVyeSBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9XG4gKiBAdHlwZVBhcmFtIFRFcnJvciAtIEN1c3RvbSBlcnJvciBvYmplY3QgdGhhdCBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjaHR0cGVycm9yIGBIdHRwRXJyb3JgfVxuICogQHR5cGVQYXJhbSBUVmFyaWFibGVzIC0gVmFsdWVzIGZvciBtdXRhdGlvbiBmdW5jdGlvblxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUNyZWF0ZU1hbnkgPSA8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPih7XG4gIHJlc291cmNlOiByZXNvdXJjZUZyb21Qcm9wcyxcbiAgdmFsdWVzOiB2YWx1ZXNGcm9tUHJvcHMsXG4gIGRhdGFQcm92aWRlck5hbWU6IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcHMsXG4gIHN1Y2Nlc3NOb3RpZmljYXRpb246IHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcHMsXG4gIGVycm9yTm90aWZpY2F0aW9uOiBlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wcyxcbiAgbWV0YTogbWV0YUZyb21Qcm9wcyxcbiAgbWV0YURhdGE6IG1ldGFEYXRhRnJvbVByb3BzLFxuICBpbnZhbGlkYXRlczogaW52YWxpZGF0ZXNGcm9tUHJvcHMsXG4gIG11dGF0aW9uT3B0aW9ucyxcbiAgb3ZlcnRpbWVPcHRpb25zLFxufTogVXNlQ3JlYXRlTWFueVByb3BzPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+ID0ge30pOiBVc2VDcmVhdGVNYW55UmV0dXJuVHlwZTxcbiAgVERhdGEsXG4gIFRFcnJvcixcbiAgVFZhcmlhYmxlc1xuPiAmXG4gIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGUgPT4ge1xuICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VEYXRhUHJvdmlkZXIoKTtcbiAgY29uc3QgeyByZXNvdXJjZXMsIHNlbGVjdCB9ID0gdXNlUmVzb3VyY2UoKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG4gIGNvbnN0IHB1Ymxpc2ggPSB1c2VQdWJsaXNoKCk7XG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUhhbmRsZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCBpbnZhbGlkYXRlU3RvcmUgPSB1c2VJbnZhbGlkYXRlKCk7XG4gIGNvbnN0IHsgbG9nIH0gPSB1c2VMb2coKTtcbiAgY29uc3QgZ2V0TWV0YSA9IHVzZU1ldGEoKTtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnM6IHsgdGV4dFRyYW5zZm9ybWVycyB9LFxuICB9ID0gdXNlUmVmaW5lQ29udGV4dCgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBtdXRhdGlvblJlc3VsdCA9IHVzZU11dGF0aW9uPFxuICAgIENyZWF0ZU1hbnlSZXNwb25zZTxURGF0YT4sXG4gICAgVEVycm9yLFxuICAgIFVzZUNyZWF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz5cbiAgPih7XG4gICAgbXV0YXRpb25GbjogKHtcbiAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUgPSByZXNvdXJjZUZyb21Qcm9wcyxcbiAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgIG1ldGEgPSBtZXRhRnJvbVByb3BzLFxuICAgICAgbWV0YURhdGEgPSBtZXRhRGF0YUZyb21Qcm9wcyxcbiAgICAgIGRhdGFQcm92aWRlck5hbWUgPSBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3BzLFxuICAgIH06IFVzZUNyZWF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4pID0+IHtcbiAgICAgIGlmICghdmFsdWVzKSB0aHJvdyBtaXNzaW5nVmFsdWVzRXJyb3I7XG4gICAgICBpZiAoIXJlc291cmNlTmFtZSkgdGhyb3cgbWlzc2luZ1Jlc291cmNlRXJyb3I7XG5cbiAgICAgIGNvbnN0IHsgcmVzb3VyY2UsIGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzZWxlY3RlZERhdGFQcm92aWRlciA9IGRhdGFQcm92aWRlcihcbiAgICAgICAgcGlja0RhdGFQcm92aWRlcihpZGVudGlmaWVyLCBkYXRhUHJvdmlkZXJOYW1lLCByZXNvdXJjZXMpLFxuICAgICAgKTtcblxuICAgICAgaWYgKHNlbGVjdGVkRGF0YVByb3ZpZGVyLmNyZWF0ZU1hbnkpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkRGF0YVByb3ZpZGVyLmNyZWF0ZU1hbnk8VERhdGEsIFRWYXJpYWJsZXM+KHtcbiAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgICB2YXJpYWJsZXM6IHZhbHVlcyxcbiAgICAgICAgICBtZXRhOiBjb21iaW5lZE1ldGEsXG4gICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFuZGxlTXVsdGlwbGUoXG4gICAgICAgIHZhbHVlcy5tYXAoKHZhbCkgPT5cbiAgICAgICAgICBzZWxlY3RlZERhdGFQcm92aWRlci5jcmVhdGU8VERhdGEsIFRWYXJpYWJsZXM+KHtcbiAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICAgICAgdmFyaWFibGVzOiB2YWwsXG4gICAgICAgICAgICBtZXRhOiBjb21iaW5lZE1ldGEsXG4gICAgICAgICAgICBtZXRhRGF0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgIH0pLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9LFxuICAgIG9uU3VjY2VzczogKHJlc3BvbnNlLCB2YXJpYWJsZXMsIGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlTmFtZSA9IHJlc291cmNlRnJvbVByb3BzLFxuICAgICAgICBzdWNjZXNzTm90aWZpY2F0aW9uID0gc3VjY2Vzc05vdGlmaWNhdGlvbkZyb21Qcm9wcyxcbiAgICAgICAgZGF0YVByb3ZpZGVyTmFtZTogZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wID0gZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wcyxcbiAgICAgICAgaW52YWxpZGF0ZXMgPSBpbnZhbGlkYXRlc0Zyb21Qcm9wcyA/PyBbXCJsaXN0XCIsIFwibWFueVwiXSxcbiAgICAgICAgdmFsdWVzID0gdmFsdWVzRnJvbVByb3BzLFxuICAgICAgICBtZXRhID0gbWV0YUZyb21Qcm9wcyxcbiAgICAgICAgbWV0YURhdGEgPSBtZXRhRGF0YUZyb21Qcm9wcyxcbiAgICAgIH0gPSB2YXJpYWJsZXM7XG4gICAgICBpZiAoIXZhbHVlcykgdGhyb3cgbWlzc2luZ1ZhbHVlc0Vycm9yO1xuICAgICAgaWYgKCFyZXNvdXJjZU5hbWUpIHRocm93IG1pc3NpbmdSZXNvdXJjZUVycm9yO1xuXG4gICAgICBjb25zdCB7IHJlc291cmNlLCBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcbiAgICAgIGNvbnN0IHJlc291cmNlUGx1cmFsID0gdGV4dFRyYW5zZm9ybWVycy5wbHVyYWwoaWRlbnRpZmllcik7XG5cbiAgICAgIGNvbnN0IGRhdGFQcm92aWRlck5hbWUgPSBwaWNrRGF0YVByb3ZpZGVyKFxuICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3AsXG4gICAgICAgIHJlc291cmNlcyxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoe1xuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgbWV0YTogcGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgIHR5cGVvZiBzdWNjZXNzTm90aWZpY2F0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHN1Y2Nlc3NOb3RpZmljYXRpb24ocmVzcG9uc2UsIHZhbHVlcywgaWRlbnRpZmllcilcbiAgICAgICAgICA6IHN1Y2Nlc3NOb3RpZmljYXRpb247XG5cbiAgICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25Db25maWcsIHtcbiAgICAgICAga2V5OiBgY3JlYXRlTWFueS0ke2lkZW50aWZpZXJ9LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuY3JlYXRlU3VjY2Vzc1wiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlc291cmNlOiB0cmFuc2xhdGUoYCR7aWRlbnRpZmllcn0uJHtpZGVudGlmaWVyfWAsIGlkZW50aWZpZXIpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYFN1Y2Nlc3NmdWxseSBjcmVhdGVkICR7cmVzb3VyY2VQbHVyYWx9YCxcbiAgICAgICAgKSxcbiAgICAgICAgZGVzY3JpcHRpb246IHRyYW5zbGF0ZShcIm5vdGlmaWNhdGlvbnMuc3VjY2Vzc1wiLCBcIlN1Y2Nlc3NcIiksXG4gICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgfSk7XG5cbiAgICAgIGludmFsaWRhdGVTdG9yZSh7XG4gICAgICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICBpbnZhbGlkYXRlcyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBpZHMgPSByZXNwb25zZT8uZGF0YVxuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtPy5pZCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAubWFwKChpdGVtKSA9PiBpdGVtLmlkISk7XG4gICAgICBwdWJsaXNoPy4oe1xuICAgICAgICBjaGFubmVsOiBgcmVzb3VyY2VzLyR7cmVzb3VyY2UubmFtZX1gLFxuICAgICAgICB0eXBlOiBcImNyZWF0ZWRcIixcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGlkcyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZmllbGRzOiBfZmllbGRzLFxuICAgICAgICBvcGVyYXRpb246IF9vcGVyYXRpb24sXG4gICAgICAgIHZhcmlhYmxlczogX3ZhcmlhYmxlcyxcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSA9IGNvbWJpbmVkTWV0YSB8fCB7fTtcbiAgICAgIGxvZz8ubXV0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBcImNyZWF0ZU1hbnlcIixcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlLm5hbWUsXG4gICAgICAgIGRhdGE6IHZhbHVlcyxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgICAgaWRzLFxuICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgbXV0YXRpb25PcHRpb25zPy5vblN1Y2Nlc3M/LihyZXNwb25zZSwgdmFyaWFibGVzLCBjb250ZXh0KTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnI6IFRFcnJvciwgdmFyaWFibGVzLCBjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUgPSByZXNvdXJjZUZyb21Qcm9wcyxcbiAgICAgICAgZXJyb3JOb3RpZmljYXRpb24gPSBlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wcyxcbiAgICAgICAgdmFsdWVzID0gdmFsdWVzRnJvbVByb3BzLFxuICAgICAgfSA9IHZhcmlhYmxlcztcbiAgICAgIGlmICghdmFsdWVzKSB0aHJvdyBtaXNzaW5nVmFsdWVzRXJyb3I7XG4gICAgICBpZiAoIXJlc291cmNlTmFtZSkgdGhyb3cgbWlzc2luZ1Jlc291cmNlRXJyb3I7XG5cbiAgICAgIGNvbnN0IHsgaWRlbnRpZmllciB9ID0gc2VsZWN0KHJlc291cmNlTmFtZSk7XG5cbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgIHR5cGVvZiBlcnJvck5vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBlcnJvck5vdGlmaWNhdGlvbihlcnIsIHZhbHVlcywgaWRlbnRpZmllcilcbiAgICAgICAgICA6IGVycm9yTm90aWZpY2F0aW9uO1xuXG4gICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnLCB7XG4gICAgICAgIGtleTogYGNyZWF0ZU1hbnktJHtpZGVudGlmaWVyfS1ub3RpZmljYXRpb25gLFxuICAgICAgICBkZXNjcmlwdGlvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuY3JlYXRlRXJyb3JcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXNvdXJjZTogdHJhbnNsYXRlKGAke2lkZW50aWZpZXJ9LiR7aWRlbnRpZmllcn1gLCBpZGVudGlmaWVyKSxcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IGVyci5zdGF0dXNDb2RlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYFRoZXJlIHdhcyBhbiBlcnJvciBjcmVhdGluZyAke2lkZW50aWZpZXJ9IChzdGF0dXMgY29kZTogJHtlcnIuc3RhdHVzQ29kZX1gLFxuICAgICAgICApLFxuICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICB9KTtcblxuICAgICAgbXV0YXRpb25PcHRpb25zPy5vbkVycm9yPy4oZXJyLCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH0sXG4gICAgbXV0YXRpb25LZXk6IGtleXMoKS5kYXRhKCkubXV0YXRpb24oXCJjcmVhdGVNYW55XCIpLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAuLi5tdXRhdGlvbk9wdGlvbnMsXG4gICAgbWV0YToge1xuICAgICAgLi4ubXV0YXRpb25PcHRpb25zPy5tZXRhLFxuICAgICAgLi4uZ2V0WFJheShcInVzZUNyZWF0ZU1hbnlcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgfSxcbiAgfSk7XG4gIGNvbnN0IHsgbXV0YXRlLCBtdXRhdGVBc3luYywgLi4ubXV0YXRpb24gfSA9IG11dGF0aW9uUmVzdWx0O1xuXG4gIGNvbnN0IHsgZWxhcHNlZFRpbWUgfSA9IHVzZUxvYWRpbmdPdmVydGltZSh7XG4gICAgaXNMb2FkaW5nOiBtdXRhdGlvbi5pc0xvYWRpbmcsXG4gICAgaW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8uaW50ZXJ2YWwsXG4gICAgb25JbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5vbkludGVydmFsLFxuICB9KTtcblxuICAvLyB0aGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gbWFrZSB0aGUgYHZhcmlhYmxlc2AgcGFyYW1ldGVyIG9wdGlvbmFsXG4gIGNvbnN0IGhhbmRsZU11dGF0aW9uID0gKFxuICAgIHZhcmlhYmxlcz86IFVzZUNyZWF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgb3B0aW9ucz86IE11dGF0ZU9wdGlvbnM8XG4gICAgICBDcmVhdGVNYW55UmVzcG9uc2U8VERhdGE+LFxuICAgICAgVEVycm9yLFxuICAgICAgVXNlQ3JlYXRlTWFueVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICAgIHVua25vd25cbiAgICA+LFxuICApID0+IHtcbiAgICByZXR1cm4gbXV0YXRlKHZhcmlhYmxlcyB8fCB7fSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIG1ha2UgdGhlIGB2YXJpYWJsZXNgIHBhcmFtZXRlciBvcHRpb25hbFxuICBjb25zdCBoYW5kbGVNdXRhdGVBc3luYyA9IChcbiAgICB2YXJpYWJsZXM/OiBVc2VDcmVhdGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICAgIG9wdGlvbnM/OiBNdXRhdGVPcHRpb25zPFxuICAgICAgQ3JlYXRlTWFueVJlc3BvbnNlPFREYXRhPixcbiAgICAgIFRFcnJvcixcbiAgICAgIFVzZUNyZWF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgICB1bmtub3duXG4gICAgPixcbiAgKSA9PiB7XG4gICAgcmV0dXJuIG11dGF0ZUFzeW5jKHZhcmlhYmxlcyB8fCB7fSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5tdXRhdGlvbixcbiAgICBtdXRhdGU6IGhhbmRsZU11dGF0aW9uLFxuICAgIG11dGF0ZUFzeW5jOiBoYW5kbGVNdXRhdGVBc3luYyxcbiAgICBvdmVydGltZTogeyBlbGFwc2VkVGltZSB9LFxuICB9O1xufTtcblxuY29uc3QgbWlzc2luZ1Jlc291cmNlRXJyb3IgPSBuZXcgRXJyb3IoXG4gIFwiW3VzZUNyZWF0ZU1hbnldOiBgcmVzb3VyY2VgIGlzIG5vdCBkZWZpbmVkIG9yIG5vdCBtYXRjaGVkIGJ1dCBpcyByZXF1aXJlZFwiLFxuKTtcblxuY29uc3QgbWlzc2luZ1ZhbHVlc0Vycm9yID0gbmV3IEVycm9yKFxuICBcIlt1c2VDcmVhdGVNYW55XTogYHZhbHVlc2AgaXMgbm90IHByb3ZpZGVkIGJ1dCBpcyByZXF1aXJlZFwiLFxuKTtcbiIsImltcG9ydCB7IGdldFhSYXkgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VNdXRhdGlvbk9wdGlvbnMsXG4gIHR5cGUgTXV0YXRlT3B0aW9ucyxcbiAgdXNlTXV0YXRpb24sXG4gIHVzZVF1ZXJ5Q2xpZW50LFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB7XG4gIGhhbmRsZU11bHRpcGxlLFxuICBwaWNrRGF0YVByb3ZpZGVyLFxuICBwaWNrTm90RGVwcmVjYXRlZCxcbiAgcXVlcnlLZXlzUmVwbGFjZW1lbnQsXG4gIHVzZUFjdGl2ZUF1dGhQcm92aWRlcixcbn0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5pbXBvcnQge1xuICB1c2VDYW5jZWxOb3RpZmljYXRpb24sXG4gIHVzZURhdGFQcm92aWRlcixcbiAgdXNlSGFuZGxlTm90aWZpY2F0aW9uLFxuICB1c2VJbnZhbGlkYXRlLFxuICB1c2VLZXlzLFxuICB1c2VMb2csXG4gIHVzZU1ldGEsXG4gIHVzZU11dGF0aW9uTW9kZSxcbiAgdXNlT25FcnJvcixcbiAgdXNlUHVibGlzaCxcbiAgdXNlUmVmaW5lQ29udGV4dCxcbiAgdXNlUmVzb3VyY2UsXG4gIHVzZVRyYW5zbGF0ZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VLZXksXG4gIEJhc2VSZWNvcmQsXG4gIEdldExpc3RSZXNwb25zZSxcbiAgR2V0TWFueVJlc3BvbnNlLFxuICBHZXRPbmVSZXNwb25zZSxcbiAgSHR0cEVycm9yLFxuICBJUXVlcnlLZXlzLFxuICBNZXRhUXVlcnksXG4gIE11dGF0aW9uTW9kZSxcbiAgUHJldkNvbnRleHQgYXMgVXBkYXRlQ29udGV4dCxcbiAgUXVlcnlSZXNwb25zZSxcbiAgVXBkYXRlTWFueVJlc3BvbnNlLFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBVc2VNdXRhdGlvblJlc3VsdCB9IGZyb20gXCIuLi8uLi9kZWZpbml0aW9ucy90eXBlc1wiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMsXG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSxcbiAgdXNlTG9hZGluZ092ZXJ0aW1lLFxufSBmcm9tIFwiLi4vdXNlTG9hZGluZ092ZXJ0aW1lXCI7XG5cbmltcG9ydCB0eXBlIHsgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHsgQWN0aW9uVHlwZXMgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvdW5kb2FibGVRdWV1ZS90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBPcHRpbWlzdGljVXBkYXRlTWFueU1hcFR5cGU8VERhdGEsIFRWYXJpYWJsZXM+ID0ge1xuICBsaXN0PzpcbiAgICB8ICgoXG4gICAgICAgIHByZXZpb3VzOiBHZXRMaXN0UmVzcG9uc2U8VERhdGE+IHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgICAgICAgdmFsdWVzOiBUVmFyaWFibGVzLFxuICAgICAgICBpZHM6IEJhc2VLZXlbXSxcbiAgICAgICkgPT4gR2V0TGlzdFJlc3BvbnNlPFREYXRhPiB8IG51bGwpXG4gICAgfCBib29sZWFuO1xuICBtYW55PzpcbiAgICB8ICgoXG4gICAgICAgIHByZXZpb3VzOiBHZXRNYW55UmVzcG9uc2U8VERhdGE+IHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgICAgICAgdmFsdWVzOiBUVmFyaWFibGVzLFxuICAgICAgICBpZHM6IEJhc2VLZXlbXSxcbiAgICAgICkgPT4gR2V0TWFueVJlc3BvbnNlPFREYXRhPiB8IG51bGwpXG4gICAgfCBib29sZWFuO1xuICBkZXRhaWw/OlxuICAgIHwgKChcbiAgICAgICAgcHJldmlvdXM6IEdldE9uZVJlc3BvbnNlPFREYXRhPiB8IG51bGwgfCB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlczogVFZhcmlhYmxlcyxcbiAgICAgICAgaWQ6IEJhc2VLZXksXG4gICAgICApID0+IEdldE9uZVJlc3BvbnNlPFREYXRhPiB8IG51bGwpXG4gICAgfCBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgVXBkYXRlTWFueVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPiA9IHtcbiAgLyoqXG4gICAqIGlkcyBmb3IgbXV0YXRpb24gZnVuY3Rpb25cbiAgICovXG4gIGlkcz86IEJhc2VLZXlbXTtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBbRGV0ZXJtaW5lcyB3aGVuIG11dGF0aW9ucyBhcmUgZXhlY3V0ZWRdKC9hZHZhbmNlZC10dXRvcmlhbHMvbXV0YXRpb24tbW9kZS5tZClcbiAgICovXG4gIG11dGF0aW9uTW9kZT86IE11dGF0aW9uTW9kZTtcbiAgLyoqXG4gICAqIER1cmF0aW9uIGluIG1zIHRvIHdhaXQgYmVmb3JlIGV4ZWN1dGluZyB0aGUgbXV0YXRpb24gd2hlbiBgbXV0YXRpb25Nb2RlID0gXCJ1bmRvYWJsZVwiYFxuICAgKi9cbiAgdW5kb2FibGVUaW1lb3V0PzogbnVtYmVyO1xuICAvKipcbiAgICogUHJvdmlkZXMgYSBmdW5jdGlvbiB0byBjYW5jZWwgdGhlIG11dGF0aW9uIHdoZW4gYG11dGF0aW9uTW9kZSA9IFwidW5kb2FibGVcImBcbiAgICovXG4gIG9uQ2FuY2VsPzogKGNhbmNlbE11dGF0aW9uOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAvKipcbiAgICogVmFsdWVzIGZvciBtdXRhdGlvbiBmdW5jdGlvblxuICAgKi9cbiAgdmFsdWVzPzogVFZhcmlhYmxlcztcbiAgLyoqXG4gICAqIG1ldGEgZGF0YSBmb3IgYGRhdGFQcm92aWRlcmBcbiAgICovXG4gIG1ldGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBtZXRhIGRhdGEgZm9yIGBkYXRhUHJvdmlkZXJgXG4gICAqIEBkZXByZWNhdGVkIGBtZXRhRGF0YWAgaXMgZGVwcmVjYXRlZCB3aXRoIHJlZmluZUA0LCByZWZpbmUgd2lsbCBwYXNzIGBtZXRhYCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGBtZXRhRGF0YWAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBtZXRhRGF0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgYGRhdGFQcm92aWRlcmAsIHlvdSBzaG91bGQgdXNlIHRoZSBgZGF0YVByb3ZpZGVyTmFtZWAgdGhhdCB5b3Ugd2lsbCB1c2UuXG4gICAqIEBkZWZhdWx0IFwiZGVmYXVsdFwiXG4gICAqL1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogIFlvdSBjYW4gdXNlIGl0IHRvIG1hbmFnZSB0aGUgaW52YWxpZGF0aW9ucyB0aGF0IHdpbGwgb2NjdXIgYXQgdGhlIGVuZCBvZiB0aGUgbXV0YXRpb24uXG4gICAqL1xuICBpbnZhbGlkYXRlcz86IEFycmF5PGtleW9mIElRdWVyeUtleXM+O1xuICAvKipcbiAgICogWW91IGNhbiB1c2UgaXQgdG8gbWFuYWdlIHRoZSBpbnZhbGlkYXRpb25zIHRoYXQgd2lsbCBvY2N1ciBhdCB0aGUgZW5kIG9mIHRoZSBtdXRhdGlvbi5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGxpc3Q6IHRydWUsXG4gICAqICAgbWFueTogdHJ1ZSxcbiAgICogICBkZXRhaWw6IHRydWUsXG4gICAqIH1cbiAgICovXG4gIG9wdGltaXN0aWNVcGRhdGVNYXA/OiBPcHRpbWlzdGljVXBkYXRlTWFueU1hcFR5cGU8VERhdGEsIFRWYXJpYWJsZXM+O1xufSAmIFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbjxcbiAgVXBkYXRlTWFueVJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yLFxuICB7IGlkczogQmFzZUtleVtdOyB2YWx1ZXM6IFRWYXJpYWJsZXMgfVxuPjtcblxuZXhwb3J0IHR5cGUgVXNlVXBkYXRlTWFueVJldHVyblR5cGU8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBVcGRhdGVNYW55UmVzcG9uc2U8VERhdGE+LFxuICBURXJyb3IsXG4gIFVwZGF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gIFVwZGF0ZUNvbnRleHQ8VERhdGE+XG4+ICZcbiAgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZTtcblxuZXhwb3J0IHR5cGUgVXNlVXBkYXRlTWFueVByb3BzPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFRWYXJpYWJsZXMgPSB7fSxcbj4gPSB7XG4gIG11dGF0aW9uT3B0aW9ucz86IE9taXQ8XG4gICAgVXNlTXV0YXRpb25PcHRpb25zPFxuICAgICAgVXBkYXRlTWFueVJlc3BvbnNlPFREYXRhPixcbiAgICAgIFRFcnJvcixcbiAgICAgIFVwZGF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgICBVcGRhdGVDb250ZXh0PFREYXRhPlxuICAgID4sXG4gICAgXCJtdXRhdGlvbkZuXCIgfCBcIm9uTXV0YXRlXCJcbiAgPjtcbn0gJiBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMgJlxuICBVcGRhdGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+O1xuXG4vKipcbiAqIGB1c2VVcGRhdGVNYW55YCBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgYHJlYWN0LXF1ZXJ5YCdzIHtAbGluayBodHRwczovL3JlYWN0LXF1ZXJ5LnRhbnN0YWNrLmNvbS9yZWZlcmVuY2UvdXNlTXV0YXRpb24gYHVzZU11dGF0aW9uYH0gZm9yIG11bHRpcGxlIHVwZGF0ZSBtdXRhdGlvbnMuXG4gKlxuICogSXQgdXNlcyBgdXBkYXRlTWFueWAgbWV0aG9kIGFzIG11dGF0aW9uIGZ1bmN0aW9uIGZyb20gdGhlIGBkYXRhUHJvdmlkZXJgIHdoaWNoIGlzIHBhc3NlZCB0byBgPFJlZmluZT5gLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZVVwZGF0ZU1hbnl9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIG9mIHRoZSBxdWVyeSBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9XG4gKiBAdHlwZVBhcmFtIFRFcnJvciAtIEN1c3RvbSBlcnJvciBvYmplY3QgdGhhdCBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjaHR0cGVycm9yIGBIdHRwRXJyb3JgfVxuICogQHR5cGVQYXJhbSBUVmFyaWFibGVzIC0gVmFsdWVzIGZvciBtdXRhdGlvbiBmdW5jdGlvblxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVVwZGF0ZU1hbnkgPSA8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPih7XG4gIGlkczogaWRzRnJvbVByb3BzLFxuICByZXNvdXJjZTogcmVzb3VyY2VGcm9tUHJvcHMsXG4gIHZhbHVlczogdmFsdWVzRnJvbVByb3BzLFxuICBkYXRhUHJvdmlkZXJOYW1lOiBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3BzLFxuICBzdWNjZXNzTm90aWZpY2F0aW9uOiBzdWNjZXNzTm90aWZpY2F0aW9uRnJvbVByb3BzLFxuICBlcnJvck5vdGlmaWNhdGlvbjogZXJyb3JOb3RpZmljYXRpb25Gcm9tUHJvcHMsXG4gIG1ldGE6IG1ldGFGcm9tUHJvcHMsXG4gIG1ldGFEYXRhOiBtZXRhRGF0YUZyb21Qcm9wcyxcbiAgbXV0YXRpb25Nb2RlOiBtdXRhdGlvbk1vZGVGcm9tUHJvcHMsXG4gIHVuZG9hYmxlVGltZW91dDogdW5kb2FibGVUaW1lb3V0RnJvbVByb3BzLFxuICBvbkNhbmNlbDogb25DYW5jZWxGcm9tUHJvcHMsXG4gIG9wdGltaXN0aWNVcGRhdGVNYXA6IG9wdGltaXN0aWNVcGRhdGVNYXBGcm9tUHJvcHMsXG4gIGludmFsaWRhdGVzOiBpbnZhbGlkYXRlc0Zyb21Qcm9wcyxcbiAgbXV0YXRpb25PcHRpb25zLFxuICBvdmVydGltZU9wdGlvbnMsXG59OiBVc2VVcGRhdGVNYW55UHJvcHM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4gPSB7fSk6IFVzZVVwZGF0ZU1hbnlSZXR1cm5UeXBlPFxuICBURGF0YSxcbiAgVEVycm9yLFxuICBUVmFyaWFibGVzXG4+ID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZXMsIHNlbGVjdCB9ID0gdXNlUmVzb3VyY2UoKTtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VEYXRhUHJvdmlkZXIoKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG4gIGNvbnN0IHtcbiAgICBtdXRhdGlvbk1vZGU6IG11dGF0aW9uTW9kZUNvbnRleHQsXG4gICAgdW5kb2FibGVUaW1lb3V0OiB1bmRvYWJsZVRpbWVvdXRDb250ZXh0LFxuICB9ID0gdXNlTXV0YXRpb25Nb2RlKCk7XG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuICBjb25zdCB7IG11dGF0ZTogY2hlY2tFcnJvciB9ID0gdXNlT25FcnJvcih7XG4gICAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBCb29sZWFuKGF1dGhQcm92aWRlcj8uaXNMZWdhY3kpLFxuICB9KTtcbiAgY29uc3QgeyBub3RpZmljYXRpb25EaXNwYXRjaCB9ID0gdXNlQ2FuY2VsTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IHB1Ymxpc2ggPSB1c2VQdWJsaXNoKCk7XG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUhhbmRsZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCBpbnZhbGlkYXRlU3RvcmUgPSB1c2VJbnZhbGlkYXRlKCk7XG4gIGNvbnN0IHsgbG9nIH0gPSB1c2VMb2coKTtcbiAgY29uc3QgZ2V0TWV0YSA9IHVzZU1ldGEoKTtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnM6IHsgdGV4dFRyYW5zZm9ybWVycyB9LFxuICB9ID0gdXNlUmVmaW5lQ29udGV4dCgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBtdXRhdGlvblJlc3VsdCA9IHVzZU11dGF0aW9uPFxuICAgIFVwZGF0ZU1hbnlSZXNwb25zZTxURGF0YT4sXG4gICAgVEVycm9yLFxuICAgIFVwZGF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgVXBkYXRlQ29udGV4dDxURGF0YT5cbiAgPih7XG4gICAgbXV0YXRpb25GbjogKHtcbiAgICAgIGlkcyA9IGlkc0Zyb21Qcm9wcyxcbiAgICAgIHZhbHVlcyA9IHZhbHVlc0Zyb21Qcm9wcyxcbiAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUgPSByZXNvdXJjZUZyb21Qcm9wcyxcbiAgICAgIG9uQ2FuY2VsID0gb25DYW5jZWxGcm9tUHJvcHMsXG4gICAgICBtdXRhdGlvbk1vZGUgPSBtdXRhdGlvbk1vZGVGcm9tUHJvcHMsXG4gICAgICB1bmRvYWJsZVRpbWVvdXQgPSB1bmRvYWJsZVRpbWVvdXRGcm9tUHJvcHMsXG4gICAgICBtZXRhID0gbWV0YUZyb21Qcm9wcyxcbiAgICAgIG1ldGFEYXRhID0gbWV0YURhdGFGcm9tUHJvcHMsXG4gICAgICBkYXRhUHJvdmlkZXJOYW1lID0gZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wcyxcbiAgICB9OiBVcGRhdGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+KSA9PiB7XG4gICAgICBpZiAoIWlkcykgdGhyb3cgbWlzc2luZ0lkRXJyb3I7XG4gICAgICBpZiAoIXZhbHVlcykgdGhyb3cgbWlzc2luZ1ZhbHVlc0Vycm9yO1xuICAgICAgaWYgKCFyZXNvdXJjZU5hbWUpIHRocm93IG1pc3NpbmdSZXNvdXJjZUVycm9yO1xuXG4gICAgICBjb25zdCB7IHJlc291cmNlLCBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcblxuICAgICAgY29uc3QgY29tYmluZWRNZXRhID0gZ2V0TWV0YSh7XG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBtZXRhOiBwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbXV0YXRpb25Nb2RlUHJvcE9yQ29udGV4dCA9IG11dGF0aW9uTW9kZSA/PyBtdXRhdGlvbk1vZGVDb250ZXh0O1xuXG4gICAgICBjb25zdCB1bmRvYWJsZVRpbWVvdXRQcm9wT3JDb250ZXh0ID1cbiAgICAgICAgdW5kb2FibGVUaW1lb3V0ID8/IHVuZG9hYmxlVGltZW91dENvbnRleHQ7XG5cbiAgICAgIGNvbnN0IHNlbGVjdGVkRGF0YVByb3ZpZGVyID0gZGF0YVByb3ZpZGVyKFxuICAgICAgICBwaWNrRGF0YVByb3ZpZGVyKGlkZW50aWZpZXIsIGRhdGFQcm92aWRlck5hbWUsIHJlc291cmNlcyksXG4gICAgICApO1xuXG4gICAgICBjb25zdCBtdXRhdGlvbkZuID0gKCkgPT4ge1xuICAgICAgICBpZiAoc2VsZWN0ZWREYXRhUHJvdmlkZXIudXBkYXRlTWFueSkge1xuICAgICAgICAgIHJldHVybiBzZWxlY3RlZERhdGFQcm92aWRlci51cGRhdGVNYW55PFREYXRhLCBUVmFyaWFibGVzPih7XG4gICAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgICAgIGlkcyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFsdWVzLFxuICAgICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFuZGxlTXVsdGlwbGUoXG4gICAgICAgICAgaWRzLm1hcCgoaWQpID0+XG4gICAgICAgICAgICBzZWxlY3RlZERhdGFQcm92aWRlci51cGRhdGU8VERhdGEsIFRWYXJpYWJsZXM+KHtcbiAgICAgICAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlLm5hbWUsXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhbHVlcyxcbiAgICAgICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgICBtZXRhRGF0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghKG11dGF0aW9uTW9kZVByb3BPckNvbnRleHQgPT09IFwidW5kb2FibGVcIikpIHtcbiAgICAgICAgcmV0dXJuIG11dGF0aW9uRm4oKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBkYXRlUHJvbWlzZSA9IG5ldyBQcm9taXNlPFVwZGF0ZU1hbnlSZXNwb25zZTxURGF0YT4+KFxuICAgICAgICAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgZG9NdXRhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgIG11dGF0aW9uRm4oKVxuICAgICAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiByZXNvbHZlKHJlc3VsdCkpXG4gICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiByZWplY3QoZXJyKSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IGNhbmNlbE11dGF0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHsgbWVzc2FnZTogXCJtdXRhdGlvbkNhbmNlbGxlZFwiIH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAob25DYW5jZWwpIHtcbiAgICAgICAgICAgIG9uQ2FuY2VsKGNhbmNlbE11dGF0aW9uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub3RpZmljYXRpb25EaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5BREQsXG4gICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgIGlkOiBpZHMsXG4gICAgICAgICAgICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgICAgICAgICAgICBjYW5jZWxNdXRhdGlvbjogY2FuY2VsTXV0YXRpb24sXG4gICAgICAgICAgICAgIGRvTXV0YXRpb246IGRvTXV0YXRpb24sXG4gICAgICAgICAgICAgIHNlY29uZHM6IHVuZG9hYmxlVGltZW91dFByb3BPckNvbnRleHQsXG4gICAgICAgICAgICAgIGlzU2lsZW50OiAhIW9uQ2FuY2VsLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gdXBkYXRlUHJvbWlzZTtcbiAgICB9LFxuICAgIG9uTXV0YXRlOiBhc3luYyAoe1xuICAgICAgcmVzb3VyY2U6IHJlc291cmNlTmFtZSA9IHJlc291cmNlRnJvbVByb3BzLFxuICAgICAgaWRzID0gaWRzRnJvbVByb3BzLFxuICAgICAgdmFsdWVzID0gdmFsdWVzRnJvbVByb3BzLFxuICAgICAgbXV0YXRpb25Nb2RlID0gbXV0YXRpb25Nb2RlRnJvbVByb3BzLFxuICAgICAgZGF0YVByb3ZpZGVyTmFtZSA9IGRhdGFQcm92aWRlck5hbWVGcm9tUHJvcHMsXG4gICAgICBtZXRhID0gbWV0YUZyb21Qcm9wcyxcbiAgICAgIG1ldGFEYXRhID0gbWV0YURhdGFGcm9tUHJvcHMsXG4gICAgICBvcHRpbWlzdGljVXBkYXRlTWFwID0gb3B0aW1pc3RpY1VwZGF0ZU1hcEZyb21Qcm9wcyA/PyB7XG4gICAgICAgIGxpc3Q6IHRydWUsXG4gICAgICAgIG1hbnk6IHRydWUsXG4gICAgICAgIGRldGFpbDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSkgPT4ge1xuICAgICAgaWYgKCFpZHMpIHRocm93IG1pc3NpbmdJZEVycm9yO1xuICAgICAgaWYgKCF2YWx1ZXMpIHRocm93IG1pc3NpbmdWYWx1ZXNFcnJvcjtcbiAgICAgIGlmICghcmVzb3VyY2VOYW1lKSB0aHJvdyBtaXNzaW5nUmVzb3VyY2VFcnJvcjtcblxuICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZ3FsTXV0YXRpb246IF8sXG4gICAgICAgIGdxbFF1ZXJ5OiBfXyxcbiAgICAgICAgLi4ucHJlZmVycmVkTWV0YVxuICAgICAgfSA9IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSA/PyB7fTtcblxuICAgICAgY29uc3QgcXVlcnlLZXkgPSBxdWVyeUtleXNSZXBsYWNlbWVudChwcmVmZXJMZWdhY3lLZXlzKShcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgcGlja0RhdGFQcm92aWRlcihpZGVudGlmaWVyLCBkYXRhUHJvdmlkZXJOYW1lLCByZXNvdXJjZXMpLFxuICAgICAgICBwcmVmZXJyZWRNZXRhLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VLZXlzID0ga2V5cygpXG4gICAgICAgIC5kYXRhKHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSlcbiAgICAgICAgLnJlc291cmNlKGlkZW50aWZpZXIpO1xuXG4gICAgICBjb25zdCBtdXRhdGlvbk1vZGVQcm9wT3JDb250ZXh0ID0gbXV0YXRpb25Nb2RlID8/IG11dGF0aW9uTW9kZUNvbnRleHQ7XG5cbiAgICAgIGF3YWl0IHF1ZXJ5Q2xpZW50LmNhbmNlbFF1ZXJpZXMoXG4gICAgICAgIHJlc291cmNlS2V5cy5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAge1xuICAgICAgICAgIHNpbGVudDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzUXVlcmllcyA9IHF1ZXJ5Q2xpZW50LmdldFF1ZXJpZXNEYXRhPFF1ZXJ5UmVzcG9uc2U8VERhdGE+PihcbiAgICAgICAgcmVzb3VyY2VLZXlzLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgICk7XG5cbiAgICAgIGlmIChtdXRhdGlvbk1vZGVQcm9wT3JDb250ZXh0ICE9PSBcInBlc3NpbWlzdGljXCIpIHtcbiAgICAgICAgaWYgKG9wdGltaXN0aWNVcGRhdGVNYXAubGlzdCkge1xuICAgICAgICAgIC8vIFNldCB0aGUgcHJldmlvdXMgcXVlcmllcyB0byB0aGUgbmV3IG9uZXM6XG4gICAgICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcmllc0RhdGEoXG4gICAgICAgICAgICByZXNvdXJjZUtleXNcbiAgICAgICAgICAgICAgLmFjdGlvbihcImxpc3RcIilcbiAgICAgICAgICAgICAgLnBhcmFtcyhwcmVmZXJyZWRNZXRhID8/IHt9KVxuICAgICAgICAgICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgICAgKHByZXZpb3VzPzogR2V0TGlzdFJlc3BvbnNlPFREYXRhPiB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpbWlzdGljVXBkYXRlTWFwLmxpc3QgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpbWlzdGljVXBkYXRlTWFwLmxpc3QocHJldmlvdXMsIHZhbHVlcywgaWRzKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBwcmV2aW91cy5kYXRhLm1hcCgocmVjb3JkOiBURGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICBpZHNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoaWQpID0+IGlkICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoU3RyaW5nKVxuICAgICAgICAgICAgICAgICAgICAuaW5jbHVkZXMocmVjb3JkLmlkLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgIC4uLnZhbHVlcyxcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5wcmV2aW91cyxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGltaXN0aWNVcGRhdGVNYXAubWFueSkge1xuICAgICAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJpZXNEYXRhKFxuICAgICAgICAgICAgcmVzb3VyY2VLZXlzLmFjdGlvbihcIm1hbnlcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgICAgKHByZXZpb3VzPzogR2V0TWFueVJlc3BvbnNlPFREYXRhPiB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpbWlzdGljVXBkYXRlTWFwLm1hbnkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpbWlzdGljVXBkYXRlTWFwLm1hbnkocHJldmlvdXMsIHZhbHVlcywgaWRzKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBwcmV2aW91cy5kYXRhLm1hcCgocmVjb3JkOiBURGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHJlY29yZC5pZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICBpZHNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoaWQpID0+IGlkICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoU3RyaW5nKVxuICAgICAgICAgICAgICAgICAgICAuaW5jbHVkZXMocmVjb3JkLmlkLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZWNvcmQsXG4gICAgICAgICAgICAgICAgICAgIC4uLnZhbHVlcyxcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnByZXZpb3VzLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW1pc3RpY1VwZGF0ZU1hcC5kZXRhaWwpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xuICAgICAgICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcmllc0RhdGEoXG4gICAgICAgICAgICAgIHJlc291cmNlS2V5c1xuICAgICAgICAgICAgICAgIC5hY3Rpb24oXCJvbmVcIilcbiAgICAgICAgICAgICAgICAuaWQoaWQpXG4gICAgICAgICAgICAgICAgLnBhcmFtcyhwcmVmZXJyZWRNZXRhID8/IHt9KVxuICAgICAgICAgICAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgICAgIChwcmV2aW91cz86IEdldE9uZVJlc3BvbnNlPFREYXRhPiB8IG51bGwpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGltaXN0aWNVcGRhdGVNYXAuZGV0YWlsID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpbWlzdGljVXBkYXRlTWFwLmRldGFpbChwcmV2aW91cywgdmFsdWVzLCBpZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2aW91cykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgIC4uLnByZXZpb3VzLmRhdGEsXG4gICAgICAgICAgICAgICAgICAuLi52YWx1ZXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgLi4ucHJldmlvdXMsXG4gICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmV2aW91c1F1ZXJpZXMsXG4gICAgICAgIHF1ZXJ5S2V5LFxuICAgICAgfTtcbiAgICB9LFxuICAgIG9uU2V0dGxlZDogKGRhdGEsIGVycm9yLCB2YXJpYWJsZXMsIGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaWRzID0gaWRzRnJvbVByb3BzLFxuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lID0gcmVzb3VyY2VGcm9tUHJvcHMsXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWUgPSBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3BzLFxuICAgICAgICBpbnZhbGlkYXRlcyA9IGludmFsaWRhdGVzRnJvbVByb3BzLFxuICAgICAgfSA9IHZhcmlhYmxlcztcbiAgICAgIGlmICghaWRzKSB0aHJvdyBtaXNzaW5nSWRFcnJvcjtcbiAgICAgIGlmICghcmVzb3VyY2VOYW1lKSB0aHJvdyBtaXNzaW5nUmVzb3VyY2VFcnJvcjtcblxuICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcblxuICAgICAgLy8gaW52YWxpZGF0ZSB0aGUgY2FjaGUgZm9yIHRoZSBsaXN0IGFuZCBtYW55IHF1ZXJpZXM6XG4gICAgICBpbnZhbGlkYXRlU3RvcmUoe1xuICAgICAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICAgICAgaW52YWxpZGF0ZXM6IGludmFsaWRhdGVzID8/IFtcImxpc3RcIiwgXCJtYW55XCJdLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lOiBwaWNrRGF0YVByb3ZpZGVyKFxuICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgICksXG4gICAgICB9KTtcblxuICAgICAgaWRzLmZvckVhY2goKGlkKSA9PlxuICAgICAgICBpbnZhbGlkYXRlU3RvcmUoe1xuICAgICAgICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgICAgICAgIGludmFsaWRhdGVzOiBpbnZhbGlkYXRlcyA/PyBbXCJkZXRhaWxcIl0sXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZTogcGlja0RhdGFQcm92aWRlcihcbiAgICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICAgICksXG4gICAgICAgICAgaWQsXG4gICAgICAgIH0pLFxuICAgICAgKTtcblxuICAgICAgbm90aWZpY2F0aW9uRGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRU1PVkUsXG4gICAgICAgIHBheWxvYWQ6IHsgaWQ6IGlkcywgcmVzb3VyY2U6IGlkZW50aWZpZXIgfSxcbiAgICAgIH0pO1xuXG4gICAgICBtdXRhdGlvbk9wdGlvbnM/Lm9uU2V0dGxlZD8uKGRhdGEsIGVycm9yLCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH0sXG4gICAgb25TdWNjZXNzOiAoZGF0YSwgdmFyaWFibGVzLCBjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlkcyA9IGlkc0Zyb21Qcm9wcyxcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlTmFtZSA9IHJlc291cmNlRnJvbVByb3BzLFxuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGcm9tUHJvcHMsXG4gICAgICAgIG1ldGEgPSBtZXRhRnJvbVByb3BzLFxuICAgICAgICBtZXRhRGF0YSA9IG1ldGFEYXRhRnJvbVByb3BzLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lOiBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3AgPSBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3BzLFxuICAgICAgICBzdWNjZXNzTm90aWZpY2F0aW9uID0gc3VjY2Vzc05vdGlmaWNhdGlvbkZyb21Qcm9wcyxcbiAgICAgIH0gPSB2YXJpYWJsZXM7XG4gICAgICBpZiAoIWlkcykgdGhyb3cgbWlzc2luZ0lkRXJyb3I7XG4gICAgICBpZiAoIXZhbHVlcykgdGhyb3cgbWlzc2luZ1ZhbHVlc0Vycm9yO1xuICAgICAgaWYgKCFyZXNvdXJjZU5hbWUpIHRocm93IG1pc3NpbmdSZXNvdXJjZUVycm9yO1xuXG4gICAgICBjb25zdCB7IHJlc291cmNlLCBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcbiAgICAgIGNvbnN0IHJlc291cmNlU2luZ3VsYXIgPSB0ZXh0VHJhbnNmb3JtZXJzLnNpbmd1bGFyKGlkZW50aWZpZXIpO1xuXG4gICAgICBjb25zdCBkYXRhUHJvdmlkZXJOYW1lID0gcGlja0RhdGFQcm92aWRlcihcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICApO1xuXG4gICAgICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2Ygc3VjY2Vzc05vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdWNjZXNzTm90aWZpY2F0aW9uKGRhdGEsIHsgaWRzLCB2YWx1ZXMgfSwgaWRlbnRpZmllcilcbiAgICAgICAgICA6IHN1Y2Nlc3NOb3RpZmljYXRpb247XG5cbiAgICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25Db25maWcsIHtcbiAgICAgICAga2V5OiBgJHtpZHN9LSR7aWRlbnRpZmllcn0tbm90aWZpY2F0aW9uYCxcbiAgICAgICAgZGVzY3JpcHRpb246IHRyYW5zbGF0ZShcIm5vdGlmaWNhdGlvbnMuc3VjY2Vzc1wiLCBcIlN1Y2Nlc3NmdWxcIiksXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZWRpdFN1Y2Nlc3NcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXNvdXJjZTogdHJhbnNsYXRlKGAke2lkZW50aWZpZXJ9LiR7aWRlbnRpZmllcn1gLCBpZGVudGlmaWVyKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGBTdWNjZXNzZnVsbHkgdXBkYXRlZCAke3Jlc291cmNlU2luZ3VsYXJ9YCxcbiAgICAgICAgKSxcbiAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICB9KTtcblxuICAgICAgcHVibGlzaD8uKHtcbiAgICAgICAgY2hhbm5lbDogYHJlc291cmNlcy8ke3Jlc291cmNlLm5hbWV9YCxcbiAgICAgICAgdHlwZTogXCJ1cGRhdGVkXCIsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBpZHM6IGlkcy5tYXAoU3RyaW5nKSxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHByZXZpb3VzRGF0YTogYW55W10gPSBbXTtcbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIGlkcy5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHF1ZXJ5RGF0YSA9IHF1ZXJ5Q2xpZW50LmdldFF1ZXJ5RGF0YTxVcGRhdGVNYW55UmVzcG9uc2U8VERhdGE+PihcbiAgICAgICAgICAgIGNvbnRleHQucXVlcnlLZXkuZGV0YWlsKGlkKSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcHJldmlvdXNEYXRhLnB1c2goXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZXMgfHwge30pLnJlZHVjZTxhbnk+KChhY2MsIGl0ZW06IGFueSkgPT4ge1xuICAgICAgICAgICAgICBhY2NbaXRlbV0gPSBxdWVyeURhdGE/LmRhdGE/LltpdGVtXTtcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0sIHt9KSxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qge1xuICAgICAgICBmaWVsZHM6IF9maWVsZHMsXG4gICAgICAgIG9wZXJhdGlvbjogX29wZXJhdGlvbixcbiAgICAgICAgdmFyaWFibGVzOiBfdmFyaWFibGVzLFxuICAgICAgICAuLi5yZXN0XG4gICAgICB9ID0gY29tYmluZWRNZXRhIHx8IHt9O1xuICAgICAgbG9nPy5tdXRhdGUoe1xuICAgICAgICBhY3Rpb246IFwidXBkYXRlTWFueVwiLFxuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgZGF0YTogdmFsdWVzLFxuICAgICAgICBwcmV2aW91c0RhdGEsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICBpZHMsXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIG11dGF0aW9uT3B0aW9ucz8ub25TdWNjZXNzPy4oZGF0YSwgdmFyaWFibGVzLCBjb250ZXh0KTtcbiAgICB9LFxuICAgIG9uRXJyb3I6IChlcnI6IFRFcnJvciwgdmFyaWFibGVzLCBjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGlkcyA9IGlkc0Zyb21Qcm9wcyxcbiAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlTmFtZSA9IHJlc291cmNlRnJvbVByb3BzLFxuICAgICAgICBlcnJvck5vdGlmaWNhdGlvbiA9IGVycm9yTm90aWZpY2F0aW9uRnJvbVByb3BzLFxuICAgICAgICB2YWx1ZXMgPSB2YWx1ZXNGcm9tUHJvcHMsXG4gICAgICB9ID0gdmFyaWFibGVzO1xuICAgICAgaWYgKCFpZHMpIHRocm93IG1pc3NpbmdJZEVycm9yO1xuICAgICAgaWYgKCF2YWx1ZXMpIHRocm93IG1pc3NpbmdWYWx1ZXNFcnJvcjtcbiAgICAgIGlmICghcmVzb3VyY2VOYW1lKSB0aHJvdyBtaXNzaW5nUmVzb3VyY2VFcnJvcjtcblxuICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcblxuICAgICAgLy8gc2V0IGJhY2sgdGhlIHF1ZXJpZXMgdG8gdGhlIGNvbnRleHQ6XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICBmb3IgKGNvbnN0IHF1ZXJ5IG9mIGNvbnRleHQucHJldmlvdXNRdWVyaWVzKSB7XG4gICAgICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcnlEYXRhKHF1ZXJ5WzBdLCBxdWVyeVsxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVyci5tZXNzYWdlICE9PSBcIm11dGF0aW9uQ2FuY2VsbGVkXCIpIHtcbiAgICAgICAgY2hlY2tFcnJvcj8uKGVycik7XG5cbiAgICAgICAgY29uc3QgcmVzb3VyY2VTaW5ndWxhciA9IHRleHRUcmFuc2Zvcm1lcnMuc2luZ3VsYXIoaWRlbnRpZmllcik7XG5cbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uQ29uZmlnID1cbiAgICAgICAgICB0eXBlb2YgZXJyb3JOb3RpZmljYXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBlcnJvck5vdGlmaWNhdGlvbihlcnIsIHsgaWRzLCB2YWx1ZXMgfSwgaWRlbnRpZmllcilcbiAgICAgICAgICAgIDogZXJyb3JOb3RpZmljYXRpb247XG5cbiAgICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICAgIGtleTogYCR7aWRzfS0ke2lkZW50aWZpZXJ9LXVwZGF0ZU1hbnktZXJyb3Itbm90aWZpY2F0aW9uYCxcbiAgICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZWRpdEVycm9yXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZVNpbmd1bGFyLFxuICAgICAgICAgICAgICBzdGF0dXNDb2RlOiBlcnIuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBgRXJyb3Igd2hlbiB1cGRhdGluZyAke3Jlc291cmNlU2luZ3VsYXJ9IChzdGF0dXMgY29kZTogJHtlcnIuc3RhdHVzQ29kZX0pYCxcbiAgICAgICAgICApLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBtdXRhdGlvbk9wdGlvbnM/Lm9uRXJyb3I/LihlcnIsIHZhcmlhYmxlcywgY29udGV4dCk7XG4gICAgfSxcbiAgICBtdXRhdGlvbktleToga2V5cygpLmRhdGEoKS5tdXRhdGlvbihcInVwZGF0ZU1hbnlcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgIC4uLm11dGF0aW9uT3B0aW9ucyxcbiAgICBtZXRhOiB7XG4gICAgICAuLi5tdXRhdGlvbk9wdGlvbnM/Lm1ldGEsXG4gICAgICAuLi5nZXRYUmF5KFwidXNlVXBkYXRlTWFueVwiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICB9LFxuICB9KTtcbiAgY29uc3QgeyBtdXRhdGUsIG11dGF0ZUFzeW5jLCAuLi5tdXRhdGlvbiB9ID0gbXV0YXRpb25SZXN1bHQ7XG5cbiAgY29uc3QgeyBlbGFwc2VkVGltZSB9ID0gdXNlTG9hZGluZ092ZXJ0aW1lKHtcbiAgICBpc0xvYWRpbmc6IG11dGF0aW9uLmlzTG9hZGluZyxcbiAgICBpbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5pbnRlcnZhbCxcbiAgICBvbkludGVydmFsOiBvdmVydGltZU9wdGlvbnM/Lm9uSW50ZXJ2YWwsXG4gIH0pO1xuXG4gIC8vIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBtYWtlIHRoZSBgdmFyaWFibGVzYCBwYXJhbWV0ZXIgb3B0aW9uYWxcbiAgY29uc3QgaGFuZGxlTXV0YXRpb24gPSAoXG4gICAgdmFyaWFibGVzPzogVXBkYXRlTWFueVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICBvcHRpb25zPzogTXV0YXRlT3B0aW9uczxcbiAgICAgIFVwZGF0ZU1hbnlSZXNwb25zZTxURGF0YT4sXG4gICAgICBURXJyb3IsXG4gICAgICBVcGRhdGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICAgICAgVXBkYXRlQ29udGV4dDxURGF0YT5cbiAgICA+LFxuICApID0+IHtcbiAgICByZXR1cm4gbXV0YXRlKHZhcmlhYmxlcyB8fCB7fSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgLy8gdGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIG1ha2UgdGhlIGB2YXJpYWJsZXNgIHBhcmFtZXRlciBvcHRpb25hbFxuICBjb25zdCBoYW5kbGVNdXRhdGVBc3luYyA9IChcbiAgICB2YXJpYWJsZXM/OiBVcGRhdGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICAgIG9wdGlvbnM/OiBNdXRhdGVPcHRpb25zPFxuICAgICAgVXBkYXRlTWFueVJlc3BvbnNlPFREYXRhPixcbiAgICAgIFRFcnJvcixcbiAgICAgIFVwZGF0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gICAgICBVcGRhdGVDb250ZXh0PFREYXRhPlxuICAgID4sXG4gICkgPT4ge1xuICAgIHJldHVybiBtdXRhdGVBc3luYyh2YXJpYWJsZXMgfHwge30sIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgLi4ubXV0YXRpb24sXG4gICAgbXV0YXRlOiBoYW5kbGVNdXRhdGlvbixcbiAgICBtdXRhdGVBc3luYzogaGFuZGxlTXV0YXRlQXN5bmMsXG4gICAgb3ZlcnRpbWU6IHsgZWxhcHNlZFRpbWUgfSxcbiAgfTtcbn07XG5cbmNvbnN0IG1pc3NpbmdSZXNvdXJjZUVycm9yID0gbmV3IEVycm9yKFxuICBcIlt1c2VVcGRhdGVNYW55XTogYHJlc291cmNlYCBpcyBub3QgZGVmaW5lZCBvciBub3QgbWF0Y2hlZCBidXQgaXMgcmVxdWlyZWRcIixcbik7XG5cbmNvbnN0IG1pc3NpbmdJZEVycm9yID0gbmV3IEVycm9yKFxuICBcIlt1c2VVcGRhdGVNYW55XTogYGlkYCBpcyBub3QgZGVmaW5lZCBidXQgaXMgcmVxdWlyZWQgaW4gZWRpdCBhbmQgY2xvbmUgYWN0aW9uc1wiLFxuKTtcblxuY29uc3QgbWlzc2luZ1ZhbHVlc0Vycm9yID0gbmV3IEVycm9yKFxuICBcIlt1c2VVcGRhdGVNYW55XTogYHZhbHVlc2AgaXMgbm90IHByb3ZpZGVkIGJ1dCBpcyByZXF1aXJlZFwiLFxuKTtcbiIsImltcG9ydCB7IGdldFhSYXkgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VNdXRhdGlvbk9wdGlvbnMsXG4gIHR5cGUgVXNlTXV0YXRpb25SZXN1bHQsXG4gIHVzZU11dGF0aW9uLFxuICB1c2VRdWVyeUNsaWVudCxcbn0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQge1xuICBoYW5kbGVNdWx0aXBsZSxcbiAgcGlja0RhdGFQcm92aWRlcixcbiAgcGlja05vdERlcHJlY2F0ZWQsXG4gIHF1ZXJ5S2V5c1JlcGxhY2VtZW50LFxuICB1c2VBY3RpdmVBdXRoUHJvdmlkZXIsXG59IGZyb20gXCJAZGVmaW5pdGlvbnNcIjtcbmltcG9ydCB7XG4gIHVzZUNhbmNlbE5vdGlmaWNhdGlvbixcbiAgdXNlRGF0YVByb3ZpZGVyLFxuICB1c2VIYW5kbGVOb3RpZmljYXRpb24sXG4gIHVzZUludmFsaWRhdGUsXG4gIHVzZUtleXMsXG4gIHVzZUxvZyxcbiAgdXNlTWV0YSxcbiAgdXNlTXV0YXRpb25Nb2RlLFxuICB1c2VPbkVycm9yLFxuICB1c2VQdWJsaXNoLFxuICB1c2VSZWZpbmVDb250ZXh0LFxuICB1c2VSZXNvdXJjZSxcbiAgdXNlVHJhbnNsYXRlLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQmFzZUtleSxcbiAgQmFzZVJlY29yZCxcbiAgRGVsZXRlTWFueVJlc3BvbnNlLFxuICBHZXRMaXN0UmVzcG9uc2UsXG4gIEh0dHBFcnJvcixcbiAgSVF1ZXJ5S2V5cyxcbiAgTWV0YVF1ZXJ5LFxuICBNdXRhdGlvbk1vZGUsXG4gIFByZXZDb250ZXh0IGFzIERlbGV0ZUNvbnRleHQsXG4gIFByZXZpb3VzUXVlcnksXG59IGZyb20gXCIuLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9ub3RpZmljYXRpb24vdHlwZXNcIjtcbmltcG9ydCB7IEFjdGlvblR5cGVzIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL3VuZG9hYmxlUXVldWUvdHlwZXNcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lT3B0aW9uc1Byb3BzLFxuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGUsXG4gIHVzZUxvYWRpbmdPdmVydGltZSxcbn0gZnJvbSBcIi4uL3VzZUxvYWRpbmdPdmVydGltZVwiO1xuXG5leHBvcnQgdHlwZSBEZWxldGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+ID0ge1xuICAvKipcbiAgICogaWRzIGZvciBtdXRhdGlvbiBmdW5jdGlvblxuICAgKi9cbiAgaWRzOiBCYXNlS2V5W107XG4gIC8qKlxuICAgKiBSZXNvdXJjZSBuYW1lIGZvciBBUEkgZGF0YSBpbnRlcmFjdGlvbnNcbiAgICovXG4gIHJlc291cmNlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBbRGV0ZXJtaW5lcyB3aGVuIG11dGF0aW9ucyBhcmUgZXhlY3V0ZWRdKC9hZHZhbmNlZC10dXRvcmlhbHMvbXV0YXRpb24tbW9kZS5tZClcbiAgICovXG4gIG11dGF0aW9uTW9kZT86IE11dGF0aW9uTW9kZTtcbiAgLyoqXG4gICAqIER1cmF0aW9uIGluIG1zIHRvIHdhaXQgYmVmb3JlIGV4ZWN1dGluZyB0aGUgbXV0YXRpb24gd2hlbiBgbXV0YXRpb25Nb2RlID0gXCJ1bmRvYWJsZVwiYFxuICAgKi9cbiAgdW5kb2FibGVUaW1lb3V0PzogbnVtYmVyO1xuICAvKipcbiAgICogUHJvdmlkZXMgYSBmdW5jdGlvbiB0byBjYW5jZWwgdGhlIG11dGF0aW9uIHdoZW4gYG11dGF0aW9uTW9kZSA9IFwidW5kb2FibGVcImBcbiAgICovXG4gIG9uQ2FuY2VsPzogKGNhbmNlbE11dGF0aW9uOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAvKipcbiAgICogTWV0YWRhdGEgcXVlcnkgZm9yIGRhdGFQcm92aWRlclxuICAgKi9cbiAgbWV0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIGBtZXRhRGF0YWAgaXMgZGVwcmVjYXRlZCB3aXRoIHJlZmluZUA0LCByZWZpbmUgd2lsbCBwYXNzIGBtZXRhYCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGBtZXRhRGF0YWAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBtZXRhRGF0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgYGRhdGFQcm92aWRlcmAsIHlvdSBzaG91bGQgdXNlIHRoZSBgZGF0YVByb3ZpZGVyTmFtZWAgdGhhdCB5b3Ugd2lsbCB1c2UuXG4gICAqIEBkZWZhdWx0IFwiZGVmYXVsdFwiXG4gICAqL1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogIFlvdSBjYW4gdXNlIGl0IHRvIG1hbmFnZSB0aGUgaW52YWxpZGF0aW9ucyB0aGF0IHdpbGwgb2NjdXIgYXQgdGhlIGVuZCBvZiB0aGUgbXV0YXRpb24uXG4gICAqL1xuICBpbnZhbGlkYXRlcz86IEFycmF5PGtleW9mIElRdWVyeUtleXM+O1xuICAvKipcbiAgICogVmFsdWVzIGZvciBtdXRhdGlvbiBmdW5jdGlvblxuICAgKi9cbiAgdmFsdWVzPzogVFZhcmlhYmxlcztcbn0gJiBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb248RGVsZXRlTWFueVJlc3BvbnNlPFREYXRhPiwgVEVycm9yLCBCYXNlS2V5W10+O1xuXG5leHBvcnQgdHlwZSBVc2VEZWxldGVNYW55UmV0dXJuVHlwZTxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0ge30sXG4+ID0gVXNlTXV0YXRpb25SZXN1bHQ8XG4gIERlbGV0ZU1hbnlSZXNwb25zZTxURGF0YT4sXG4gIFRFcnJvcixcbiAgRGVsZXRlTWFueVBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgdW5rbm93blxuPiAmXG4gIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGU7XG5cbmV4cG9ydCB0eXBlIFVzZURlbGV0ZU1hbnlQcm9wczxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0ge30sXG4+ID0ge1xuICBtdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxcbiAgICAgIERlbGV0ZU1hbnlSZXNwb25zZTxURGF0YT4sXG4gICAgICBURXJyb3IsXG4gICAgICBEZWxldGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICAgICAgRGVsZXRlQ29udGV4dDxURGF0YT5cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiIHwgXCJvbkVycm9yXCIgfCBcIm9uU3VjY2Vzc1wiIHwgXCJvblNldHRsZWRcIiB8IFwib25NdXRhdGVcIlxuICA+O1xufSAmIFVzZUxvYWRpbmdPdmVydGltZU9wdGlvbnNQcm9wcztcblxuLyoqXG4gKiBgdXNlRGVsZXRlTWFueWAgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGByZWFjdC1xdWVyeWAncyB7QGxpbmsgaHR0cHM6Ly9yZWFjdC1xdWVyeS50YW5zdGFjay5jb20vcmVmZXJlbmNlL3VzZU11dGF0aW9uIGB1c2VNdXRhdGlvbmB9IGZvciBtdWx0aXBsZSBkZWxldGUgbXV0YXRpb25zLlxuICpcbiAqIEl0IHVzZXMgYGRlbGV0ZU1hbnlgIG1ldGhvZCBhcyBtdXRhdGlvbiBmdW5jdGlvbiBmcm9tIHRoZSBgZGF0YVByb3ZpZGVyYCB3aGljaCBpcyBwYXNzZWQgdG8gYDxSZWZpbmU+YC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvZGF0YS91c2VEZWxldGVNYW55fSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEB0eXBlUGFyYW0gVERhdGEgLSBSZXN1bHQgZGF0YSBvZiB0aGUgcXVlcnkgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBURXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2h0dHBlcnJvciBgSHR0cEVycm9yYH1cbiAqIEB0eXBlUGFyYW0gVFZhcmlhYmxlcyAtIFZhbHVlcyBmb3IgcGFyYW1zLiBkZWZhdWx0IGB7fWBcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VEZWxldGVNYW55ID0gPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFRWYXJpYWJsZXMgPSB7fSxcbj4oe1xuICBtdXRhdGlvbk9wdGlvbnMsXG4gIG92ZXJ0aW1lT3B0aW9ucyxcbn06IFVzZURlbGV0ZU1hbnlQcm9wczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPiA9IHt9KTogVXNlRGVsZXRlTWFueVJldHVyblR5cGU8XG4gIFREYXRhLFxuICBURXJyb3IsXG4gIFRWYXJpYWJsZXNcbj4gPT4ge1xuICBjb25zdCBhdXRoUHJvdmlkZXIgPSB1c2VBY3RpdmVBdXRoUHJvdmlkZXIoKTtcbiAgY29uc3QgeyBtdXRhdGU6IGNoZWNrRXJyb3IgfSA9IHVzZU9uRXJyb3Ioe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbihhdXRoUHJvdmlkZXI/LmlzTGVnYWN5KSxcbiAgfSk7XG5cbiAgY29uc3Qge1xuICAgIG11dGF0aW9uTW9kZTogbXV0YXRpb25Nb2RlQ29udGV4dCxcbiAgICB1bmRvYWJsZVRpbWVvdXQ6IHVuZG9hYmxlVGltZW91dENvbnRleHQsXG4gIH0gPSB1c2VNdXRhdGlvbk1vZGUoKTtcbiAgY29uc3QgZGF0YVByb3ZpZGVyID0gdXNlRGF0YVByb3ZpZGVyKCk7XG4gIGNvbnN0IHsgbm90aWZpY2F0aW9uRGlzcGF0Y2ggfSA9IHVzZUNhbmNlbE5vdGlmaWNhdGlvbigpO1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgcHVibGlzaCA9IHVzZVB1Ymxpc2goKTtcbiAgY29uc3QgaGFuZGxlTm90aWZpY2F0aW9uID0gdXNlSGFuZGxlTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IGludmFsaWRhdGVTdG9yZSA9IHVzZUludmFsaWRhdGUoKTtcbiAgY29uc3QgeyBsb2cgfSA9IHVzZUxvZygpO1xuICBjb25zdCB7IHJlc291cmNlcywgc2VsZWN0IH0gPSB1c2VSZXNvdXJjZSgpO1xuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zOiB7IHRleHRUcmFuc2Zvcm1lcnMgfSxcbiAgfSA9IHVzZVJlZmluZUNvbnRleHQoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgbXV0YXRpb24gPSB1c2VNdXRhdGlvbjxcbiAgICBEZWxldGVNYW55UmVzcG9uc2U8VERhdGE+LFxuICAgIFRFcnJvcixcbiAgICBEZWxldGVNYW55UGFyYW1zPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+LFxuICAgIERlbGV0ZUNvbnRleHQ8VERhdGE+XG4gID4oe1xuICAgIG11dGF0aW9uRm46ICh7XG4gICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lLFxuICAgICAgaWRzLFxuICAgICAgbXV0YXRpb25Nb2RlLFxuICAgICAgdW5kb2FibGVUaW1lb3V0LFxuICAgICAgb25DYW5jZWwsXG4gICAgICBtZXRhLFxuICAgICAgbWV0YURhdGEsXG4gICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgdmFsdWVzLFxuICAgIH06IERlbGV0ZU1hbnlQYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4pID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzb3VyY2UsIGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtdXRhdGlvbk1vZGVQcm9wT3JDb250ZXh0ID0gbXV0YXRpb25Nb2RlID8/IG11dGF0aW9uTW9kZUNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IHVuZG9hYmxlVGltZW91dFByb3BPckNvbnRleHQgPVxuICAgICAgICB1bmRvYWJsZVRpbWVvdXQgPz8gdW5kb2FibGVUaW1lb3V0Q29udGV4dDtcblxuICAgICAgY29uc3Qgc2VsZWN0ZWREYXRhUHJvdmlkZXIgPSBkYXRhUHJvdmlkZXIoXG4gICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG11dGF0aW9uRm4gPSAoKSA9PiB7XG4gICAgICAgIGlmIChzZWxlY3RlZERhdGFQcm92aWRlci5kZWxldGVNYW55KSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGVkRGF0YVByb3ZpZGVyLmRlbGV0ZU1hbnk8VERhdGEsIFRWYXJpYWJsZXM+KHtcbiAgICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICAgICAgaWRzLFxuICAgICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFsdWVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYW5kbGVNdWx0aXBsZShcbiAgICAgICAgICBpZHMubWFwKChpZCkgPT5cbiAgICAgICAgICAgIHNlbGVjdGVkRGF0YVByb3ZpZGVyLmRlbGV0ZU9uZTxURGF0YSwgVFZhcmlhYmxlcz4oe1xuICAgICAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UubmFtZSxcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIG1ldGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgdmFyaWFibGVzOiB2YWx1ZXMsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICApLFxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgaWYgKCEobXV0YXRpb25Nb2RlUHJvcE9yQ29udGV4dCA9PT0gXCJ1bmRvYWJsZVwiKSkge1xuICAgICAgICByZXR1cm4gbXV0YXRpb25GbigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB1cGRhdGVQcm9taXNlID0gbmV3IFByb21pc2U8RGVsZXRlTWFueVJlc3BvbnNlPFREYXRhPj4oXG4gICAgICAgIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCBkb011dGF0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgbXV0YXRpb25GbigpXG4gICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHJlc29sdmUocmVzdWx0KSlcbiAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgY2FuY2VsTXV0YXRpb24gPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoeyBtZXNzYWdlOiBcIm11dGF0aW9uQ2FuY2VsbGVkXCIgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChvbkNhbmNlbCkge1xuICAgICAgICAgICAgb25DYW5jZWwoY2FuY2VsTXV0YXRpb24pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vdGlmaWNhdGlvbkRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkFERCxcbiAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgaWQ6IGlkcyxcbiAgICAgICAgICAgICAgcmVzb3VyY2U6IGlkZW50aWZpZXIsXG4gICAgICAgICAgICAgIGNhbmNlbE11dGF0aW9uOiBjYW5jZWxNdXRhdGlvbixcbiAgICAgICAgICAgICAgZG9NdXRhdGlvbjogZG9NdXRhdGlvbixcbiAgICAgICAgICAgICAgc2Vjb25kczogdW5kb2FibGVUaW1lb3V0UHJvcE9yQ29udGV4dCxcbiAgICAgICAgICAgICAgaXNTaWxlbnQ6ICEhb25DYW5jZWwsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICAgIHJldHVybiB1cGRhdGVQcm9taXNlO1xuICAgIH0sXG4gICAgb25NdXRhdGU6IGFzeW5jICh7XG4gICAgICBpZHMsXG4gICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lLFxuICAgICAgbXV0YXRpb25Nb2RlLFxuICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgIG1ldGEsXG4gICAgICBtZXRhRGF0YSxcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCB7IGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGdxbE11dGF0aW9uOiBfLFxuICAgICAgICBncWxRdWVyeTogX18sXG4gICAgICAgIC4uLnByZWZlcnJlZE1ldGFcbiAgICAgIH0gPSBwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSkgPz8ge307XG5cbiAgICAgIGNvbnN0IHF1ZXJ5S2V5ID0gcXVlcnlLZXlzUmVwbGFjZW1lbnQocHJlZmVyTGVnYWN5S2V5cykoXG4gICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgIHBpY2tEYXRhUHJvdmlkZXIoaWRlbnRpZmllciwgZGF0YVByb3ZpZGVyTmFtZSwgcmVzb3VyY2VzKSxcbiAgICAgICAgcHJlZmVycmVkTWV0YSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlS2V5cyA9IGtleXMoKVxuICAgICAgICAuZGF0YShwaWNrRGF0YVByb3ZpZGVyKGlkZW50aWZpZXIsIGRhdGFQcm92aWRlck5hbWUsIHJlc291cmNlcykpXG4gICAgICAgIC5yZXNvdXJjZShpZGVudGlmaWVyKTtcblxuICAgICAgY29uc3QgbXV0YXRpb25Nb2RlUHJvcE9yQ29udGV4dCA9IG11dGF0aW9uTW9kZSA/PyBtdXRhdGlvbk1vZGVDb250ZXh0O1xuXG4gICAgICBhd2FpdCBxdWVyeUNsaWVudC5jYW5jZWxRdWVyaWVzKFxuICAgICAgICByZXNvdXJjZUtleXMuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHtcbiAgICAgICAgICBzaWxlbnQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICApO1xuXG4gICAgICBjb25zdCBwcmV2aW91c1F1ZXJpZXM6IFByZXZpb3VzUXVlcnk8VERhdGE+W10gPVxuICAgICAgICBxdWVyeUNsaWVudC5nZXRRdWVyaWVzRGF0YShyZXNvdXJjZUtleXMuZ2V0KHByZWZlckxlZ2FjeUtleXMpKTtcblxuICAgICAgaWYgKG11dGF0aW9uTW9kZVByb3BPckNvbnRleHQgIT09IFwicGVzc2ltaXN0aWNcIikge1xuICAgICAgICAvLyBTZXQgdGhlIHByZXZpb3VzIHF1ZXJpZXMgdG8gdGhlIG5ldyBvbmVzOlxuICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyaWVzRGF0YShcbiAgICAgICAgICByZXNvdXJjZUtleXNcbiAgICAgICAgICAgIC5hY3Rpb24oXCJsaXN0XCIpXG4gICAgICAgICAgICAucGFyYW1zKHByZWZlcnJlZE1ldGEgPz8ge30pXG4gICAgICAgICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgIChwcmV2aW91cz86IEdldExpc3RSZXNwb25zZTxURGF0YT4gfCBudWxsKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcHJldmlvdXMuZGF0YS5maWx0ZXIoXG4gICAgICAgICAgICAgIChpdGVtKSA9PlxuICAgICAgICAgICAgICAgIGl0ZW0uaWQgJiYgIWlkcy5tYXAoU3RyaW5nKS5pbmNsdWRlcyhpdGVtLmlkLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgdG90YWw6IHByZXZpb3VzLnRvdGFsIC0gMSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICBxdWVyeUNsaWVudC5zZXRRdWVyaWVzRGF0YShcbiAgICAgICAgICByZXNvdXJjZUtleXMuYWN0aW9uKFwibWFueVwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgKHByZXZpb3VzPzogR2V0TGlzdFJlc3BvbnNlPFREYXRhPiB8IG51bGwpID0+IHtcbiAgICAgICAgICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBwcmV2aW91cy5kYXRhLmZpbHRlcigocmVjb3JkOiBURGF0YSkgPT4ge1xuICAgICAgICAgICAgICBpZiAocmVjb3JkLmlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFpZHMubWFwKFN0cmluZykuaW5jbHVkZXMocmVjb3JkLmlkLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5wcmV2aW91cyxcbiAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xuICAgICAgICAgIHF1ZXJ5Q2xpZW50LnNldFF1ZXJpZXNEYXRhKFxuICAgICAgICAgICAgcmVzb3VyY2VLZXlzXG4gICAgICAgICAgICAgIC5hY3Rpb24oXCJvbmVcIilcbiAgICAgICAgICAgICAgLmlkKGlkKVxuICAgICAgICAgICAgICAucGFyYW1zKHByZWZlcnJlZE1ldGEpXG4gICAgICAgICAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgICAocHJldmlvdXM/OiBhbnkgfCBudWxsKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghcHJldmlvdXMgfHwgcHJldmlvdXMuZGF0YS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnByZXZpb3VzLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZXZpb3VzUXVlcmllcyxcbiAgICAgICAgcXVlcnlLZXksXG4gICAgICB9O1xuICAgIH0sXG4gICAgLy8gQWx3YXlzIHJlZmV0Y2ggYWZ0ZXIgZXJyb3Igb3Igc3VjY2VzczpcbiAgICBvblNldHRsZWQ6IChcbiAgICAgIF9kYXRhLFxuICAgICAgX2Vycm9yLFxuICAgICAge1xuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2VOYW1lLFxuICAgICAgICBpZHMsXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIGludmFsaWRhdGVzID0gW1wibGlzdFwiLCBcIm1hbnlcIl0sXG4gICAgICB9LFxuICAgICkgPT4ge1xuICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcblxuICAgICAgLy8gaW52YWxpZGF0ZSB0aGUgY2FjaGUgZm9yIHRoZSBsaXN0IGFuZCBtYW55IHF1ZXJpZXM6XG4gICAgICBpbnZhbGlkYXRlU3RvcmUoe1xuICAgICAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICAgICAgZGF0YVByb3ZpZGVyTmFtZTogcGlja0RhdGFQcm92aWRlcihcbiAgICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICApLFxuICAgICAgICBpbnZhbGlkYXRlcyxcbiAgICAgIH0pO1xuXG4gICAgICBub3RpZmljYXRpb25EaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFTU9WRSxcbiAgICAgICAgcGF5bG9hZDogeyBpZDogaWRzLCByZXNvdXJjZTogaWRlbnRpZmllciB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvblN1Y2Nlc3M6IChcbiAgICAgIF9kYXRhLFxuICAgICAge1xuICAgICAgICBpZHMsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZU5hbWUsXG4gICAgICAgIG1ldGEsXG4gICAgICAgIG1ldGFEYXRhLFxuICAgICAgICBkYXRhUHJvdmlkZXJOYW1lOiBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3AsXG4gICAgICAgIHN1Y2Nlc3NOb3RpZmljYXRpb24sXG4gICAgICB9LFxuICAgICAgY29udGV4dCxcbiAgICApID0+IHtcbiAgICAgIGNvbnN0IHsgcmVzb3VyY2UsIGlkZW50aWZpZXIgfSA9IHNlbGVjdChyZXNvdXJjZU5hbWUpO1xuXG4gICAgICBjb25zdCBkYXRhUHJvdmlkZXJOYW1lID0gcGlja0RhdGFQcm92aWRlcihcbiAgICAgICAgaWRlbnRpZmllcixcbiAgICAgICAgZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICApO1xuXG4gICAgICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIHF1ZXJpZXMgZnJvbSB0aGUgY2FjaGU6XG4gICAgICBpZHMuZm9yRWFjaCgoaWQpID0+XG4gICAgICAgIHF1ZXJ5Q2xpZW50LnJlbW92ZVF1ZXJpZXMoY29udGV4dD8ucXVlcnlLZXkuZGV0YWlsKGlkKSksXG4gICAgICApO1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICB0eXBlb2Ygc3VjY2Vzc05vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBzdWNjZXNzTm90aWZpY2F0aW9uKF9kYXRhLCBpZHMsIGlkZW50aWZpZXIpXG4gICAgICAgICAgOiBzdWNjZXNzTm90aWZpY2F0aW9uO1xuXG4gICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnLCB7XG4gICAgICAgIGtleTogYCR7aWRzfS0ke2lkZW50aWZpZXJ9LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0cmFuc2xhdGUoXCJub3RpZmljYXRpb25zLnN1Y2Nlc3NcIiwgXCJTdWNjZXNzXCIpLFxuICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgXCJub3RpZmljYXRpb25zLmRlbGV0ZVN1Y2Nlc3NcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXNvdXJjZTogdHJhbnNsYXRlKGAke2lkZW50aWZpZXJ9LiR7aWRlbnRpZmllcn1gLCBpZGVudGlmaWVyKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGBTdWNjZXNzZnVsbHkgZGVsZXRlZCAke2lkZW50aWZpZXJ9YCxcbiAgICAgICAgKSxcbiAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICB9KTtcblxuICAgICAgcHVibGlzaD8uKHtcbiAgICAgICAgY2hhbm5lbDogYHJlc291cmNlcy8ke3Jlc291cmNlLm5hbWV9YCxcbiAgICAgICAgdHlwZTogXCJkZWxldGVkXCIsXG4gICAgICAgIHBheWxvYWQ6IHsgaWRzIH0sXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAuLi5jb21iaW5lZE1ldGEsXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGZpZWxkczogX2ZpZWxkcyxcbiAgICAgICAgb3BlcmF0aW9uOiBfb3BlcmF0aW9uLFxuICAgICAgICB2YXJpYWJsZXM6IF92YXJpYWJsZXMsXG4gICAgICAgIC4uLnJlc3RcbiAgICAgIH0gPSBjb21iaW5lZE1ldGEgfHwge307XG4gICAgICBsb2c/Lm11dGF0ZSh7XG4gICAgICAgIGFjdGlvbjogXCJkZWxldGVNYW55XCIsXG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgaWRzLFxuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIHF1ZXJpZXMgZnJvbSB0aGUgY2FjaGU6XG4gICAgICBpZHMuZm9yRWFjaCgoaWQpID0+XG4gICAgICAgIHF1ZXJ5Q2xpZW50LnJlbW92ZVF1ZXJpZXMoY29udGV4dD8ucXVlcnlLZXkuZGV0YWlsKGlkKSksXG4gICAgICApO1xuICAgIH0sXG4gICAgb25FcnJvcjogKFxuICAgICAgZXJyLFxuICAgICAgeyBpZHMsIHJlc291cmNlOiByZXNvdXJjZU5hbWUsIGVycm9yTm90aWZpY2F0aW9uIH0sXG4gICAgICBjb250ZXh0LFxuICAgICkgPT4ge1xuICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSBzZWxlY3QocmVzb3VyY2VOYW1lKTtcblxuICAgICAgLy8gc2V0IGJhY2sgdGhlIHF1ZXJpZXMgdG8gdGhlIGNvbnRleHQ6XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICBmb3IgKGNvbnN0IHF1ZXJ5IG9mIGNvbnRleHQucHJldmlvdXNRdWVyaWVzKSB7XG4gICAgICAgICAgcXVlcnlDbGllbnQuc2V0UXVlcnlEYXRhKHF1ZXJ5WzBdLCBxdWVyeVsxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVyci5tZXNzYWdlICE9PSBcIm11dGF0aW9uQ2FuY2VsbGVkXCIpIHtcbiAgICAgICAgY2hlY2tFcnJvcihlcnIpO1xuICAgICAgICBjb25zdCByZXNvdXJjZVNpbmd1bGFyID0gdGV4dFRyYW5zZm9ybWVycy5zaW5ndWxhcihpZGVudGlmaWVyKTtcblxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICAgIHR5cGVvZiBlcnJvck5vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IGVycm9yTm90aWZpY2F0aW9uKGVyciwgaWRzLCBpZGVudGlmaWVyKVxuICAgICAgICAgICAgOiBlcnJvck5vdGlmaWNhdGlvbjtcblxuICAgICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnLCB7XG4gICAgICAgICAga2V5OiBgJHtpZHN9LSR7aWRlbnRpZmllcn0tbm90aWZpY2F0aW9uYCxcbiAgICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZGVsZXRlRXJyb3JcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcmVzb3VyY2U6IHJlc291cmNlU2luZ3VsYXIsXG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IGVyci5zdGF0dXNDb2RlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGBFcnJvciAoc3RhdHVzIGNvZGU6ICR7ZXJyLnN0YXR1c0NvZGV9KWAsXG4gICAgICAgICAgKSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG11dGF0aW9uS2V5OiBrZXlzKCkuZGF0YSgpLm11dGF0aW9uKFwiZGVsZXRlTWFueVwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgLi4ubXV0YXRpb25PcHRpb25zLFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLm11dGF0aW9uT3B0aW9ucz8ubWV0YSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VEZWxldGVNYW55XCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHsgZWxhcHNlZFRpbWUgfSA9IHVzZUxvYWRpbmdPdmVydGltZSh7XG4gICAgaXNMb2FkaW5nOiBtdXRhdGlvbi5pc0xvYWRpbmcsXG4gICAgaW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8uaW50ZXJ2YWwsXG4gICAgb25JbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5vbkludGVydmFsLFxuICB9KTtcblxuICByZXR1cm4geyAuLi5tdXRhdGlvbiwgb3ZlcnRpbWU6IHsgZWxhcHNlZFRpbWUgfSB9O1xufTtcbiIsImltcG9ydCB7IHBpY2tOb3REZXByZWNhdGVkIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9pbmRleFwiO1xuaW1wb3J0IHsgdXNlRGF0YVByb3ZpZGVyLCB1c2VSZXNvdXJjZSB9IGZyb20gXCJAaG9va3NcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUFwaVVybCA9IChkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgZGF0YVByb3ZpZGVyID0gdXNlRGF0YVByb3ZpZGVyKCk7XG4gIGNvbnN0IHsgcmVzb3VyY2UgfSA9IHVzZVJlc291cmNlKCk7XG5cbiAgY29uc3QgeyBnZXRBcGlVcmwgfSA9IGRhdGFQcm92aWRlcihcbiAgICBkYXRhUHJvdmlkZXJOYW1lID8/XG4gICAgICBwaWNrTm90RGVwcmVjYXRlZChyZXNvdXJjZT8ubWV0YSwgcmVzb3VyY2U/Lm9wdGlvbnMpPy5kYXRhUHJvdmlkZXJOYW1lLFxuICApO1xuXG4gIHJldHVybiBnZXRBcGlVcmwoKTtcbn07XG4iLCJpbXBvcnQgeyBnZXRYUmF5IH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtaW50ZXJuYWxcIjtcbmltcG9ydCB7XG4gIHR5cGUgUXVlcnlPYnNlcnZlclJlc3VsdCxcbiAgdHlwZSBVc2VRdWVyeU9wdGlvbnMsXG4gIHVzZVF1ZXJ5LFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB7XG4gIHBpY2tOb3REZXByZWNhdGVkLFxuICB1c2VBY3RpdmVBdXRoUHJvdmlkZXIsXG4gIHByZXBhcmVRdWVyeUNvbnRleHQsXG59IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuaW1wb3J0IHtcbiAgdXNlRGF0YVByb3ZpZGVyLFxuICB1c2VIYW5kbGVOb3RpZmljYXRpb24sXG4gIHVzZUtleXMsXG4gIHVzZU1ldGEsXG4gIHVzZU9uRXJyb3IsXG4gIHVzZVRyYW5zbGF0ZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VSZWNvcmQsXG4gIENydWRGaWx0ZXIsXG4gIENydWRTb3J0LFxuICBDdXN0b21SZXNwb25zZSxcbiAgSHR0cEVycm9yLFxuICBNZXRhUXVlcnksXG4gIFByZXR0aWZ5LFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvbm90aWZpY2F0aW9uL3R5cGVzXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZU9wdGlvbnNQcm9wcyxcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlLFxuICB1c2VMb2FkaW5nT3ZlcnRpbWUsXG59IGZyb20gXCIuLi91c2VMb2FkaW5nT3ZlcnRpbWVcIjtcblxuaW50ZXJmYWNlIFVzZUN1c3RvbUNvbmZpZzxUUXVlcnksIFRQYXlsb2FkPiB7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBgc29ydGAgaXMgZGVwcmVjYXRlZCwgdXNlIGBzb3J0ZXJzYCBpbnN0ZWFkLlxuICAgKi9cbiAgc29ydD86IENydWRTb3J0W107XG4gIHNvcnRlcnM/OiBDcnVkU29ydFtdO1xuICBmaWx0ZXJzPzogQ3J1ZEZpbHRlcltdO1xuICBxdWVyeT86IFRRdWVyeTtcbiAgcGF5bG9hZD86IFRQYXlsb2FkO1xuICBoZWFkZXJzPzoge307XG59XG5cbmV4cG9ydCB0eXBlIFVzZUN1c3RvbVByb3BzPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBUUXVlcnksIFRQYXlsb2FkLCBURGF0YT4gPSB7XG4gIC8qKlxuICAgKiByZXF1ZXN0J3MgVVJMXG4gICAqL1xuICB1cmw6IHN0cmluZztcbiAgLyoqXG4gICAqIHJlcXVlc3QncyBtZXRob2QgKGBHRVRgLCBgUE9TVGAsIGV0Yy4pXG4gICAqL1xuICBtZXRob2Q6IFwiZ2V0XCIgfCBcImRlbGV0ZVwiIHwgXCJoZWFkXCIgfCBcIm9wdGlvbnNcIiB8IFwicG9zdFwiIHwgXCJwdXRcIiB8IFwicGF0Y2hcIjtcbiAgLyoqXG4gICAqIFRoZSBjb25maWcgb2YgeW91ciByZXF1ZXN0LiBZb3UgY2FuIHNlbmQgaGVhZGVycywgcGF5bG9hZCwgcXVlcnksIGZpbHRlcnMgYW5kIHNvcnRlcnMgdXNpbmcgdGhpcyBmaWVsZFxuICAgKi9cbiAgY29uZmlnPzogVXNlQ3VzdG9tQ29uZmlnPFRRdWVyeSwgVFBheWxvYWQ+O1xuICAvKipcbiAgICogcmVhY3QtcXVlcnkncyBbdXNlUXVlcnldKGh0dHBzOi8vdGFuc3RhY2suY29tL3F1ZXJ5L3Y0L2RvY3MvcmVmZXJlbmNlL3VzZVF1ZXJ5KSBvcHRpb25zXCJcbiAgICovXG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxcbiAgICBDdXN0b21SZXNwb25zZTxUUXVlcnlGbkRhdGE+LFxuICAgIFRFcnJvcixcbiAgICBDdXN0b21SZXNwb25zZTxURGF0YT5cbiAgPjtcbiAgLyoqXG4gICAqIG1ldGEgZGF0YSBmb3IgYGRhdGFQcm92aWRlcmBcbiAgICovXG4gIG1ldGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBtZXRhIGRhdGEgZm9yIGBkYXRhUHJvdmlkZXJgXG4gICAqIEBkZXByZWNhdGVkIGBtZXRhRGF0YWAgaXMgZGVwcmVjYXRlZCB3aXRoIHJlZmluZUA0LCByZWZpbmUgd2lsbCBwYXNzIGBtZXRhYCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGBtZXRhRGF0YWAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBtZXRhRGF0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgYGRhdGFQcm92aWRlcmAsIHlvdSBzaG91bGQgdXNlIHRoZSBgZGF0YVByb3ZpZGVyTmFtZWAgdGhhdCB5b3Ugd2lsbCB1c2UuXG4gICAqL1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xufSAmIFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbjxcbiAgQ3VzdG9tUmVzcG9uc2U8VERhdGE+LFxuICBURXJyb3IsXG4gIFByZXR0aWZ5PFVzZUN1c3RvbUNvbmZpZzxUUXVlcnksIFRQYXlsb2FkPiAmIE1ldGFRdWVyeT5cbj4gJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHM7XG5cbi8qKlxuICogYHVzZUN1c3RvbWAgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGByZWFjdC1xdWVyeWAncyB7QGxpbmsgaHR0cHM6Ly9yZWFjdC1xdWVyeS50YW5zdGFjay5jb20vZ3VpZGVzL3F1ZXJpZXMgYHVzZVF1ZXJ5YH0gdXNlZCBmb3IgY3VzdG9tIHJlcXVlc3RzLlxuICpcbiAqIEl0IHVzZXMgdGhlIGBjdXN0b21gIG1ldGhvZCBmcm9tIHRoZSBgZGF0YVByb3ZpZGVyYCB3aGljaCBpcyBwYXNzZWQgdG8gYDxSZWZpbmU+YC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvZGF0YS91c2VDdXN0b219IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBUUXVlcnlGbkRhdGEgLSBSZXN1bHQgZGF0YSByZXR1cm5lZCBieSB0aGUgcXVlcnkgZnVuY3Rpb24uIEV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBURXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjaHR0cGVycm9yIGBIdHRwRXJyb3JgfVxuICogQHR5cGVQYXJhbSBUUXVlcnkgLSBWYWx1ZXMgZm9yIHF1ZXJ5IHBhcmFtc1xuICogQHR5cGVQYXJhbSBUUGF5bG9hZCAtIFZhbHVlcyBmb3IgcGFyYW1zXG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIGBzZWxlY3RgIGZ1bmN0aW9uLiBFeHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH0uIERlZmF1bHRzIHRvIGBUUXVlcnlGbkRhdGFgXG4gKlxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VDdXN0b20gPSA8XG4gIFRRdWVyeUZuRGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFRRdWVyeSA9IHVua25vd24sXG4gIFRQYXlsb2FkID0gdW5rbm93bixcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gVFF1ZXJ5Rm5EYXRhLFxuPih7XG4gIHVybCxcbiAgbWV0aG9kLFxuICBjb25maWcsXG4gIHF1ZXJ5T3B0aW9ucyxcbiAgc3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgZXJyb3JOb3RpZmljYXRpb24sXG4gIG1ldGEsXG4gIG1ldGFEYXRhLFxuICBkYXRhUHJvdmlkZXJOYW1lLFxuICBvdmVydGltZU9wdGlvbnMsXG59OiBVc2VDdXN0b21Qcm9wczxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBURXJyb3IsXG4gIFRRdWVyeSxcbiAgVFBheWxvYWQsXG4gIFREYXRhXG4+KTogUXVlcnlPYnNlcnZlclJlc3VsdDxDdXN0b21SZXNwb25zZTxURGF0YT4sIFRFcnJvcj4gJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlID0+IHtcbiAgY29uc3QgZGF0YVByb3ZpZGVyID0gdXNlRGF0YVByb3ZpZGVyKCk7XG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuICBjb25zdCB7IG11dGF0ZTogY2hlY2tFcnJvciB9ID0gdXNlT25FcnJvcih7XG4gICAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBCb29sZWFuKGF1dGhQcm92aWRlcj8uaXNMZWdhY3kpLFxuICB9KTtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUhhbmRsZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCBnZXRNZXRhID0gdXNlTWV0YSgpO1xuICBjb25zdCB7IGtleXMsIHByZWZlckxlZ2FjeUtleXMgfSA9IHVzZUtleXMoKTtcblxuICBjb25zdCBwcmVmZXJyZWRNZXRhID0gcGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpO1xuXG4gIGNvbnN0IHsgY3VzdG9tIH0gPSBkYXRhUHJvdmlkZXIoZGF0YVByb3ZpZGVyTmFtZSk7XG5cbiAgY29uc3QgY29tYmluZWRNZXRhID0gZ2V0TWV0YSh7IG1ldGE6IHByZWZlcnJlZE1ldGEgfSk7XG5cbiAgaWYgKGN1c3RvbSkge1xuICAgIGNvbnN0IHF1ZXJ5UmVzcG9uc2UgPSB1c2VRdWVyeTxcbiAgICAgIEN1c3RvbVJlc3BvbnNlPFRRdWVyeUZuRGF0YT4sXG4gICAgICBURXJyb3IsXG4gICAgICBDdXN0b21SZXNwb25zZTxURGF0YT5cbiAgICA+KHtcbiAgICAgIHF1ZXJ5S2V5OiBrZXlzKClcbiAgICAgICAgLmRhdGEoZGF0YVByb3ZpZGVyTmFtZSlcbiAgICAgICAgLm11dGF0aW9uKFwiY3VzdG9tXCIpXG4gICAgICAgIC5wYXJhbXMoe1xuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgIC4uLihwcmVmZXJyZWRNZXRhIHx8IHt9KSxcbiAgICAgICAgfSlcbiAgICAgICAgLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgIHF1ZXJ5Rm46IChjb250ZXh0KSA9PlxuICAgICAgICBjdXN0b208VFF1ZXJ5Rm5EYXRhPih7XG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgLi4uY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgcXVlcnlDb250ZXh0OiBwcmVwYXJlUXVlcnlDb250ZXh0KGNvbnRleHQpLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0YURhdGE6IHtcbiAgICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgIHF1ZXJ5Q29udGV4dDogcHJlcGFyZVF1ZXJ5Q29udGV4dChjb250ZXh0KSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIC4uLnF1ZXJ5T3B0aW9ucyxcbiAgICAgIG9uU3VjY2VzczogKGRhdGEpID0+IHtcbiAgICAgICAgcXVlcnlPcHRpb25zPy5vblN1Y2Nlc3M/LihkYXRhKTtcblxuICAgICAgICBjb25zdCBub3RpZmljYXRpb25Db25maWcgPVxuICAgICAgICAgIHR5cGVvZiBzdWNjZXNzTm90aWZpY2F0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3VjY2Vzc05vdGlmaWNhdGlvbihkYXRhLCB7XG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogc3VjY2Vzc05vdGlmaWNhdGlvbjtcblxuICAgICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnKTtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yOiAoZXJyOiBURXJyb3IpID0+IHtcbiAgICAgICAgY2hlY2tFcnJvcihlcnIpO1xuICAgICAgICBxdWVyeU9wdGlvbnM/Lm9uRXJyb3I/LihlcnIpO1xuXG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgICAgdHlwZW9mIGVycm9yTm90aWZpY2F0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gZXJyb3JOb3RpZmljYXRpb24oZXJyLCB7XG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogZXJyb3JOb3RpZmljYXRpb247XG5cbiAgICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZywge1xuICAgICAgICAgIGtleTogYCR7bWV0aG9kfS1ub3RpZmljYXRpb25gLFxuICAgICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICAgIFwibm90aWZpY2F0aW9ucy5lcnJvclwiLFxuICAgICAgICAgICAgeyBzdGF0dXNDb2RlOiBlcnIuc3RhdHVzQ29kZSB9LFxuICAgICAgICAgICAgYEVycm9yIChzdGF0dXMgY29kZTogJHtlcnIuc3RhdHVzQ29kZX0pYCxcbiAgICAgICAgICApLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgLi4ucXVlcnlPcHRpb25zPy5tZXRhLFxuICAgICAgICAuLi5nZXRYUmF5KFwidXNlQ3VzdG9tXCIsIHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zdCB7IGVsYXBzZWRUaW1lIH0gPSB1c2VMb2FkaW5nT3ZlcnRpbWUoe1xuICAgICAgaXNMb2FkaW5nOiBxdWVyeVJlc3BvbnNlLmlzRmV0Y2hpbmcsXG4gICAgICBpbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5pbnRlcnZhbCxcbiAgICAgIG9uSW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8ub25JbnRlcnZhbCxcbiAgICB9KTtcblxuICAgIHJldHVybiB7IC4uLnF1ZXJ5UmVzcG9uc2UsIG92ZXJ0aW1lOiB7IGVsYXBzZWRUaW1lIH0gfTtcbiAgfVxuICB0aHJvdyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCBjdXN0b20gb24gZGF0YSBwcm92aWRlci5cIik7XG59O1xuIiwiaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZU11dGF0aW9uT3B0aW9ucyxcbiAgdHlwZSBVc2VNdXRhdGlvblJlc3VsdCxcbiAgdXNlTXV0YXRpb24sXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgcGlja05vdERlcHJlY2F0ZWQsIHVzZUFjdGl2ZUF1dGhQcm92aWRlciB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuaW1wb3J0IHtcbiAgdXNlRGF0YVByb3ZpZGVyLFxuICB1c2VIYW5kbGVOb3RpZmljYXRpb24sXG4gIHVzZUtleXMsXG4gIHVzZU1ldGEsXG4gIHVzZU9uRXJyb3IsXG4gIHVzZVRyYW5zbGF0ZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VSZWNvcmQsXG4gIENyZWF0ZVJlc3BvbnNlLFxuICBIdHRwRXJyb3IsXG4gIE1ldGFRdWVyeSxcbiAgUHJldHRpZnksXG59IGZyb20gXCIuLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9ub3RpZmljYXRpb24vdHlwZXNcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lT3B0aW9uc1Byb3BzLFxuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGUsXG4gIHVzZUxvYWRpbmdPdmVydGltZSxcbn0gZnJvbSBcIi4uL3VzZUxvYWRpbmdPdmVydGltZVwiO1xuXG5pbnRlcmZhY2UgVXNlQ3VzdG9tTXV0YXRpb25Db25maWcge1xuICBoZWFkZXJzPzoge307XG59XG5cbnR5cGUgdXNlQ3VzdG9tTXV0YXRpb25QYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4gPSB7XG4gIHVybDogc3RyaW5nO1xuICBtZXRob2Q6IFwicG9zdFwiIHwgXCJwdXRcIiB8IFwicGF0Y2hcIiB8IFwiZGVsZXRlXCI7XG4gIHZhbHVlczogVFZhcmlhYmxlcztcbiAgLyoqXG4gICAqIE1ldGEgZGF0YSBmb3IgYGRhdGFQcm92aWRlcmBcbiAgICovXG4gIG1ldGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBNZXRhIGRhdGEgZm9yIGBkYXRhUHJvdmlkZXJgXG4gICAqIEBkZXByZWNhdGVkIGBtZXRhRGF0YWAgaXMgZGVwcmVjYXRlZCB3aXRoIHJlZmluZUA0LCByZWZpbmUgd2lsbCBwYXNzIGBtZXRhYCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGBtZXRhRGF0YWAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBtZXRhRGF0YT86IE1ldGFRdWVyeTtcbiAgZGF0YVByb3ZpZGVyTmFtZT86IHN0cmluZztcbiAgY29uZmlnPzogVXNlQ3VzdG9tTXV0YXRpb25Db25maWc7XG59ICYgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uPFxuICBDcmVhdGVSZXNwb25zZTxURGF0YT4sXG4gIFRFcnJvcixcbiAgUHJldHRpZnk8VXNlQ3VzdG9tTXV0YXRpb25Db25maWcgJiBNZXRhUXVlcnk+XG4+O1xuXG5leHBvcnQgdHlwZSBVc2VDdXN0b21NdXRhdGlvblJldHVyblR5cGU8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPiA9IFVzZU11dGF0aW9uUmVzdWx0PFxuICBDcmVhdGVSZXNwb25zZTxURGF0YT4sXG4gIFRFcnJvcixcbiAgdXNlQ3VzdG9tTXV0YXRpb25QYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4sXG4gIHVua25vd25cbj47XG5cbmV4cG9ydCB0eXBlIFVzZUN1c3RvbU11dGF0aW9uUHJvcHM8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVFZhcmlhYmxlcyA9IHt9LFxuPiA9IHtcbiAgbXV0YXRpb25PcHRpb25zPzogT21pdDxcbiAgICBVc2VNdXRhdGlvbk9wdGlvbnM8XG4gICAgICBDcmVhdGVSZXNwb25zZTxURGF0YT4sXG4gICAgICBURXJyb3IsXG4gICAgICB1c2VDdXN0b21NdXRhdGlvblBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICAgIHVua25vd25cbiAgICA+LFxuICAgIFwibXV0YXRpb25GblwiIHwgXCJvbkVycm9yXCIgfCBcIm9uU3VjY2Vzc1wiXG4gID47XG59ICYgVXNlTG9hZGluZ092ZXJ0aW1lT3B0aW9uc1Byb3BzO1xuXG4vKipcbiAqIGB1c2VDdXN0b21NdXRhdGlvbmAgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGByZWFjdC1xdWVyeWAncyB7QGxpbmsgaHR0cHM6Ly9yZWFjdC1xdWVyeS50YW5zdGFjay5jb20vcmVmZXJlbmNlL3VzZU11dGF0aW9uIGB1c2VNdXRhdGlvbmB9IGZvciBjcmVhdGUgbXV0YXRpb25zLlxuICpcbiAqIEl0IHVzZXMgdGhlIGBjdXN0b21gIG1ldGhvZCBmcm9tIHRoZSBgZGF0YVByb3ZpZGVyYCB3aGljaCBpcyBwYXNzZWQgdG8gYDxSZWZpbmU+YC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvZGF0YS91c2VDdXN0b21NdXRhdGlvbn0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgb2YgdGhlIHF1ZXJ5IGV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBURXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMvI2h0dHBlcnJvciBgSHR0cEVycm9yYH1cbiAqIEB0eXBlUGFyYW0gVFZhcmlhYmxlcyAtIFZhbHVlcyBmb3IgbXV0YXRpb24gZnVuY3Rpb25cbiAqXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZUN1c3RvbU11dGF0aW9uID0gPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFRWYXJpYWJsZXMgPSB7fSxcbj4oe1xuICBtdXRhdGlvbk9wdGlvbnMsXG4gIG92ZXJ0aW1lT3B0aW9ucyxcbn06IFVzZUN1c3RvbU11dGF0aW9uUHJvcHM8XG4gIFREYXRhLFxuICBURXJyb3IsXG4gIFRWYXJpYWJsZXNcbj4gPSB7fSk6IFVzZUN1c3RvbU11dGF0aW9uUmV0dXJuVHlwZTxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPiAmXG4gIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGUgPT4ge1xuICBjb25zdCBhdXRoUHJvdmlkZXIgPSB1c2VBY3RpdmVBdXRoUHJvdmlkZXIoKTtcbiAgY29uc3QgeyBtdXRhdGU6IGNoZWNrRXJyb3IgfSA9IHVzZU9uRXJyb3Ioe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbihhdXRoUHJvdmlkZXI/LmlzTGVnYWN5KSxcbiAgfSk7XG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUhhbmRsZU5vdGlmaWNhdGlvbigpO1xuICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VEYXRhUHJvdmlkZXIoKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG4gIGNvbnN0IHsga2V5cywgcHJlZmVyTGVnYWN5S2V5cyB9ID0gdXNlS2V5cygpO1xuXG4gIGNvbnN0IG11dGF0aW9uID0gdXNlTXV0YXRpb248XG4gICAgQ3JlYXRlUmVzcG9uc2U8VERhdGE+LFxuICAgIFRFcnJvcixcbiAgICB1c2VDdXN0b21NdXRhdGlvblBhcmFtczxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPixcbiAgICB1bmtub3duXG4gID4oXG4gICAgKHtcbiAgICAgIHVybCxcbiAgICAgIG1ldGhvZCxcbiAgICAgIHZhbHVlcyxcbiAgICAgIG1ldGEsXG4gICAgICBtZXRhRGF0YSxcbiAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICBjb25maWcsXG4gICAgfTogdXNlQ3VzdG9tTXV0YXRpb25QYXJhbXM8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4pID0+IHtcbiAgICAgIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoe1xuICAgICAgICBtZXRhOiBwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSksXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgeyBjdXN0b20gfSA9IGRhdGFQcm92aWRlcihkYXRhUHJvdmlkZXJOYW1lKTtcblxuICAgICAgaWYgKGN1c3RvbSkge1xuICAgICAgICByZXR1cm4gY3VzdG9tPFREYXRhPih7XG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICBwYXlsb2FkOiB2YWx1ZXMsXG4gICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgIG1ldGFEYXRhOiBjb21iaW5lZE1ldGEsXG4gICAgICAgICAgaGVhZGVyczogeyAuLi5jb25maWc/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IEVycm9yKFwiTm90IGltcGxlbWVudGVkIGN1c3RvbSBvbiBkYXRhIHByb3ZpZGVyLlwiKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIG9uU3VjY2VzczogKFxuICAgICAgICBkYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgc3VjY2Vzc05vdGlmaWNhdGlvbjogc3VjY2Vzc05vdGlmaWNhdGlvbkZyb21Qcm9wLFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBtZXRhLFxuICAgICAgICAgIG1ldGFEYXRhLFxuICAgICAgICB9LFxuICAgICAgKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgICAgdHlwZW9mIHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IHN1Y2Nlc3NOb3RpZmljYXRpb25Gcm9tUHJvcChkYXRhLCB7XG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgICAgIC4uLihwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSkgfHwge30pLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiBzdWNjZXNzTm90aWZpY2F0aW9uRnJvbVByb3A7XG5cbiAgICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZyk7XG4gICAgICB9LFxuICAgICAgb25FcnJvcjogKFxuICAgICAgICBlcnI6IFRFcnJvcixcbiAgICAgICAge1xuICAgICAgICAgIGVycm9yTm90aWZpY2F0aW9uOiBlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wLFxuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgbWV0YSxcbiAgICAgICAgICBtZXRhRGF0YSxcbiAgICAgICAgfSxcbiAgICAgICkgPT4ge1xuICAgICAgICBjaGVja0Vycm9yKGVycik7XG5cbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uQ29uZmlnID1cbiAgICAgICAgICB0eXBlb2YgZXJyb3JOb3RpZmljYXRpb25Gcm9tUHJvcCA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IGVycm9yTm90aWZpY2F0aW9uRnJvbVByb3AoZXJyLCB7XG4gICAgICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgICAgIC4uLihwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSkgfHwge30pLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiBlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wO1xuXG4gICAgICAgIGhhbmRsZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb25Db25maWcsIHtcbiAgICAgICAgICBrZXk6IGAke21ldGhvZH0tbm90aWZpY2F0aW9uYCxcbiAgICAgICAgICBtZXNzYWdlOiB0cmFuc2xhdGUoXG4gICAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZXJyb3JcIixcbiAgICAgICAgICAgIHsgc3RhdHVzQ29kZTogZXJyLnN0YXR1c0NvZGUgfSxcbiAgICAgICAgICAgIGBFcnJvciAoc3RhdHVzIGNvZGU6ICR7ZXJyLnN0YXR1c0NvZGV9KWAsXG4gICAgICAgICAgKSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBtdXRhdGlvbktleToga2V5cygpXG4gICAgICAgIC5kYXRhKClcbiAgICAgICAgLm11dGF0aW9uKFwiY3VzdG9tTXV0YXRpb25cIilcbiAgICAgICAgLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgIC4uLm11dGF0aW9uT3B0aW9ucyxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgLi4ubXV0YXRpb25PcHRpb25zPy5tZXRhLFxuICAgICAgICAuLi5nZXRYUmF5KFwidXNlQ3VzdG9tTXV0YXRpb25cIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICB9LFxuICAgIH0sXG4gICk7XG5cbiAgY29uc3QgeyBlbGFwc2VkVGltZSB9ID0gdXNlTG9hZGluZ092ZXJ0aW1lKHtcbiAgICBpc0xvYWRpbmc6IG11dGF0aW9uLmlzTG9hZGluZyxcbiAgICBpbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5pbnRlcnZhbCxcbiAgICBvbkludGVydmFsOiBvdmVydGltZU9wdGlvbnM/Lm9uSW50ZXJ2YWwsXG4gIH0pO1xuXG4gIHJldHVybiB7IC4uLm11dGF0aW9uLCBvdmVydGltZTogeyBlbGFwc2VkVGltZSB9IH07XG59O1xuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgRGF0YUNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2RhdGFcIjtcbmltcG9ydCB7IHR5cGUgRGF0YVByb3ZpZGVyLCBJRGF0YUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuZXhwb3J0IGNvbnN0IHVzZURhdGFQcm92aWRlciA9ICgpOiAoKFxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGBkYXRhIHByb3ZpZGVyYCB5b3Ugd2FudCB0byBhY2Nlc3NcbiAgICovXG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmcsXG4pID0+IERhdGFQcm92aWRlcikgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChEYXRhQ29udGV4dCk7XG5cbiAgY29uc3QgaGFuZGxlRGF0YVByb3ZpZGVyID0gdXNlQ2FsbGJhY2soXG4gICAgKGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChkYXRhUHJvdmlkZXJOYW1lKSB7XG4gICAgICAgIGNvbnN0IGRhdGFQcm92aWRlciA9IGNvbnRleHQ/LltkYXRhUHJvdmlkZXJOYW1lXTtcbiAgICAgICAgaWYgKCFkYXRhUHJvdmlkZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHtkYXRhUHJvdmlkZXJOYW1lfVwiIERhdGEgcHJvdmlkZXIgbm90IGZvdW5kYCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YVByb3ZpZGVyICYmICFjb250ZXh0Py5kZWZhdWx0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJJZiB5b3UgaGF2ZSBtdWx0aXBsZSBkYXRhIHByb3ZpZGVycywgeW91IG11c3QgcHJvdmlkZSBkZWZhdWx0IGRhdGEgcHJvdmlkZXIgcHJvcGVydHlcIixcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHRbZGF0YVByb3ZpZGVyTmFtZV07XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZXh0LmRlZmF1bHQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuZGVmYXVsdDtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gXCJkZWZhdWx0XCIgZGF0YSBwcm92aWRlci4gUGxlYXNlIHBhc3MgZGF0YVByb3ZpZGVyTmFtZS5gLFxuICAgICAgKTtcbiAgICB9LFxuICAgIFtjb250ZXh0XSxcbiAgKTtcblxuICByZXR1cm4gaGFuZGxlRGF0YVByb3ZpZGVyO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB0eXBlIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB0eXBlIHsgRGF0YVByb3ZpZGVyLCBEYXRhUHJvdmlkZXJzLCBJRGF0YUNvbnRleHQgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdERhdGFQcm92aWRlcjogRGF0YVByb3ZpZGVycyA9IHtcbiAgZGVmYXVsdDoge30gYXMgRGF0YVByb3ZpZGVyLFxufTtcblxuZXhwb3J0IGNvbnN0IERhdGFDb250ZXh0ID1cbiAgUmVhY3QuY3JlYXRlQ29udGV4dDxJRGF0YUNvbnRleHQ+KGRlZmF1bHREYXRhUHJvdmlkZXIpO1xuXG50eXBlIFByb3BzID0gUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBkYXRhUHJvdmlkZXI/OiBEYXRhUHJvdmlkZXIgfCBEYXRhUHJvdmlkZXJzO1xufT47XG5cbmV4cG9ydCBjb25zdCBEYXRhQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GQzxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgZGF0YVByb3ZpZGVyLFxufSkgPT4ge1xuICBsZXQgcHJvdmlkZXJWYWx1ZSA9IGRlZmF1bHREYXRhUHJvdmlkZXI7XG5cbiAgaWYgKGRhdGFQcm92aWRlcikge1xuICAgIGlmIChcbiAgICAgICEoXCJkZWZhdWx0XCIgaW4gZGF0YVByb3ZpZGVyKSAmJlxuICAgICAgKFwiZ2V0TGlzdFwiIGluIGRhdGFQcm92aWRlciB8fCBcImdldE9uZVwiIGluIGRhdGFQcm92aWRlcilcbiAgICApIHtcbiAgICAgIHByb3ZpZGVyVmFsdWUgPSB7XG4gICAgICAgIGRlZmF1bHQ6IGRhdGFQcm92aWRlcixcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3ZpZGVyVmFsdWUgPSBkYXRhUHJvdmlkZXI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8RGF0YUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb3ZpZGVyVmFsdWV9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRGF0YUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIEluZmluaXRlRGF0YSxcbiAgdHlwZSBJbmZpbml0ZVF1ZXJ5T2JzZXJ2ZXJSZXN1bHQsXG4gIHR5cGUgVXNlSW5maW5pdGVRdWVyeU9wdGlvbnMsXG4gIHVzZUluZmluaXRlUXVlcnksXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHtcbiAgZ2V0TmV4dFBhZ2VQYXJhbSxcbiAgZ2V0UHJldmlvdXNQYWdlUGFyYW0sXG4gIGhhbmRsZVBhZ2luYXRpb25QYXJhbXMsXG4gIHBpY2tEYXRhUHJvdmlkZXIsXG4gIHBpY2tOb3REZXByZWNhdGVkLFxuICBwcmVwYXJlUXVlcnlDb250ZXh0LFxuICB1c2VBY3RpdmVBdXRoUHJvdmlkZXIsXG59IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuaW1wb3J0IHtcbiAgdXNlRGF0YVByb3ZpZGVyLFxuICB1c2VIYW5kbGVOb3RpZmljYXRpb24sXG4gIHVzZUtleXMsXG4gIHVzZU1ldGEsXG4gIHVzZU9uRXJyb3IsXG4gIHVzZVJlc291cmNlLFxuICB1c2VSZXNvdXJjZVN1YnNjcmlwdGlvbixcbiAgdXNlVHJhbnNsYXRlLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQmFzZVJlY29yZCxcbiAgQ3J1ZEZpbHRlcixcbiAgQ3J1ZFNvcnQsXG4gIEdldExpc3RSZXNwb25zZSxcbiAgSHR0cEVycm9yLFxuICBNZXRhUXVlcnksXG4gIFBhZ2luYXRpb24sXG4gIFByZXR0aWZ5LFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBMaXZlTW9kZVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2xpdmUvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMsXG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSxcbiAgdXNlTG9hZGluZ092ZXJ0aW1lLFxufSBmcm9tIFwiLi4vdXNlTG9hZGluZ092ZXJ0aW1lXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlSW5maW5pdGVMaXN0Q29uZmlnIHtcbiAgcGFnaW5hdGlvbj86IFBhZ2luYXRpb247XG4gIGhhc1BhZ2luYXRpb24/OiBib29sZWFuO1xuICBzb3J0PzogQ3J1ZFNvcnRbXTtcbiAgZmlsdGVycz86IENydWRGaWx0ZXJbXTtcbn1cblxudHlwZSBCYXNlSW5maW5pdGVMaXN0UHJvcHMgPSB7XG4gIC8qKlxuICAgKiAgTWV0YWRhdGEgcXVlcnkgZm9yIGBkYXRhUHJvdmlkZXJgXG4gICAqL1xuICBtZXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogIE1ldGFkYXRhIHF1ZXJ5IGZvciBgZGF0YVByb3ZpZGVyYFxuICAgKiAgQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICovXG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgcGFnaW5hdGlvbiwgc29ydGluZyBhbmQgZmlsdGVyaW5nXG4gICAqIEB0eXBlIFtgdXNlSW5maW5pdGVMaXN0Q29uZmlnYF0oL2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2RhdGEvdXNlSW5maW5pdGVMaXN0LyNjb25maWctcGFyYW1ldGVycylcbiAgICogQGRlcHJlY2F0ZWQgYGNvbmZpZ2AgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gVXNlIGBwYWdpbmF0aW9uYCwgYGhhc1BhZ2luYXRpb25gLCBgc29ydGVyc2AgYW5kIGBmaWx0ZXJzYCBpbnN0ZWFkLlxuICAgKi9cbiAgY29uZmlnPzogVXNlSW5maW5pdGVMaXN0Q29uZmlnO1xuICAvKipcbiAgICogUGFnaW5hdGlvbiBwcm9wZXJ0aWVzXG4gICAqL1xuICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbjtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdXNlIHNlcnZlci1zaWRlIHBhZ2luYXRpb24gb3Igbm90XG4gICAqIEBkZXByZWNhdGVkIGBoYXNQYWdpbmF0aW9uYCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiBVc2UgYHBhZ2luYXRpb24ubW9kZWAgaW5zdGVhZC5cbiAgICovXG4gIGhhc1BhZ2luYXRpb24/OiBib29sZWFuO1xuICAvKipcbiAgICogU29ydGVyIHBhcmFtZXRlcnNcbiAgICovXG4gIHNvcnRlcnM/OiBDcnVkU29ydFtdO1xuICAvKipcbiAgICogRmlsdGVyIHBhcmFtZXRlcnNcbiAgICovXG4gIGZpbHRlcnM/OiBDcnVkRmlsdGVyW107XG4gIC8qKlxuICAgKiBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGBkYXRhUHJvdmlkZXJgLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYGRhdGFQcm92aWRlck5hbWVgIHRoYXQgeW91IHdpbGwgdXNlXG4gICAqL1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVXNlSW5maW5pdGVMaXN0UHJvcHM8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhPiA9IHtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFRhbnN0YWNrIFF1ZXJ5J3MgW3VzZUluZmluaXRlUXVlcnldKGh0dHBzOi8vdGFuc3RhY2suY29tL3F1ZXJ5L3Y0L2RvY3MvcmVhY3QvcmVmZXJlbmNlL3VzZUluZmluaXRlUXVlcnkpIG9wdGlvbnNcbiAgICovXG4gIHF1ZXJ5T3B0aW9ucz86IFVzZUluZmluaXRlUXVlcnlPcHRpb25zPFxuICAgIEdldExpc3RSZXNwb25zZTxUUXVlcnlGbkRhdGE+LFxuICAgIFRFcnJvcixcbiAgICBHZXRMaXN0UmVzcG9uc2U8VERhdGE+XG4gID47XG59ICYgQmFzZUluZmluaXRlTGlzdFByb3BzICZcbiAgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uPFxuICAgIEluZmluaXRlRGF0YTxHZXRMaXN0UmVzcG9uc2U8VERhdGE+PixcbiAgICBURXJyb3IsXG4gICAgUHJldHRpZnk8QmFzZUluZmluaXRlTGlzdFByb3BzPlxuICA+ICZcbiAgTGl2ZU1vZGVQcm9wcyAmXG4gIFVzZUxvYWRpbmdPdmVydGltZU9wdGlvbnNQcm9wcztcblxuLyoqXG4gKiBgdXNlSW5maW5pdGVMaXN0YCBpcyBhIG1vZGlmaWVkIHZlcnNpb24gb2YgYHJlYWN0LXF1ZXJ5YCdzIHtAbGluayBodHRwczovL3RhbnN0YWNrLmNvbS9xdWVyeS9sYXRlc3QvZG9jcy9yZWFjdC9ndWlkZXMvaW5maW5pdGUtcXVlcmllcyBgdXNlSW5maW5pdGVRdWVyeWB9IHVzZWQgZm9yIHJldHJpZXZpbmcgaXRlbXMgZnJvbSBhIGByZXNvdXJjZWAgd2l0aCBwYWdpbmF0aW9uLCBzb3J0LCBhbmQgZmlsdGVyIGNvbmZpZ3VyYXRpb25zLlxuICpcbiAqIEl0IHVzZXMgdGhlIGBnZXRMaXN0YCBtZXRob2QgYXMgdGhlIHF1ZXJ5IGZ1bmN0aW9uIGZyb20gdGhlIGBkYXRhUHJvdmlkZXJgIHdoaWNoIGlzIHBhc3NlZCB0byBgPFJlZmluZT5gLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZUluZmluaXRlTGlzdH0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFRRdWVyeUZuRGF0YSAtIFJlc3VsdCBkYXRhIHJldHVybmVkIGJ5IHRoZSBxdWVyeSBmdW5jdGlvbi4gRXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9XG4gKiBAdHlwZVBhcmFtIFRFcnJvciAtIEN1c3RvbSBlcnJvciBvYmplY3QgdGhhdCBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNodHRwZXJyb3IgYEh0dHBFcnJvcmB9XG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIGBzZWxlY3RgIGZ1bmN0aW9uLiBFeHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH0uIERlZmF1bHRzIHRvIGBUUXVlcnlGbkRhdGFgXG4gKlxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VJbmZpbml0ZUxpc3QgPSA8XG4gIFRRdWVyeUZuRGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IFRRdWVyeUZuRGF0YSxcbj4oe1xuICByZXNvdXJjZTogcmVzb3VyY2VGcm9tUHJvcCxcbiAgY29uZmlnLFxuICBmaWx0ZXJzLFxuICBoYXNQYWdpbmF0aW9uLFxuICBwYWdpbmF0aW9uLFxuICBzb3J0ZXJzLFxuICBxdWVyeU9wdGlvbnMsXG4gIHN1Y2Nlc3NOb3RpZmljYXRpb24sXG4gIGVycm9yTm90aWZpY2F0aW9uLFxuICBtZXRhLFxuICBtZXRhRGF0YSxcbiAgbGl2ZU1vZGUsXG4gIG9uTGl2ZUV2ZW50LFxuICBsaXZlUGFyYW1zLFxuICBkYXRhUHJvdmlkZXJOYW1lLFxuICBvdmVydGltZU9wdGlvbnMsXG59OiBVc2VJbmZpbml0ZUxpc3RQcm9wczxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBURXJyb3IsXG4gIFREYXRhXG4+KTogSW5maW5pdGVRdWVyeU9ic2VydmVyUmVzdWx0PEdldExpc3RSZXNwb25zZTxURGF0YT4sIFRFcnJvcj4gJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZXMsIHJlc291cmNlLCBpZGVudGlmaWVyIH0gPSB1c2VSZXNvdXJjZShyZXNvdXJjZUZyb21Qcm9wKTtcblxuICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VEYXRhUHJvdmlkZXIoKTtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuICBjb25zdCB7IG11dGF0ZTogY2hlY2tFcnJvciB9ID0gdXNlT25FcnJvcih7XG4gICAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBCb29sZWFuKGF1dGhQcm92aWRlcj8uaXNMZWdhY3kpLFxuICB9KTtcbiAgY29uc3QgaGFuZGxlTm90aWZpY2F0aW9uID0gdXNlSGFuZGxlTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG4gIGNvbnN0IHsga2V5cywgcHJlZmVyTGVnYWN5S2V5cyB9ID0gdXNlS2V5cygpO1xuXG4gIGNvbnN0IHBpY2tlZERhdGFQcm92aWRlciA9IHBpY2tEYXRhUHJvdmlkZXIoXG4gICAgaWRlbnRpZmllcixcbiAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgIHJlc291cmNlcyxcbiAgKTtcbiAgY29uc3QgcHJlZmVycmVkTWV0YSA9IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKTtcbiAgY29uc3QgcHJlZmZlcmVkRmlsdGVycyA9IHBpY2tOb3REZXByZWNhdGVkKGZpbHRlcnMsIGNvbmZpZz8uZmlsdGVycyk7XG4gIGNvbnN0IHByZWZmZXJlZFNvcnRlcnMgPSBwaWNrTm90RGVwcmVjYXRlZChzb3J0ZXJzLCBjb25maWc/LnNvcnQpO1xuICBjb25zdCBwcmVmZmVyZWRIYXNQYWdpbmF0aW9uID0gcGlja05vdERlcHJlY2F0ZWQoXG4gICAgaGFzUGFnaW5hdGlvbixcbiAgICBjb25maWc/Lmhhc1BhZ2luYXRpb24sXG4gICk7XG4gIGNvbnN0IHByZWZmZXJlZFBhZ2luYXRpb24gPSBoYW5kbGVQYWdpbmF0aW9uUGFyYW1zKHtcbiAgICBwYWdpbmF0aW9uLFxuICAgIGNvbmZpZ1BhZ2luYXRpb246IGNvbmZpZz8ucGFnaW5hdGlvbixcbiAgICBoYXNQYWdpbmF0aW9uOiBwcmVmZmVyZWRIYXNQYWdpbmF0aW9uLFxuICB9KTtcbiAgY29uc3QgaXNTZXJ2ZXJQYWdpbmF0aW9uID0gcHJlZmZlcmVkUGFnaW5hdGlvbi5tb2RlID09PSBcInNlcnZlclwiO1xuICBjb25zdCBub3RpZmljYXRpb25WYWx1ZXMgPSB7XG4gICAgbWV0YTogcHJlZmVycmVkTWV0YSxcbiAgICBtZXRhRGF0YTogcHJlZmVycmVkTWV0YSxcbiAgICBmaWx0ZXJzOiBwcmVmZmVyZWRGaWx0ZXJzLFxuICAgIGhhc1BhZ2luYXRpb246IGlzU2VydmVyUGFnaW5hdGlvbixcbiAgICBwYWdpbmF0aW9uOiBwcmVmZmVyZWRQYWdpbmF0aW9uLFxuICAgIHNvcnRlcnM6IHByZWZmZXJlZFNvcnRlcnMsXG4gICAgY29uZmlnOiB7XG4gICAgICAuLi5jb25maWcsXG4gICAgICBzb3J0OiBwcmVmZmVyZWRTb3J0ZXJzLFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgaXNFbmFibGVkID1cbiAgICBxdWVyeU9wdGlvbnM/LmVuYWJsZWQgPT09IHVuZGVmaW5lZCB8fCBxdWVyeU9wdGlvbnM/LmVuYWJsZWQgPT09IHRydWU7XG5cbiAgY29uc3QgY29tYmluZWRNZXRhID0gZ2V0TWV0YSh7IHJlc291cmNlLCBtZXRhOiBwcmVmZXJyZWRNZXRhIH0pO1xuXG4gIGNvbnN0IHsgZ2V0TGlzdCB9ID0gZGF0YVByb3ZpZGVyKHBpY2tlZERhdGFQcm92aWRlcik7XG5cbiAgdXNlUmVzb3VyY2VTdWJzY3JpcHRpb24oe1xuICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgIHR5cGVzOiBbXCIqXCJdLFxuICAgIHBhcmFtczoge1xuICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgIHBhZ2luYXRpb246IHByZWZmZXJlZFBhZ2luYXRpb24sXG4gICAgICBoYXNQYWdpbmF0aW9uOiBpc1NlcnZlclBhZ2luYXRpb24sXG4gICAgICBzb3J0OiBwcmVmZmVyZWRTb3J0ZXJzLFxuICAgICAgc29ydGVyczogcHJlZmZlcmVkU29ydGVycyxcbiAgICAgIGZpbHRlcnM6IHByZWZmZXJlZEZpbHRlcnMsXG4gICAgICBzdWJzY3JpcHRpb25UeXBlOiBcInVzZUxpc3RcIixcbiAgICAgIC4uLmxpdmVQYXJhbXMsXG4gICAgfSxcbiAgICBjaGFubmVsOiBgcmVzb3VyY2VzLyR7cmVzb3VyY2UubmFtZX1gLFxuICAgIGVuYWJsZWQ6IGlzRW5hYmxlZCxcbiAgICBsaXZlTW9kZSxcbiAgICBvbkxpdmVFdmVudCxcbiAgICBkYXRhUHJvdmlkZXJOYW1lOiBwaWNrZWREYXRhUHJvdmlkZXIsXG4gICAgbWV0YToge1xuICAgICAgLi4uY29tYmluZWRNZXRhLFxuICAgICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBxdWVyeVJlc3BvbnNlID0gdXNlSW5maW5pdGVRdWVyeTxcbiAgICBHZXRMaXN0UmVzcG9uc2U8VFF1ZXJ5Rm5EYXRhPixcbiAgICBURXJyb3IsXG4gICAgR2V0TGlzdFJlc3BvbnNlPFREYXRhPlxuICA+KHtcbiAgICBxdWVyeUtleToga2V5cygpXG4gICAgICAuZGF0YShwaWNrZWREYXRhUHJvdmlkZXIpXG4gICAgICAucmVzb3VyY2UoaWRlbnRpZmllcilcbiAgICAgIC5hY3Rpb24oXCJpbmZpbml0ZVwiKVxuICAgICAgLnBhcmFtcyh7XG4gICAgICAgIC4uLihwcmVmZXJyZWRNZXRhIHx8IHt9KSxcbiAgICAgICAgZmlsdGVyczogcHJlZmZlcmVkRmlsdGVycyxcbiAgICAgICAgaGFzUGFnaW5hdGlvbjogaXNTZXJ2ZXJQYWdpbmF0aW9uLFxuICAgICAgICAuLi4oaXNTZXJ2ZXJQYWdpbmF0aW9uICYmIHtcbiAgICAgICAgICBwYWdpbmF0aW9uOiBwcmVmZmVyZWRQYWdpbmF0aW9uLFxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKHNvcnRlcnMgJiYge1xuICAgICAgICAgIHNvcnRlcnMsXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4oY29uZmlnPy5zb3J0ICYmIHtcbiAgICAgICAgICBzb3J0OiBjb25maWc/LnNvcnQsXG4gICAgICAgIH0pLFxuICAgICAgfSlcbiAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgcXVlcnlGbjogKGNvbnRleHQpID0+IHtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb25Qcm9wZXJ0aWVzID0ge1xuICAgICAgICAuLi5wcmVmZmVyZWRQYWdpbmF0aW9uLFxuICAgICAgICBjdXJyZW50OiBjb250ZXh0LnBhZ2VQYXJhbSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgIC4uLmNvbWJpbmVkTWV0YSxcbiAgICAgICAgcXVlcnlDb250ZXh0OiBwcmVwYXJlUXVlcnlDb250ZXh0KGNvbnRleHQpLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGdldExpc3Q8VFF1ZXJ5Rm5EYXRhPih7XG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZS5uYW1lLFxuICAgICAgICBwYWdpbmF0aW9uOiBwYWdpbmF0aW9uUHJvcGVydGllcyxcbiAgICAgICAgaGFzUGFnaW5hdGlvbjogaXNTZXJ2ZXJQYWdpbmF0aW9uLFxuICAgICAgICBmaWx0ZXJzOiBwcmVmZmVyZWRGaWx0ZXJzLFxuICAgICAgICBzb3J0OiBwcmVmZmVyZWRTb3J0ZXJzLFxuICAgICAgICBzb3J0ZXJzOiBwcmVmZmVyZWRTb3J0ZXJzLFxuICAgICAgICBtZXRhLFxuICAgICAgICBtZXRhRGF0YTogbWV0YSxcbiAgICAgIH0pLnRoZW4oKHsgZGF0YSwgdG90YWwsIC4uLnJlc3QgfSkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgdG90YWwsXG4gICAgICAgICAgcGFnaW5hdGlvbjogcGFnaW5hdGlvblByb3BlcnRpZXMsXG4gICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0TmV4dFBhZ2VQYXJhbTogKGxhc3RQYWdlKSA9PiBnZXROZXh0UGFnZVBhcmFtKGxhc3RQYWdlKSxcbiAgICBnZXRQcmV2aW91c1BhZ2VQYXJhbTogKGxhc3RQYWdlKSA9PiBnZXRQcmV2aW91c1BhZ2VQYXJhbShsYXN0UGFnZSksXG4gICAgLi4ucXVlcnlPcHRpb25zLFxuICAgIG9uU3VjY2VzczogKGRhdGEpID0+IHtcbiAgICAgIHF1ZXJ5T3B0aW9ucz8ub25TdWNjZXNzPy4oZGF0YSk7XG5cbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgIHR5cGVvZiBzdWNjZXNzTm90aWZpY2F0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHN1Y2Nlc3NOb3RpZmljYXRpb24oZGF0YSwgbm90aWZpY2F0aW9uVmFsdWVzLCBpZGVudGlmaWVyKVxuICAgICAgICAgIDogc3VjY2Vzc05vdGlmaWNhdGlvbjtcblxuICAgICAgaGFuZGxlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbkNvbmZpZyk7XG4gICAgfSxcbiAgICBvbkVycm9yOiAoZXJyOiBURXJyb3IpID0+IHtcbiAgICAgIGNoZWNrRXJyb3IoZXJyKTtcbiAgICAgIHF1ZXJ5T3B0aW9ucz8ub25FcnJvcj8uKGVycik7XG5cbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbkNvbmZpZyA9XG4gICAgICAgIHR5cGVvZiBlcnJvck5vdGlmaWNhdGlvbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBlcnJvck5vdGlmaWNhdGlvbihlcnIsIG5vdGlmaWNhdGlvblZhbHVlcywgaWRlbnRpZmllcilcbiAgICAgICAgICA6IGVycm9yTm90aWZpY2F0aW9uO1xuXG4gICAgICBoYW5kbGVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uQ29uZmlnLCB7XG4gICAgICAgIGtleTogYCR7aWRlbnRpZmllcn0tdXNlSW5maW5pdGVMaXN0LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICBcIm5vdGlmaWNhdGlvbnMuZXJyb3JcIixcbiAgICAgICAgICB7IHN0YXR1c0NvZGU6IGVyci5zdGF0dXNDb2RlIH0sXG4gICAgICAgICAgYEVycm9yIChzdGF0dXMgY29kZTogJHtlcnIuc3RhdHVzQ29kZX0pYCxcbiAgICAgICAgKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGVyci5tZXNzYWdlLFxuICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1ldGE6IHtcbiAgICAgIC4uLnF1ZXJ5T3B0aW9ucz8ubWV0YSxcbiAgICAgIC4uLmdldFhSYXkoXCJ1c2VJbmZpbml0ZUxpc3RcIiwgcHJlZmVyTGVnYWN5S2V5cywgcmVzb3VyY2U/Lm5hbWUpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHsgZWxhcHNlZFRpbWUgfSA9IHVzZUxvYWRpbmdPdmVydGltZSh7XG4gICAgaXNMb2FkaW5nOiBxdWVyeVJlc3BvbnNlLmlzRmV0Y2hpbmcsXG4gICAgaW50ZXJ2YWw6IG92ZXJ0aW1lT3B0aW9ucz8uaW50ZXJ2YWwsXG4gICAgb25JbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5vbkludGVydmFsLFxuICB9KTtcblxuICByZXR1cm4geyAuLi5xdWVyeVJlc3BvbnNlLCBvdmVydGltZTogeyBlbGFwc2VkVGltZSB9IH07XG59O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IExpdmVDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9saXZlXCI7XG5pbXBvcnQgeyBSZWZpbmVDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9yZWZpbmVcIjtcbmltcG9ydCB7IHVzZUludmFsaWRhdGUgfSBmcm9tIFwiQGhvb2tzL2ludmFsaWRhdGVcIjtcbmltcG9ydCB7IHVzZVJlc291cmNlIH0gZnJvbSBcIkBob29rcy9yZXNvdXJjZVwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VLZXksXG4gIENydWRGaWx0ZXIsXG4gIENydWRTb3J0LFxuICBNZXRhUXVlcnksXG4gIFBhZ2luYXRpb24sXG59IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IExpdmVFdmVudCwgTGl2ZU1vZGVQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9saXZlL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IElSZWZpbmVDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JlZmluZS90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBVc2VSZXNvdXJjZVN1YnNjcmlwdGlvblByb3BzID0ge1xuICBjaGFubmVsOiBzdHJpbmc7XG4gIHBhcmFtcz86IHtcbiAgICBpZHM/OiBCYXNlS2V5W107XG4gICAgaWQ/OiBCYXNlS2V5O1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGBwYXJhbXMubWV0YWAgaXMgZGVwY2VyYXRlZC4gVXNlIGBtZXRhYCBkaXJlY3RseSBmcm9tIHRoZSByb290IGxldmVsIGluc3RlYWQuXG4gICAgICovXG4gICAgbWV0YT86IE1ldGFRdWVyeTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBgbWV0YURhdGFgIGlzIGRlcHJlY2F0ZWQgd2l0aCByZWZpbmVANCwgcmVmaW5lIHdpbGwgcGFzcyBgbWV0YWAgaW5zdGVhZCwgaG93ZXZlciwgd2Ugc3RpbGwgc3VwcG9ydCBgbWV0YURhdGFgIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgICAqL1xuICAgIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICAgIHBhZ2luYXRpb24/OiBQYWdpbmF0aW9uO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGBoYXNQYWdpbmF0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYHBhZ2luYXRpb24ubW9kZWAgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBoYXNQYWdpbmF0aW9uPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBgc29ydGAgaXMgZGVwcmVjYXRlZC4gVXNlIGBzb3J0ZXJzYCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHNvcnQ/OiBDcnVkU29ydFtdO1xuICAgIHNvcnRlcnM/OiBDcnVkU29ydFtdO1xuICAgIGZpbHRlcnM/OiBDcnVkRmlsdGVyW107XG4gICAgc3Vic2NyaXB0aW9uVHlwZTogXCJ1c2VMaXN0XCIgfCBcInVzZU9uZVwiIHwgXCJ1c2VNYW55XCI7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xuICB9O1xuICB0eXBlczogTGl2ZUV2ZW50W1widHlwZVwiXVtdO1xuICByZXNvdXJjZT86IHN0cmluZztcbiAgZW5hYmxlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYG1ldGEuZGF0YVByb3ZpZGVyTmFtZWAgaW5zdGVhZC5cbiAgICovXG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmc7XG4gIG1ldGE/OiBNZXRhUXVlcnkgJiB7IGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmcgfTtcbn0gJiBMaXZlTW9kZVByb3BzO1xuXG5leHBvcnQgdHlwZSBQdWJsaXNoVHlwZSA9IChldmVudDogTGl2ZUV2ZW50KSA9PiB2b2lkO1xuXG5leHBvcnQgY29uc3QgdXNlUmVzb3VyY2VTdWJzY3JpcHRpb24gPSAoe1xuICByZXNvdXJjZTogcmVzb3VyY2VGcm9tUHJvcCxcbiAgcGFyYW1zLFxuICBjaGFubmVsLFxuICB0eXBlcyxcbiAgZW5hYmxlZCA9IHRydWUsXG4gIGxpdmVNb2RlOiBsaXZlTW9kZUZyb21Qcm9wLFxuICBvbkxpdmVFdmVudCxcbiAgZGF0YVByb3ZpZGVyTmFtZTogZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wcyxcbiAgbWV0YSxcbn06IFVzZVJlc291cmNlU3Vic2NyaXB0aW9uUHJvcHMpOiB2b2lkID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gdXNlUmVzb3VyY2UocmVzb3VyY2VGcm9tUHJvcCk7XG5cbiAgY29uc3QgeyBsaXZlUHJvdmlkZXIgfSA9IHVzZUNvbnRleHQoTGl2ZUNvbnRleHQpO1xuICBjb25zdCB7XG4gICAgbGl2ZU1vZGU6IGxpdmVNb2RlRnJvbUNvbnRleHQsXG4gICAgb25MaXZlRXZlbnQ6IG9uTGl2ZUV2ZW50Q29udGV4dENhbGxiYWNrLFxuICB9ID0gdXNlQ29udGV4dDxJUmVmaW5lQ29udGV4dD4oUmVmaW5lQ29udGV4dCk7XG5cbiAgY29uc3QgbGl2ZU1vZGUgPSBsaXZlTW9kZUZyb21Qcm9wID8/IGxpdmVNb2RlRnJvbUNvbnRleHQ7XG5cbiAgY29uc3QgaW52YWxpZGF0ZSA9IHVzZUludmFsaWRhdGUoKTtcblxuICBjb25zdCBkYXRhUHJvdmlkZXJOYW1lID1cbiAgICBkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3BzID8/XG4gICAgbWV0YT8uZGF0YVByb3ZpZGVyTmFtZSA/P1xuICAgIHJlc291cmNlPy5tZXRhPy5kYXRhUHJvdmlkZXJOYW1lO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHN1YnNjcmlwdGlvbjogYW55O1xuXG4gICAgY29uc3QgY2FsbGJhY2sgPSAoZXZlbnQ6IExpdmVFdmVudCkgPT4ge1xuICAgICAgaWYgKGxpdmVNb2RlID09PSBcImF1dG9cIikge1xuICAgICAgICBpbnZhbGlkYXRlKHtcbiAgICAgICAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICAgIGludmFsaWRhdGVzOiBbXCJyZXNvdXJjZUFsbFwiXSxcbiAgICAgICAgICBpbnZhbGlkYXRpb25GaWx0ZXJzOiB7XG4gICAgICAgICAgICB0eXBlOiBcImFjdGl2ZVwiLFxuICAgICAgICAgICAgcmVmZXRjaFR5cGU6IFwiYWN0aXZlXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbnZhbGlkYXRpb25PcHRpb25zOiB7IGNhbmNlbFJlZmV0Y2g6IGZhbHNlIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBvbkxpdmVFdmVudD8uKGV2ZW50KTtcbiAgICAgIG9uTGl2ZUV2ZW50Q29udGV4dENhbGxiYWNrPy4oZXZlbnQpO1xuICAgIH07XG5cbiAgICBpZiAobGl2ZU1vZGUgJiYgbGl2ZU1vZGUgIT09IFwib2ZmXCIgJiYgZW5hYmxlZCkge1xuICAgICAgc3Vic2NyaXB0aW9uID0gbGl2ZVByb3ZpZGVyPy5zdWJzY3JpYmUoe1xuICAgICAgICBjaGFubmVsLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2U/Lm5hbWUsXG4gICAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICB9LFxuICAgICAgICB0eXBlcyxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAuLi5tZXRhLFxuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBsaXZlUHJvdmlkZXI/LnVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2VuYWJsZWRdKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdHlwZSBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgdHlwZSB7IElMaXZlQ29udGV4dCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBMaXZlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SUxpdmVDb250ZXh0Pih7fSk7XG5cbmV4cG9ydCBjb25zdCBMaXZlQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GQzxQcm9wc1dpdGhDaGlsZHJlbjxJTGl2ZUNvbnRleHQ+PiA9ICh7XG4gIGxpdmVQcm92aWRlcixcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPExpdmVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGxpdmVQcm92aWRlciB9fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0xpdmVDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7XG4gIHR5cGUgSW52YWxpZGF0ZU9wdGlvbnMsXG4gIHR5cGUgSW52YWxpZGF0ZVF1ZXJ5RmlsdGVycyxcbiAgdXNlUXVlcnlDbGllbnQsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgcGlja0RhdGFQcm92aWRlciB9IGZyb20gXCJAZGVmaW5pdGlvbnNcIjtcbmltcG9ydCB7IHVzZUtleXMsIHVzZVJlc291cmNlIH0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7IEJhc2VLZXksIElRdWVyeUtleXMgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBVc2VJbnZhbGlkYXRlUHJvcCA9IHtcbiAgcmVzb3VyY2U/OiBzdHJpbmc7XG4gIGlkPzogQmFzZUtleTtcbiAgZGF0YVByb3ZpZGVyTmFtZT86IHN0cmluZztcbiAgaW52YWxpZGF0ZXM6IEFycmF5PGtleW9mIElRdWVyeUtleXM+IHwgZmFsc2U7XG4gIGludmFsaWRhdGlvbkZpbHRlcnM/OiBJbnZhbGlkYXRlUXVlcnlGaWx0ZXJzO1xuICBpbnZhbGlkYXRpb25PcHRpb25zPzogSW52YWxpZGF0ZU9wdGlvbnM7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlSW52YWxpZGF0ZSA9ICgpOiAoKFxuICBwcm9wczogVXNlSW52YWxpZGF0ZVByb3AsXG4pID0+IFByb21pc2U8dm9pZD4pID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZXMgfSA9IHVzZVJlc291cmNlKCk7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgaW52YWxpZGF0ZSA9IHVzZUNhbGxiYWNrKFxuICAgIGFzeW5jICh7XG4gICAgICByZXNvdXJjZSxcbiAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICBpbnZhbGlkYXRlcyxcbiAgICAgIGlkLFxuICAgICAgaW52YWxpZGF0aW9uRmlsdGVycyA9IHsgdHlwZTogXCJhbGxcIiwgcmVmZXRjaFR5cGU6IFwiYWN0aXZlXCIgfSxcbiAgICAgIGludmFsaWRhdGlvbk9wdGlvbnMgPSB7IGNhbmNlbFJlZmV0Y2g6IGZhbHNlIH0sXG4gICAgfTogVXNlSW52YWxpZGF0ZVByb3ApID0+IHtcbiAgICAgIGlmIChpbnZhbGlkYXRlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZHAgPSBwaWNrRGF0YVByb3ZpZGVyKHJlc291cmNlLCBkYXRhUHJvdmlkZXJOYW1lLCByZXNvdXJjZXMpO1xuXG4gICAgICBjb25zdCBxdWVyeUtleSA9IGtleXMoKVxuICAgICAgICAuZGF0YShkcClcbiAgICAgICAgLnJlc291cmNlKHJlc291cmNlID8/IFwiXCIpO1xuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgaW52YWxpZGF0ZXMubWFwKChrZXkpID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSBcImFsbFwiOlxuICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoXG4gICAgICAgICAgICAgICAga2V5cygpLmRhdGEoZHApLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25GaWx0ZXJzLFxuICAgICAgICAgICAgICAgIGludmFsaWRhdGlvbk9wdGlvbnMsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjYXNlIFwibGlzdFwiOlxuICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoXG4gICAgICAgICAgICAgICAgcXVlcnlLZXkuYWN0aW9uKFwibGlzdFwiKS5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uRmlsdGVycyxcbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25PcHRpb25zLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgY2FzZSBcIm1hbnlcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKFxuICAgICAgICAgICAgICAgIHF1ZXJ5S2V5LmFjdGlvbihcIm1hbnlcIikuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgICAgICAgIGludmFsaWRhdGlvbkZpbHRlcnMsXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uT3B0aW9ucyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgXCJyZXNvdXJjZUFsbFwiOlxuICAgICAgICAgICAgICByZXR1cm4gcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoXG4gICAgICAgICAgICAgICAgcXVlcnlLZXkuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICAgICAgICAgICAgICAgIGludmFsaWRhdGlvbkZpbHRlcnMsXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uT3B0aW9ucyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNhc2UgXCJkZXRhaWxcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKFxuICAgICAgICAgICAgICAgIHF1ZXJ5S2V5XG4gICAgICAgICAgICAgICAgICAuYWN0aW9uKFwib25lXCIpXG4gICAgICAgICAgICAgICAgICAuaWQoaWQgfHwgXCJcIilcbiAgICAgICAgICAgICAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uRmlsdGVycyxcbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25PcHRpb25zLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICApO1xuXG4gICAgICByZXR1cm47XG4gICAgfSxcbiAgICBbXSxcbiAgKTtcblxuICByZXR1cm4gaW52YWxpZGF0ZTtcbn07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFJlc291cmNlQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvcmVzb3VyY2VcIjtcbmltcG9ydCB7IHVzZVJlc291cmNlV2l0aFJvdXRlLCB1c2VSb3V0ZXJDb250ZXh0IH0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7IEJhc2VLZXkgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IFJlc291cmNlUm91dGVyUGFyYW1zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci9sZWdhY3kvdHlwZXNcIjtcbmltcG9ydCB7IHVzZVJvdXRlclR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcm91dGVyL3BpY2tlclwiO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcm91dGVyL3R5cGVzXCI7XG5pbXBvcnQgeyBwaWNrUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vLi4vZGVmaW5pdGlvbnMvaGVscGVycy9waWNrLXJlc291cmNlXCI7XG5pbXBvcnQgeyB1c2VQYXJzZWQgfSBmcm9tIFwiLi4vLi4vcm91dGVyL3VzZS1wYXJzZWRcIjtcblxuZXhwb3J0IHR5cGUgVXNlUmVzb3VyY2VMZWdhY3lQcm9wcyA9IHtcbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hpY2ggcmVzb3VyY2UgdG8gdXNlIGZvciByZWRpcmVjdGlvblxuICAgKiBAZGVwcmVjYXRlZCByZXNvdXJjZU5hbWUgZGVwcmVjYXRlZC4gVXNlIHJlc291cmNlTmFtZU9yUm91dGVOYW1lIGluc3RlYWQgIyBodHRwczovL2dpdGh1Yi5jb20vcmVmaW5lZGV2L3JlZmluZS9pc3N1ZXMvMTYxOFxuICAgKi9cbiAgcmVzb3VyY2VOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGljaCByZXNvdXJjZSB0byB1c2UgZm9yIHJlZGlyZWN0aW9uXG4gICAqIEBkZWZhdWx0IFJlc291cmNlIG5hbWUgdGhhdCBpdCByZWFkcyBmcm9tIHJvdXRlXG4gICAqL1xuICByZXNvdXJjZU5hbWVPclJvdXRlTmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFkZHMgaWQgdG8gdGhlIGVuZCBvZiB0aGUgVVJMXG4gICAqIEBkZXByZWNhdGVkIHJlc291cmNlTmFtZSBkZXByZWNhdGVkLiBVc2UgcmVzb3VyY2VOYW1lT3JSb3V0ZU5hbWUgaW5zdGVhZCAjIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWZpbmVkZXYvcmVmaW5lL2lzc3Vlcy8xNjE4XG4gICAqL1xuICByZWNvcmRJdGVtSWQ/OiBCYXNlS2V5O1xufTtcblxuLyoqXG4gKiBNYXRjaGVzIHRoZSByZXNvdXJjZSBieSBpZGVudGlmaWVyLlxuICogSWYgbm90IHByb3ZpZGVkLCB0aGUgcmVzb3VyY2UgZnJvbSB0aGUgcm91dGUgd2lsbCBiZSByZXR1cm5lZC5cbiAqIElmIHlvdXIgcmVzb3VyY2UgZG9lcyBub3QgZXhwbGljaXRseSBkZWZpbmUgYW4gaWRlbnRpZmllciwgdGhlIHJlc291cmNlIG5hbWUgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnQgdHlwZSBVc2VSZXNvdXJjZVBhcmFtID0gc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG50eXBlIFNlbGVjdFJldHVyblR5cGU8VCBleHRlbmRzIGJvb2xlYW4+ID0gVCBleHRlbmRzIHRydWVcbiAgPyB7IHJlc291cmNlOiBJUmVzb3VyY2VJdGVtOyBpZGVudGlmaWVyOiBzdHJpbmcgfVxuICA6IHsgcmVzb3VyY2U6IElSZXNvdXJjZUl0ZW07IGlkZW50aWZpZXI6IHN0cmluZyB9IHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgdHlwZSBVc2VSZXNvdXJjZVJldHVyblR5cGUgPSB7XG4gIHJlc291cmNlczogSVJlc291cmNlSXRlbVtdO1xuICByZXNvdXJjZT86IElSZXNvdXJjZUl0ZW07XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYHJlc291cmNlLm5hbWVgIGluc3RlYWQgd2hlbiB5b3UgbmVlZCB0byBnZXQgdGhlIHJlc291cmNlIG5hbWUuXG4gICAqL1xuICByZXNvdXJjZU5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIHZhbHVlIG1heSBub3QgYWx3YXlzIHJlZmxlY3QgdGhlIGNvcnJlY3QgXCJpZFwiIHZhbHVlLiBVc2UgYHVzZVJlc291cmNlUGFyYW1zYCB0byBvYnRhaW4gdGhlIGNhbGN1bGF0ZWQgXCJpZFwiYCBvciBgdXNlUGFyc2VkYCB0byBvYnRhaW4gdGhlIGlkIGZyb20gdGhlIHJvdXRlIGluc3RlYWQuXG4gICAqL1xuICBpZD86IEJhc2VLZXk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIHZhbHVlIG1heSBub3QgYWx3YXlzIHJlZmxlY3QgdGhlIGNvcnJlY3QgXCJhY3Rpb25cIiB2YWx1ZS4gVXNlIGB1c2VSZXNvdXJjZVBhcmFtc2AgdG8gb2J0YWluIHRoZSBjYWxjdWxhdGVkIFwiYWN0aW9uXCIgb3IgYHVzZVBhcnNlZGAgdG8gb2J0YWluIHRoZSBhY3Rpb24gZnJvbSB0aGUgcm91dGUgaW5zdGVhZC5cbiAgICovXG4gIGFjdGlvbj86IEFjdGlvbjtcbiAgc2VsZWN0OiA8VCBleHRlbmRzIGJvb2xlYW4gPSB0cnVlPihcbiAgICByZXNvdXJjZU5hbWU6IHN0cmluZyxcbiAgICBmb3JjZT86IFQsXG4gICkgPT4gU2VsZWN0UmV0dXJuVHlwZTxUPjtcbiAgaWRlbnRpZmllcj86IHN0cmluZztcbn07XG5cbnR5cGUgVXNlUmVzb3VyY2VSZXR1cm5UeXBlV2l0aFJlc291cmNlID0gVXNlUmVzb3VyY2VSZXR1cm5UeXBlICYge1xuICByZXNvdXJjZTogSVJlc291cmNlSXRlbTtcbiAgaWRlbnRpZmllcjogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYHVzZVJlc291cmNlYCB3aXRoIGBpZGVudGlmaWVyYCBwcm9wZXJ0eSBpbnN0ZWFkLiAoYGlkZW50aWZpZXJgIGRvZXMgbm90IGNoZWNrIGJ5IHJvdXRlIG5hbWUgaW4gbmV3IHJvdXRlcilcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlc291cmNlKFxuICBwcm9wczogVXNlUmVzb3VyY2VMZWdhY3lQcm9wcyxcbik6IFVzZVJlc291cmNlUmV0dXJuVHlwZTtcbmV4cG9ydCBmdW5jdGlvbiB1c2VSZXNvdXJjZSgpOiBVc2VSZXNvdXJjZVJldHVyblR5cGU7XG5leHBvcnQgZnVuY3Rpb24gdXNlUmVzb3VyY2U8VElkZW50aWZpZXIgPSBVc2VSZXNvdXJjZVBhcmFtPihcbiAgaWRlbnRpZmllcjogVElkZW50aWZpZXIsXG4pOiBUSWRlbnRpZmllciBleHRlbmRzIE5vbk51bGxhYmxlPFVzZVJlc291cmNlUGFyYW0+XG4gID8gVXNlUmVzb3VyY2VSZXR1cm5UeXBlV2l0aFJlc291cmNlXG4gIDogVXNlUmVzb3VyY2VSZXR1cm5UeXBlO1xuLyoqXG4gKiBgdXNlUmVzb3VyY2VgIGlzIHVzZWQgdG8gZ2V0IGByZXNvdXJjZXNgIHRoYXQgYXJlIGRlZmluZWQgYXMgcHJvcGVydHkgb2YgdGhlIGA8UmVmaW5lPmAgY29tcG9uZW50LlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9yZXNvdXJjZS91c2VSZXNvdXJjZX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlc291cmNlKFxuICBhcmdzPzogVXNlUmVzb3VyY2VMZWdhY3lQcm9wcyB8IFVzZVJlc291cmNlUGFyYW0sXG4pOiBVc2VSZXNvdXJjZVJldHVyblR5cGUge1xuICBjb25zdCB7IHJlc291cmNlcyB9ID0gdXNlQ29udGV4dChSZXNvdXJjZUNvbnRleHQpO1xuXG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG5cbiAgY29uc3QgcGFyYW1zID0gdXNlUGFyc2VkKCk7XG5cbiAgY29uc3Qgb2xkUHJvcHMgPSB7XG4gICAgcmVzb3VyY2VOYW1lOiBhcmdzICYmIHR5cGVvZiBhcmdzICE9PSBcInN0cmluZ1wiID8gYXJncy5yZXNvdXJjZU5hbWUgOiBhcmdzLFxuICAgIHJlc291cmNlTmFtZU9yUm91dGVOYW1lOlxuICAgICAgYXJncyAmJiB0eXBlb2YgYXJncyAhPT0gXCJzdHJpbmdcIiA/IGFyZ3MucmVzb3VyY2VOYW1lT3JSb3V0ZU5hbWUgOiBhcmdzLFxuICAgIHJlY29yZEl0ZW1JZDpcbiAgICAgIGFyZ3MgJiYgdHlwZW9mIGFyZ3MgIT09IFwic3RyaW5nXCIgPyBhcmdzLnJlY29yZEl0ZW1JZCA6IHVuZGVmaW5lZCxcbiAgfTtcblxuICBjb25zdCBzZWxlY3QgPSA8VCBleHRlbmRzIGJvb2xlYW4gPSB0cnVlPihcbiAgICByZXNvdXJjZU5hbWU6IHN0cmluZyxcbiAgICBmb3JjZSA9IHRydWUsXG4gICk6IFNlbGVjdFJldHVyblR5cGU8VD4gPT4ge1xuICAgIGNvbnN0IGlzTGVnYWN5ID0gcm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIjtcbiAgICBjb25zdCBwaWNrZWRSZXNvdXJjZSA9IHBpY2tSZXNvdXJjZShyZXNvdXJjZU5hbWUsIHJlc291cmNlcywgaXNMZWdhY3kpO1xuXG4gICAgaWYgKHBpY2tlZFJlc291cmNlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNvdXJjZTogcGlja2VkUmVzb3VyY2UsXG4gICAgICAgIGlkZW50aWZpZXI6IHBpY2tlZFJlc291cmNlLmlkZW50aWZpZXIgPz8gcGlja2VkUmVzb3VyY2UubmFtZSxcbiAgICAgIH0gYXMgU2VsZWN0UmV0dXJuVHlwZTxUPjtcbiAgICB9XG5cbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIGNvbnN0IHJlc291cmNlOiBJUmVzb3VyY2VJdGVtID0ge1xuICAgICAgICBuYW1lOiByZXNvdXJjZU5hbWUsXG4gICAgICAgIGlkZW50aWZpZXI6IHJlc291cmNlTmFtZSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSByZXNvdXJjZS5pZGVudGlmaWVyID8/IHJlc291cmNlLm5hbWU7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgfSBhcyBTZWxlY3RSZXR1cm5UeXBlPFQ+O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQgYXMgU2VsZWN0UmV0dXJuVHlwZTxUPjtcbiAgfTtcblxuICAvKipcbiAgICogTGVnYWN5IFJvdXRlciAtIFN0YXJ0XG4gICAqXG4gICAqIHVzaW5nIGB1c2VQYXJhbXNgIGFuZCBgcm91dGVgIHRvIG1hdGNoIHJlc291cmNlIGFuZCBnZXQgcGFyYW1zLlxuICAgKi9cbiAgY29uc3QgcmVzb3VyY2VXaXRoUm91dGUgPSB1c2VSZXNvdXJjZVdpdGhSb3V0ZSgpO1xuXG4gIGNvbnN0IHsgdXNlUGFyYW1zIH0gPSB1c2VSb3V0ZXJDb250ZXh0KCk7XG5cbiAgY29uc3QgbGVnYWN5UGFyYW1zID0gdXNlUGFyYW1zPFBhcnRpYWw8UmVzb3VyY2VSb3V0ZXJQYXJhbXM+PigpO1xuXG4gIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgY29uc3QgcmVzb3VyY2VLZXlUb0NoZWNrID0gb2xkUHJvcHMucmVzb3VyY2VOYW1lT3JSb3V0ZU5hbWVcbiAgICAgID8gb2xkUHJvcHMucmVzb3VyY2VOYW1lT3JSb3V0ZU5hbWVcbiAgICAgIDogbGVnYWN5UGFyYW1zLnJlc291cmNlO1xuXG4gICAgY29uc3QgbGVnYWN5UmVzb3VyY2UgPSByZXNvdXJjZUtleVRvQ2hlY2tcbiAgICAgID8gcmVzb3VyY2VXaXRoUm91dGUocmVzb3VyY2VLZXlUb0NoZWNrKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbGVnYWN5SWQgPSBvbGRQcm9wcz8ucmVjb3JkSXRlbUlkID8/IGxlZ2FjeVBhcmFtcy5pZDtcbiAgICBjb25zdCBsZWdhY3lBY3Rpb24gPSBsZWdhY3lQYXJhbXMuYWN0aW9uO1xuICAgIGNvbnN0IGxlZ2FjeVJlc291cmNlTmFtZSA9IG9sZFByb3BzPy5yZXNvdXJjZU5hbWUgPz8gbGVnYWN5UmVzb3VyY2U/Lm5hbWU7XG4gICAgY29uc3QgbGVnYWN5SWRlbnRpZmllciA9IGxlZ2FjeVJlc291cmNlPy5pZGVudGlmaWVyID8/IGxlZ2FjeVJlc291cmNlPy5uYW1lO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc291cmNlcyxcbiAgICAgIHJlc291cmNlOiBsZWdhY3lSZXNvdXJjZSxcbiAgICAgIHJlc291cmNlTmFtZTogbGVnYWN5UmVzb3VyY2VOYW1lLFxuICAgICAgaWQ6IGxlZ2FjeUlkLFxuICAgICAgYWN0aW9uOiBsZWdhY3lBY3Rpb24sXG4gICAgICBzZWxlY3QsXG4gICAgICBpZGVudGlmaWVyOiBsZWdhY3lJZGVudGlmaWVyLFxuICAgIH07XG4gIH1cbiAgLyoqIExlZ2FjeSBSb3V0ZXIgLSBFbmQgKi9cblxuICAvKiogTmV3IFJvdXRlciAqL1xuICBsZXQgcmVzb3VyY2U6IElSZXNvdXJjZUl0ZW0gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIC8vIHdlIHRyeSB0byBwaWNrIHRoZSByZXNvdXJjZSBmcm9tIHByb3BzIGZpcnN0XG4gIGNvbnN0IGlkZW50aWZpZXIgPVxuICAgIHR5cGVvZiBhcmdzID09PSBcInN0cmluZ1wiID8gYXJncyA6IG9sZFByb3BzPy5yZXNvdXJjZU5hbWVPclJvdXRlTmFtZTtcbiAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICBjb25zdCBwaWNrZWRGcm9tUHJvcHMgPSBwaWNrUmVzb3VyY2UoaWRlbnRpZmllciwgcmVzb3VyY2VzKTtcbiAgICBpZiAocGlja2VkRnJvbVByb3BzKSB7XG4gICAgICByZXNvdXJjZSA9IHBpY2tlZEZyb21Qcm9wcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb3VyY2UgPSB7XG4gICAgICAgIG5hbWU6IGlkZW50aWZpZXIgYXMgc3RyaW5nLFxuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW1zPy5yZXNvdXJjZSkge1xuICAgIHJlc291cmNlID0gcGFyYW1zLnJlc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXNvdXJjZXMsXG4gICAgcmVzb3VyY2UsXG4gICAgcmVzb3VyY2VOYW1lOiByZXNvdXJjZT8ubmFtZSxcbiAgICBpZDogcGFyYW1zLmlkLFxuICAgIGFjdGlvbjogcGFyYW1zLmFjdGlvbixcbiAgICBzZWxlY3QsXG4gICAgaWRlbnRpZmllcjogcmVzb3VyY2U/LmlkZW50aWZpZXIgPz8gcmVzb3VyY2U/Lm5hbWUsXG4gIH07XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IGxlZ2FjeVJlc291cmNlVHJhbnNmb3JtIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5pbXBvcnQgeyB1c2VEZWVwTWVtbyB9IGZyb20gXCJAaG9va3MvZGVlcE1lbW9cIjtcblxuaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VDb250ZXh0LCBJUmVzb3VyY2VJdGVtLCBSZXNvdXJjZVByb3BzIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IFJlc291cmNlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SVJlc291cmNlQ29udGV4dD4oe1xuICByZXNvdXJjZXM6IFtdLFxufSk7XG5cbmV4cG9ydCBjb25zdCBSZXNvdXJjZUNvbnRleHRQcm92aWRlcjogUmVhY3QuRkM8XG4gIFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHsgcmVzb3VyY2VzOiBSZXNvdXJjZVByb3BzW10gfT5cbj4gPSAoeyByZXNvdXJjZXM6IHByb3ZpZGVkUmVzb3VyY2VzLCBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IHJlc291cmNlczogSVJlc291cmNlSXRlbVtdID0gdXNlRGVlcE1lbW8oKCkgPT4ge1xuICAgIHJldHVybiBsZWdhY3lSZXNvdXJjZVRyYW5zZm9ybShwcm92aWRlZFJlc291cmNlcyA/PyBbXSk7XG4gIH0sIFtwcm92aWRlZFJlc291cmNlc10pO1xuXG4gIHJldHVybiAoXG4gICAgPFJlc291cmNlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyByZXNvdXJjZXMgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9SZXNvdXJjZUNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZU1lbW9pemVkIH0gZnJvbSBcIkBob29rcy9tZW1vaXplZFwiO1xuXG4vKipcbiAqIEhvb2sgdGhhdCBtZW1vaXplcyB0aGUgZ2l2ZW4gZGVwZW5kZW5jeSBhcnJheSBhbmQgY2hlY2tzIHRoZSBjb25zZWN1dGl2ZSBjYWxscyB3aXRoIGRlZXAgZXF1YWxpdHkgYW5kIHJldHVybnMgdGhlIHNhbWUgdmFsdWUgYXMgdGhlIGZpcnN0IGNhbGwgaWYgZGVwZW5kZW5jaWVzIGFyZSBub3QgY2hhbmdlZC5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdXNlRGVlcE1lbW8gPSA8VCw+KFxuICBmbjogKCkgPT4gVCxcbiAgZGVwZW5kZW5jaWVzOiBSZWFjdC5EZXBlbmRlbmN5TGlzdCxcbik6IFQgPT4ge1xuICBjb25zdCBtZW1vaXplZERlcGVuZGVuY2llcyA9IHVzZU1lbW9pemVkKGRlcGVuZGVuY2llcyk7XG5cbiAgY29uc3QgdmFsdWUgPSB1c2VNZW1vKGZuLCBtZW1vaXplZERlcGVuZGVuY2llcyk7XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcbiIsImltcG9ydCB7IHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSBcImxvZGFzaC1lcy9pc0VxdWFsLmpzXCI7XG5cbi8qKlxuICogSG9vayB0aGF0IG1lbW9pemVzIHRoZSBnaXZlbiB2YWx1ZSB3aXRoIGRlZXAgZXF1YWxpdHkuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZU1lbW9pemVkID0gPFQgPSB1bmtub3duPih2YWx1ZTogVCk6IFQgPT4ge1xuICBjb25zdCByZWYgPSB1c2VSZWYodmFsdWUpO1xuXG4gIGlmICghaXNFcXVhbChyZWYuY3VycmVudCwgdmFsdWUpKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZWYuY3VycmVudDtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbi8qKlxuICogVGhpcyBjb250ZXh0IGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoaWNoIHJvdXRlciB0byB1c2UuXG4gKlxuICogVGhpcyBpcyBhIHRlbXBvcmFyeSBzb2x1dGlvbiB1bnRpbCB3ZSByZW1vdmUgdGhlIGxlZ2FjeSByb3V0ZXIuXG4gKi9cblxuZXhwb3J0IGNvbnN0IFJvdXRlclBpY2tlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PFwibGVnYWN5XCIgfCBcIm5ld1wiPihcIm5ld1wiKTtcblxuZXhwb3J0IGNvbnN0IFJvdXRlclBpY2tlclByb3ZpZGVyID0gUm91dGVyUGlja2VyQ29udGV4dC5Qcm92aWRlcjtcblxuLyoqXG4gKiBUaGlzIGlzIGEgdGVtcG9yYXJ5IGhvb2sgdG8gZGV0ZXJtaW5lIHdoaWNoIHJvdXRlciB0byB1c2UuXG4gKiBJdCB3aWxsIGJlIHJlbW92ZWQgb25jZSB0aGUgbGVnYWN5IHJvdXRlciBpcyByZW1vdmVkLlxuICogQGludGVybmFsIFRoaXMgaXMgYW4gaW50ZXJuYWwgaG9vay5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVJvdXRlclR5cGUgPSAoKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZXJQaWNrZXJDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVBhcnNlIH0gZnJvbSBcIi4uL3VzZS1wYXJzZVwiO1xuXG5leHBvcnQgY29uc3QgdXNlUGFyc2VkID0gPFxuICBUUGFyYW1zIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4+KCkgPT4ge1xuICBjb25zdCBwYXJzZSA9IHVzZVBhcnNlKCk7XG5cbiAgY29uc3QgcGFyc2VkID0gUmVhY3QudXNlTWVtbygoKSA9PiBwYXJzZTxUUGFyYW1zPigpLCBbcGFyc2VdKTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB0eXBlIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7IFJvdXRlclByb3ZpZGVyIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3QgZGVmYXVsdFJvdXRlclByb3ZpZGVyID0ge307XG5cbmV4cG9ydCBjb25zdCBSb3V0ZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxSb3V0ZXJQcm92aWRlcj4oXG4gIGRlZmF1bHRSb3V0ZXJQcm92aWRlcixcbik7XG5cbmV4cG9ydCBjb25zdCBSb3V0ZXJDb250ZXh0UHJvdmlkZXI6IFJlYWN0LkZDPFxuICBQcm9wc1dpdGhDaGlsZHJlbjx7IHJvdXRlcj86IFJvdXRlclByb3ZpZGVyIH0+XG4+ID0gKHsgY2hpbGRyZW4sIHJvdXRlciB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3JvdXRlciA/PyBkZWZhdWx0Um91dGVyUHJvdmlkZXJ9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvUm91dGVyQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBSb3V0ZXJDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9yb3V0ZXJcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7XG4gIFBhcnNlRnVuY3Rpb24sXG4gIFBhcnNlUmVzcG9uc2UsXG59IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvdHlwZXNcIjtcblxudHlwZSBVc2VQYXJzZVR5cGUgPSAoKSA9PiA8XG4gIFRQYXJhbXMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55Pixcbj4oKSA9PiBQYXJzZVJlc3BvbnNlPFRQYXJhbXM+O1xuXG5leHBvcnQgY29uc3QgdXNlUGFyc2U6IFVzZVBhcnNlVHlwZSA9ICgpID0+IHtcbiAgY29uc3Qgcm91dGVyQ29udGV4dCA9IHVzZUNvbnRleHQoUm91dGVyQ29udGV4dCk7XG5cbiAgY29uc3QgdXNlUGFyc2UgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICByb3V0ZXJDb250ZXh0Py5wYXJzZSA/P1xuICAgICAgKCgpID0+XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9KSBhcyBQYXJzZUZ1bmN0aW9uKSxcbiAgICBbcm91dGVyQ29udGV4dD8ucGFyc2VdLFxuICApO1xuXG4gIGNvbnN0IHBhcnNlID0gdXNlUGFyc2UoKTtcblxuICByZXR1cm4gcGFyc2UgYXMgUmV0dXJuVHlwZTxVc2VQYXJzZVR5cGU+O1xufTtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFJlc291cmNlQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvcmVzb3VyY2VcIjtcbmltcG9ydCB7IHBpY2tSZXNvdXJjZSB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVycy9waWNrLXJlc291cmNlXCI7XG5cbmltcG9ydCB0eXBlIHsgSVJlc291cmNlSXRlbSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBVc2VSZXNvdXJjZVdpdGhSb3V0ZVJldHVyblR5cGUgPSAocm91dGU6IHN0cmluZykgPT4gSVJlc291cmNlSXRlbTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYHVzZVJlc291cmNlYCBob29rIGluc3RlYWQuXG4gKiBAaW50ZXJuYWwgVGhpcyBob29rIGlzIGZvciBpbnRlcm5hbCB1c2Ugb25seS4gQW5kIGlzIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSZXNvdXJjZVdpdGhSb3V0ZSA9ICgpOiBVc2VSZXNvdXJjZVdpdGhSb3V0ZVJldHVyblR5cGUgPT4ge1xuICBjb25zdCB7IHJlc291cmNlcyB9ID0gdXNlQ29udGV4dChSZXNvdXJjZUNvbnRleHQpO1xuXG4gIGNvbnN0IHJlc291cmNlV2l0aFJvdXRlID0gdXNlQ2FsbGJhY2soXG4gICAgKHJvdXRlOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHBpY2tlZCA9IHBpY2tSZXNvdXJjZShyb3V0ZSwgcmVzb3VyY2VzLCB0cnVlKTtcbiAgICAgIGlmIChwaWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHBpY2tlZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7IG5hbWU6IHJvdXRlLCByb3V0ZTogcm91dGUgfSBhcyBJUmVzb3VyY2VJdGVtO1xuICAgIH0sXG4gICAgW3Jlc291cmNlc10sXG4gICk7XG5cbiAgcmV0dXJuIHJlc291cmNlV2l0aFJvdXRlO1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgUmVmaW5lQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvcmVmaW5lXCI7XG5cbmltcG9ydCB0eXBlIHsgTGl2ZU1vZGVQcm9wcyB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9saXZlL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IElSZWZpbmVDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JlZmluZS90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgdXNlTGl2ZU1vZGUgPSAoXG4gIGxpdmVNb2RlOiBMaXZlTW9kZVByb3BzW1wibGl2ZU1vZGVcIl0sXG4pOiBMaXZlTW9kZVByb3BzW1wibGl2ZU1vZGVcIl0gPT4ge1xuICBjb25zdCB7IGxpdmVNb2RlOiBsaXZlTW9kZUZyb21Db250ZXh0IH0gPVxuICAgIHVzZUNvbnRleHQ8SVJlZmluZUNvbnRleHQ+KFJlZmluZUNvbnRleHQpO1xuXG4gIHJldHVybiBsaXZlTW9kZSA/PyBsaXZlTW9kZUZyb21Db250ZXh0O1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBMaXZlQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvbGl2ZVwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VLZXksXG4gIENydWRGaWx0ZXIsXG4gIENydWRTb3J0LFxuICBNZXRhUXVlcnksXG4gIFBhZ2luYXRpb24sXG59IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IExpdmVFdmVudCB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9saXZlL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFVzZVN1YnNjcmlwdGlvblByb3BzID0ge1xuICAvKipcbiAgICogQ2hhbm5lbCBuYW1lIHRvIHN1YnNjcmliZS5cbiAgICovXG4gIGNoYW5uZWw6IHN0cmluZztcbiAgLyoqXG4gICAqIENhbGxiYWNrIHRoYXQgaXMgcnVuIHdoZW4gbmV3IGV2ZW50cyBmcm9tIHN1YnNjcmlwdGlvbiBhcnJpdmUuXG4gICAqL1xuICBvbkxpdmVFdmVudDogKGV2ZW50OiBMaXZlRXZlbnQpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBUeXBlIG9mIGV2ZW50cyB0byBzdWJzY3JpYmUuIGBcIipcImAgbWVhbnMgYWxsIGV2ZW50cy5cbiAgICogQHR5cGUgQXJyYXk8XCJkZWxldGVkXCIgfCBcInVwZGF0ZWRcIiB8IFwiY3JlYXRlZFwiIHwgXCIqXCIgfCBzdHJpbmc+XG4gICAqL1xuICB0eXBlcz86IExpdmVFdmVudFtcInR5cGVcIl1bXTtcbiAgLyoqXG4gICAqIERldGVybWluZXMgc3Vic2NyaXB0aW9uIHNob3VsZCBzdWJzY3JpYmUgb3Igbm90LlxuICAgKiBAdHlwZSBBcnJheTxcImRlbGV0ZWRcIiB8IFwidXBkYXRlZFwiIHwgXCJjcmVhdGVkXCIgfCBcIipcIiB8IHN0cmluZz5cbiAgICovXG4gIGVuYWJsZWQ/OiBib29sZWFuO1xuICBwYXJhbXM/OiB7XG4gICAgaWRzPzogQmFzZUtleVtdO1xuICAgIGlkPzogQmFzZUtleTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBgcGFyYW1zLm1ldGFgIGlzIGRlcGNlcmF0ZWQuIFVzZSBgbWV0YWAgZGlyZWN0bHkgZnJvbSB0aGUgcm9vdCBsZXZlbCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIG1ldGE/OiBNZXRhUXVlcnk7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICAgKi9cbiAgICBtZXRhRGF0YT86IE1ldGFRdWVyeTtcbiAgICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbjtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBgaGFzUGFnaW5hdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBwYWdpbmF0aW9uLm1vZGVgIGluc3RlYWQuXG4gICAgICovXG4gICAgaGFzUGFnaW5hdGlvbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgYHNvcnRgIGlzIGRlcHJlY2F0ZWQsIHVzZSBgc29ydGVyc2AgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBzb3J0PzogQ3J1ZFNvcnRbXTtcbiAgICBzb3J0ZXJzPzogQ3J1ZFNvcnRbXTtcbiAgICBmaWx0ZXJzPzogQ3J1ZEZpbHRlcltdO1xuICAgIHN1YnNjcmlwdGlvblR5cGU/OiBcInVzZUxpc3RcIiB8IFwidXNlT25lXCIgfCBcInVzZU1hbnlcIjtcbiAgICByZXNvdXJjZT86IHN0cmluZztcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH07XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYG1ldGEuZGF0YVByb3ZpZGVyTmFtZWAgaW5zdGVhZC5cbiAgICovXG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmc7XG4gIG1ldGE/OiBNZXRhUXVlcnkgJiB7IGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmcgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VTdWJzY3JpcHRpb24gPSAoe1xuICBwYXJhbXMsXG4gIGNoYW5uZWwsXG4gIHR5cGVzID0gW1wiKlwiXSxcbiAgZW5hYmxlZCA9IHRydWUsXG4gIG9uTGl2ZUV2ZW50LFxuICBkYXRhUHJvdmlkZXJOYW1lID0gXCJkZWZhdWx0XCIsXG4gIG1ldGEsXG59OiBVc2VTdWJzY3JpcHRpb25Qcm9wcyk6IHZvaWQgPT4ge1xuICBjb25zdCB7IGxpdmVQcm92aWRlciB9ID0gdXNlQ29udGV4dChMaXZlQ29udGV4dCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgc3Vic2NyaXB0aW9uOiBhbnk7XG5cbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgc3Vic2NyaXB0aW9uID0gbGl2ZVByb3ZpZGVyPy5zdWJzY3JpYmUoe1xuICAgICAgICBjaGFubmVsLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHR5cGVzLFxuICAgICAgICBjYWxsYmFjazogb25MaXZlRXZlbnQsXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAuLi5tZXRhLFxuICAgICAgICAgIGRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgICBsaXZlUHJvdmlkZXI/LnVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2VuYWJsZWRdKTtcbn07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IExpdmVDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9saXZlXCI7XG5pbXBvcnQgdHlwZSB7IExpdmVQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9saXZlL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VQdWJsaXNoOiAoKSA9PiBOb25OdWxsYWJsZTxMaXZlUHJvdmlkZXI+W1wicHVibGlzaFwiXSA9ICgpID0+IHtcbiAgY29uc3QgeyBsaXZlUHJvdmlkZXIgfSA9IHVzZUNvbnRleHQoTGl2ZUNvbnRleHQpO1xuXG4gIHJldHVybiBsaXZlUHJvdmlkZXI/LnB1Ymxpc2g7XG59O1xuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBVbmRvYWJsZVF1ZXVlQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvdW5kb2FibGVRdWV1ZVwiO1xuaW1wb3J0IHR5cGUgeyBJVW5kb2FibGVRdWV1ZSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy91bmRvYWJsZVF1ZXVlL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFVzZUNhbmNlbE5vdGlmaWNhdGlvblR5cGUgPSAoKSA9PiB7XG4gIG5vdGlmaWNhdGlvbnM6IElVbmRvYWJsZVF1ZXVlW107XG4gIG5vdGlmaWNhdGlvbkRpc3BhdGNoOiBSZWFjdC5EaXNwYXRjaDxhbnk+O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUNhbmNlbE5vdGlmaWNhdGlvbjogVXNlQ2FuY2VsTm90aWZpY2F0aW9uVHlwZSA9ICgpID0+IHtcbiAgY29uc3QgeyBub3RpZmljYXRpb25zLCBub3RpZmljYXRpb25EaXNwYXRjaCB9ID1cbiAgICB1c2VDb250ZXh0KFVuZG9hYmxlUXVldWVDb250ZXh0KTtcblxuICByZXR1cm4geyBub3RpZmljYXRpb25zLCBub3RpZmljYXRpb25EaXNwYXRjaCB9O1xufTtcbiIsImltcG9ydCBSZWFjdCwge1xuICBjcmVhdGVDb250ZXh0LFxuICB1c2VSZWR1Y2VyLFxuICB0eXBlIFByb3BzV2l0aENoaWxkcmVuLFxufSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IGlzRXF1YWwgZnJvbSBcImxvZGFzaC1lcy9pc0VxdWFsLmpzXCI7XG5cbmltcG9ydCB7IFVuZG9hYmxlUXVldWUgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50c1wiO1xuaW1wb3J0IHtcbiAgQWN0aW9uVHlwZXMsXG4gIHR5cGUgSVVuZG9hYmxlUXVldWUsXG4gIHR5cGUgSVVuZG9hYmxlUXVldWVDb250ZXh0LFxufSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgVW5kb2FibGVRdWV1ZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PElVbmRvYWJsZVF1ZXVlQ29udGV4dD4oe1xuICBub3RpZmljYXRpb25zOiBbXSxcbiAgbm90aWZpY2F0aW9uRGlzcGF0Y2g6ICgpID0+IGZhbHNlLFxufSk7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZTogSVVuZG9hYmxlUXVldWVbXSA9IFtdO1xuXG5leHBvcnQgY29uc3QgdW5kb2FibGVRdWV1ZVJlZHVjZXIgPSAoc3RhdGU6IElVbmRvYWJsZVF1ZXVlW10sIGFjdGlvbjogYW55KSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEFjdGlvblR5cGVzLkFERDoge1xuICAgICAgY29uc3QgbmV3U3RhdGUgPSBzdGF0ZS5maWx0ZXIoKG5vdGlmaWNhdGlvbkl0ZW06IElVbmRvYWJsZVF1ZXVlKSA9PiB7XG4gICAgICAgIHJldHVybiAhKFxuICAgICAgICAgIGlzRXF1YWwobm90aWZpY2F0aW9uSXRlbS5pZCwgYWN0aW9uLnBheWxvYWQuaWQpICYmXG4gICAgICAgICAgbm90aWZpY2F0aW9uSXRlbS5yZXNvdXJjZSA9PT0gYWN0aW9uLnBheWxvYWQucmVzb3VyY2VcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gW1xuICAgICAgICAuLi5uZXdTdGF0ZSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgIGlzUnVubmluZzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgfVxuICAgIGNhc2UgQWN0aW9uVHlwZXMuUkVNT1ZFOlxuICAgICAgcmV0dXJuIHN0YXRlLmZpbHRlcihcbiAgICAgICAgKG5vdGlmaWNhdGlvbkl0ZW06IElVbmRvYWJsZVF1ZXVlKSA9PlxuICAgICAgICAgICEoXG4gICAgICAgICAgICBpc0VxdWFsKG5vdGlmaWNhdGlvbkl0ZW0uaWQsIGFjdGlvbi5wYXlsb2FkLmlkKSAmJlxuICAgICAgICAgICAgbm90aWZpY2F0aW9uSXRlbS5yZXNvdXJjZSA9PT0gYWN0aW9uLnBheWxvYWQucmVzb3VyY2VcbiAgICAgICAgICApLFxuICAgICAgKTtcbiAgICBjYXNlIEFjdGlvblR5cGVzLkRFQ1JFQVNFX05PVElGSUNBVElPTl9TRUNPTkQ6XG4gICAgICByZXR1cm4gc3RhdGUubWFwKChub3RpZmljYXRpb25JdGVtOiBJVW5kb2FibGVRdWV1ZSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNFcXVhbChub3RpZmljYXRpb25JdGVtLmlkLCBhY3Rpb24ucGF5bG9hZC5pZCkgJiZcbiAgICAgICAgICBub3RpZmljYXRpb25JdGVtLnJlc291cmNlID09PSBhY3Rpb24ucGF5bG9hZC5yZXNvdXJjZVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ubm90aWZpY2F0aW9uSXRlbSxcbiAgICAgICAgICAgIHNlY29uZHM6IGFjdGlvbi5wYXlsb2FkLnNlY29uZHMgLSAxMDAwLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vdGlmaWNhdGlvbkl0ZW07XG4gICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgVW5kb2FibGVRdWV1ZUNvbnRleHRQcm92aWRlcjogUmVhY3QuRkM8UHJvcHNXaXRoQ2hpbGRyZW4+ID0gKHtcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIGNvbnN0IFtub3RpZmljYXRpb25zLCBub3RpZmljYXRpb25EaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKFxuICAgIHVuZG9hYmxlUXVldWVSZWR1Y2VyLFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgKTtcblxuICBjb25zdCBub3RpZmljYXRpb25EYXRhID0geyBub3RpZmljYXRpb25zLCBub3RpZmljYXRpb25EaXNwYXRjaCB9O1xuXG4gIHJldHVybiAoXG4gICAgPFVuZG9hYmxlUXVldWVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtub3RpZmljYXRpb25EYXRhfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIHt0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gbm90aWZpY2F0aW9ucy5tYXAoKG5vdGlmaWNhdGlvbikgPT4gKFxuICAgICAgICAgICAgPFVuZG9hYmxlUXVldWVcbiAgICAgICAgICAgICAga2V5PXtgJHtub3RpZmljYXRpb24uaWR9LSR7bm90aWZpY2F0aW9uLnJlc291cmNlfS1xdWV1ZWB9XG4gICAgICAgICAgICAgIG5vdGlmaWNhdGlvbj17bm90aWZpY2F0aW9ufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKVxuICAgICAgICA6IG51bGx9XG4gICAgPC9VbmRvYWJsZVF1ZXVlQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL25vdGlmaWNhdGlvblwiO1xuaW1wb3J0IHR5cGUgeyBJTm90aWZpY2F0aW9uQ29udGV4dCB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9ub3RpZmljYXRpb24vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IHVzZU5vdGlmaWNhdGlvbiA9ICgpOiBJTm90aWZpY2F0aW9uQ29udGV4dCA9PiB7XG4gIGNvbnN0IHsgb3BlbiwgY2xvc2UgfSA9IHVzZUNvbnRleHQoTm90aWZpY2F0aW9uQ29udGV4dCk7XG5cbiAgcmV0dXJuIHsgb3BlbiwgY2xvc2UgfTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdHlwZSBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgdHlwZSB7IElOb3RpZmljYXRpb25Db250ZXh0IH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLyoqIEBkZXByZWNhdGVkIGRlZmF1bHQgdmFsdWUgZm9yIG5vdGlmaWNhdGlvbiBjb250ZXh0IGhhcyBubyB1c2UgYW5kIGlzIGFuIGVtcHR5IG9iamVjdC4gICovXG5leHBvcnQgY29uc3QgZGVmYXVsdE5vdGlmaWNhdGlvblByb3ZpZGVyOiBJTm90aWZpY2F0aW9uQ29udGV4dCA9IHt9O1xuXG5leHBvcnQgY29uc3QgTm90aWZpY2F0aW9uQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8SU5vdGlmaWNhdGlvbkNvbnRleHQ+KHt9KTtcblxuZXhwb3J0IGNvbnN0IE5vdGlmaWNhdGlvbkNvbnRleHRQcm92aWRlcjogUmVhY3QuRkM8XG4gIFByb3BzV2l0aENoaWxkcmVuPElOb3RpZmljYXRpb25Db250ZXh0PlxuPiA9ICh7IG9wZW4sIGNsb3NlLCBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPE5vdGlmaWNhdGlvbkNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgb3BlbiwgY2xvc2UgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9Ob3RpZmljYXRpb25Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IHVzZU5vdGlmaWNhdGlvbiB9IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUgeyBPcGVuTm90aWZpY2F0aW9uUGFyYW1zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgdXNlSGFuZGxlTm90aWZpY2F0aW9uID0gKCk6IHR5cGVvZiBoYW5kbGVOb3RpZmljYXRpb24gPT4ge1xuICBjb25zdCB7IG9wZW4gfSA9IHVzZU5vdGlmaWNhdGlvbigpO1xuXG4gIGNvbnN0IGhhbmRsZU5vdGlmaWNhdGlvbiA9IHVzZUNhbGxiYWNrKFxuICAgIChcbiAgICAgIG5vdGlmaWNhdGlvbjogT3Blbk5vdGlmaWNhdGlvblBhcmFtcyB8IGZhbHNlIHwgdW5kZWZpbmVkLFxuICAgICAgZmFsbGJhY2tOb3RpZmljYXRpb24/OiBPcGVuTm90aWZpY2F0aW9uUGFyYW1zLFxuICAgICkgPT4ge1xuICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKG5vdGlmaWNhdGlvbikge1xuICAgICAgICAgIG9wZW4/Lihub3RpZmljYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGZhbGxiYWNrTm90aWZpY2F0aW9uKSB7XG4gICAgICAgICAgb3Blbj8uKGZhbGxiYWNrTm90aWZpY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgW10sXG4gICk7XG5cbiAgcmV0dXJuIGhhbmRsZU5vdGlmaWNhdGlvbjtcbn07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvaTE4blwiO1xuXG4vKipcbiAqIElmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgbG9jYWxlIGF0IHJ1bnRpbWUsIHJlZmluZSBwcm92aWRlcyB0aGUgYHVzZVNldExvY2FsZWAgaG9vay5cbiAqIEl0IHJldHVybnMgdGhlIGNoYW5nZUxvY2FsZSBtZXRob2QgZnJvbSBgaTE4blByb3ZpZGVyYCB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvdHJhbnNsYXRlL3VzZVNldExvY2FsZX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVNldExvY2FsZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpMThuUHJvdmlkZXIgfSA9IHVzZUNvbnRleHQoSTE4bkNvbnRleHQpO1xuXG4gIHJldHVybiB1c2VDYWxsYmFjaygobGFuZzogc3RyaW5nKSA9PiBpMThuUHJvdmlkZXI/LmNoYW5nZUxvY2FsZShsYW5nKSwgW10pO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB0eXBlIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB0eXBlIHsgSTE4blByb3ZpZGVyLCBJSTE4bkNvbnRleHQgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vKiogQGRlcHJlY2F0ZWQgZGVmYXVsdCB2YWx1ZSBmb3IgdHJhbnNsYXRpb24gY29udGV4dCBoYXMgbm8gdXNlIGFuZCBpcyBhbiBlbXB0eSBvYmplY3QuICAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRQcm92aWRlcjogUGFydGlhbDxJMThuUHJvdmlkZXI+ID0ge307XG5cbmV4cG9ydCBjb25zdCBJMThuQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SUkxOG5Db250ZXh0Pih7fSk7XG5cbmV4cG9ydCBjb25zdCBJMThuQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GQzxQcm9wc1dpdGhDaGlsZHJlbjxJSTE4bkNvbnRleHQ+PiA9ICh7XG4gIGNoaWxkcmVuLFxuICBpMThuUHJvdmlkZXIsXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEkxOG5Db250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17e1xuICAgICAgICBpMThuUHJvdmlkZXIsXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0kxOG5Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2kxOG5cIjtcblxuLyoqXG4gKiBJZiB5b3UgbmVlZCB0byB0cmFuc2xhdGUgdGhlIHRleHRzIGluIHlvdXIgb3duIGNvbXBvbmVudHMsIHJlZmluZSBwcm92aWRlcyB0aGUgYHVzZVRyYW5zbGF0ZWAgaG9vay5cbiAqIEl0IHJldHVybnMgdGhlIHRyYW5zbGF0ZSBtZXRob2QgZnJvbSBgaTE4blByb3ZpZGVyYCB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvdHJhbnNsYXRlL3VzZVRyYW5zbGF0ZX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpMThuUHJvdmlkZXIgfSA9IHVzZUNvbnRleHQoSTE4bkNvbnRleHQpO1xuXG4gIGNvbnN0IGZuID0gdXNlTWVtbygoKSA9PiB7XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKFxuICAgICAga2V5OiBzdHJpbmcsXG4gICAgICBvcHRpb25zPzogYW55LFxuICAgICAgZGVmYXVsdE1lc3NhZ2U/OiBzdHJpbmcsXG4gICAgKTogc3RyaW5nO1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShrZXk6IHN0cmluZywgZGVmYXVsdE1lc3NhZ2U/OiBzdHJpbmcpOiBzdHJpbmc7XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUoXG4gICAgICBrZXk6IHN0cmluZyxcbiAgICAgIG9wdGlvbnM/OiBzdHJpbmcgfCBhbnksXG4gICAgICBkZWZhdWx0TWVzc2FnZT86IHN0cmluZyxcbiAgICApIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGkxOG5Qcm92aWRlcj8udHJhbnNsYXRlKGtleSwgb3B0aW9ucywgZGVmYXVsdE1lc3NhZ2UpID8/XG4gICAgICAgIGRlZmF1bHRNZXNzYWdlID8/XG4gICAgICAgICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgZGVmYXVsdE1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICA/IG9wdGlvbnNcbiAgICAgICAgICA6IGtleSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfSwgW2kxOG5Qcm92aWRlcl0pO1xuXG4gIHJldHVybiBmbjtcbn07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBJMThuQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvaTE4blwiO1xuXG5leHBvcnQgdHlwZSBVc2VHZXRMb2NhbGVUeXBlID0gKCkgPT4gKCkgPT4gc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIElmIHlvdSBuZWVkIHRvIGtub3cgdGhlIGN1cnJlbnQgbG9jYWxlLCByZWZpbmUgcHJvdmlkZXMgdGhlIGB1c2VHZXRMb2NhbGVgIGhvb2suXG4gKiBJdCByZXR1cm5zIHRoZSBgZ2V0TG9jYWxlYCBtZXRob2QgZnJvbSBgaTE4blByb3ZpZGVyYCB1bmRlciB0aGUgaG9vZC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvdHJhbnNsYXRlL3VzZUdldExvY2FsZX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUdldExvY2FsZTogVXNlR2V0TG9jYWxlVHlwZSA9ICgpID0+IHtcbiAgY29uc3QgeyBpMThuUHJvdmlkZXIgfSA9IHVzZUNvbnRleHQoSTE4bkNvbnRleHQpO1xuXG4gIHJldHVybiB1c2VDYWxsYmFjaygoKSA9PiBpMThuUHJvdmlkZXI/LmdldExvY2FsZSgpLCBbXSk7XG59O1xuIiwiaW1wb3J0IHsgdXNlR2V0TG9jYWxlIH0gZnJvbSBcIi4vdXNlR2V0TG9jYWxlXCI7XG5pbXBvcnQgeyB1c2VTZXRMb2NhbGUgfSBmcm9tIFwiLi91c2VTZXRMb2NhbGVcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0ZSB9IGZyb20gXCIuL3VzZVRyYW5zbGF0ZVwiO1xuXG4vKipcbiAqIEl0IGNvbWJpbmVzIGB1c2VUcmFuc2xhdGVgLCBgdXNlU2V0TG9jYWxlYCBhbmQgYHVzZUdldExvY2FsZWAgaG9va3MgZm9yIGEgYmV0dGVyIGRldmVsb3BlciBleHBlcmllbmNlLlxuICogSXQgcmV0dXJucyBgaTE4blByb3ZpZGVyYCBtZXRob2RzIHVuZGVyIHRoZSBob29kLlxuICogQHJldHVybnMgYHRyYW5zbGF0ZWAgbWV0aG9kIHRvIHRyYW5zbGF0ZSB0aGUgdGV4dHMuXG4gKiBAcmV0dXJucyBgY2hhbmdlTG9jYWxlYCBtZXRob2QgdG8gY2hhbmdlIHRoZSBsb2NhbGVcbiAqIEByZXR1cm5zIGBnZXRMb2NhbGVgIG1ldGhvZCB0byBnZXQgdGhlIGN1cnJlbnQgbG9jYWxlLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2kxOG4vaTE4bi1wcm92aWRlci99IGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VUcmFuc2xhdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG4gIGNvbnN0IGNoYW5nZUxvY2FsZSA9IHVzZVNldExvY2FsZSgpO1xuICBjb25zdCBnZXRMb2NhbGUgPSB1c2VHZXRMb2NhbGUoKTtcblxuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZSxcbiAgICBjaGFuZ2VMb2NhbGUsXG4gICAgZ2V0TG9jYWxlLFxuICB9O1xufTtcbiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBwYXBhcGFyc2UgZnJvbSBcInBhcGFwYXJzZVwiO1xuaW1wb3J0IHdhcm5PbmNlIGZyb20gXCJ3YXJuLW9uY2VcIjtcblxuaW1wb3J0IHtcbiAgZG93bmxvYWRJbkJyb3dzZXIsXG4gIHBpY2tEYXRhUHJvdmlkZXIsXG4gIHBpY2tOb3REZXByZWNhdGVkLFxuICB1c2VVc2VyRnJpZW5kbHlOYW1lLFxufSBmcm9tIFwiQGRlZmluaXRpb25zXCI7XG5pbXBvcnQgeyB1c2VEYXRhUHJvdmlkZXIsIHVzZU1ldGEsIHVzZVJlc291cmNlIH0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VSZWNvcmQsXG4gIENydWRGaWx0ZXIsXG4gIENydWRTb3J0LFxuICBNZXRhUXVlcnksXG59IGZyb20gXCIuLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IE1hcERhdGFGbiB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8vIE9sZCBvcHRpb25zIGludGVyZmFjZSB0YWtlbiBmcm9tIGV4cG9ydC10by1jc3YtZml4LXNvdXJjZS1tYXBAMC4yLjFcbi8vIEtlcHQgaGVyZSB0byBlbnN1cmUgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuZXhwb3J0IGludGVyZmFjZSBFeHBvcnRPcHRpb25zIHtcbiAgZmlsZW5hbWU/OiBzdHJpbmc7XG4gIGZpZWxkU2VwYXJhdG9yPzogc3RyaW5nO1xuICBxdW90ZVN0cmluZ3M/OiBzdHJpbmc7XG4gIGRlY2ltYWxTZXBhcmF0b3I/OiBzdHJpbmc7XG4gIHNob3dMYWJlbHM/OiBib29sZWFuO1xuICBzaG93VGl0bGU/OiBib29sZWFuO1xuICB0aXRsZT86IHN0cmluZztcbiAgdXNlVGV4dEZpbGU/OiBib29sZWFuO1xuICB1c2VCb20/OiBib29sZWFuO1xuICBoZWFkZXJzPzogc3RyaW5nW107XG4gIHVzZUtleXNBc0hlYWRlcnM/OiBib29sZWFuO1xufVxuXG50eXBlIFVzZUV4cG9ydE9wdGlvbnNUeXBlPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBUVmFyaWFibGVzID0gYW55LFxuPiA9IHtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKiBAZGVmYXVsdCBSZXNvdXJjZSBuYW1lIHRoYXQgaXQgcmVhZHMgZnJvbSByb3V0ZVxuICAgKiBAZGVwcmVjYXRlZCBgcmVzb3VyY2VOYW1lYCBpcyBkZXByZWNhdGVkLiBVc2UgYHJlc291cmNlYCBpbnN0ZWFkLlxuICAgKi9cbiAgcmVzb3VyY2VOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogUmVzb3VyY2UgbmFtZSBmb3IgQVBJIGRhdGEgaW50ZXJhY3Rpb25zXG4gICAqIEBkZWZhdWx0IFJlc291cmNlIG5hbWUgdGhhdCBpdCByZWFkcyBmcm9tIHJvdXRlXG4gICAqL1xuICByZXNvdXJjZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEEgbWFwcGluZyBmdW5jdGlvbiB0aGF0IHJ1bnMgZm9yIGV2ZXJ5IHJlY29yZC4gTWFwcGVkIGRhdGEgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgZmlsZSBjb250ZW50c1xuICAgKi9cbiAgbWFwRGF0YT86IE1hcERhdGFGbjxURGF0YSwgVFZhcmlhYmxlcz47XG4gIC8qKlxuICAgKiAgU29ydHMgcmVjb3Jkc1xuICAgKiAgQGRlcHJlY2F0ZWQgYHNvcnRlcmAgaXMgZGVwcmVjYXRlZC4gVXNlIGBzb3J0ZXJzYCBpbnN0ZWFkLlxuICAgKi9cbiAgc29ydGVyPzogQ3J1ZFNvcnRbXTtcbiAgLyoqXG4gICAqICBTb3J0cyByZWNvcmRzXG4gICAqL1xuICBzb3J0ZXJzPzogQ3J1ZFNvcnRbXTtcbiAgLyoqXG4gICAqICBGaWx0ZXJzIHJlY29yZHNcbiAgICovXG4gIGZpbHRlcnM/OiBDcnVkRmlsdGVyW107XG4gIG1heEl0ZW1Db3VudD86IG51bWJlcjtcbiAgLyoqXG4gICAqICBSZXF1ZXN0cyB0byBmZXRjaCBkYXRhIGFyZSBtYWRlIGFzIGJhdGNoZXMgYnkgcGFnZSBzaXplLiBCeSBkZWZhdWx0LCBpdCBpcyAyMC4gVXNlZCBmb3IgYGdldExpc3RgIG1ldGhvZCBvZiBgRGF0YVByb3ZpZGVyYFxuICAgKi9cbiAgcGFnZVNpemU/OiBudW1iZXI7XG4gIC8qKlxuICAgKiAgVXNlZCBmb3IgZXhwb3J0aW5nIG9wdGlvbnNcbiAgICogIEB0eXBlIFtPcHRpb25zXShodHRwczovL2dpdGh1Yi5jb20vYWxleGNhemEvZXhwb3J0LXRvLWNzdilcbiAgICogQGRlcHJlY2F0ZWQgYGV4cG9ydE9wdGlvbnNgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgdW5wYXJzZUNvbmZpZ2AgaW5zdGVhZC5cbiAgICovXG4gIGV4cG9ydE9wdGlvbnM/OiBFeHBvcnRPcHRpb25zO1xuICAvKipcbiAgICogIFVzZWQgZm9yIGV4cG9ydGluZyBvcHRpb25zXG4gICAqICBAdHlwZSBbVW5wYXJzZUNvbmZpZ10oaHR0cHM6Ly9naXRodWIuY29tL0RlZmluaXRlbHlUeXBlZC9EZWZpbml0ZWx5VHlwZWQvdHJlZS9tYXN0ZXIvdHlwZXMvcGFwYXBhcnNlKVxuICAgKi9cbiAgdW5wYXJzZUNvbmZpZz86IHBhcGFwYXJzZS5VbnBhcnNlQ29uZmlnO1xuICAvKipcbiAgICogIE1ldGFkYXRhIHF1ZXJ5IGZvciBgZGF0YVByb3ZpZGVyYFxuICAgKi9cbiAgbWV0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqICBNZXRhZGF0YSBxdWVyeSBmb3IgYGRhdGFQcm92aWRlcmBcbiAgICogQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICovXG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBgZGF0YVByb3ZpZGVyYCwgeW91IHNob3VsZCB1c2UgdGhlIGBkYXRhUHJvdmlkZXJOYW1lYCB0aGF0IHlvdSB3aWxsIHVzZS5cbiAgICovXG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiAgQ2FsbGJhY2sgdG8gaGFuZGxlIGVycm9yIGV2ZW50cyBvZiB0aGlzIGhvb2tcbiAgICovXG4gIG9uRXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZDtcbiAgLyoqXG4gICAqICBXaGV0aGVyIHRvIGdlbmVyYXRlIGRvd25sb2FkIG9mIHRoZSBDU1YgaW4gYnJvd3NlciBlbnZpcm9ubWVudHMsIGRlZmF1bHRzIHRvIHRydWUuXG4gICAqL1xuICBkb3dubG9hZD86IGJvb2xlYW47XG59O1xuXG50eXBlIFVzZUV4cG9ydFJldHVyblR5cGUgPSB7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgdHJpZ2dlckV4cG9ydDogKCkgPT4gUHJvbWlzZTxzdHJpbmcgfCB1bmRlZmluZWQ+O1xufTtcblxuLyoqXG4gKiBgdXNlRXhwb3J0YCBob29rIGFsbG93cyB5b3UgdG8gbWFrZSB5b3VyIHJlc291cmNlcyBleHBvcnRhYmxlLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9pbXBvcnQtZXhwb3J0L3VzZUV4cG9ydH0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgb2YgdGhlIHF1ZXJ5IGV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBUVmFyaWFibGVzIC0gVmFsdWVzIGZvciBwYXJhbXMuXG4gKlxuICovXG5leHBvcnQgY29uc3QgdXNlRXhwb3J0ID0gPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBUVmFyaWFibGVzID0gYW55LFxuPih7XG4gIHJlc291cmNlTmFtZSxcbiAgcmVzb3VyY2U6IHJlc291cmNlRnJvbVByb3BzLFxuICBzb3J0ZXIsXG4gIHNvcnRlcnMsXG4gIGZpbHRlcnMsXG4gIG1heEl0ZW1Db3VudCxcbiAgcGFnZVNpemUgPSAyMCxcbiAgbWFwRGF0YSA9IChpdGVtKSA9PiBpdGVtIGFzIGFueSxcbiAgZXhwb3J0T3B0aW9ucyxcbiAgdW5wYXJzZUNvbmZpZyxcbiAgbWV0YSxcbiAgbWV0YURhdGEsXG4gIGRhdGFQcm92aWRlck5hbWUsXG4gIG9uRXJyb3IsXG4gIGRvd25sb2FkLFxufTogVXNlRXhwb3J0T3B0aW9uc1R5cGU8VERhdGEsIFRWYXJpYWJsZXM+ID0ge30pOiBVc2VFeHBvcnRSZXR1cm5UeXBlID0+IHtcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBkYXRhUHJvdmlkZXIgPSB1c2VEYXRhUHJvdmlkZXIoKTtcbiAgY29uc3QgZ2V0TWV0YSA9IHVzZU1ldGEoKTtcbiAgY29uc3QgeyByZXNvdXJjZSwgcmVzb3VyY2VzLCBpZGVudGlmaWVyIH0gPSB1c2VSZXNvdXJjZShcbiAgICBwaWNrTm90RGVwcmVjYXRlZChyZXNvdXJjZUZyb21Qcm9wcywgcmVzb3VyY2VOYW1lKSxcbiAgKTtcbiAgY29uc3QgZ2V0RnJpZW5kbHlOYW1lID0gdXNlVXNlckZyaWVuZGx5TmFtZSgpO1xuXG4gIGNvbnN0IGZpbGVuYW1lID0gYCR7Z2V0RnJpZW5kbHlOYW1lKFxuICAgIGlkZW50aWZpZXIsXG4gICAgXCJwbHVyYWxcIixcbiAgKX0tJHtuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCl9YDtcblxuICBjb25zdCB7IGdldExpc3QgfSA9IGRhdGFQcm92aWRlcihcbiAgICBwaWNrRGF0YVByb3ZpZGVyKGlkZW50aWZpZXIsIGRhdGFQcm92aWRlck5hbWUsIHJlc291cmNlcyksXG4gICk7XG5cbiAgY29uc3QgY29tYmluZWRNZXRhID0gZ2V0TWV0YSh7XG4gICAgcmVzb3VyY2UsXG4gICAgbWV0YTogcGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpLFxuICB9KTtcblxuICBjb25zdCB0cmlnZ2VyRXhwb3J0ID0gYXN5bmMgKCkgPT4ge1xuICAgIHNldElzTG9hZGluZyh0cnVlKTtcblxuICAgIGxldCByYXdEYXRhOiBCYXNlUmVjb3JkW10gPSBbXTtcblxuICAgIGxldCBjdXJyZW50ID0gMTtcbiAgICBsZXQgcHJlcGFyaW5nRGF0YSA9IHRydWU7XG4gICAgd2hpbGUgKHByZXBhcmluZ0RhdGEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgdG90YWwgfSA9IGF3YWl0IGdldExpc3Q8VERhdGE+KHtcbiAgICAgICAgICByZXNvdXJjZTogcmVzb3VyY2U/Lm5hbWUgPz8gXCJcIixcbiAgICAgICAgICBmaWx0ZXJzLFxuICAgICAgICAgIHNvcnQ6IHBpY2tOb3REZXByZWNhdGVkKHNvcnRlcnMsIHNvcnRlciksXG4gICAgICAgICAgc29ydGVyczogcGlja05vdERlcHJlY2F0ZWQoc29ydGVycywgc29ydGVyKSxcbiAgICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgcGFnZVNpemUsXG4gICAgICAgICAgICBtb2RlOiBcInNlcnZlclwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgIG1ldGFEYXRhOiBjb21iaW5lZE1ldGEsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnJlbnQrKztcblxuICAgICAgICByYXdEYXRhLnB1c2goLi4uZGF0YSk7XG5cbiAgICAgICAgaWYgKG1heEl0ZW1Db3VudCAmJiByYXdEYXRhLmxlbmd0aCA+PSBtYXhJdGVtQ291bnQpIHtcbiAgICAgICAgICByYXdEYXRhID0gcmF3RGF0YS5zbGljZSgwLCBtYXhJdGVtQ291bnQpO1xuICAgICAgICAgIHByZXBhcmluZ0RhdGEgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b3RhbCA9PT0gcmF3RGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICBwcmVwYXJpbmdEYXRhID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICAgIHByZXBhcmluZ0RhdGEgPSBmYWxzZTtcblxuICAgICAgICBvbkVycm9yPy4oZXJyb3IpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBoYXNVbnBhcnNlQ29uZmlnID1cbiAgICAgIHR5cGVvZiB1bnBhcnNlQ29uZmlnICE9PSBcInVuZGVmaW5lZFwiICYmIHVucGFyc2VDb25maWcgIT09IG51bGw7XG5cbiAgICB3YXJuT25jZShcbiAgICAgIGhhc1VucGFyc2VDb25maWcgJiZcbiAgICAgICAgdHlwZW9mIGV4cG9ydE9wdGlvbnMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgZXhwb3J0T3B0aW9ucyAhPT0gbnVsbCxcbiAgICAgIGBbdXNlRXhwb3J0XTogcmVzb3VyY2U6IFwiJHtpZGVudGlmaWVyfVwiIFxcblxcbkJvdGggXFxgdW5wYXJzZUNvbmZpZ1xcYCBhbmQgXFxgZXhwb3J0T3B0aW9uc1xcYCBhcmUgc2V0LCBcXGB1bnBhcnNlQ29uZmlnXFxgIHdpbGwgdGFrZSBwcmVjZWRlbmNlYCxcbiAgICApO1xuXG4gICAgY29uc3Qgb3B0aW9uczogRXhwb3J0T3B0aW9ucyA9IHtcbiAgICAgIGZpbGVuYW1lLFxuICAgICAgdXNlS2V5c0FzSGVhZGVyczogdHJ1ZSxcbiAgICAgIHVzZUJvbTogdHJ1ZSwgLy8gb3JpZ2luYWwgZGVmYXVsdFxuICAgICAgdGl0bGU6IFwiTXkgR2VuZXJhdGVkIFJlcG9ydFwiLCAvLyBvcmlnaW5hbCBkZWZhdWx0XG4gICAgICBxdW90ZVN0cmluZ3M6ICdcIicsIC8vIG9yaWdpbmFsIGRlZmF1bHRcbiAgICAgIC4uLmV4cG9ydE9wdGlvbnMsXG4gICAgfTtcblxuICAgIHdhcm5PbmNlKFxuICAgICAgZXhwb3J0T3B0aW9ucz8uZGVjaW1hbFNlcGFyYXRvciAhPT0gdW5kZWZpbmVkLFxuICAgICAgYFt1c2VFeHBvcnRdOiByZXNvdXJjZTogXCIke2lkZW50aWZpZXJ9XCIgXFxuXFxuVXNlIG9mIFxcYGRlY2ltYWxTZXBhcmF0b3JcXGAgbm8gbG9uZ2VyIHN1cHBvcnRlZCwgcGxlYXNlIHVzZSBcXGBtYXBEYXRhXFxgIGluc3RlYWQuXFxuXFxuU2VlIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9pbXBvcnQtZXhwb3J0L3VzZUV4cG9ydC9gLFxuICAgICk7XG5cbiAgICBpZiAoIWhhc1VucGFyc2VDb25maWcpIHtcbiAgICAgIHVucGFyc2VDb25maWcgPSB7XG4gICAgICAgIC8vIHVzZUtleXNBc0hlYWRlcnMgdGFrZXMgcHJpb3JpdHkgb3ZlciBvcHRpb25zLmhlYWRlcnNcbiAgICAgICAgY29sdW1uczogb3B0aW9ucy51c2VLZXlzQXNIZWFkZXJzID8gdW5kZWZpbmVkIDogb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICBkZWxpbWl0ZXI6IG9wdGlvbnMuZmllbGRTZXBhcmF0b3IsXG4gICAgICAgIGhlYWRlcjogb3B0aW9ucy5zaG93TGFiZWxzIHx8IG9wdGlvbnMudXNlS2V5c0FzSGVhZGVycyxcbiAgICAgICAgcXVvdGVDaGFyOiBvcHRpb25zLnF1b3RlU3RyaW5ncyxcbiAgICAgICAgcXVvdGVzOiB0cnVlLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5wYXJzZUNvbmZpZyA9IHtcbiAgICAgICAgLy8gU2V0IHRvIGZvcmNlIHF1b3RlIGZvciBiZXR0ZXIgY29tcGF0aWJpbGl0eVxuICAgICAgICBxdW90ZXM6IHRydWUsXG4gICAgICAgIC4uLnVucGFyc2VDb25maWcsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBjc3YgPSBwYXBhcGFyc2UudW5wYXJzZShyYXdEYXRhLm1hcChtYXBEYXRhIGFzIGFueSksIHVucGFyc2VDb25maWcpO1xuICAgIGlmIChvcHRpb25zLnNob3dUaXRsZSkge1xuICAgICAgY3N2ID0gYCR7b3B0aW9ucy50aXRsZX1cXHJcXG5cXG4ke2Nzdn1gO1xuICAgIH1cblxuICAgIC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHkgc3VwcG9ydCBmb3IgZG93bmxvYWRJbkJyb3dzZXIgb2YgdGhlIGV4cG9ydGVkIGZpbGUsIG9ubHkgd29ya3MgZm9yIGJyb3dzZXJzLlxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIGNzdi5sZW5ndGggPiAwICYmIChkb3dubG9hZCA/PyB0cnVlKSkge1xuICAgICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IG9wdGlvbnMudXNlVGV4dEZpbGUgPyBcIi50eHRcIiA6IFwiLmNzdlwiO1xuICAgICAgY29uc3QgZmlsZVR5cGUgPSBgdGV4dC8ke1xuICAgICAgICBvcHRpb25zLnVzZVRleHRGaWxlID8gXCJwbGFpblwiIDogXCJjc3ZcIlxuICAgICAgfTtjaGFyc2V0PXV0Zjg7YDtcbiAgICAgIGNvbnN0IGRvd25sb2FkRmlsZW5hbWUgPSBgJHsob3B0aW9ucy5maWxlbmFtZSA/PyBcImRvd25sb2FkXCIpLnJlcGxhY2UoXG4gICAgICAgIC8gL2csXG4gICAgICAgIFwiX1wiLFxuICAgICAgKX0ke2ZpbGVFeHRlbnNpb259YDtcblxuICAgICAgZG93bmxvYWRJbkJyb3dzZXIoXG4gICAgICAgIGRvd25sb2FkRmlsZW5hbWUsXG4gICAgICAgIGAke29wdGlvbnM/LnVzZUJvbSA/IFwiXFx1ZmVmZlwiIDogXCJcIn0ke2Nzdn1gLFxuICAgICAgICBmaWxlVHlwZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICByZXR1cm4gY3N2O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaXNMb2FkaW5nLFxuICAgIHRyaWdnZXJFeHBvcnQsXG4gIH07XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHdhcm5PbmNlIGZyb20gXCJ3YXJuLW9uY2VcIjtcblxuaW1wb3J0IHtcbiAgdXNlTWV0YSxcbiAgdXNlT25lLFxuICB1c2VDcmVhdGUsXG4gIHVzZVVwZGF0ZSxcbiAgdXNlUmVzb3VyY2VQYXJhbXMsXG4gIHVzZUludmFsaWRhdGUsXG4gIHVzZU11dGF0aW9uTW9kZSxcbiAgdXNlUmVmaW5lT3B0aW9ucyxcbiAgdXNlTG9hZGluZ092ZXJ0aW1lLFxuICB1c2VXYXJuQWJvdXRDaGFuZ2UsXG4gIHVzZVJlZGlyZWN0aW9uQWZ0ZXJTdWJtaXNzaW9uLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB7XG4gIHJlZGlyZWN0UGFnZSxcbiAgYXN5bmNEZWJvdW5jZSxcbiAgZGVmZXJFeGVjdXRpb24sXG4gIHBpY2tOb3REZXByZWNhdGVkLFxufSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnNcIjtcblxuaW1wb3J0IHR5cGUgeyBVcGRhdGVQYXJhbXMgfSBmcm9tIFwiLi4vZGF0YS91c2VVcGRhdGVcIjtcbmltcG9ydCB0eXBlIHsgVXNlQ3JlYXRlUGFyYW1zIH0gZnJvbSBcIi4uL2RhdGEvdXNlQ3JlYXRlXCI7XG5pbXBvcnQgdHlwZSB7IFVzZUZvcm1Qcm9wcywgVXNlRm9ybVJldHVyblR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHR5cGUge1xuICBCYXNlS2V5LFxuICBCYXNlUmVjb3JkLFxuICBDcmVhdGVSZXNwb25zZSxcbiAgSHR0cEVycm9yLFxuICBVcGRhdGVSZXNwb25zZSxcbn0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUge1xuICBBY3Rpb25QYXJhbXMsXG4gIFVzZUZvcm1Qcm9wcyxcbiAgVXNlRm9ybVJldHVyblR5cGUsXG4gIEF1dG9TYXZlSW5kaWNhdG9yRWxlbWVudHMsXG4gIEF1dG9TYXZlUHJvcHMsXG4gIEF1dG9TYXZlUmV0dXJuVHlwZSxcbiAgRm9ybUFjdGlvbixcbiAgUmVkaXJlY3RBY3Rpb24sXG4gIFJlZGlyZWN0aW9uVHlwZXMsXG4gIEZvcm1XaXRoU3luY1dpdGhMb2NhdGlvblBhcmFtcyxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLyoqXG4gKiBUaGlzIGhvb2sgb3JjaGVzdHJhdGVzIFJlZmluZSdzIGRhdGEgaG9va3MgdG8gY3JlYXRlLCBlZGl0LCBhbmQgY2xvbmUgZGF0YS4gSXQgYWxzbyBwcm92aWRlcyBhIHNldCBvZiBmZWF0dXJlcyB0byBtYWtlIGl0IGVhc2llciBmb3IgdXNlcnMgdG8gaW1wbGVtZW50IHRoZWlyIHJlYWwgd29ybGQgbmVlZHMgYW5kIGhhbmRsZSBlZGdlIGNhc2VzIHN1Y2ggYXMgcmVkaXJlY3RzLCBpbnZhbGlkYXRpb24sIGF1dG8tc2F2ZSBhbmQgbW9yZS5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9kYXRhL2hvb2tzL3VzZS1mb3JtfSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEB0eXBlUGFyYW0gVFF1ZXJ5Rm5EYXRhIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIHF1ZXJ5IGZ1bmN0aW9uLiBFeHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZS1yZWZlcmVuY2VzLyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH1cbiAqIEB0eXBlUGFyYW0gVEVycm9yIC0gQ3VzdG9tIGVycm9yIG9iamVjdCB0aGF0IGV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2NvcmUvaW50ZXJmYWNlLXJlZmVyZW5jZXMvI2h0dHBlcnJvciBgSHR0cEVycm9yYH1cbiAqIEB0eXBlUGFyYW0gVFZhcmlhYmxlcyAtIFZhbHVlcyBmb3IgcGFyYW1zLiBkZWZhdWx0IGB7fWBcbiAqIEB0eXBlUGFyYW0gVERhdGEgLSBSZXN1bHQgZGF0YSByZXR1cm5lZCBieSB0aGUgYHNlbGVjdGAgZnVuY3Rpb24uIEV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2NvcmUvaW50ZXJmYWNlLXJlZmVyZW5jZXMvI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfS4gRGVmYXVsdHMgdG8gYFRRdWVyeUZuRGF0YWBcbiAqIEB0eXBlUGFyYW0gVFJlc3BvbnNlIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIG11dGF0aW9uIGZ1bmN0aW9uLiBFeHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZS1yZWZlcmVuY2VzLyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH0uIERlZmF1bHRzIHRvIGBURGF0YWBcbiAqIEB0eXBlUGFyYW0gVFJlc3BvbnNlRXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvY29yZS9pbnRlcmZhY2UtcmVmZXJlbmNlcy8jaHR0cGVycm9yIGBIdHRwRXJyb3JgfS4gRGVmYXVsdHMgdG8gYFRFcnJvcmBcbiAqXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VGb3JtID0gPFxuICBUUXVlcnlGbkRhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0ge30sXG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IFRRdWVyeUZuRGF0YSxcbiAgVFJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlY29yZCA9IFREYXRhLFxuICBUUmVzcG9uc2VFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IFRFcnJvcixcbj4oXG4gIHByb3BzOiBVc2VGb3JtUHJvcHM8XG4gICAgVFF1ZXJ5Rm5EYXRhLFxuICAgIFRFcnJvcixcbiAgICBUVmFyaWFibGVzLFxuICAgIFREYXRhLFxuICAgIFRSZXNwb25zZSxcbiAgICBUUmVzcG9uc2VFcnJvclxuICA+ID0ge30sXG4pOiBVc2VGb3JtUmV0dXJuVHlwZTxcbiAgVFF1ZXJ5Rm5EYXRhLFxuICBURXJyb3IsXG4gIFRWYXJpYWJsZXMsXG4gIFREYXRhLFxuICBUUmVzcG9uc2UsXG4gIFRSZXNwb25zZUVycm9yXG4+ID0+IHtcbiAgY29uc3QgZ2V0TWV0YSA9IHVzZU1ldGEoKTtcbiAgY29uc3QgaW52YWxpZGF0ZSA9IHVzZUludmFsaWRhdGUoKTtcbiAgY29uc3QgeyByZWRpcmVjdDogZGVmYXVsdFJlZGlyZWN0IH0gPSB1c2VSZWZpbmVPcHRpb25zKCk7XG4gIGNvbnN0IHsgbXV0YXRpb25Nb2RlOiBkZWZhdWx0TXV0YXRpb25Nb2RlIH0gPSB1c2VNdXRhdGlvbk1vZGUoKTtcblxuICBjb25zdCB7IHNldFdhcm5XaGVuIH0gPSB1c2VXYXJuQWJvdXRDaGFuZ2UoKTtcbiAgY29uc3QgaGFuZGxlU3VibWl0V2l0aFJlZGlyZWN0ID0gdXNlUmVkaXJlY3Rpb25BZnRlclN1Ym1pc3Npb24oKTtcblxuICBjb25zdCBwaWNrZWRNZXRhID0gcGlja05vdERlcHJlY2F0ZWQocHJvcHMubWV0YSwgcHJvcHMubWV0YURhdGEpO1xuICBjb25zdCBtdXRhdGlvbk1vZGUgPSBwcm9wcy5tdXRhdGlvbk1vZGUgPz8gZGVmYXVsdE11dGF0aW9uTW9kZTtcblxuICBjb25zdCB7XG4gICAgaWQsXG4gICAgc2V0SWQsXG4gICAgcmVzb3VyY2UsXG4gICAgaWRlbnRpZmllcixcbiAgICBmb3JtQWN0aW9uOiBhY3Rpb24sXG4gIH0gPSB1c2VSZXNvdXJjZVBhcmFtcyh7XG4gICAgcmVzb3VyY2U6IHByb3BzLnJlc291cmNlLFxuICAgIGlkOiBwcm9wcy5pZCxcbiAgICBhY3Rpb246IHByb3BzLmFjdGlvbixcbiAgfSk7XG5cbiAgY29uc3QgW2F1dG9zYXZlZCwgc2V0QXV0b3NhdmVkXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBpc0VkaXQgPSBhY3Rpb24gPT09IFwiZWRpdFwiO1xuICBjb25zdCBpc0Nsb25lID0gYWN0aW9uID09PSBcImNsb25lXCI7XG4gIGNvbnN0IGlzQ3JlYXRlID0gYWN0aW9uID09PSBcImNyZWF0ZVwiO1xuXG4gIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoe1xuICAgIHJlc291cmNlLFxuICAgIG1ldGE6IHBpY2tlZE1ldGEsXG4gIH0pO1xuXG4gIGNvbnN0IGlzSWRSZXF1aXJlZCA9IChpc0VkaXQgfHwgaXNDbG9uZSkgJiYgQm9vbGVhbihwcm9wcy5yZXNvdXJjZSk7XG4gIGNvbnN0IGlzSWREZWZpbmVkID0gdHlwZW9mIHByb3BzLmlkICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1F1ZXJ5RGlzYWJsZWQgPSBwcm9wcy5xdWVyeU9wdGlvbnM/LmVuYWJsZWQgPT09IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGVuIGEgY3VzdG9tIHJlc291cmNlIGlzIHByb3ZpZGVkIHRocm91Z2ggcHJvcHMsIGBpZGAgd2lsbCBub3QgYmUgaW5mZXJyZWQgZnJvbSB0aGUgVVJMIHRvIGF2b2lkIGFueSBwb3RlbnRpYWwgZmF1bHR5IHJlcXVlc3RzLlxuICAgKiBJbiB0aGlzIGNhc2UsIGBpZGAgaXMgcmVxdWlyZWQgdG8gYmUgcGFzc2VkIHRocm91Z2ggcHJvcHMuXG4gICAqIElmIGBpZGAgaXMgbm90IGhhbmRsZWQsIGEgd2FybmluZyB3aWxsIGJlIHRocm93biBpbiBkZXZlbG9wbWVudCBtb2RlLlxuICAgKi9cbiAgd2Fybk9uY2UoXG4gICAgaXNJZFJlcXVpcmVkICYmICFpc0lkRGVmaW5lZCAmJiAhaXNRdWVyeURpc2FibGVkLFxuICAgIGlkV2FybmluZ01lc3NhZ2UoYWN0aW9uLCBpZGVudGlmaWVyLCBpZCksXG4gICk7XG5cbiAgLyoqXG4gICAqIFRhcmdldCBhY3Rpb24gdG8gcmVkaXJlY3QgYWZ0ZXIgZm9ybSBzdWJtaXNzaW9uLlxuICAgKi9cbiAgY29uc3QgcmVkaXJlY3RBY3Rpb24gPSByZWRpcmVjdFBhZ2Uoe1xuICAgIHJlZGlyZWN0RnJvbVByb3BzOiBwcm9wcy5yZWRpcmVjdCxcbiAgICBhY3Rpb24sXG4gICAgcmVkaXJlY3RPcHRpb25zOiBkZWZhdWx0UmVkaXJlY3QsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZWRpcmVjdGlvbiBmdW5jdGlvbiB0byBiZSB1c2VkIGluIGludGVybmFsIHJlZGlyZWN0cyBhbmQgdG8gYmUgcHJvdmlkZWQgdG8gdGhlIHVzZXIuXG4gICAqL1xuICBjb25zdCByZWRpcmVjdDogVXNlRm9ybVJldHVyblR5cGVbXCJyZWRpcmVjdFwiXSA9IChcbiAgICByZWRpcmVjdCA9IGlzRWRpdCA/IFwibGlzdFwiIDogXCJlZGl0XCIsXG4gICAgcmVkaXJlY3RJZCA9IGlkLFxuICAgIHJvdXRlUGFyYW1zID0ge30sXG4gICkgPT4ge1xuICAgIGhhbmRsZVN1Ym1pdFdpdGhSZWRpcmVjdCh7XG4gICAgICByZWRpcmVjdDogcmVkaXJlY3QsXG4gICAgICByZXNvdXJjZSxcbiAgICAgIGlkOiByZWRpcmVjdElkLFxuICAgICAgbWV0YTogeyAuLi5waWNrZWRNZXRhLCAuLi5yb3V0ZVBhcmFtcyB9LFxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHF1ZXJ5UmVzdWx0ID0gdXNlT25lPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YT4oe1xuICAgIHJlc291cmNlOiBpZGVudGlmaWVyLFxuICAgIGlkLFxuICAgIHF1ZXJ5T3B0aW9uczoge1xuICAgICAgLy8gT25seSBlbmFibGUgdGhlIHF1ZXJ5IGlmIGl0J3Mgbm90IGEgY3JlYXRlIGFjdGlvbiBhbmQgdGhlIGBpZGAgaXMgZGVmaW5lZFxuICAgICAgZW5hYmxlZDogIWlzQ3JlYXRlICYmIGlkICE9PSB1bmRlZmluZWQsXG4gICAgICAuLi5wcm9wcy5xdWVyeU9wdGlvbnMsXG4gICAgfSxcbiAgICBsaXZlTW9kZTogcHJvcHMubGl2ZU1vZGUsXG4gICAgb25MaXZlRXZlbnQ6IHByb3BzLm9uTGl2ZUV2ZW50LFxuICAgIGxpdmVQYXJhbXM6IHByb3BzLmxpdmVQYXJhbXMsXG4gICAgbWV0YTogeyAuLi5jb21iaW5lZE1ldGEsIC4uLnByb3BzLnF1ZXJ5TWV0YSB9LFxuICAgIGRhdGFQcm92aWRlck5hbWU6IHByb3BzLmRhdGFQcm92aWRlck5hbWUsXG4gIH0pO1xuXG4gIGNvbnN0IGNyZWF0ZU11dGF0aW9uID0gdXNlQ3JlYXRlPFRSZXNwb25zZSwgVFJlc3BvbnNlRXJyb3IsIFRWYXJpYWJsZXM+KHtcbiAgICBtdXRhdGlvbk9wdGlvbnM6IHByb3BzLmNyZWF0ZU11dGF0aW9uT3B0aW9ucyxcbiAgfSk7XG5cbiAgY29uc3QgdXBkYXRlTXV0YXRpb24gPSB1c2VVcGRhdGU8VFJlc3BvbnNlLCBUUmVzcG9uc2VFcnJvciwgVFZhcmlhYmxlcz4oe1xuICAgIG11dGF0aW9uT3B0aW9uczogcHJvcHMudXBkYXRlTXV0YXRpb25PcHRpb25zLFxuICB9KTtcblxuICBjb25zdCBtdXRhdGlvblJlc3VsdCA9IGlzRWRpdCA/IHVwZGF0ZU11dGF0aW9uIDogY3JlYXRlTXV0YXRpb247XG4gIGNvbnN0IGlzTXV0YXRpb25Mb2FkaW5nID0gbXV0YXRpb25SZXN1bHQuaXNMb2FkaW5nO1xuICBjb25zdCBmb3JtTG9hZGluZyA9IGlzTXV0YXRpb25Mb2FkaW5nIHx8IHF1ZXJ5UmVzdWx0LmlzRmV0Y2hpbmc7XG5cbiAgY29uc3QgeyBlbGFwc2VkVGltZSB9ID0gdXNlTG9hZGluZ092ZXJ0aW1lKHtcbiAgICBpc0xvYWRpbmc6IGZvcm1Mb2FkaW5nLFxuICAgIGludGVydmFsOiBwcm9wcy5vdmVydGltZU9wdGlvbnM/LmludGVydmFsLFxuICAgIG9uSW50ZXJ2YWw6IHByb3BzLm92ZXJ0aW1lT3B0aW9ucz8ub25JbnRlcnZhbCxcbiAgfSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBBZnRlciBgYXV0b3NhdmVkYCBpcyBzZXQgdG8gYHRydWVgLCBpdCB3b24ndCBiZSBzZXQgdG8gYGZhbHNlYCBhZ2Fpbi5cbiAgICAvLyBUaGVyZWZvcmUsIHRoZSBgaW52YWxpZGF0ZWAgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgb25seSBvbmNlIGF0IHRoZSBlbmQgb2YgdGhlIGhvb2tzIGxpZmVjeWNsZS5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBwcm9wcy5hdXRvU2F2ZT8uaW52YWxpZGF0ZU9uVW5tb3VudCAmJlxuICAgICAgICBhdXRvc2F2ZWQgJiZcbiAgICAgICAgaWRlbnRpZmllciAmJlxuICAgICAgICB0eXBlb2YgaWQgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICkge1xuICAgICAgICBpbnZhbGlkYXRlKHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBpbnZhbGlkYXRlczogcHJvcHMuaW52YWxpZGF0ZXMgfHwgW1wibGlzdFwiLCBcIm1hbnlcIiwgXCJkZXRhaWxcIl0sXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZTogcHJvcHMuZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW3Byb3BzLmF1dG9TYXZlPy5pbnZhbGlkYXRlT25Vbm1vdW50LCBhdXRvc2F2ZWRdKTtcblxuICBjb25zdCBvbkZpbmlzaCA9IGFzeW5jIChcbiAgICB2YWx1ZXM6IFRWYXJpYWJsZXMsXG4gICAgeyBpc0F1dG9zYXZlID0gZmFsc2UgfTogeyBpc0F1dG9zYXZlPzogYm9vbGVhbiB9ID0ge30sXG4gICkgPT4ge1xuICAgIGNvbnN0IGlzUGVzc2ltaXN0aWMgPSBtdXRhdGlvbk1vZGUgPT09IFwicGVzc2ltaXN0aWNcIjtcblxuICAgIC8vIERpc2FibGUgd2FybmluZyB0cmlnZ2VyIHdoZW4gdGhlIGZvcm0gaXMgYmVpbmcgc3VibWl0dGVkXG4gICAgc2V0V2FybldoZW4oZmFsc2UpO1xuXG4gICAgLy8gUmVkaXJlY3QgYWZ0ZXIgYSBzdWNjZXNzZnVsIGZvcm0gc3VibWlzc2lvblxuICAgIGNvbnN0IG9uU3VjY2Vzc1JlZGlyZWN0ID0gKGlkPzogQmFzZUtleSkgPT4gcmVkaXJlY3QocmVkaXJlY3RBY3Rpb24sIGlkKTtcblxuICAgIGNvbnN0IHN1Ym1pc3Npb25Qcm9taXNlID0gbmV3IFByb21pc2U8XG4gICAgICBDcmVhdGVSZXNwb25zZTxUUmVzcG9uc2U+IHwgVXBkYXRlUmVzcG9uc2U8VFJlc3BvbnNlPiB8IHZvaWRcbiAgICA+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIC8vIFJlamVjdCB0aGUgbXV0YXRpb24gaWYgdGhlIHJlc291cmNlIGlzIG5vdCBkZWZpbmVkXG4gICAgICBpZiAoIXJlc291cmNlKSByZXR1cm4gcmVqZWN0KG1pc3NpbmdSZXNvdXJjZUVycm9yKTtcbiAgICAgIC8vIFJlamVjdCB0aGUgbXV0YXRpb24gaWYgdGhlIGBpZGAgaXMgbm90IGRlZmluZWQgaW4gZWRpdCBhY3Rpb25cbiAgICAgIC8vIFRoaXMgbGluZSBpcyBjb21tZW50ZWQgb3V0IGJlY2F1c2UgdGhlIGBpZGAgbWlnaHQgbm90IGJlIHNldCBmb3Igc29tZSBjYXNlcyBhbmQgZWRpdCBpcyBkb25lIG9uIGEgcmVzb3VyY2UuXG4gICAgICAvLyBpZiAoaXNFZGl0ICYmICFpZCkgcmV0dXJuIHJlamVjdChtaXNzaW5nSWRFcnJvcik7XG4gICAgICAvLyBSZWplY3QgdGhlIG11dGF0aW9uIGlmIHRoZSBgaWRgIGlzIG5vdCBkZWZpbmVkIGluIGNsb25lIGFjdGlvblxuICAgICAgaWYgKGlzQ2xvbmUgJiYgIWlkKSByZXR1cm4gcmVqZWN0KG1pc3NpbmdJZEVycm9yKTtcbiAgICAgIC8vIFJlamVjdCB0aGUgbXV0YXRpb24gaWYgdGhlcmUncyBubyBgdmFsdWVzYCBwYXNzZWRcbiAgICAgIGlmICghdmFsdWVzKSByZXR1cm4gcmVqZWN0KG1pc3NpbmdWYWx1ZXNFcnJvcik7XG4gICAgICAvLyBBdXRvIFNhdmUgaXMgb25seSBhbGxvd2VkIGluIGVkaXQgYWN0aW9uXG4gICAgICBpZiAoaXNBdXRvc2F2ZSAmJiAhaXNFZGl0KSByZXR1cm4gcmVqZWN0KGF1dG9zYXZlT25Ob25FZGl0RXJyb3IpO1xuXG4gICAgICBpZiAoIWlzUGVzc2ltaXN0aWMgJiYgIWlzQXV0b3NhdmUpIHtcbiAgICAgICAgLy8gSWYgdGhlIG11dGF0aW9uIG1vZGUgaXMgbm90IHBlc3NpbWlzdGljLCBoYW5kbGUgdGhlIHJlZGlyZWN0IGltbWVkaWF0ZWx5IGluIGFuIGFzeW5jIG1hbm5lclxuICAgICAgICAvLyBgc2V0V2FybldoZW5gIGJsb2NrcyB0aGUgcmVkaXJlY3RzIHVudGlsIHNldCB0byBgZmFsc2VgXG4gICAgICAgIC8vIElmIHJlZGlyZWN0IGlzIGRvbmUgYmVmb3JlIHRoZSB2YWx1ZSBpcyBwcm9wZXJseSBzZXQsIGl0IHdpbGwgYmUgYmxvY2tlZC5cbiAgICAgICAgLy8gV2UncmUgZGVmZXJyaW5nIHRoZSBleGVjdXRpb24gb2YgdGhlIHJlZGlyZWN0IHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBpcyBzZXQgcHJvcGVybHkuXG4gICAgICAgIGRlZmVyRXhlY3V0aW9uKCgpID0+IG9uU3VjY2Vzc1JlZGlyZWN0KCkpO1xuICAgICAgICAvLyBSZXNvbHZlIHRoZSBwcm9taXNlIGltbWVkaWF0ZWx5XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdmFyaWFibGVzOlxuICAgICAgICB8IFVwZGF0ZVBhcmFtczxUUmVzcG9uc2UsIFRSZXNwb25zZUVycm9yLCBUVmFyaWFibGVzPlxuICAgICAgICB8IFVzZUNyZWF0ZVBhcmFtczxUUmVzcG9uc2UsIFRSZXNwb25zZUVycm9yLCBUVmFyaWFibGVzPiA9IHtcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICByZXNvdXJjZTogaWRlbnRpZmllciA/PyByZXNvdXJjZS5uYW1lLFxuICAgICAgICBtZXRhOiB7IC4uLmNvbWJpbmVkTWV0YSwgLi4ucHJvcHMubXV0YXRpb25NZXRhIH0sXG4gICAgICAgIG1ldGFEYXRhOiB7IC4uLmNvbWJpbmVkTWV0YSwgLi4ucHJvcHMubXV0YXRpb25NZXRhIH0sXG4gICAgICAgIGRhdGFQcm92aWRlck5hbWU6IHByb3BzLmRhdGFQcm92aWRlck5hbWUsXG4gICAgICAgIGludmFsaWRhdGVzOiBpc0F1dG9zYXZlID8gW10gOiBwcm9wcy5pbnZhbGlkYXRlcyxcbiAgICAgICAgc3VjY2Vzc05vdGlmaWNhdGlvbjogaXNBdXRvc2F2ZSA/IGZhbHNlIDogcHJvcHMuc3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgICAgICAgZXJyb3JOb3RpZmljYXRpb246IGlzQXV0b3NhdmUgPyBmYWxzZSA6IHByb3BzLmVycm9yTm90aWZpY2F0aW9uLFxuICAgICAgICAvLyBVcGRhdGUgc3BlY2lmaWMgdmFyaWFibGVzXG4gICAgICAgIC4uLihpc0VkaXRcbiAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgaWQ6IGlkID8/IFwiXCIsXG4gICAgICAgICAgICAgIG11dGF0aW9uTW9kZSxcbiAgICAgICAgICAgICAgdW5kb2FibGVUaW1lb3V0OiBwcm9wcy51bmRvYWJsZVRpbWVvdXQsXG4gICAgICAgICAgICAgIG9wdGltaXN0aWNVcGRhdGVNYXA6IHByb3BzLm9wdGltaXN0aWNVcGRhdGVNYXAsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB7fSksXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB7IG11dGF0ZUFzeW5jIH0gPSBpc0VkaXQgPyB1cGRhdGVNdXRhdGlvbiA6IGNyZWF0ZU11dGF0aW9uO1xuXG4gICAgICBtdXRhdGVBc3luYyh2YXJpYWJsZXMgYXMgYW55LCB7XG4gICAgICAgIC8vIENhbGwgdXNlci1kZWZpbmVkIGBvbk11dGF0aW9uU3VjY2Vzc2AgYW5kIGBvbk11dGF0aW9uRXJyb3JgIGNhbGxiYWNrcyBpZiBwcm92aWRlZFxuICAgICAgICAvLyBUaGVzZSBjYWxsYmFja3Mgd2lsbCBub3QgaGF2ZSBhbiBlZmZlY3Qgb24gdGhlIHN1Ym1pc3Npb24gcHJvbWlzZVxuICAgICAgICBvblN1Y2Nlc3M6IHByb3BzLm9uTXV0YXRpb25TdWNjZXNzXG4gICAgICAgICAgPyAoZGF0YSwgXywgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICBwcm9wcy5vbk11dGF0aW9uU3VjY2Vzcz8uKGRhdGEsIHZhbHVlcywgY29udGV4dCwgaXNBdXRvc2F2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgIG9uRXJyb3I6IHByb3BzLm9uTXV0YXRpb25FcnJvclxuICAgICAgICAgID8gKGVycm9yOiBUUmVzcG9uc2VFcnJvciwgXywgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICBwcm9wcy5vbk11dGF0aW9uRXJyb3I/LihlcnJvciwgdmFsdWVzLCBjb250ZXh0LCBpc0F1dG9zYXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgIH0pXG4gICAgICAgIC8vIElmIHRoZSBtdXRhdGlvbiBtb2RlIGlzIHBlc3NpbWlzdGljLCByZXNvbHZlIHRoZSBwcm9taXNlIGFmdGVyIHRoZSBtdXRhdGlvbiBpcyBzdWNjZWVkZWRcbiAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoaXNQZXNzaW1pc3RpYyAmJiAhaXNBdXRvc2F2ZSkge1xuICAgICAgICAgICAgZGVmZXJFeGVjdXRpb24oKCkgPT4gb25TdWNjZXNzUmVkaXJlY3QoZGF0YT8uZGF0YT8uaWQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzQXV0b3NhdmUpIHtcbiAgICAgICAgICAgIHNldEF1dG9zYXZlZCh0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfSlcbiAgICAgICAgLy8gSWYgdGhlIG11dGF0aW9uIG1vZGUgaXMgcGVzc2ltaXN0aWMsIHJlamVjdCB0aGUgcHJvbWlzZSBhZnRlciB0aGUgbXV0YXRpb24gaXMgZmFpbGVkXG4gICAgICAgIC5jYXRjaChyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN1Ym1pc3Npb25Qcm9taXNlO1xuICB9O1xuXG4gIGNvbnN0IG9uRmluaXNoQXV0b1NhdmUgPSBhc3luY0RlYm91bmNlKFxuICAgICh2YWx1ZXM6IFRWYXJpYWJsZXMpID0+IG9uRmluaXNoKHZhbHVlcywgeyBpc0F1dG9zYXZlOiB0cnVlIH0pLFxuICAgIHByb3BzLmF1dG9TYXZlPy5kZWJvdW5jZSB8fCAxMDAwLFxuICAgIFwiQ2FuY2VsbGVkIGJ5IGRlYm91bmNlXCIsXG4gICk7XG5cbiAgY29uc3Qgb3ZlcnRpbWUgPSB7XG4gICAgZWxhcHNlZFRpbWUsXG4gIH07XG5cbiAgY29uc3QgYXV0b1NhdmVQcm9wcyA9IHtcbiAgICBzdGF0dXM6IHVwZGF0ZU11dGF0aW9uLnN0YXR1cyxcbiAgICBkYXRhOiB1cGRhdGVNdXRhdGlvbi5kYXRhLFxuICAgIGVycm9yOiB1cGRhdGVNdXRhdGlvbi5lcnJvcixcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uRmluaXNoLFxuICAgIG9uRmluaXNoQXV0b1NhdmUsXG4gICAgZm9ybUxvYWRpbmcsXG4gICAgbXV0YXRpb25SZXN1bHQsXG4gICAgbXV0YXRpb246IG11dGF0aW9uUmVzdWx0LFxuICAgIHF1ZXJ5UmVzdWx0LFxuICAgIHF1ZXJ5OiBxdWVyeVJlc3VsdCxcbiAgICBhdXRvU2F2ZVByb3BzLFxuICAgIGlkLFxuICAgIHNldElkLFxuICAgIHJlZGlyZWN0LFxuICAgIG92ZXJ0aW1lLFxuICB9O1xufTtcblxuY29uc3QgbWlzc2luZ1Jlc291cmNlRXJyb3IgPSBuZXcgRXJyb3IoXG4gIFwiW3VzZUZvcm1dOiBgcmVzb3VyY2VgIGlzIG5vdCBkZWZpbmVkIG9yIG5vdCBtYXRjaGVkIGJ1dCBpcyByZXF1aXJlZFwiLFxuKTtcblxuY29uc3QgbWlzc2luZ0lkRXJyb3IgPSBuZXcgRXJyb3IoXG4gIFwiW3VzZUZvcm1dOiBgaWRgIGlzIG5vdCBkZWZpbmVkIGJ1dCBpcyByZXF1aXJlZCBpbiBlZGl0IGFuZCBjbG9uZSBhY3Rpb25zXCIsXG4pO1xuXG5jb25zdCBtaXNzaW5nVmFsdWVzRXJyb3IgPSBuZXcgRXJyb3IoXG4gIFwiW3VzZUZvcm1dOiBgdmFsdWVzYCBpcyBub3QgcHJvdmlkZWQgYnV0IGlzIHJlcXVpcmVkXCIsXG4pO1xuXG5jb25zdCBhdXRvc2F2ZU9uTm9uRWRpdEVycm9yID0gbmV3IEVycm9yKFxuICBcIlt1c2VGb3JtXTogYGF1dG9TYXZlYCBpcyBvbmx5IGFsbG93ZWQgaW4gZWRpdCBhY3Rpb25cIixcbik7XG5cbmNvbnN0IGlkV2FybmluZ01lc3NhZ2UgPSAoYWN0aW9uPzogc3RyaW5nLCBpZGVudGlmaWVyPzogc3RyaW5nLCBpZD86IEJhc2VLZXkpID0+XG4gIGBbdXNlRm9ybV06IGFjdGlvbjogXCIke2FjdGlvbn1cIiwgcmVzb3VyY2U6IFwiJHtpZGVudGlmaWVyfVwiLCBpZDogJHtpZH1cblxuSWYgeW91IGRvbid0IHVzZSB0aGUgXFxgc2V0SWRcXGAgbWV0aG9kIHRvIHNldCB0aGUgXFxgaWRcXGAsIHlvdSBzaG91bGQgcGFzcyB0aGUgXFxgaWRcXGAgcHJvcCB0byBcXGB1c2VGb3JtXFxgLiBPdGhlcndpc2UsIFxcYHVzZUZvcm1cXGAgd2lsbCBub3QgYmUgYWJsZSB0byBpbmZlciB0aGUgXFxgaWRcXGAgZnJvbSB0aGUgY3VycmVudCBVUkwgd2l0aCBjdXN0b20gcmVzb3VyY2UgcHJvdmlkZWQuXG5cblNlZSBodHRwczovL3JlZmluZS5kZXYvZG9jcy9kYXRhL2hvb2tzL3VzZS1mb3JtLyNpZC1gO1xuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUgeyBCYXNlS2V5LCBNZXRhRGF0YVF1ZXJ5IH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgSVJlc291cmNlSXRlbSB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBSZWRpcmVjdEFjdGlvbiB9IGZyb20gXCIuLi9mb3JtL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIFVzZVJlZGlyZWN0aW9uQWZ0ZXJTdWJtaXNzaW9uVHlwZSA9ICgpID0+IChvcHRpb25zOiB7XG4gIHJlZGlyZWN0OiBSZWRpcmVjdEFjdGlvbjtcbiAgcmVzb3VyY2U/OiBJUmVzb3VyY2VJdGVtO1xuICBpZD86IEJhc2VLZXk7XG4gIG1ldGE/OiBNZXRhRGF0YVF1ZXJ5O1xufSkgPT4gdm9pZDtcblxuZXhwb3J0IGNvbnN0IHVzZVJlZGlyZWN0aW9uQWZ0ZXJTdWJtaXNzaW9uOiBVc2VSZWRpcmVjdGlvbkFmdGVyU3VibWlzc2lvblR5cGUgPVxuICAoKSA9PiB7XG4gICAgY29uc3QgeyBzaG93LCBlZGl0LCBsaXN0LCBjcmVhdGUgfSA9IHVzZU5hdmlnYXRpb24oKTtcblxuICAgIGNvbnN0IGhhbmRsZVN1Ym1pdFdpdGhSZWRpcmVjdCA9IHVzZUNhbGxiYWNrKFxuICAgICAgKHtcbiAgICAgICAgcmVkaXJlY3QsXG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBpZCxcbiAgICAgICAgbWV0YSA9IHt9LFxuICAgICAgfToge1xuICAgICAgICByZWRpcmVjdDogUmVkaXJlY3RBY3Rpb247XG4gICAgICAgIHJlc291cmNlPzogSVJlc291cmNlSXRlbTtcbiAgICAgICAgaWQ/OiBCYXNlS2V5O1xuICAgICAgICBtZXRhPzogTWV0YURhdGFRdWVyeTtcbiAgICAgIH0pID0+IHtcbiAgICAgICAgaWYgKHJlZGlyZWN0ICYmIHJlc291cmNlKSB7XG4gICAgICAgICAgaWYgKCEhcmVzb3VyY2Uuc2hvdyAmJiByZWRpcmVjdCA9PT0gXCJzaG93XCIgJiYgaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzaG93KHJlc291cmNlLCBpZCwgdW5kZWZpbmVkLCBtZXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoISFyZXNvdXJjZS5lZGl0ICYmIHJlZGlyZWN0ID09PSBcImVkaXRcIiAmJiBpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGVkaXQocmVzb3VyY2UsIGlkLCB1bmRlZmluZWQsIG1ldGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghIXJlc291cmNlLmNyZWF0ZSAmJiByZWRpcmVjdCA9PT0gXCJjcmVhdGVcIikge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZShyZXNvdXJjZSwgdW5kZWZpbmVkLCBtZXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbGlzdChyZXNvdXJjZSwgXCJwdXNoXCIsIG1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0sXG4gICAgICBbXSxcbiAgICApO1xuXG4gICAgcmV0dXJuIGhhbmRsZVN1Ym1pdFdpdGhSZWRpcmVjdDtcbiAgfTtcbiIsImltcG9ydCB7IFJvdXRlckNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL3JvdXRlclwiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUJhY2sgPSAoKSA9PiB7XG4gIGNvbnN0IHJvdXRlckNvbnRleHQgPSB1c2VDb250ZXh0KFJvdXRlckNvbnRleHQpO1xuXG4gIGNvbnN0IHVzZUJhY2sgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IHJvdXRlckNvbnRleHQ/LmJhY2sgPz8gKCgpID0+ICgpID0+IHVuZGVmaW5lZCksXG4gICAgW3JvdXRlckNvbnRleHQ/LmJhY2tdLFxuICApO1xuXG4gIGNvbnN0IGJhY2sgPSB1c2VCYWNrKCk7XG5cbiAgcmV0dXJuIGJhY2s7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IFJvdXRlckNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL3JvdXRlclwiO1xuaW1wb3J0IHsgdXNlUmVzb3VyY2UgfSBmcm9tIFwiQGhvb2tzL3Jlc291cmNlXCI7XG5cbmltcG9ydCB0eXBlIHsgQmFzZUtleSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IElSZXNvdXJjZUl0ZW0gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHtcbiAgQWN0aW9uLFxuICBHb0NvbmZpZyBhcyBHb0NvbmZpZ0Jhc2UsXG59IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvdHlwZXNcIjtcbmltcG9ydCB7IHVzZUdldFRvUGF0aCB9IGZyb20gXCIuLi91c2UtZ2V0LXRvLXBhdGhcIjtcblxudHlwZSBSZXNvdXJjZVdpdGhvdXRJZCA9IHtcbiAgLyoqXG4gICAqICBUaGUgbmFtZSBvciBpZGVudGlmaWVyIG9mIHRoZSByZXNvdXJjZS5cbiAgICovXG4gIHJlc291cmNlOiBzdHJpbmc7XG4gIGFjdGlvbjogRXh0cmFjdDxBY3Rpb24sIFwiY3JlYXRlXCIgfCBcImxpc3RcIj47XG4gIGlkPzogbmV2ZXI7XG4gIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbn07XG5cbnR5cGUgUmVzb3VyY2VXaXRoSWQgPSB7XG4gIC8qKlxuICAgKiAgVGhlIG5hbWUgb3IgaWRlbnRpZmllciBvZiB0aGUgcmVzb3VyY2UuXG4gICAqL1xuICByZXNvdXJjZTogc3RyaW5nO1xuICBhY3Rpb246IEV4dHJhY3Q8QWN0aW9uLCBcImVkaXRcIiB8IFwic2hvd1wiIHwgXCJjbG9uZVwiPjtcbiAgaWQ6IEJhc2VLZXk7XG4gIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbn07XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlID0gUmVzb3VyY2VXaXRob3V0SWQgfCBSZXNvdXJjZVdpdGhJZDtcblxuZXhwb3J0IHR5cGUgR29Db25maWdXaXRoUmVzb3VyY2UgPSBPbWl0PEdvQ29uZmlnQmFzZSwgXCJ0b1wiPiAmIHtcbiAgdG8/OiBHb0NvbmZpZ0Jhc2VbXCJ0b1wiXSB8IFJlc291cmNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUdvID0gKCkgPT4ge1xuICBjb25zdCByb3V0ZXJDb250ZXh0ID0gdXNlQ29udGV4dChSb3V0ZXJDb250ZXh0KTtcbiAgY29uc3QgeyBzZWxlY3Q6IHJlc291cmNlU2VsZWN0IH0gPSB1c2VSZXNvdXJjZSgpO1xuICBjb25zdCBnZXRUb1BhdGggPSB1c2VHZXRUb1BhdGgoKTtcblxuICBjb25zdCB1c2VHbyA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gcm91dGVyQ29udGV4dD8uZ28gPz8gKCgpID0+ICgpID0+IHVuZGVmaW5lZCksXG4gICAgW3JvdXRlckNvbnRleHQ/LmdvXSxcbiAgKTtcblxuICBjb25zdCBnb0Zyb21Sb3V0ZXIgPSB1c2VHbygpO1xuXG4gIGNvbnN0IGdvID0gdXNlQ2FsbGJhY2soXG4gICAgKGNvbmZpZzogR29Db25maWdXaXRoUmVzb3VyY2UgfCBHb0NvbmZpZ0Jhc2UpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRvICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHJldHVybiBnb0Zyb21Sb3V0ZXIoeyAuLi5jb25maWcsIHRvOiBjb25maWcudG8gfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdoZW4gY29uZmlnLnRvIGlzIGFuIG9iamVjdCwgaXQgbWVhbnMgdGhhdCB3ZSB3YW50IHRvIGdvIHRvIGEgcmVzb3VyY2UuXG4gICAgICAvLyBzbyB3ZSBuZWVkIHRvIGZpbmQgdGhlIHBhdGggZm9yIHRoZSByZXNvdXJjZS5cbiAgICAgIGNvbnN0IHsgcmVzb3VyY2UgfSA9IHJlc291cmNlU2VsZWN0KGNvbmZpZy50by5yZXNvdXJjZSk7XG4gICAgICBoYW5kbGVSZXNvdXJjZUVycm9ycyhjb25maWcudG8sIHJlc291cmNlKTtcbiAgICAgIGNvbnN0IG5ld1RvID0gZ2V0VG9QYXRoKHtcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgIGFjdGlvbjogY29uZmlnLnRvLmFjdGlvbixcbiAgICAgICAgbWV0YToge1xuICAgICAgICAgIGlkOiBjb25maWcudG8uaWQsXG4gICAgICAgICAgLi4uY29uZmlnLnRvLm1ldGEsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGdvRnJvbVJvdXRlcih7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgdG86IG5ld1RvLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBbcmVzb3VyY2VTZWxlY3QsIGdvRnJvbVJvdXRlcl0sXG4gICk7XG5cbiAgcmV0dXJuIGdvO1xufTtcblxuLyoqXG4gKiBoYW5kbGUgZXJyb3JzIGZvciByZXNvdXJjZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVSZXNvdXJjZUVycm9ycyA9ICh0bzogUmVzb3VyY2UsIHJlc291cmNlOiBJUmVzb3VyY2VJdGVtKSA9PiB7XG4gIGlmICghdG8/LmFjdGlvbiB8fCAhdG8/LnJlc291cmNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBbdXNlR29dOiBcImFjdGlvblwiIG9yIFwicmVzb3VyY2VcIiBpcyByZXF1aXJlZC5gKTtcbiAgfVxuXG4gIGlmIChbXCJlZGl0XCIsIFwic2hvd1wiLCBcImNsb25lXCJdLmluY2x1ZGVzKHRvPy5hY3Rpb24pICYmICF0by5pZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBbdXNlR29dOiBbYWN0aW9uOiAke3RvLmFjdGlvbn1dIHJlcXVpcmVzIGFuIFwiaWRcIiBmb3IgcmVzb3VyY2UgW3Jlc291cmNlOiAke3RvLnJlc291cmNlfV1gLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBhY3Rpb25VcmwgPSByZXNvdXJjZVt0by5hY3Rpb25dO1xuICBpZiAoIWFjdGlvblVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBbdXNlR29dOiBbYWN0aW9uOiAke3RvLmFjdGlvbn1dIGlzIG5vdCBkZWZpbmVkIGZvciBbcmVzb3VyY2U6ICR7dG8ucmVzb3VyY2V9XWAsXG4gICAgKTtcbiAgfVxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci9waWNrZXJcIjtcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci90eXBlc1wiO1xuaW1wb3J0IHsgZ2V0QWN0aW9uUm91dGVzRnJvbVJlc291cmNlIH0gZnJvbSBcIi4uLy4uLy4uL2RlZmluaXRpb25zL2hlbHBlcnMvcm91dGVyXCI7XG5pbXBvcnQgeyBjb21wb3NlUm91dGUgfSBmcm9tIFwiLi4vLi4vLi4vZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXIvY29tcG9zZS1yb3V0ZVwiO1xuaW1wb3J0IHsgdXNlUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7IHVzZVBhcnNlZCB9IGZyb20gXCIuLi91c2UtcGFyc2VkXCI7XG5cbnR5cGUgVXNlVG9QYXRoUGFyYW1zID0ge1xuICByZXNvdXJjZT86IElSZXNvdXJjZUl0ZW07XG4gIGFjdGlvbjogQWN0aW9uO1xuICBtZXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIGxlZ2FjeT86IGJvb2xlYW47XG59O1xuXG50eXBlIEdldFRvUGF0aEZuID0gKHBhcmFtczogVXNlVG9QYXRoUGFyYW1zKSA9PiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIGdldCB0aGUgcm91dGUgZm9yIGEgZ2l2ZW4gYWN0aW9uIGFuZCByZXNvdXJjZS5cbiAqIElmIHJlc291cmNlIGlzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCB1c2UgdGhlIHJlc291cmNlIGZyb20gdGhlIHJvdXRlLlxuICogSWYgdGhlIHJlc291cmNlIGlzIG5vdCBmb3VuZCwgaXQgd2lsbCByZXR1cm4gdW5kZWZpbmVkLlxuICogSWYgdGhlIGFjdGlvbiBpcyBub3QgZm91bmQsIGl0IHdpbGwgcmV0dXJuIHVuZGVmaW5lZC5cbiAqIGBtZXRhYCBjYW4gYmUgcHJvdmlkZWQgdG8gY29tcG9zZSB0aGUgcm91dGVzIHdpdGggcGFyYW1ldGVycy4gKENhbiBiZSB1c2VkIGZvciBuZXN0ZWQgcm91dGVzLilcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUdldFRvUGF0aCA9ICgpOiBHZXRUb1BhdGhGbiA9PiB7XG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG4gIGNvbnN0IHsgcmVzb3VyY2U6IHJlc291cmNlRnJvbVJvdXRlLCByZXNvdXJjZXMgfSA9IHVzZVJlc291cmNlKCk7XG4gIGNvbnN0IHBhcnNlZCA9IHVzZVBhcnNlZCgpO1xuXG4gIGNvbnN0IGZuID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHsgcmVzb3VyY2UsIGFjdGlvbiwgbWV0YSB9OiBVc2VUb1BhdGhQYXJhbXMpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRSZXNvdXJjZSA9IHJlc291cmNlIHx8IHJlc291cmNlRnJvbVJvdXRlO1xuXG4gICAgICBpZiAoIXNlbGVjdGVkUmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYWN0aW9uUm91dGVzID0gZ2V0QWN0aW9uUm91dGVzRnJvbVJlc291cmNlKFxuICAgICAgICBzZWxlY3RlZFJlc291cmNlLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgIHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIsXG4gICAgICApO1xuXG4gICAgICBjb25zdCBhY3Rpb25Sb3V0ZSA9IGFjdGlvblJvdXRlcy5maW5kKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS5hY3Rpb24gPT09IGFjdGlvbixcbiAgICAgICk/LnJvdXRlO1xuXG4gICAgICBpZiAoIWFjdGlvblJvdXRlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbXBvc2VkID0gY29tcG9zZVJvdXRlKFxuICAgICAgICBhY3Rpb25Sb3V0ZSxcbiAgICAgICAgc2VsZWN0ZWRSZXNvdXJjZT8ubWV0YSxcbiAgICAgICAgcGFyc2VkLFxuICAgICAgICBtZXRhLFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIGNvbXBvc2VkO1xuICAgIH0sXG4gICAgW3Jlc291cmNlcywgcmVzb3VyY2VGcm9tUm91dGUsIHBhcnNlZF0sXG4gICk7XG5cbiAgcmV0dXJuIGZuO1xufTtcbiIsImltcG9ydCB7IHVzZVJvdXRlclR5cGUgfSBmcm9tIFwiQGNvbnRleHRzL3JvdXRlci9waWNrZXJcIjtcbmltcG9ydCB7IHBpY2tSZXNvdXJjZSB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVycy9waWNrLXJlc291cmNlXCI7XG5pbXBvcnQgeyBnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UgfSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnMvcm91dGVyXCI7XG5pbXBvcnQgeyBjb21wb3NlUm91dGUgfSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnMvcm91dGVyL2NvbXBvc2Utcm91dGVcIjtcbmltcG9ydCB7IHVzZVJlc291cmNlLCB1c2VSb3V0ZXJDb250ZXh0IH0gZnJvbSBcIkBob29rc1wiO1xuaW1wb3J0IHsgdXNlQmFjayB9IGZyb20gXCJAaG9va3Mvcm91dGVyL3VzZS1iYWNrXCI7XG5pbXBvcnQgeyB1c2VHbyB9IGZyb20gXCJAaG9va3Mvcm91dGVyL3VzZS1nb1wiO1xuaW1wb3J0IHsgdXNlUGFyc2VkIH0gZnJvbSBcIkBob29rcy9yb3V0ZXIvdXNlLXBhcnNlZFwiO1xuXG5pbXBvcnQgdHlwZSB7IEJhc2VLZXksIE1ldGFEYXRhUXVlcnkgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5cbmV4cG9ydCB0eXBlIEhpc3RvcnlUeXBlID0gXCJwdXNoXCIgfCBcInJlcGxhY2VcIjtcblxuLyoqXG4gKiBgcmVmaW5lYCB1c2VzIHtAbGluayBodHRwczovL3JlYWN0cm91dGVyLmNvbS9lbi9tYWluL2hvb2tzL3VzZS1uYXZpZ2F0ZSN1c2VuYXZpZ2F0ZSBgUmVhY3QgUm91dGVyYH0gYW5kIGNvbWVzIHdpdGggYWxsIHJlZGlyZWN0cyBvdXQgb2YgdGhlIGJveC5cbiAqIEl0IGFsbG93cyB5b3UgdG8gbWFuYWdlIHlvdXIgcm91dGluZyBvcGVyYXRpb25zIGluIHJlZmluZS5cbiAqIFVzaW5nIHRoaXMgaG9vaywgeW91IGNhbiBtYW5hZ2UgYWxsIHRoZSByb3V0aW5nIG9wZXJhdGlvbnMgb2YgeW91ciBhcHBsaWNhdGlvbiB2ZXJ5IGVhc2lseS5cbiAqXG4gKiBAaW50ZXJuYWwgVGhpcyBpcyBhbiBpbnRlcm5hbCBob29rIG9mIHJlZmluZS4gRG8gbm90IHVzZSBpdCBkaXJlY3RseS5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvbmF2aWdhdGlvbi91c2VOYXZpZ2F0aW9ufSBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgY29uc3QgdXNlTmF2aWdhdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgeyByZXNvdXJjZXMgfSA9IHVzZVJlc291cmNlKCk7XG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG4gIGNvbnN0IHsgdXNlSGlzdG9yeSB9ID0gdXNlUm91dGVyQ29udGV4dCgpO1xuICBjb25zdCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xuICBjb25zdCBwYXJzZWQgPSB1c2VQYXJzZWQoKTtcbiAgY29uc3QgZ28gPSB1c2VHbygpO1xuICBjb25zdCBiYWNrID0gdXNlQmFjaygpO1xuXG4gIGNvbnN0IGhhbmRsZVVybCA9ICh1cmw6IHN0cmluZywgdHlwZTogSGlzdG9yeVR5cGUgPSBcInB1c2hcIikgPT4ge1xuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICBoaXN0b3J5W3R5cGVdKHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdvKHsgdG86IHVybCwgdHlwZSB9KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlVXJsID0gKFxuICAgIHJlc291cmNlOiBzdHJpbmcgfCBJUmVzb3VyY2VJdGVtLFxuICAgIG1ldGE6IE1ldGFEYXRhUXVlcnkgPSB7fSxcbiAgKSA9PiB7XG4gICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgIGNvbnN0IHJlc291cmNlSXRlbSA9XG4gICAgICAgIHR5cGVvZiByZXNvdXJjZSA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgID8gcGlja1Jlc291cmNlKHJlc291cmNlLCByZXNvdXJjZXMsIHRydWUpID8/IHtcbiAgICAgICAgICAgICAgbmFtZTogcmVzb3VyY2UsXG4gICAgICAgICAgICAgIHJvdXRlOiByZXNvdXJjZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHJlc291cmNlO1xuXG4gICAgICBjb25zdCBjcmVhdGVBY3Rpb25Sb3V0ZSA9IGdldEFjdGlvblJvdXRlc0Zyb21SZXNvdXJjZShcbiAgICAgICAgcmVzb3VyY2VJdGVtLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgIHRydWUsXG4gICAgICApLmZpbmQoKHIpID0+IHIuYWN0aW9uID09PSBcImNyZWF0ZVwiKTtcblxuICAgICAgaWYgKCFjcmVhdGVBY3Rpb25Sb3V0ZSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvc2VSb3V0ZShcbiAgICAgICAgY3JlYXRlQWN0aW9uUm91dGUucm91dGUsXG4gICAgICAgIHJlc291cmNlSXRlbT8ubWV0YSxcbiAgICAgICAgcGFyc2VkLFxuICAgICAgICBtZXRhLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgcmVzb3VyY2VJdGVtID1cbiAgICAgIHR5cGVvZiByZXNvdXJjZSA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IHBpY2tSZXNvdXJjZShyZXNvdXJjZSwgcmVzb3VyY2VzKSA/PyB7IG5hbWU6IHJlc291cmNlIH1cbiAgICAgICAgOiByZXNvdXJjZTtcblxuICAgIGNvbnN0IGNyZWF0ZUFjdGlvblJvdXRlID0gZ2V0QWN0aW9uUm91dGVzRnJvbVJlc291cmNlKFxuICAgICAgcmVzb3VyY2VJdGVtLFxuICAgICAgcmVzb3VyY2VzLFxuICAgICkuZmluZCgocikgPT4gci5hY3Rpb24gPT09IFwiY3JlYXRlXCIpPy5yb3V0ZTtcblxuICAgIGlmICghY3JlYXRlQWN0aW9uUm91dGUpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiBnbyh7XG4gICAgICB0bzogY29tcG9zZVJvdXRlKGNyZWF0ZUFjdGlvblJvdXRlLCByZXNvdXJjZUl0ZW0/Lm1ldGEsIHBhcnNlZCwgbWV0YSksXG4gICAgICB0eXBlOiBcInBhdGhcIixcbiAgICB9KSBhcyBzdHJpbmc7XG4gIH07XG5cbiAgY29uc3QgZWRpdFVybCA9IChcbiAgICByZXNvdXJjZTogc3RyaW5nIHwgSVJlc291cmNlSXRlbSxcbiAgICBpZDogQmFzZUtleSxcbiAgICBtZXRhOiBNZXRhRGF0YVF1ZXJ5ID0ge30sXG4gICkgPT4ge1xuICAgIGNvbnN0IGVuY29kZWRJZCA9IGVuY29kZVVSSUNvbXBvbmVudChpZCk7XG4gICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgIGNvbnN0IHJlc291cmNlSXRlbSA9XG4gICAgICAgIHR5cGVvZiByZXNvdXJjZSA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgID8gcGlja1Jlc291cmNlKHJlc291cmNlLCByZXNvdXJjZXMsIHRydWUpID8/IHtcbiAgICAgICAgICAgICAgbmFtZTogcmVzb3VyY2UsXG4gICAgICAgICAgICAgIHJvdXRlOiByZXNvdXJjZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHJlc291cmNlO1xuXG4gICAgICBjb25zdCBlZGl0QWN0aW9uUm91dGUgPSBnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UoXG4gICAgICAgIHJlc291cmNlSXRlbSxcbiAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICB0cnVlLFxuICAgICAgKS5maW5kKChyKSA9PiByLmFjdGlvbiA9PT0gXCJlZGl0XCIpO1xuXG4gICAgICBpZiAoIWVkaXRBY3Rpb25Sb3V0ZSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvc2VSb3V0ZShlZGl0QWN0aW9uUm91dGUucm91dGUsIHJlc291cmNlSXRlbT8ubWV0YSwgcGFyc2VkLCB7XG4gICAgICAgIC4uLm1ldGEsXG4gICAgICAgIGlkOiBlbmNvZGVkSWQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcmVzb3VyY2VJdGVtID1cbiAgICAgIHR5cGVvZiByZXNvdXJjZSA9PT0gXCJzdHJpbmdcIlxuICAgICAgICA/IHBpY2tSZXNvdXJjZShyZXNvdXJjZSwgcmVzb3VyY2VzKSA/PyB7IG5hbWU6IHJlc291cmNlIH1cbiAgICAgICAgOiByZXNvdXJjZTtcblxuICAgIGNvbnN0IGVkaXRBY3Rpb25Sb3V0ZSA9IGdldEFjdGlvblJvdXRlc0Zyb21SZXNvdXJjZShcbiAgICAgIHJlc291cmNlSXRlbSxcbiAgICAgIHJlc291cmNlcyxcbiAgICApLmZpbmQoKHIpID0+IHIuYWN0aW9uID09PSBcImVkaXRcIik/LnJvdXRlO1xuXG4gICAgaWYgKCFlZGl0QWN0aW9uUm91dGUpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiBnbyh7XG4gICAgICB0bzogY29tcG9zZVJvdXRlKGVkaXRBY3Rpb25Sb3V0ZSwgcmVzb3VyY2VJdGVtPy5tZXRhLCBwYXJzZWQsIHtcbiAgICAgICAgLi4ubWV0YSxcbiAgICAgICAgaWQ6IGVuY29kZWRJZCxcbiAgICAgIH0pLFxuICAgICAgdHlwZTogXCJwYXRoXCIsXG4gICAgfSkgYXMgc3RyaW5nO1xuICB9O1xuXG4gIGNvbnN0IGNsb25lVXJsID0gKFxuICAgIHJlc291cmNlOiBzdHJpbmcgfCBJUmVzb3VyY2VJdGVtLFxuICAgIGlkOiBCYXNlS2V5LFxuICAgIG1ldGE6IE1ldGFEYXRhUXVlcnkgPSB7fSxcbiAgKSA9PiB7XG4gICAgY29uc3QgZW5jb2RlZElkID0gZW5jb2RlVVJJQ29tcG9uZW50KGlkKTtcblxuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICBjb25zdCByZXNvdXJjZUl0ZW0gPVxuICAgICAgICB0eXBlb2YgcmVzb3VyY2UgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICA/IHBpY2tSZXNvdXJjZShyZXNvdXJjZSwgcmVzb3VyY2VzLCB0cnVlKSA/PyB7XG4gICAgICAgICAgICAgIG5hbWU6IHJlc291cmNlLFxuICAgICAgICAgICAgICByb3V0ZTogcmVzb3VyY2UsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiByZXNvdXJjZTtcblxuICAgICAgY29uc3QgY2xvbmVBY3Rpb25Sb3V0ZSA9IGdldEFjdGlvblJvdXRlc0Zyb21SZXNvdXJjZShcbiAgICAgICAgcmVzb3VyY2VJdGVtLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgIHRydWUsXG4gICAgICApLmZpbmQoKHIpID0+IHIuYWN0aW9uID09PSBcImNsb25lXCIpO1xuXG4gICAgICBpZiAoIWNsb25lQWN0aW9uUm91dGUpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb3NlUm91dGUoY2xvbmVBY3Rpb25Sb3V0ZS5yb3V0ZSwgcmVzb3VyY2VJdGVtPy5tZXRhLCBwYXJzZWQsIHtcbiAgICAgICAgLi4ubWV0YSxcbiAgICAgICAgaWQ6IGVuY29kZWRJZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCByZXNvdXJjZUl0ZW0gPVxuICAgICAgdHlwZW9mIHJlc291cmNlID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gcGlja1Jlc291cmNlKHJlc291cmNlLCByZXNvdXJjZXMpID8/IHsgbmFtZTogcmVzb3VyY2UgfVxuICAgICAgICA6IHJlc291cmNlO1xuXG4gICAgY29uc3QgY2xvbmVBY3Rpb25Sb3V0ZSA9IGdldEFjdGlvblJvdXRlc0Zyb21SZXNvdXJjZShcbiAgICAgIHJlc291cmNlSXRlbSxcbiAgICAgIHJlc291cmNlcyxcbiAgICApLmZpbmQoKHIpID0+IHIuYWN0aW9uID09PSBcImNsb25lXCIpPy5yb3V0ZTtcblxuICAgIGlmICghY2xvbmVBY3Rpb25Sb3V0ZSkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdvKHtcbiAgICAgIHRvOiBjb21wb3NlUm91dGUoY2xvbmVBY3Rpb25Sb3V0ZSwgcmVzb3VyY2VJdGVtPy5tZXRhLCBwYXJzZWQsIHtcbiAgICAgICAgLi4ubWV0YSxcbiAgICAgICAgaWQ6IGVuY29kZWRJZCxcbiAgICAgIH0pLFxuICAgICAgdHlwZTogXCJwYXRoXCIsXG4gICAgfSkgYXMgc3RyaW5nO1xuICB9O1xuXG4gIGNvbnN0IHNob3dVcmwgPSAoXG4gICAgcmVzb3VyY2U6IHN0cmluZyB8IElSZXNvdXJjZUl0ZW0sXG4gICAgaWQ6IEJhc2VLZXksXG4gICAgbWV0YTogTWV0YURhdGFRdWVyeSA9IHt9LFxuICApID0+IHtcbiAgICBjb25zdCBlbmNvZGVkSWQgPSBlbmNvZGVVUklDb21wb25lbnQoaWQpO1xuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICBjb25zdCByZXNvdXJjZUl0ZW0gPVxuICAgICAgICB0eXBlb2YgcmVzb3VyY2UgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICA/IHBpY2tSZXNvdXJjZShyZXNvdXJjZSwgcmVzb3VyY2VzLCB0cnVlKSA/PyB7XG4gICAgICAgICAgICAgIG5hbWU6IHJlc291cmNlLFxuICAgICAgICAgICAgICByb3V0ZTogcmVzb3VyY2UsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiByZXNvdXJjZTtcblxuICAgICAgY29uc3Qgc2hvd0FjdGlvblJvdXRlID0gZ2V0QWN0aW9uUm91dGVzRnJvbVJlc291cmNlKFxuICAgICAgICByZXNvdXJjZUl0ZW0sXG4gICAgICAgIHJlc291cmNlcyxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICkuZmluZCgocikgPT4gci5hY3Rpb24gPT09IFwic2hvd1wiKTtcblxuICAgICAgaWYgKCFzaG93QWN0aW9uUm91dGUpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wb3NlUm91dGUoc2hvd0FjdGlvblJvdXRlLnJvdXRlLCByZXNvdXJjZUl0ZW0/Lm1ldGEsIHBhcnNlZCwge1xuICAgICAgICAuLi5tZXRhLFxuICAgICAgICBpZDogZW5jb2RlZElkLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc291cmNlSXRlbSA9XG4gICAgICB0eXBlb2YgcmVzb3VyY2UgPT09IFwic3RyaW5nXCJcbiAgICAgICAgPyBwaWNrUmVzb3VyY2UocmVzb3VyY2UsIHJlc291cmNlcykgPz8geyBuYW1lOiByZXNvdXJjZSB9XG4gICAgICAgIDogcmVzb3VyY2U7XG5cbiAgICBjb25zdCBzaG93QWN0aW9uUm91dGUgPSBnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UoXG4gICAgICByZXNvdXJjZUl0ZW0sXG4gICAgICByZXNvdXJjZXMsXG4gICAgKS5maW5kKChyKSA9PiByLmFjdGlvbiA9PT0gXCJzaG93XCIpPy5yb3V0ZTtcblxuICAgIGlmICghc2hvd0FjdGlvblJvdXRlKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ28oe1xuICAgICAgdG86IGNvbXBvc2VSb3V0ZShzaG93QWN0aW9uUm91dGUsIHJlc291cmNlSXRlbT8ubWV0YSwgcGFyc2VkLCB7XG4gICAgICAgIC4uLm1ldGEsXG4gICAgICAgIGlkOiBlbmNvZGVkSWQsXG4gICAgICB9KSxcbiAgICAgIHR5cGU6IFwicGF0aFwiLFxuICAgIH0pIGFzIHN0cmluZztcbiAgfTtcblxuICBjb25zdCBsaXN0VXJsID0gKFxuICAgIHJlc291cmNlOiBzdHJpbmcgfCBJUmVzb3VyY2VJdGVtLFxuICAgIG1ldGE6IE1ldGFEYXRhUXVlcnkgPSB7fSxcbiAgKSA9PiB7XG4gICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgIGNvbnN0IHJlc291cmNlSXRlbSA9XG4gICAgICAgIHR5cGVvZiByZXNvdXJjZSA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgID8gcGlja1Jlc291cmNlKHJlc291cmNlLCByZXNvdXJjZXMsIHRydWUpID8/IHtcbiAgICAgICAgICAgICAgbmFtZTogcmVzb3VyY2UsXG4gICAgICAgICAgICAgIHJvdXRlOiByZXNvdXJjZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHJlc291cmNlO1xuXG4gICAgICBjb25zdCBsaXN0QWN0aW9uUm91dGUgPSBnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UoXG4gICAgICAgIHJlc291cmNlSXRlbSxcbiAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgICB0cnVlLFxuICAgICAgKS5maW5kKChyKSA9PiByLmFjdGlvbiA9PT0gXCJsaXN0XCIpO1xuXG4gICAgICBpZiAoIWxpc3RBY3Rpb25Sb3V0ZSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvc2VSb3V0ZShcbiAgICAgICAgbGlzdEFjdGlvblJvdXRlLnJvdXRlLFxuICAgICAgICByZXNvdXJjZUl0ZW0/Lm1ldGEsXG4gICAgICAgIHBhcnNlZCxcbiAgICAgICAgbWV0YSxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHJlc291cmNlSXRlbSA9XG4gICAgICB0eXBlb2YgcmVzb3VyY2UgPT09IFwic3RyaW5nXCJcbiAgICAgICAgPyBwaWNrUmVzb3VyY2UocmVzb3VyY2UsIHJlc291cmNlcykgPz8geyBuYW1lOiByZXNvdXJjZSB9XG4gICAgICAgIDogcmVzb3VyY2U7XG5cbiAgICBjb25zdCBsaXN0QWN0aW9uUm91dGUgPSBnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UoXG4gICAgICByZXNvdXJjZUl0ZW0sXG4gICAgICByZXNvdXJjZXMsXG4gICAgKS5maW5kKChyKSA9PiByLmFjdGlvbiA9PT0gXCJsaXN0XCIpPy5yb3V0ZTtcblxuICAgIGlmICghbGlzdEFjdGlvblJvdXRlKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ28oe1xuICAgICAgdG86IGNvbXBvc2VSb3V0ZShsaXN0QWN0aW9uUm91dGUsIHJlc291cmNlSXRlbT8ubWV0YSwgcGFyc2VkLCBtZXRhKSxcbiAgICAgIHR5cGU6IFwicGF0aFwiLFxuICAgIH0pIGFzIHN0cmluZztcbiAgfTtcblxuICBjb25zdCBjcmVhdGUgPSAoXG4gICAgcmVzb3VyY2U6IHN0cmluZyB8IElSZXNvdXJjZUl0ZW0sXG4gICAgdHlwZTogSGlzdG9yeVR5cGUgPSBcInB1c2hcIixcbiAgICBtZXRhOiBNZXRhRGF0YVF1ZXJ5ID0ge30sXG4gICkgPT4ge1xuICAgIGhhbmRsZVVybChjcmVhdGVVcmwocmVzb3VyY2UsIG1ldGEpLCB0eXBlKTtcbiAgfTtcblxuICBjb25zdCBlZGl0ID0gKFxuICAgIHJlc291cmNlOiBzdHJpbmcgfCBJUmVzb3VyY2VJdGVtLFxuICAgIGlkOiBCYXNlS2V5LFxuICAgIHR5cGU6IEhpc3RvcnlUeXBlID0gXCJwdXNoXCIsXG4gICAgbWV0YTogTWV0YURhdGFRdWVyeSA9IHt9LFxuICApID0+IHtcbiAgICBoYW5kbGVVcmwoZWRpdFVybChyZXNvdXJjZSwgaWQsIG1ldGEpLCB0eXBlKTtcbiAgfTtcblxuICBjb25zdCBjbG9uZSA9IChcbiAgICByZXNvdXJjZTogc3RyaW5nIHwgSVJlc291cmNlSXRlbSxcbiAgICBpZDogQmFzZUtleSxcbiAgICB0eXBlOiBIaXN0b3J5VHlwZSA9IFwicHVzaFwiLFxuICAgIG1ldGE6IE1ldGFEYXRhUXVlcnkgPSB7fSxcbiAgKSA9PiB7XG4gICAgaGFuZGxlVXJsKGNsb25lVXJsKHJlc291cmNlLCBpZCwgbWV0YSksIHR5cGUpO1xuICB9O1xuXG4gIGNvbnN0IHNob3cgPSAoXG4gICAgcmVzb3VyY2U6IHN0cmluZyB8IElSZXNvdXJjZUl0ZW0sXG4gICAgaWQ6IEJhc2VLZXksXG4gICAgdHlwZTogSGlzdG9yeVR5cGUgPSBcInB1c2hcIixcbiAgICBtZXRhOiBNZXRhRGF0YVF1ZXJ5ID0ge30sXG4gICkgPT4ge1xuICAgIGhhbmRsZVVybChzaG93VXJsKHJlc291cmNlLCBpZCwgbWV0YSksIHR5cGUpO1xuICB9O1xuXG4gIGNvbnN0IGxpc3QgPSAoXG4gICAgcmVzb3VyY2U6IHN0cmluZyB8IElSZXNvdXJjZUl0ZW0sXG4gICAgdHlwZTogSGlzdG9yeVR5cGUgPSBcInB1c2hcIixcbiAgICBtZXRhOiBNZXRhRGF0YVF1ZXJ5ID0ge30sXG4gICkgPT4ge1xuICAgIGhhbmRsZVVybChsaXN0VXJsKHJlc291cmNlLCBtZXRhKSwgdHlwZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYHVzZUdvYCBob29rIGluc3RlYWQuXG4gICAqL1xuICBjb25zdCBwdXNoID0gKHBhdGg6IHN0cmluZywgLi4ucmVzdDogdW5rbm93bltdKSA9PiB7XG4gICAgaWYgKHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpIHtcbiAgICAgIGhpc3RvcnkucHVzaChwYXRoLCAuLi5yZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ28oeyB0bzogcGF0aCwgdHlwZTogXCJwdXNoXCIgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGB1c2VHb2AgaG9vayBpbnN0ZWFkLlxuICAgKi9cbiAgY29uc3QgcmVwbGFjZSA9IChwYXRoOiBzdHJpbmcsIC4uLnJlc3Q6IHVua25vd25bXSkgPT4ge1xuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UocGF0aCwgLi4ucmVzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdvKHsgdG86IHBhdGgsIHR5cGU6IFwicmVwbGFjZVwiIH0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgdXNlQmFja2AgaG9vayBpbnN0ZWFkLlxuICAgKi9cbiAgY29uc3QgZ29CYWNrID0gKCkgPT4ge1xuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcImxlZ2FjeVwiKSB7XG4gICAgICBoaXN0b3J5LmdvQmFjaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlLFxuICAgIGNyZWF0ZVVybCxcbiAgICBlZGl0LFxuICAgIGVkaXRVcmwsXG4gICAgY2xvbmUsXG4gICAgY2xvbmVVcmwsXG4gICAgc2hvdyxcbiAgICBzaG93VXJsLFxuICAgIGxpc3QsXG4gICAgbGlzdFVybCxcbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG4gICAgZ29CYWNrLFxuICB9O1xufTtcbiIsImltcG9ydCB3YXJuT25jZSBmcm9tIFwid2Fybi1vbmNlXCI7XG5pbXBvcnQgeyB1c2VNZXRhLCB1c2VPbmUsIHVzZVJlc291cmNlUGFyYW1zLCB1c2VMb2FkaW5nT3ZlcnRpbWUgfSBmcm9tIFwiQGhvb2tzXCI7XG5pbXBvcnQgeyBwaWNrTm90RGVwcmVjYXRlZCB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuXG5pbXBvcnQgdHlwZSB7IFVzZVNob3dQcm9wcywgVXNlU2hvd1JldHVyblR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBCYXNlS2V5LCBCYXNlUmVjb3JkLCBIdHRwRXJyb3IgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSB7XG4gIFVzZVNob3dQcm9wcyxcbiAgVXNlU2hvd1JldHVyblR5cGUsXG4gIHVzZVNob3dQcm9wcyxcbiAgdXNlU2hvd1JldHVyblR5cGUsXG59IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICogYHVzZVNob3dgIGhvb2sgYWxsb3dzIHlvdSB0byBmZXRjaCB0aGUgZGVzaXJlZCByZWNvcmQuXG4gKiBJdCB1c2VzIGBnZXRPbmVgIG1ldGhvZCBhcyBxdWVyeSBmdW5jdGlvbiBmcm9tIHRoZSBkYXRhUHJvdmlkZXIgdGhhdCBpc1xuICogcGFzc2VkIHRvIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL3JlZmluZS1jb21wb25lbnQgYDxSZWZpbmU+YH0uXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvZGF0YS9ob29rcy91c2Utc2hvd30gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFRRdWVyeUZuRGF0YSAtIFJlc3VsdCBkYXRhIHJldHVybmVkIGJ5IHRoZSBxdWVyeSBmdW5jdGlvbi4gRXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvY29yZS9pbnRlcmZhY2UtcmVmZXJlbmNlcy8jYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9XG4gKiBAdHlwZVBhcmFtIFRFcnJvciAtIEN1c3RvbSBlcnJvciBvYmplY3QgdGhhdCBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZS1yZWZlcmVuY2VzLyNodHRwZXJyb3IgYEh0dHBFcnJvcmB9XG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIGBzZWxlY3RgIGZ1bmN0aW9uLiBFeHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZS1yZWZlcmVuY2VzLyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH0uIERlZmF1bHRzIHRvIGBUUXVlcnlGbkRhdGFgXG4gKlxuICovXG5leHBvcnQgY29uc3QgdXNlU2hvdyA9IDxcbiAgVFF1ZXJ5Rm5EYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gVFF1ZXJ5Rm5EYXRhLFxuPih7XG4gIHJlc291cmNlOiByZXNvdXJjZUZyb21Qcm9wLFxuICBpZCxcbiAgbWV0YSxcbiAgbWV0YURhdGEsXG4gIHF1ZXJ5T3B0aW9ucyxcbiAgb3ZlcnRpbWVPcHRpb25zLFxuICAuLi51c2VPbmVQcm9wc1xufTogVXNlU2hvd1Byb3BzPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YT4gPSB7fSk6IFVzZVNob3dSZXR1cm5UeXBlPFxuICBURGF0YSxcbiAgVEVycm9yXG4+ID0+IHtcbiAgY29uc3Qge1xuICAgIHJlc291cmNlLFxuICAgIGlkZW50aWZpZXIsXG4gICAgaWQ6IHNob3dJZCxcbiAgICBzZXRJZDogc2V0U2hvd0lkLFxuICB9ID0gdXNlUmVzb3VyY2VQYXJhbXMoe1xuICAgIGlkLFxuICAgIHJlc291cmNlOiByZXNvdXJjZUZyb21Qcm9wLFxuICB9KTtcblxuICBjb25zdCBnZXRNZXRhID0gdXNlTWV0YSgpO1xuXG4gIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoe1xuICAgIHJlc291cmNlLFxuICAgIG1ldGE6IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKSxcbiAgfSk7XG5cbiAgd2Fybk9uY2UoXG4gICAgQm9vbGVhbihyZXNvdXJjZUZyb21Qcm9wKSAmJiAhc2hvd0lkLFxuICAgIGlkV2FybmluZ01lc3NhZ2UoaWRlbnRpZmllciwgc2hvd0lkKSxcbiAgKTtcblxuICBjb25zdCBxdWVyeVJlc3VsdCA9IHVzZU9uZTxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+KHtcbiAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICBpZDogc2hvd0lkID8/IFwiXCIsXG4gICAgcXVlcnlPcHRpb25zOiB7XG4gICAgICBlbmFibGVkOiBzaG93SWQgIT09IHVuZGVmaW5lZCxcbiAgICAgIC4uLnF1ZXJ5T3B0aW9ucyxcbiAgICB9LFxuICAgIG1ldGE6IGNvbWJpbmVkTWV0YSxcbiAgICBtZXRhRGF0YTogY29tYmluZWRNZXRhLFxuICAgIC4uLnVzZU9uZVByb3BzLFxuICB9KTtcblxuICBjb25zdCB7IGVsYXBzZWRUaW1lIH0gPSB1c2VMb2FkaW5nT3ZlcnRpbWUoe1xuICAgIGlzTG9hZGluZzogcXVlcnlSZXN1bHQuaXNGZXRjaGluZyxcbiAgICBpbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5pbnRlcnZhbCxcbiAgICBvbkludGVydmFsOiBvdmVydGltZU9wdGlvbnM/Lm9uSW50ZXJ2YWwsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgcXVlcnlSZXN1bHQsXG4gICAgcXVlcnk6IHF1ZXJ5UmVzdWx0LFxuICAgIHNob3dJZCxcbiAgICBzZXRTaG93SWQsXG4gICAgb3ZlcnRpbWU6IHsgZWxhcHNlZFRpbWUgfSxcbiAgfTtcbn07XG5cbmNvbnN0IGlkV2FybmluZ01lc3NhZ2UgPSAoaWRlbnRpZmllcj86IHN0cmluZywgaWQ/OiBCYXNlS2V5KSA9PlxuICBgW3VzZVNob3ddOiByZXNvdXJjZTogXCIke2lkZW50aWZpZXJ9XCIsIGlkOiAke2lkfSBcXG5cXG5JZiB5b3UgZG9uJ3QgdXNlIHRoZSBcXGBzZXRTaG93SWRcXGAgbWV0aG9kIHRvIHNldCB0aGUgXFxgc2hvd0lkXFxgLCB5b3Ugc2hvdWxkIHBhc3MgdGhlIFxcYGlkXFxgIHByb3AgdG8gXFxgdXNlU2hvd1xcYC4gT3RoZXJ3aXNlLCBcXGB1c2VTaG93XFxgIHdpbGwgbm90IGJlIGFibGUgdG8gaW5mZXIgdGhlIFxcYGlkXFxgIGZyb20gdGhlIGN1cnJlbnQgVVJMLiBcXG5cXG5TZWUgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvZGF0YS9ob29rcy91c2Utc2hvdy8jcmVzb3VyY2VgO1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgY2h1bmsgZnJvbSBcImxvZGFzaC1lcy9jaHVuay5qc1wiO1xuaW1wb3J0IHBhcGFwYXJzZSBmcm9tIFwicGFwYXBhcnNlXCI7XG5cbmltcG9ydCB7XG4gIGltcG9ydENTVk1hcHBlcixcbiAgcGlja05vdERlcHJlY2F0ZWQsXG4gIHNlcXVlbnRpYWxQcm9taXNlcyxcbn0gZnJvbSBcIkBkZWZpbml0aW9uc1wiO1xuaW1wb3J0IHsgdXNlQ3JlYXRlLCB1c2VDcmVhdGVNYW55LCB1c2VNZXRhLCB1c2VSZXNvdXJjZSB9IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUge1xuICBCYXNlUmVjb3JkLFxuICBIdHRwRXJyb3IsXG4gIE1ldGFRdWVyeSxcbn0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgVXNlQ3JlYXRlUmV0dXJuVHlwZSB9IGZyb20gXCIuLi8uLi9ob29rcy9kYXRhL3VzZUNyZWF0ZVwiO1xuaW1wb3J0IHR5cGUgeyBVc2VDcmVhdGVNYW55UmV0dXJuVHlwZSB9IGZyb20gXCIuLi8uLi9ob29rcy9kYXRhL3VzZUNyZWF0ZU1hbnlcIjtcbmltcG9ydCB0eXBlIHsgTWFwRGF0YUZuIH0gZnJvbSBcIi4uL2V4cG9ydC90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBJbXBvcnRTdWNjZXNzUmVzdWx0PFRWYXJpYWJsZXMsIFREYXRhPiA9IHtcbiAgcmVxdWVzdDogVFZhcmlhYmxlc1tdO1xuICB0eXBlOiBcInN1Y2Nlc3NcIjtcbiAgcmVzcG9uc2U6IFREYXRhW107XG59O1xuXG5leHBvcnQgdHlwZSBJbXBvcnRFcnJvclJlc3VsdDxUVmFyaWFibGVzPiA9IHtcbiAgcmVxdWVzdDogVFZhcmlhYmxlc1tdO1xuICB0eXBlOiBcImVycm9yXCI7XG4gIHJlc3BvbnNlOiBIdHRwRXJyb3JbXTtcbn07XG5cbmV4cG9ydCB0eXBlIE9uRmluaXNoUGFyYW1zPFRWYXJpYWJsZXMsIFREYXRhPiA9IHtcbiAgc3VjY2VlZGVkOiBJbXBvcnRTdWNjZXNzUmVzdWx0PFRWYXJpYWJsZXMsIFREYXRhPltdO1xuICBlcnJvcmVkOiBJbXBvcnRFcnJvclJlc3VsdDxUVmFyaWFibGVzPltdO1xufTtcblxuZXhwb3J0IHR5cGUgT25Qcm9ncmVzc1BhcmFtcyA9IHtcbiAgdG90YWxBbW91bnQ6IG51bWJlcjtcbiAgcHJvY2Vzc2VkQW1vdW50OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBJbXBvcnRPcHRpb25zPFxuICBUSXRlbSxcbiAgVFZhcmlhYmxlcyA9IGFueSxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbj4gPSB7XG4gIC8qKlxuICAgKiBSZXNvdXJjZSBuYW1lIGZvciBBUEkgZGF0YSBpbnRlcmFjdGlvbnMuXG4gICAqIEBkZWZhdWx0IFJlc291cmNlIG5hbWUgdGhhdCBpdCByZWFkcyBmcm9tIHJvdXRlXG4gICAqIEBkZXByZWNhdGVkIGByZXNvdXJjZU5hbWVgIGlzIGRlcHJlY2F0ZWQuIFVzZSBgcmVzb3VyY2VgIGluc3RlYWQuXG4gICAqL1xuICByZXNvdXJjZU5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBSZXNvdXJjZSBuYW1lIGZvciBBUEkgZGF0YSBpbnRlcmFjdGlvbnMuXG4gICAqIEBkZWZhdWx0IFJlc291cmNlIG5hbWUgdGhhdCBpdCByZWFkcyBmcm9tIHJvdXRlXG4gICAqL1xuICByZXNvdXJjZT86IHN0cmluZztcbiAgLyoqXG4gICAqIEEgbWFwcGluZyBmdW5jdGlvbiB0aGF0IHJ1bnMgZm9yIGV2ZXJ5IHJlY29yZC4gTWFwcGVkIGRhdGEgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgZmlsZSBjb250ZW50cy5cbiAgICovXG4gIG1hcERhdGE/OiBNYXBEYXRhRm48VEl0ZW0sIFRWYXJpYWJsZXM+O1xuICAvKipcbiAgICogQ3VzdG9tIFBhcGEgUGFyc2Ugb3B0aW9ucy5cbiAgICogQHR5cGUgW2BQYXJzZUNvbmZpZ2BdKGh0dHBzOi8vd3d3LnBhcGFwYXJzZS5jb20vZG9jcylcbiAgICovXG4gIHBhcGFyc2VPcHRpb25zPzogcGFwYXBhcnNlLlBhcnNlQ29uZmlnO1xuICAvKipcbiAgICogUmVxdWVzdHMgYmF0Y2ggc2l6ZS4gSWYgaXQgaXMgMSwgYWxsIHJlY29yZHMgYXJlIHNlbnQgb25lIGJ5IG9uZS4gQnkgZGVmYXVsdCwgaXQgaXMgW2BOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL051bWJlci9NQVhfU0FGRV9JTlRFR0VSKSB0byBzZW5kIGFsbCByZWNvcmRzIGluIG9uZSBiYXRjaC4gSWYgaXQgaXMgbW9yZSB0aGFuIDEsIGBjcmVhdGVNYW55YCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgb24gRGF0YVByb3ZpZGVyLlxuICAgKi9cbiAgYmF0Y2hTaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogQ2FsbGVkIHdpdGggZXJyb3JzIGFuZCBzdWNjZXNzZnVsIHJlc3BvbnNlcyB3aGVuIGFsbCByZXF1ZXN0cyBhcmUgc2VudC5cbiAgICovXG4gIG9uRmluaXNoPzogKHJlc3VsdHM6IE9uRmluaXNoUGFyYW1zPFRWYXJpYWJsZXMsIFREYXRhPikgPT4gdm9pZDtcbiAgLyoqXG4gICAqICBNZXRhZGF0YSBxdWVyeSBmb3IgYGRhdGFQcm92aWRlcmBcbiAgICovXG4gIG1ldGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiAgTWV0YWRhdGEgcXVlcnkgZm9yIGBkYXRhUHJvdmlkZXJgXG4gICAqIEBkZXByZWNhdGVkIGBtZXRhRGF0YWAgaXMgZGVwcmVjYXRlZCB3aXRoIHJlZmluZUA0LCByZWZpbmUgd2lsbCBwYXNzIGBtZXRhYCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGBtZXRhRGF0YWAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBtZXRhRGF0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqICBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGN1cnJlbnQgc3RhdGUgb2YgdXBsb2FkaW5nIHByb2Nlc3MuXG4gICAqXG4gICAqICBFeDogYHBlcmNlbnRhZ2UgPSBvblByb2dyZXNzUGFyYW1zLnByb2Nlc3NlZEFtb3VudCAvIG9uUHJvZ3Jlc3NQYXJhbXMudG90YWxBbW91bnQgKiAxMDBgXG4gICAqL1xuICBvblByb2dyZXNzPzogKG9uUHJvZ3Jlc3NQYXJhbXM6IE9uUHJvZ3Jlc3NQYXJhbXMpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBJZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGBkYXRhUHJvdmlkZXJgLCB5b3Ugc2hvdWxkIHVzZSB0aGUgYGRhdGFQcm92aWRlck5hbWVgIHRoYXQgeW91IHdpbGwgdXNlLlxuICAgKi9cbiAgZGF0YVByb3ZpZGVyTmFtZT86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIENyZWF0ZWRWYWx1ZXNUeXBlPFRWYXJpYWJsZXMsIFREYXRhPiA9XG4gIHwgSW1wb3J0U3VjY2Vzc1Jlc3VsdDxUVmFyaWFibGVzLCBURGF0YT5cbiAgfCBJbXBvcnRFcnJvclJlc3VsdDxUVmFyaWFibGVzPjtcblxuZXhwb3J0IHR5cGUgSGFuZGxlQ2hhbmdlVHlwZTxUVmFyaWFibGVzLCBURGF0YT4gPSAob25DaGFuZ2VQYXJhbXM6IHtcbiAgZmlsZTogUGFydGlhbDxGaWxlPjtcbn0pID0+IFByb21pc2U8Q3JlYXRlZFZhbHVlc1R5cGU8VFZhcmlhYmxlcywgVERhdGE+W10+O1xuXG5leHBvcnQgdHlwZSBVc2VJbXBvcnRJbnB1dFByb3BzVHlwZSA9IHtcbiAgdHlwZTogXCJmaWxlXCI7XG4gIGFjY2VwdDogc3RyaW5nO1xuICBvbkNoYW5nZTogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIFVzZUltcG9ydFJldHVyblR5cGU8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRWYXJpYWJsZXMgPSB7fSxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuPiA9IHtcbiAgaW5wdXRQcm9wczogVXNlSW1wb3J0SW5wdXRQcm9wc1R5cGU7XG4gIG11dGF0aW9uUmVzdWx0OlxuICAgIHwgVXNlQ3JlYXRlUmV0dXJuVHlwZTxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPlxuICAgIHwgVXNlQ3JlYXRlTWFueVJldHVyblR5cGU8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz47XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgaGFuZGxlQ2hhbmdlOiBIYW5kbGVDaGFuZ2VUeXBlPFRWYXJpYWJsZXMsIFREYXRhPjtcbn07XG5cbi8qKlxuICogYHVzZUltcG9ydGAgaG9vayBhbGxvd3MgeW91IHRvIGhhbmRsZSB5b3VyIGNzdiBpbXBvcnQgbG9naWMgZWFzaWx5LlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9pbXBvcnQtZXhwb3J0L3VzZUltcG9ydH0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFRJdGVtIC0gSW50ZXJmYWNlIG9mIHBhcnNlZCBjc3YgZGF0YVxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIG9mIHRoZSBxdWVyeSBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH1cbiAqIEB0eXBlUGFyYW0gVEVycm9yIC0gQ3VzdG9tIGVycm9yIG9iamVjdCB0aGF0IGV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzLyNodHRwZXJyb3IgYEh0dHBFcnJvcmB9XG4gKiBAdHlwZVBhcmFtIFRWYXJpYWJsZXMgLSBWYWx1ZXMgZm9yIG11dGF0aW9uIGZ1bmN0aW9uXG4gKlxuICovXG5leHBvcnQgY29uc3QgdXNlSW1wb3J0ID0gPFxuICBUSXRlbSA9IGFueSxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0gYW55LFxuPih7XG4gIHJlc291cmNlTmFtZSxcbiAgcmVzb3VyY2U6IHJlc291cmNlRnJvbVByb3BzLFxuICBtYXBEYXRhID0gKGl0ZW0pID0+IGl0ZW0gYXMgdW5rbm93biBhcyBUVmFyaWFibGVzLFxuICBwYXBhcnNlT3B0aW9ucyxcbiAgYmF0Y2hTaXplID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsXG4gIG9uRmluaXNoLFxuICBtZXRhLFxuICBtZXRhRGF0YSxcbiAgb25Qcm9ncmVzcyxcbiAgZGF0YVByb3ZpZGVyTmFtZSxcbn06IEltcG9ydE9wdGlvbnM8VEl0ZW0sIFRWYXJpYWJsZXMsIFREYXRhPiA9IHt9KTogVXNlSW1wb3J0UmV0dXJuVHlwZTxcbiAgVERhdGEsXG4gIFRWYXJpYWJsZXMsXG4gIFRFcnJvclxuPiA9PiB7XG4gIGNvbnN0IFtwcm9jZXNzZWRBbW91bnQsIHNldFByb2Nlc3NlZEFtb3VudF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBbdG90YWxBbW91bnQsIHNldFRvdGFsQW1vdW50XSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgeyByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gdXNlUmVzb3VyY2UoXG4gICAgcmVzb3VyY2VGcm9tUHJvcHMgPz8gcmVzb3VyY2VOYW1lLFxuICApO1xuXG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG5cbiAgY29uc3QgY3JlYXRlTWFueSA9IHVzZUNyZWF0ZU1hbnk8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz4oKTtcbiAgY29uc3QgY3JlYXRlID0gdXNlQ3JlYXRlPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+KCk7XG5cbiAgY29uc3QgY29tYmluZWRNZXRhID0gZ2V0TWV0YSh7XG4gICAgcmVzb3VyY2UsXG4gICAgbWV0YTogcGlja05vdERlcHJlY2F0ZWQobWV0YSwgbWV0YURhdGEpLFxuICB9KTtcblxuICBsZXQgbXV0YXRpb25SZXN1bHQ6XG4gICAgfCBVc2VDcmVhdGVSZXR1cm5UeXBlPFREYXRhLCBURXJyb3IsIFRWYXJpYWJsZXM+XG4gICAgfCBVc2VDcmVhdGVNYW55UmV0dXJuVHlwZTxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPjtcblxuICBpZiAoYmF0Y2hTaXplID09PSAxKSB7XG4gICAgbXV0YXRpb25SZXN1bHQgPSBjcmVhdGU7XG4gIH0gZWxzZSB7XG4gICAgbXV0YXRpb25SZXN1bHQgPSBjcmVhdGVNYW55O1xuICB9XG5cbiAgY29uc3QgaGFuZGxlQ2xlYW51cCA9ICgpID0+IHtcbiAgICBzZXRUb3RhbEFtb3VudCgwKTtcbiAgICBzZXRQcm9jZXNzZWRBbW91bnQoMCk7XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVGaW5pc2ggPSAoXG4gICAgY3JlYXRlZFZhbHVlczogQ3JlYXRlZFZhbHVlc1R5cGU8VFZhcmlhYmxlcywgVERhdGE+W10sXG4gICkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHN1Y2NlZWRlZDogY3JlYXRlZFZhbHVlcy5maWx0ZXIoXG4gICAgICAgIChpdGVtKSA9PiBpdGVtLnR5cGUgPT09IFwic3VjY2Vzc1wiLFxuICAgICAgKSBhcyB1bmtub3duIGFzIEltcG9ydFN1Y2Nlc3NSZXN1bHQ8VFZhcmlhYmxlcywgVERhdGE+W10sXG4gICAgICBlcnJvcmVkOiBjcmVhdGVkVmFsdWVzLmZpbHRlcihcbiAgICAgICAgKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJlcnJvclwiLFxuICAgICAgKSBhcyB1bmtub3duIGFzIEltcG9ydEVycm9yUmVzdWx0PFRWYXJpYWJsZXM+W10sXG4gICAgfTtcblxuICAgIG9uRmluaXNoPy4ocmVzdWx0KTtcbiAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgb25Qcm9ncmVzcz8uKHsgdG90YWxBbW91bnQsIHByb2Nlc3NlZEFtb3VudCB9KTtcbiAgfSwgW3RvdGFsQW1vdW50LCBwcm9jZXNzZWRBbW91bnRdKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2U6IEhhbmRsZUNoYW5nZVR5cGU8VFZhcmlhYmxlcywgVERhdGE+ID0gKHsgZmlsZSB9KSA9PiB7XG4gICAgaGFuZGxlQ2xlYW51cCgpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxDcmVhdGVkVmFsdWVzVHlwZTxUVmFyaWFibGVzLCBURGF0YT5bXT4oKHJlc29sdmUpID0+IHtcbiAgICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICAgIHBhcGFwYXJzZS5wYXJzZShmaWxlIGFzIGFueSwge1xuICAgICAgICBjb21wbGV0ZTogYXN5bmMgKHsgZGF0YSB9OiB7IGRhdGE6IHVua25vd25bXVtdIH0pID0+IHtcbiAgICAgICAgICBjb25zdCB2YWx1ZXMgPSBpbXBvcnRDU1ZNYXBwZXIoZGF0YSwgbWFwRGF0YSk7XG5cbiAgICAgICAgICBzZXRUb3RhbEFtb3VudCh2YWx1ZXMubGVuZ3RoKTtcblxuICAgICAgICAgIGlmIChiYXRjaFNpemUgPT09IDEpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBQcm9jZXNzb3IgRnVuY3Rpb25zXG4gICAgICAgICAgICBjb25zdCB2YWx1ZUZucyA9IHZhbHVlcy5tYXAoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGZuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY3JlYXRlLm11dGF0ZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgIHJlc291cmNlOiBpZGVudGlmaWVyID8/IFwiXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgc3VjY2Vzc05vdGlmaWNhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBlcnJvck5vdGlmaWNhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7IHJlc3BvbnNlLCB2YWx1ZSB9O1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFNlcXVlbnRpYWxseSBydW4gcHJvY2Vzc29yIGZ1bmN0aW9ucyBhbmQgcHJvY2VzcyByZXNvbHZlcy9yZWplY3RzXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkVmFsdWVzID0gYXdhaXQgc2VxdWVudGlhbFByb21pc2VzKFxuICAgICAgICAgICAgICB2YWx1ZUZucyxcbiAgICAgICAgICAgICAgKHsgcmVzcG9uc2UsIHZhbHVlIH0pID0+IHtcbiAgICAgICAgICAgICAgICBzZXRQcm9jZXNzZWRBbW91bnQoKGN1cnJlbnRBbW91bnQpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50QW1vdW50ICsgMTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICByZXNwb25zZTogW3Jlc3BvbnNlLmRhdGFdLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICByZXF1ZXN0OiBbdmFsdWVdLFxuICAgICAgICAgICAgICAgIH0gYXMgSW1wb3J0U3VjY2Vzc1Jlc3VsdDxUVmFyaWFibGVzLCBURGF0YT47XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIChlcnJvcjogSHR0cEVycm9yLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICByZXNwb25zZTogW2Vycm9yXSxcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IFt2YWx1ZXNbaW5kZXhdXSxcbiAgICAgICAgICAgICAgICB9IGFzIEltcG9ydEVycm9yUmVzdWx0PFRWYXJpYWJsZXM+O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgd2l0aCBjcmVhdGVkIHZhbHVlc1xuICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVkVmFsdWVzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIENodW5rc1xuICAgICAgICAgICAgY29uc3QgY2h1bmtzID0gY2h1bmsodmFsdWVzLCBiYXRjaFNpemUpO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIENodW5rIFByb2Nlc3NvciBGdW5jdGlvbnNcbiAgICAgICAgICAgIGNvbnN0IGNodW5rZWRGbnMgPSBjaHVua3MubWFwKChjaHVua2VkVmFsdWVzKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGZuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY3JlYXRlTWFueS5tdXRhdGVBc3luYyh7XG4gICAgICAgICAgICAgICAgICByZXNvdXJjZTogaWRlbnRpZmllciA/PyBcIlwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWVzOiBjaHVua2VkVmFsdWVzLFxuICAgICAgICAgICAgICAgICAgc3VjY2Vzc05vdGlmaWNhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBlcnJvck5vdGlmaWNhdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBkYXRhUHJvdmlkZXJOYW1lLFxuICAgICAgICAgICAgICAgICAgbWV0YTogY29tYmluZWRNZXRhLFxuICAgICAgICAgICAgICAgICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaHVua2VkVmFsdWVzLFxuICAgICAgICAgICAgICAgICAgY3VycmVudEJhdGNoTGVuZ3RoOiBjaHVua2VkVmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHJldHVybiBmbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gU2VxdWVudGlhbGx5IHJ1biBjaHVua2VkIGZ1bmN0aW9ucyBhbmQgcHJvY2VzcyByZXNvbHZlcy9yZWplY3RzXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVkVmFsdWVzID0gYXdhaXQgc2VxdWVudGlhbFByb21pc2VzKFxuICAgICAgICAgICAgICBjaHVua2VkRm5zLFxuICAgICAgICAgICAgICAoeyByZXNwb25zZSwgY3VycmVudEJhdGNoTGVuZ3RoLCB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0UHJvY2Vzc2VkQW1vdW50KChjdXJyZW50QW1vdW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEFtb3VudCArIGN1cnJlbnRCYXRjaExlbmd0aDtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgcmVxdWVzdDogdmFsdWUsXG4gICAgICAgICAgICAgICAgfSBhcyBJbXBvcnRTdWNjZXNzUmVzdWx0PFRWYXJpYWJsZXMsIFREYXRhPjtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKGVycm9yOiBIdHRwRXJyb3IsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBbZXJyb3JdLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgcmVxdWVzdDogY2h1bmtzW2luZGV4XSxcbiAgICAgICAgICAgICAgICB9IGFzIEltcG9ydEVycm9yUmVzdWx0PFRWYXJpYWJsZXM+O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIHJlc29sdmUgd2l0aCBhbGwgY3JlYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgIHJlc29sdmUoY3JlYXRlZFZhbHVlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC4uLnBhcGFyc2VPcHRpb25zLFxuICAgICAgfSk7XG4gICAgfSkudGhlbigoY3JlYXRlZFZhbHVlcykgPT4ge1xuICAgICAgaGFuZGxlRmluaXNoKGNyZWF0ZWRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIGNyZWF0ZWRWYWx1ZXM7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBpbnB1dFByb3BzOiB7XG4gICAgICB0eXBlOiBcImZpbGVcIixcbiAgICAgIGFjY2VwdDogXCIuY3N2XCIsXG4gICAgICBvbkNoYW5nZTogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmZpbGVzICYmIGV2ZW50LnRhcmdldC5maWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaGFuZGxlQ2hhbmdlKHsgZmlsZTogZXZlbnQudGFyZ2V0LmZpbGVzWzBdIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgbXV0YXRpb25SZXN1bHQsXG4gICAgaXNMb2FkaW5nLFxuICAgIGhhbmRsZUNoYW5nZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IHR5cGUgdXNlTW9kYWxSZXR1cm5UeXBlID0ge1xuICB2aXNpYmxlOiBib29sZWFuO1xuICBzaG93OiAoKSA9PiB2b2lkO1xuICBjbG9zZTogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCB0eXBlIHVzZU1vZGFsUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBJbml0aWFsIHN0YXRlIG9mIHRoZSBtb2RhbFxuICAgKi9cbiAgZGVmYXVsdFZpc2libGU/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZU1vZGFsID0gKHtcbiAgZGVmYXVsdFZpc2libGUgPSBmYWxzZSxcbn06IHVzZU1vZGFsUHJvcHMgPSB7fSk6IHVzZU1vZGFsUmV0dXJuVHlwZSA9PiB7XG4gIGNvbnN0IFt2aXNpYmxlLCBzZXRWaXNpYmxlXSA9IHVzZVN0YXRlKGRlZmF1bHRWaXNpYmxlKTtcblxuICBjb25zdCBzaG93ID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0VmlzaWJsZSh0cnVlKSwgW3Zpc2libGVdKTtcbiAgY29uc3QgY2xvc2UgPSB1c2VDYWxsYmFjaygoKSA9PiBzZXRWaXNpYmxlKGZhbHNlKSwgW3Zpc2libGVdKTtcblxuICByZXR1cm4ge1xuICAgIHZpc2libGUsXG4gICAgc2hvdyxcbiAgICBjbG9zZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgdHlwZSB7IElSZXNvdXJjZUl0ZW0gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2UvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci90eXBlc1wiO1xuaW1wb3J0IHsgdXNlR2V0VG9QYXRoIH0gZnJvbSBcIi4uL3VzZS1nZXQtdG8tcGF0aFwiO1xuXG50eXBlIFVzZVRvUGF0aFBhcmFtcyA9IHtcbiAgcmVzb3VyY2U/OiBJUmVzb3VyY2VJdGVtO1xuICBhY3Rpb246IEFjdGlvbjtcbiAgbWV0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBsZWdhY3k/OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByb3V0ZSBmb3IgYSBnaXZlbiBhY3Rpb24gYW5kIHJlc291cmNlLlxuICogSWYgcmVzb3VyY2UgaXMgbm90IHByb3ZpZGVkLCBpdCB3aWxsIHVzZSB0aGUgcmVzb3VyY2UgZnJvbSB0aGUgcm91dGUuXG4gKiBJZiB0aGUgcmVzb3VyY2UgaXMgbm90IGZvdW5kLCBpdCB3aWxsIHJldHVybiB1bmRlZmluZWQuXG4gKiBJZiB0aGUgYWN0aW9uIGlzIG5vdCBmb3VuZCwgaXQgd2lsbCByZXR1cm4gdW5kZWZpbmVkLlxuICogYG1ldGFgIGNhbiBiZSBwcm92aWRlZCB0byBjb21wb3NlIHRoZSByb3V0ZXMgd2l0aCBwYXJhbWV0ZXJzLiAoQ2FuIGJlIHVzZWQgZm9yIG5lc3RlZCByb3V0ZXMuKVxuICovXG5leHBvcnQgY29uc3QgdXNlVG9QYXRoID0gKHtcbiAgcmVzb3VyY2UsXG4gIGFjdGlvbixcbiAgbWV0YSxcbiAgbGVnYWN5LFxufTogVXNlVG9QYXRoUGFyYW1zKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgZ2V0VG9QYXRoID0gdXNlR2V0VG9QYXRoKCk7XG5cbiAgcmV0dXJuIGdldFRvUGF0aCh7IHJlc291cmNlLCBhY3Rpb24sIG1ldGEsIGxlZ2FjeSB9KTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdHlwZSBSZWYsIGZvcndhcmRSZWYsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUdvIH0gZnJvbSBcIkBob29rcy9yb3V0ZXJcIjtcbmltcG9ydCB7IFJvdXRlckNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL3JvdXRlclwiO1xuaW1wb3J0IHR5cGUgeyBHb0NvbmZpZ1dpdGhSZXNvdXJjZSB9IGZyb20gXCIuLi8uLi9ob29rcy9yb3V0ZXIvdXNlLWdvXCI7XG5pbXBvcnQgd2Fybk9uY2UgZnJvbSBcIndhcm4tb25jZVwiO1xuXG50eXBlIExpbmtQcm9wc1dpdGhHbyA9IHtcbiAgZ286IE9taXQ8R29Db25maWdXaXRoUmVzb3VyY2UsIFwidHlwZVwiPjtcbn07XG5cbnR5cGUgTGlua1Byb3BzV2l0aFRvID0ge1xuICB0bzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgTGlua1Byb3BzPFRQcm9wcyA9IHt9PiA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPFxuICAoTGlua1Byb3BzV2l0aEdvIHwgTGlua1Byb3BzV2l0aFRvKSAmIFRQcm9wc1xuPjtcblxuLyoqXG4gKiBAcGFyYW0gdG8gVGhlIHBhdGggdG8gbmF2aWdhdGUgdG8uXG4gKiBAcGFyYW0gZ28gVGhlIHVzZUdvLmdvIHBhcmFtcyB0byBuYXZpZ2F0ZSB0by4gSWYgYHRvYCBwcm92aWRlZCwgdGhpcyB3aWxsIGJlIGlnbm9yZWQuXG4gKiBAcmV0dXJucyByb3V0ZXJQcm92aWRlci5MaW5rIGlmIGl0IGlzIHByb3ZpZGVkLCBvdGhlcndpc2UgYW4gYW5jaG9yIHRhZy5cbiAqL1xuY29uc3QgTGlua0NvbXBvbmVudCA9IDxUUHJvcHMgPSB7fT4oXG4gIHByb3BzOiBMaW5rUHJvcHM8VFByb3BzPixcbiAgcmVmOiBSZWY8RWxlbWVudD4sXG4pID0+IHtcbiAgY29uc3Qgcm91dGVyQ29udGV4dCA9IHVzZUNvbnRleHQoUm91dGVyQ29udGV4dCk7XG4gIGNvbnN0IExpbmtGcm9tQ29udGV4dCA9IHJvdXRlckNvbnRleHQ/Lkxpbms7XG5cbiAgY29uc3QgZ29GdW5jdGlvbiA9IHVzZUdvKCk7XG5cbiAgbGV0IHJlc29sdmVkVG8gPSBcIlwiO1xuICBpZiAoXCJnb1wiIGluIHByb3BzKSB7XG4gICAgaWYgKCFyb3V0ZXJDb250ZXh0Py5nbykge1xuICAgICAgd2Fybk9uY2UoXG4gICAgICAgIHRydWUsXG4gICAgICAgIFwiW0xpbmtdOiBgcm91dGVyUHJvdmlkZXJgIGlzIG5vdCBmb3VuZC4gVG8gdXNlIGBnb2AsIFBsZWFzZSBtYWtlIHN1cmUgdGhhdCB5b3UgaGF2ZSBwcm92aWRlZCB0aGUgYHJvdXRlclByb3ZpZGVyYCBmb3IgYDxSZWZpbmUgLz5gIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL3JvdXRpbmcvcm91dGVyLXByb3ZpZGVyLyBcXG5cIixcbiAgICAgICk7XG4gICAgfVxuICAgIHJlc29sdmVkVG8gPSBnb0Z1bmN0aW9uKHsgLi4ucHJvcHMuZ28sIHR5cGU6IFwicGF0aFwiIH0pIGFzIHN0cmluZztcbiAgfVxuICBpZiAoXCJ0b1wiIGluIHByb3BzKSB7XG4gICAgcmVzb2x2ZWRUbyA9IHByb3BzLnRvO1xuICB9XG5cbiAgaWYgKExpbmtGcm9tQ29udGV4dCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlua0Zyb21Db250ZXh0XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIHRvPXtyZXNvbHZlZFRvfVxuICAgICAgICAvLyBUaGlzIGlzIGEgd29ya2Fyb3VuZCB0byBhdm9pZCBwYXNzaW5nIGBnb2AgdG8gdGhlIExpbmsgY29tcG9uZW50LlxuICAgICAgICBnbz17dW5kZWZpbmVkfVxuICAgICAgLz5cbiAgICApO1xuICB9XG4gIHJldHVybiAoXG4gICAgPGFcbiAgICAgIHJlZj17cmVmfVxuICAgICAgaHJlZj17cmVzb2x2ZWRUb31cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIGF2b2lkIHBhc3NpbmcgYGdvYCBhbmQgYHRvYCB0byB0aGUgYW5jaG9yIHRhZy5cbiAgICAgIHRvPXt1bmRlZmluZWR9XG4gICAgICBnbz17dW5kZWZpbmVkfVxuICAgIC8+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgTGluayA9IGZvcndhcmRSZWYoTGlua0NvbXBvbmVudCkgYXMgPFQgPSB7fT4oXG4gIHByb3BzOiBMaW5rUHJvcHM8VD4gJiB7IHJlZj86IFJlZjxFbGVtZW50PiB9LFxuKSA9PiBSZXR1cm5UeXBlPHR5cGVvZiBMaW5rQ29tcG9uZW50PjtcbiIsImltcG9ydCB7IExpbmsgfSBmcm9tIFwiLi4vLi4vLi4vY29tcG9uZW50cy9saW5rXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VMaW5rID0gKCkgPT4ge1xuICByZXR1cm4gTGluaztcbn07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IExlZ2FjeVJvdXRlckNvbnRleHQsIGRlZmF1bHRQcm92aWRlciB9IGZyb20gXCJAY29udGV4dHMvcm91dGVyL2xlZ2FjeVwiO1xuXG5leHBvcnQgY29uc3QgdXNlUm91dGVyQ29udGV4dCA9ICgpID0+IHtcbiAgY29uc3Qgcm91dGVyQ29udGV4dFZhbHVlcyA9IHVzZUNvbnRleHQoTGVnYWN5Um91dGVyQ29udGV4dCk7XG5cbiAgY29uc3QgeyB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCBQcm9tcHQsIExpbmssIHJvdXRlcyB9ID1cbiAgICByb3V0ZXJDb250ZXh0VmFsdWVzID8/IGRlZmF1bHRQcm92aWRlcjtcblxuICByZXR1cm4ge1xuICAgIHVzZUhpc3RvcnksXG4gICAgdXNlTG9jYXRpb24sXG4gICAgdXNlUGFyYW1zLFxuICAgIFByb21wdCxcbiAgICBMaW5rLFxuICAgIHJvdXRlcyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdHlwZSBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgdHlwZSB7IElMZWdhY3lSb3V0ZXJDb250ZXh0IH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQcm92aWRlcjogSUxlZ2FjeVJvdXRlckNvbnRleHQgPSB7XG4gIHVzZUhpc3Rvcnk6ICgpID0+IGZhbHNlLFxuICB1c2VMb2NhdGlvbjogKCkgPT4gZmFsc2UsXG4gIHVzZVBhcmFtczogKCkgPT4gKHt9KSBhcyBhbnksXG4gIFByb21wdDogKCkgPT4gbnVsbCxcbiAgTGluazogKCkgPT4gbnVsbCxcbn07XG5cbmV4cG9ydCBjb25zdCBMZWdhY3lSb3V0ZXJDb250ZXh0ID1cbiAgUmVhY3QuY3JlYXRlQ29udGV4dDxJTGVnYWN5Um91dGVyQ29udGV4dD4oZGVmYXVsdFByb3ZpZGVyKTtcblxuZXhwb3J0IGNvbnN0IExlZ2FjeVJvdXRlckNvbnRleHRQcm92aWRlcjogUmVhY3QuRkM8XG4gIFByb3BzV2l0aENoaWxkcmVuPFBhcnRpYWw8SUxlZ2FjeVJvdXRlckNvbnRleHQ+PlxuPiA9ICh7XG4gIGNoaWxkcmVuLFxuICB1c2VIaXN0b3J5LFxuICB1c2VMb2NhdGlvbixcbiAgdXNlUGFyYW1zLFxuICBQcm9tcHQsXG4gIExpbmssXG4gIHJvdXRlcyxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8TGVnYWN5Um91dGVyQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgdXNlSGlzdG9yeTogdXNlSGlzdG9yeSA/PyBkZWZhdWx0UHJvdmlkZXIudXNlSGlzdG9yeSxcbiAgICAgICAgdXNlTG9jYXRpb246IHVzZUxvY2F0aW9uID8/IGRlZmF1bHRQcm92aWRlci51c2VMb2NhdGlvbixcbiAgICAgICAgdXNlUGFyYW1zOiB1c2VQYXJhbXMgPz8gZGVmYXVsdFByb3ZpZGVyLnVzZVBhcmFtcyxcbiAgICAgICAgUHJvbXB0OiBQcm9tcHQgPz8gZGVmYXVsdFByb3ZpZGVyLlByb21wdCxcbiAgICAgICAgTGluazogTGluayA/PyBkZWZhdWx0UHJvdmlkZXIuTGluayxcbiAgICAgICAgcm91dGVzOiByb3V0ZXMgPz8gZGVmYXVsdFByb3ZpZGVyLnJvdXRlcyxcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvTGVnYWN5Um91dGVyQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IGdldFhSYXkgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VRdWVyeU9wdGlvbnMsXG4gIHR5cGUgVXNlUXVlcnlSZXN1bHQsXG4gIHVzZVF1ZXJ5LFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB7IEFjY2Vzc0NvbnRyb2xDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9hY2Nlc3NDb250cm9sXCI7XG5pbXBvcnQgeyBzYW5pdGl6ZVJlc291cmNlIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzL3Nhbml0aXplLXJlc291cmNlXCI7XG5pbXBvcnQgeyB1c2VLZXlzIH0gZnJvbSBcIkBob29rcy91c2VLZXlzXCI7XG5pbXBvcnQgdHlwZSB7XG4gIENhblBhcmFtcyxcbiAgQ2FuUmV0dXJuVHlwZSxcbn0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2FjY2Vzc0NvbnRyb2wvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgVXNlQ2FuUHJvcHMgPSBDYW5QYXJhbXMgJiB7XG4gIC8qKlxuICAgKiByZWFjdC1xdWVyeSdzIFt1c2VRdWVyeV0oaHR0cHM6Ly90YW5zdGFjay5jb20vcXVlcnkvdjQvZG9jcy9yZWZlcmVuY2UvdXNlUXVlcnkpIG9wdGlvbnNcbiAgICovXG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxDYW5SZXR1cm5UeXBlPjtcbn07XG5cbi8qKlxuICogYHVzZUNhbmAgdXNlcyB0aGUgYGNhbmAgYXMgdGhlIHF1ZXJ5IGZ1bmN0aW9uIGZvciBgcmVhY3QtcXVlcnlgJ3Mge0BsaW5rIGh0dHBzOi8vcmVhY3QtcXVlcnkudGFuc3RhY2suY29tL2d1aWRlcy9xdWVyaWVzIGB1c2VRdWVyeWB9LiBJdCB0YWtlcyB0aGUgcGFyYW1ldGVycyB0aGF0IGBjYW5gIHRha2VzLiBJdCBjYW4gYWxzbyBiZSBjb25maWd1cmVkIHdpdGggYHF1ZXJ5T3B0aW9uc2AgZm9yIGB1c2VRdWVyeWAuIFJldHVybnMgdGhlIHJlc3VsdCBvZiBgdXNlUXVlcnlgLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2FjY2Vzc0NvbnRyb2wvdXNlQ2FufSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEB0eXBlUGFyYW0gQ2FuUGFyYW1zIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjY2FucGFyYW1zfVxuICogQHR5cGVQYXJhbSBDYW5SZXR1cm5UeXBlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjY2FucmV0dXJudHlwZX1cbiAqXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDYW4gPSAoe1xuICBhY3Rpb24sXG4gIHJlc291cmNlLFxuICBwYXJhbXMsXG4gIHF1ZXJ5T3B0aW9uczogaG9va1F1ZXJ5T3B0aW9ucyxcbn06IFVzZUNhblByb3BzKTogVXNlUXVlcnlSZXN1bHQ8Q2FuUmV0dXJuVHlwZT4gPT4ge1xuICBjb25zdCB7IGNhbiwgb3B0aW9uczogZ2xvYmFsT3B0aW9ucyB9ID0gdXNlQ29udGV4dChBY2Nlc3NDb250cm9sQ29udGV4dCk7XG4gIGNvbnN0IHsga2V5cywgcHJlZmVyTGVnYWN5S2V5cyB9ID0gdXNlS2V5cygpO1xuXG4gIGNvbnN0IHsgcXVlcnlPcHRpb25zOiBnbG9iYWxRdWVyeU9wdGlvbnMgfSA9IGdsb2JhbE9wdGlvbnMgfHwge307XG5cbiAgY29uc3QgbWVyZ2VkUXVlcnlPcHRpb25zID0ge1xuICAgIC4uLmdsb2JhbFF1ZXJ5T3B0aW9ucyxcbiAgICAuLi5ob29rUXVlcnlPcHRpb25zLFxuICB9O1xuXG4gIC8qKlxuICAgKiBTaW5jZSBgcmVhY3QtcXVlcnlgIHN0cmluZ2lmaWVzIHRoZSBxdWVyeSBrZXlzLCBpdCB3aWxsIHRocm93IGFuIGVycm9yIGZvciBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgaWYgd2UgaW5jbHVkZSBgUmVhY3QuUmVhY3ROb2RlYCBlbGVtZW50cyBpbnNpZGUgdGhlIGtleXMuXG4gICAqIFRoZSBmZWF0dXJlIGluICMyMjIwKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWZpbmVkZXYvcmVmaW5lL2lzc3Vlcy8yMjIwKSBpbmNsdWRlcyBzdWNoIGNoYW5nZSBhbmQgdG8gZml4IHRoaXMsIHdlIG5lZWQgdG8gcmVtb3ZlIGBpY29uYCBwcm9wZXJ0eSBpbiB0aGUgYHJlc291cmNlYFxuICAgKi9cbiAgY29uc3QgeyByZXNvdXJjZTogX3Jlc291cmNlLCAuLi5wYXJhbXNSZXN0IH0gPSBwYXJhbXMgPz8ge307XG5cbiAgY29uc3Qgc2FuaXRpemVkUmVzb3VyY2UgPSBzYW5pdGl6ZVJlc291cmNlKF9yZXNvdXJjZSk7XG5cbiAgY29uc3QgcXVlcnlSZXNwb25zZSA9IHVzZVF1ZXJ5PENhblJldHVyblR5cGU+KHtcbiAgICBxdWVyeUtleToga2V5cygpXG4gICAgICAuYWNjZXNzKClcbiAgICAgIC5yZXNvdXJjZShyZXNvdXJjZSlcbiAgICAgIC5hY3Rpb24oYWN0aW9uKVxuICAgICAgLnBhcmFtcyh7XG4gICAgICAgIHBhcmFtczogeyAuLi5wYXJhbXNSZXN0LCByZXNvdXJjZTogc2FuaXRpemVkUmVzb3VyY2UgfSxcbiAgICAgICAgZW5hYmxlZDogbWVyZ2VkUXVlcnlPcHRpb25zPy5lbmFibGVkLFxuICAgICAgfSlcbiAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgLy8gRW5hYmxlZCBjaGVjayBmb3IgYGNhbmAgaXMgZW5vdWdoIHRvIGJlIHN1cmUgdGhhdCBpdCdzIGRlZmluZWQgaW4gdGhlIHF1ZXJ5IGZ1bmN0aW9uIGJ1dCBUUyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGtub3cgdGhhdC5cbiAgICBxdWVyeUZuOiAoKSA9PlxuICAgICAgY2FuPy4oe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBwYXJhbXM6IHsgLi4ucGFyYW1zUmVzdCwgcmVzb3VyY2U6IHNhbml0aXplZFJlc291cmNlIH0sXG4gICAgICB9KSA/PyBQcm9taXNlLnJlc29sdmUoeyBjYW46IHRydWUgfSksXG4gICAgZW5hYmxlZDogdHlwZW9mIGNhbiAhPT0gXCJ1bmRlZmluZWRcIixcbiAgICAuLi5tZXJnZWRRdWVyeU9wdGlvbnMsXG4gICAgbWV0YToge1xuICAgICAgLi4ubWVyZ2VkUXVlcnlPcHRpb25zPy5tZXRhLFxuICAgICAgLi4uZ2V0WFJheShcInVzZUNhblwiLCBwcmVmZXJMZWdhY3lLZXlzLCByZXNvdXJjZSwgW1xuICAgICAgICBcInVzZUJ1dHRvbkNhbkFjY2Vzc1wiLFxuICAgICAgICBcInVzZU5hdmlnYXRpb25CdXR0b25cIixcbiAgICAgIF0pLFxuICAgIH0sXG4gICAgcmV0cnk6IGZhbHNlLFxuICB9KTtcblxuICByZXR1cm4gdHlwZW9mIGNhbiA9PT0gXCJ1bmRlZmluZWRcIlxuICAgID8gKHsgZGF0YTogeyBjYW46IHRydWUgfSB9IGFzIHR5cGVvZiBxdWVyeVJlc3BvbnNlKVxuICAgIDogcXVlcnlSZXNwb25zZTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdHlwZSBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIElBY2Nlc3NDb250cm9sQ29udGV4dCxcbiAgSUFjY2Vzc0NvbnRyb2xDb250ZXh0UmV0dXJuVHlwZSxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLyoqIEBkZXByZWNhdGVkIGRlZmF1bHQgdmFsdWUgZm9yIGFjY2VzcyBjb250cm9sIGNvbnRleHQgaGFzIG5vIHVzZSBhbmQgaXMgYW4gZW1wdHkgb2JqZWN0LiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRBY2Nlc3NDb250cm9sQ29udGV4dCA9IHt9IGFzIElBY2Nlc3NDb250cm9sQ29udGV4dDtcblxuZXhwb3J0IGNvbnN0IEFjY2Vzc0NvbnRyb2xDb250ZXh0ID1cbiAgUmVhY3QuY3JlYXRlQ29udGV4dDxJQWNjZXNzQ29udHJvbENvbnRleHRSZXR1cm5UeXBlPih7XG4gICAgb3B0aW9uczoge1xuICAgICAgYnV0dG9uczogeyBlbmFibGVBY2Nlc3NDb250cm9sOiB0cnVlLCBoaWRlSWZVbmF1dGhvcml6ZWQ6IGZhbHNlIH0sXG4gICAgfSxcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBBY2Nlc3NDb250cm9sQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GQzxcbiAgUHJvcHNXaXRoQ2hpbGRyZW48SUFjY2Vzc0NvbnRyb2xDb250ZXh0PlxuPiA9ICh7IGNhbiwgY2hpbGRyZW4sIG9wdGlvbnMgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxBY2Nlc3NDb250cm9sQ29udGV4dC5Qcm92aWRlclxuICAgICAgdmFsdWU9e3tcbiAgICAgICAgY2FuLFxuICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVBY2Nlc3NDb250cm9sOiB0cnVlLFxuICAgICAgICAgICAgICAgIGhpZGVJZlVuYXV0aG9yaXplZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5idXR0b25zLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDoge1xuICAgICAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlQWNjZXNzQ29udHJvbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoaWRlSWZVbmF1dGhvcml6ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBxdWVyeU9wdGlvbnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0FjY2Vzc0NvbnRyb2xDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCB0eXBlIHsgSVJlc291cmNlSXRlbSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuXG4vKipcbiAqIFJlbW92ZSBhbGwgcHJvcGVydGllcyB0aGF0IGFyZSBub24tc2VyaWFsaXphYmxlIGZyb20gYSByZXNvdXJjZSBvYmplY3QuXG4gKi9cbmV4cG9ydCBjb25zdCBzYW5pdGl6ZVJlc291cmNlID0gKFxuICByZXNvdXJjZT86IFBhcnRpYWw8SVJlc291cmNlSXRlbT4gJlxuICAgIFJlcXVpcmVkPFBpY2s8SVJlc291cmNlSXRlbSwgXCJuYW1lXCI+PiAmIHsgY2hpbGRyZW4/OiB1bmtub3duIH0sXG4pOlxuICB8IChQYXJ0aWFsPElSZXNvdXJjZUl0ZW0+ICYgUmVxdWlyZWQ8UGljazxJUmVzb3VyY2VJdGVtLCBcIm5hbWVcIj4+KVxuICB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICghcmVzb3VyY2UpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIGljb24sXG4gICAgbGlzdCxcbiAgICBlZGl0LFxuICAgIGNyZWF0ZSxcbiAgICBzaG93LFxuICAgIGNsb25lLFxuICAgIGNoaWxkcmVuLFxuICAgIG1ldGEsXG4gICAgb3B0aW9ucyxcbiAgICAuLi5yZXN0UmVzb3VyY2VcbiAgfSA9IHJlc291cmNlO1xuXG4gIGNvbnN0IHsgaWNvbjogX21ldGFJY29uLCAuLi5yZXN0TWV0YSB9ID0gbWV0YSA/PyB7fTtcbiAgY29uc3QgeyBpY29uOiBfb3B0aW9uc0ljb24sIC4uLnJlc3RPcHRpb25zIH0gPSBvcHRpb25zID8/IHt9O1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmVzdFJlc291cmNlLFxuICAgIC4uLihtZXRhID8geyBtZXRhOiByZXN0TWV0YSB9IDoge30pLFxuICAgIC4uLihvcHRpb25zID8geyBvcHRpb25zOiByZXN0T3B0aW9ucyB9IDoge30pLFxuICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgQWNjZXNzQ29udHJvbENvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2FjY2Vzc0NvbnRyb2xcIjtcbmltcG9ydCB7IHNhbml0aXplUmVzb3VyY2UgfSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnMvc2FuaXRpemUtcmVzb3VyY2VcIjtcblxuaW1wb3J0IHR5cGUgeyBJQWNjZXNzQ29udHJvbENvbnRleHQgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvYWNjZXNzQ29udHJvbC90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgdXNlQ2FuV2l0aG91dENhY2hlID0gKCk6IElBY2Nlc3NDb250cm9sQ29udGV4dCA9PiB7XG4gIGNvbnN0IHsgY2FuOiBjYW5Gcm9tQ29udGV4dCB9ID0gUmVhY3QudXNlQ29udGV4dChBY2Nlc3NDb250cm9sQ29udGV4dCk7XG5cbiAgY29uc3QgY2FuID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFjYW5Gcm9tQ29udGV4dCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBjb25zdCBjYW5XaXRoU2FuaXRpemVkUmVzb3VyY2U6IE5vbk51bGxhYmxlPHR5cGVvZiBjYW5Gcm9tQ29udGV4dD4gPVxuICAgICAgYXN5bmMgKHsgcGFyYW1zLCAuLi5yZXN0IH0pID0+IHtcbiAgICAgICAgY29uc3Qgc2FuaXRpemVkUmVzb3VyY2UgPSBwYXJhbXM/LnJlc291cmNlXG4gICAgICAgICAgPyBzYW5pdGl6ZVJlc291cmNlKHBhcmFtcy5yZXNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gY2FuRnJvbUNvbnRleHQoe1xuICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgLi4uKHBhcmFtc1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICByZXNvdXJjZTogc2FuaXRpemVkUmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgIHJldHVybiBjYW5XaXRoU2FuaXRpemVkUmVzb3VyY2U7XG4gIH0sIFtjYW5Gcm9tQ29udGV4dF0pO1xuXG4gIHJldHVybiB7IGNhbiB9O1xufTtcbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHR5cGUge1xuICBRdWVyeU9ic2VydmVyUmVzdWx0LFxuICBVc2VRdWVyeU9wdGlvbnMsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwibG9kYXNoLWVzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgZ2V0IGZyb20gXCJsb2Rhc2gtZXMvZ2V0LmpzXCI7XG5pbXBvcnQgdW5pcUJ5IGZyb20gXCJsb2Rhc2gtZXMvdW5pcUJ5LmpzXCI7XG5cbmltcG9ydCB7IHBpY2tOb3REZXByZWNhdGVkIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5pbXBvcnQgeyB1c2VMaXN0LCB1c2VNYW55LCB1c2VNZXRhIH0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEJhc2VLZXksXG4gIEJhc2VPcHRpb24sXG4gIEJhc2VSZWNvcmQsXG4gIENydWRGaWx0ZXIsXG4gIENydWRTb3J0LFxuICBHZXRMaXN0UmVzcG9uc2UsXG4gIEdldE1hbnlSZXNwb25zZSxcbiAgSHR0cEVycm9yLFxuICBNZXRhUXVlcnksXG4gIFBhZ2luYXRpb24sXG4gIFByZXR0aWZ5LFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBMaXZlTW9kZVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2xpdmUvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBCYXNlTGlzdFByb3BzIH0gZnJvbSBcIi4uL2RhdGEvdXNlTGlzdFwiO1xuaW1wb3J0IHsgdXNlUmVzb3VyY2UgfSBmcm9tIFwiLi4vcmVzb3VyY2UvdXNlUmVzb3VyY2UvaW5kZXhcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lT3B0aW9uc1Byb3BzLFxuICB0eXBlIFVzZUxvYWRpbmdPdmVydGltZVJldHVyblR5cGUsXG4gIHVzZUxvYWRpbmdPdmVydGltZSxcbn0gZnJvbSBcIi4uL3VzZUxvYWRpbmdPdmVydGltZVwiO1xuXG5leHBvcnQgdHlwZSBTZWxlY3RlZE9wdGlvbnNPcmRlciA9IFwiaW4tcGxhY2VcIiB8IFwic2VsZWN0ZWQtZmlyc3RcIjtcblxuZXhwb3J0IHR5cGUgVXNlU2VsZWN0UHJvcHM8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhPiA9IHtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFNldCB0aGUgb3B0aW9uJ3MgbGFiZWwgdmFsdWVcbiAgICogQGRlZmF1bHQgYFwidGl0bGVcImBcbiAgICovXG4gIG9wdGlvbkxhYmVsPzpcbiAgICB8IChrZXlvZiBURGF0YSBleHRlbmRzIHN0cmluZyA/IGtleW9mIFREYXRhIDogbmV2ZXIpXG4gICAgfCAoKGl0ZW06IFREYXRhKSA9PiBzdHJpbmcpO1xuICAvKipcbiAgICogU2V0IHRoZSBvcHRpb24ncyB2YWx1ZVxuICAgKiBAZGVmYXVsdCBgXCJpZFwiYFxuICAgKi9cbiAgb3B0aW9uVmFsdWU/OlxuICAgIHwgKGtleW9mIFREYXRhIGV4dGVuZHMgc3RyaW5nID8ga2V5b2YgVERhdGEgOiBuZXZlcilcbiAgICB8ICgoaXRlbTogVERhdGEpID0+IHN0cmluZyk7XG4gIC8qKlxuICAgKiBGaWVsZCBuYW1lIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBkZXNjcmlwdGlvbiBJZiBwcm92aWRlZCBgb3B0aW9uTGFiZWxgIGlzIGEgc3RyaW5nLCB1c2VzIGBvcHRpb25MYWJlbGAncyB2YWx1ZS5cbiAgICogQGRlZmF1bHQgYFwidGl0bGVcImBcbiAgICogQGV4YW1wbGVcbiAgICogLy8gd2hlbiBvcHRpb25MYWJlbCBpcyBzdHJpbmcuXG4gICAqIHVzZVNlbGVjdCh7IG9wdGlvbkxhYmVsOiBcIm5hbWVcIiB9KVxuICAgKiAvLyB1c2VzIGBuYW1lYCBmaWVsZC5cbiAgICogQGV4YW1wbGVcbiAgICogLy8gd2hlbiBvcHRpb25MYWJlbCBpcyBmdW5jdGlvbi5cbiAgICogdXNlU2VsZWN0KHsgb3B0aW9uTGFiZWw6IChmaWVsZCkgPT4gZmllbGQuZGVzY3JpcHRpb24gfSlcbiAgICogLy8gdXNlcyBgdGl0bGVgLCBzaW5jZSBgb3B0aW9uTGFiZWxgIGlzIGEgZnVuY3Rpb24uXG4gICAqL1xuICBzZWFyY2hGaWVsZD86IGtleW9mIFREYXRhIGV4dGVuZHMgc3RyaW5nID8ga2V5b2YgVERhdGEgOiBuZXZlcjtcbiAgLyoqXG4gICAqIEFsbG93IHVzIHRvIHNvcnQgdGhlIG9wdGlvbnNcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBzb3J0ZXJzYCBpbnN0ZWFkXG4gICAqL1xuICBzb3J0PzogQ3J1ZFNvcnRbXTtcbiAgLyoqXG4gICAqIEFsbG93IHVzIHRvIHNvcnQgdGhlIG9wdGlvbnNcbiAgICovXG4gIHNvcnRlcnM/OiBDcnVkU29ydFtdO1xuICAvKipcbiAgICogUmVzb3VyY2UgbmFtZSBmb3IgQVBJIGRhdGEgaW50ZXJhY3Rpb25zXG4gICAqL1xuICBmaWx0ZXJzPzogQ3J1ZEZpbHRlcltdO1xuICAvKipcbiAgICogQWRkcyBleHRyYSBgb3B0aW9uc2BcbiAgICovXG4gIGRlZmF1bHRWYWx1ZT86IEJhc2VLZXkgfCBCYXNlS2V5W107XG4gIC8qKlxuICAgKiBBbGxvdyB1cyB0byBzb3J0IHRoZSBzZWxlY3Rpb24gb3B0aW9uc1xuICAgKiBAZGVmYXVsdCBgaW4tcGxhY2VgXG4gICAqL1xuICBzZWxlY3RlZE9wdGlvbnNPcmRlcj86IFNlbGVjdGVkT3B0aW9uc09yZGVyO1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXlcbiAgICogQGRlZmF1bHQgYDMwMGBcbiAgICovXG4gIGRlYm91bmNlPzogbnVtYmVyO1xuICAvKipcbiAgICogcmVhY3QtcXVlcnkgW3VzZVF1ZXJ5XShodHRwczovL3JlYWN0LXF1ZXJ5LnRhbnN0YWNrLmNvbS9yZWZlcmVuY2UvdXNlUXVlcnkpIG9wdGlvbnNcbiAgICovXG4gIHF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxcbiAgICBHZXRMaXN0UmVzcG9uc2U8VFF1ZXJ5Rm5EYXRhPixcbiAgICBURXJyb3IsXG4gICAgR2V0TGlzdFJlc3BvbnNlPFREYXRhPlxuICA+O1xuICAvKipcbiAgICogUGFnaW5hdGlvbiBvcHRpb24gZnJvbSBbYHVzZUxpc3QoKWBdKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy9kYXRhL3VzZUxpc3QvKVxuICAgKiBAdHlwZSB7ICBjdXJyZW50PzogbnVtYmVyOyBwYWdlU2l6ZT86IG51bWJlcjt9XG4gICAqIEBkZWZhdWx0IGB1bmRlZmluZWRgXG4gICAqL1xuICBwYWdpbmF0aW9uPzogUHJldHRpZnk8XG4gICAgT21pdDxQYWdpbmF0aW9uLCBcIm1vZGVcIj4gJiB7XG4gICAgICAvKipcbiAgICAgICAqIFdoZXRoZXIgdG8gdXNlIHNlcnZlciBzaWRlIHBhZ2luYXRpb24gb3Igbm90LlxuICAgICAgICogQGRlZmF1bHQgXCJvZmZcIlxuICAgICAgICovXG4gICAgICBtb2RlPzogUGFnaW5hdGlvbltcIm1vZGVcIl07XG4gICAgfVxuICA+O1xuICAvKipcbiAgICogRGlzYWJsaW5nIHBhZ2luYXRpb24gb3B0aW9uIGZyb20gW2B1c2VMaXN0KClgXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvZGF0YS91c2VMaXN0LylcbiAgICogQHR5cGUgYm9vbGVhblxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqIEBkZXByZWNhdGVkIGBoYXNQYWdpbmF0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYHBhZ2luYXRpb24ubW9kZWAgaW5zdGVhZC5cbiAgICovXG4gIGhhc1BhZ2luYXRpb24/OiBib29sZWFuO1xuICAvKipcbiAgICogcmVhY3QtcXVlcnkgW3VzZVF1ZXJ5XShodHRwczovL3JlYWN0LXF1ZXJ5LnRhbnN0YWNrLmNvbS9yZWZlcmVuY2UvdXNlUXVlcnkpIG9wdGlvbnNcbiAgICovXG4gIGRlZmF1bHRWYWx1ZVF1ZXJ5T3B0aW9ucz86IFVzZVF1ZXJ5T3B0aW9uczxcbiAgICBHZXRNYW55UmVzcG9uc2U8VFF1ZXJ5Rm5EYXRhPixcbiAgICBURXJyb3JcbiAgPjtcbiAgLyoqXG4gICAqIElmIGRlZmluZWQsIHRoaXMgY2FsbGJhY2sgYWxsb3dzIHVzIHRvIG92ZXJyaWRlIGFsbCBmaWx0ZXJzIGZvciBldmVyeSBzZWFyY2ggcmVxdWVzdC5cbiAgICogQGRlZmF1bHQgYHVuZGVmaW5lZGBcbiAgICovXG4gIG9uU2VhcmNoPzogKHZhbHVlOiBzdHJpbmcpID0+IENydWRGaWx0ZXJbXTtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgbWV0YSBkYXRhIHRvIHBhc3MgdG8gdGhlIGB1c2VNYW55YCBmcm9tIHRoZSBkYXRhIHByb3ZpZGVyXG4gICAqL1xuICBtZXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogQWRkaXRpb25hbCBtZXRhIGRhdGEgdG8gcGFzcyB0byB0aGUgYHVzZU1hbnlgIGZyb20gdGhlIGRhdGEgcHJvdmlkZXJcbiAgICogQGRlcHJlY2F0ZWQgYG1ldGFEYXRhYCBpcyBkZXByZWNhdGVkIHdpdGggcmVmaW5lQDQsIHJlZmluZSB3aWxsIHBhc3MgYG1ldGFgIGluc3RlYWQsIGhvd2V2ZXIsIHdlIHN0aWxsIHN1cHBvcnQgYG1ldGFEYXRhYCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICovXG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xuICAvKipcbiAgICogSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBgZGF0YVByb3ZpZGVyYCwgeW91IHNob3VsZCB1c2UgdGhlIGBkYXRhUHJvdmlkZXJOYW1lYCB0aGF0IHlvdSB3aWxsIHVzZS5cbiAgICogQGRlZmF1bHQgYGRlZmF1bHRgXG4gICAqL1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xuICAvKipcbiAgICogQW1vdW50IG9mIHJlY29yZHMgdG8gZmV0Y2ggaW4gc2VsZWN0IGJveCBsaXN0LlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgW2BwYWdpbmF0aW9uYF0oaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMvI3BhZ2luYXRpb24pIGluc3RlYWRcbiAgICogQGRlZmF1bHQgYHVuZGVmaW5lZGBcbiAgICovXG4gIGZldGNoU2l6ZT86IG51bWJlcjtcbn0gJiBTdWNjZXNzRXJyb3JOb3RpZmljYXRpb248XG4gIEdldExpc3RSZXNwb25zZTxURGF0YT4sXG4gIFRFcnJvcixcbiAgUHJldHRpZnk8QmFzZUxpc3RQcm9wcz5cbj4gJlxuICBMaXZlTW9kZVByb3BzICZcbiAgVXNlTG9hZGluZ092ZXJ0aW1lT3B0aW9uc1Byb3BzO1xuXG5leHBvcnQgdHlwZSBVc2VTZWxlY3RSZXR1cm5UeXBlPFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFRPcHRpb24gZXh0ZW5kcyBCYXNlT3B0aW9uID0gQmFzZU9wdGlvbixcbj4gPSB7XG4gIHF1ZXJ5OiBRdWVyeU9ic2VydmVyUmVzdWx0PEdldExpc3RSZXNwb25zZTxURGF0YT4sIFRFcnJvcj47XG4gIGRlZmF1bHRWYWx1ZVF1ZXJ5OiBRdWVyeU9ic2VydmVyUmVzdWx0PEdldE1hbnlSZXNwb25zZTxURGF0YT4+O1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBxdWVyeWAgaW5zdGVhZFxuICAgKi9cbiAgcXVlcnlSZXN1bHQ6IFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8R2V0TGlzdFJlc3BvbnNlPFREYXRhPiwgVEVycm9yPjtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgZGVmYXVsdFZhbHVlUXVlcnlgIGluc3RlYWRcbiAgICovXG4gIGRlZmF1bHRWYWx1ZVF1ZXJ5UmVzdWx0OiBRdWVyeU9ic2VydmVyUmVzdWx0PEdldE1hbnlSZXNwb25zZTxURGF0YT4+O1xuICBvblNlYXJjaDogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9wdGlvbnM6IFRPcHRpb25bXTtcbn0gJiBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlO1xuXG4vKipcbiAqIGB1c2VTZWxlY3RgIGhvb2sgaXMgdXNlZCB0byBmZXRjaCBkYXRhIGZyb20gdGhlIGRhdGFQcm92aWRlciBhbmQgcmV0dXJuIHRoZSBvcHRpb25zIGZvciB0aGUgc2VsZWN0IGJveC5cbiAqXG4gKiBJdCB1c2VzIGBnZXRMaXN0YCBtZXRob2QgYXMgcXVlcnkgZnVuY3Rpb24gZnJvbSB0aGUgZGF0YVByb3ZpZGVyIHRoYXQgaXNcbiAqIHBhc3NlZCB0byB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2NvbXBvbmVudHMvcmVmaW5lLWNvbmZpZy8gYDxSZWZpbmU+YH0uXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL3VzZVNlbGVjdH0gZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAdHlwZVBhcmFtIFRRdWVyeUZuRGF0YSAtIFJlc3VsdCBkYXRhIHJldHVybmVkIGJ5IHRoZSBxdWVyeSBmdW5jdGlvbi4gRXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9XG4gKiBAdHlwZVBhcmFtIFRFcnJvciAtIEN1c3RvbSBlcnJvciBvYmplY3QgdGhhdCBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNodHRwZXJyb3IgYEh0dHBFcnJvcmB9XG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIGBzZWxlY3RgIGZ1bmN0aW9uLiBFeHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNiYXNlcmVjb3JkIGBCYXNlUmVjb3JkYH0uIERlZmF1bHRzIHRvIGBUUXVlcnlGbkRhdGFgXG4gKlxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VTZWxlY3QgPSA8XG4gIFRRdWVyeUZuRGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBCYXNlUmVjb3JkLFxuICBURXJyb3IgZXh0ZW5kcyBIdHRwRXJyb3IgPSBIdHRwRXJyb3IsXG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IFRRdWVyeUZuRGF0YSxcbiAgVE9wdGlvbiBleHRlbmRzIEJhc2VPcHRpb24gPSBCYXNlT3B0aW9uLFxuPihcbiAgcHJvcHM6IFVzZVNlbGVjdFByb3BzPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YT4sXG4pOiBVc2VTZWxlY3RSZXR1cm5UeXBlPFREYXRhLCBURXJyb3IsIFRPcHRpb24+ID0+IHtcbiAgY29uc3QgW3NlYXJjaCwgc2V0U2VhcmNoXSA9IHVzZVN0YXRlPENydWRGaWx0ZXJbXT4oW10pO1xuICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSB1c2VTdGF0ZTxUT3B0aW9uW10+KFtdKTtcbiAgY29uc3QgW3NlbGVjdGVkT3B0aW9ucywgc2V0U2VsZWN0ZWRPcHRpb25zXSA9IHVzZVN0YXRlPFRPcHRpb25bXT4oW10pO1xuXG4gIGNvbnN0IHtcbiAgICByZXNvdXJjZTogcmVzb3VyY2VGcm9tUHJvcHMsXG4gICAgc29ydCxcbiAgICBzb3J0ZXJzLFxuICAgIGZpbHRlcnMgPSBbXSxcbiAgICBvcHRpb25MYWJlbCA9IFwidGl0bGVcIixcbiAgICBvcHRpb25WYWx1ZSA9IFwiaWRcIixcbiAgICBzZWFyY2hGaWVsZCA9IHR5cGVvZiBvcHRpb25MYWJlbCA9PT0gXCJzdHJpbmdcIiA/IG9wdGlvbkxhYmVsIDogXCJ0aXRsZVwiLFxuICAgIGRlYm91bmNlOiBkZWJvdW5jZVZhbHVlID0gMzAwLFxuICAgIHN1Y2Nlc3NOb3RpZmljYXRpb24sXG4gICAgZXJyb3JOb3RpZmljYXRpb24sXG4gICAgZGVmYXVsdFZhbHVlUXVlcnlPcHRpb25zOiBkZWZhdWx0VmFsdWVRdWVyeU9wdGlvbnNGcm9tUHJvcHMsXG4gICAgcXVlcnlPcHRpb25zLFxuICAgIGZldGNoU2l6ZSxcbiAgICBwYWdpbmF0aW9uLFxuICAgIGhhc1BhZ2luYXRpb24gPSBmYWxzZSxcbiAgICBsaXZlTW9kZSxcbiAgICBkZWZhdWx0VmFsdWUgPSBbXSxcbiAgICBzZWxlY3RlZE9wdGlvbnNPcmRlciA9IFwiaW4tcGxhY2VcIixcbiAgICBvbkxpdmVFdmVudCxcbiAgICBvblNlYXJjaDogb25TZWFyY2hGcm9tUHJvcCxcbiAgICBsaXZlUGFyYW1zLFxuICAgIG1ldGEsXG4gICAgbWV0YURhdGEsXG4gICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgICBvdmVydGltZU9wdGlvbnMsXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCBnZXRPcHRpb25MYWJlbCA9IHVzZUNhbGxiYWNrKFxuICAgIChpdGVtOiBURGF0YSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25MYWJlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2V0KGl0ZW0sIG9wdGlvbkxhYmVsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbkxhYmVsKGl0ZW0pO1xuICAgIH0sXG4gICAgW29wdGlvbkxhYmVsXSxcbiAgKTtcblxuICBjb25zdCBnZXRPcHRpb25WYWx1ZSA9IHVzZUNhbGxiYWNrKFxuICAgIChpdGVtOiBURGF0YSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2V0KGl0ZW0sIG9wdGlvblZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvblZhbHVlKGl0ZW0pO1xuICAgIH0sXG4gICAgW29wdGlvblZhbHVlXSxcbiAgKTtcblxuICBjb25zdCB7IHJlc291cmNlLCBpZGVudGlmaWVyIH0gPSB1c2VSZXNvdXJjZShyZXNvdXJjZUZyb21Qcm9wcyk7XG5cbiAgY29uc3QgZ2V0TWV0YSA9IHVzZU1ldGEoKTtcblxuICBjb25zdCBjb21iaW5lZE1ldGEgPSBnZXRNZXRhKHtcbiAgICByZXNvdXJjZSxcbiAgICBtZXRhOiBwaWNrTm90RGVwcmVjYXRlZChtZXRhLCBtZXRhRGF0YSksXG4gIH0pO1xuXG4gIGNvbnN0IGRlZmF1bHRWYWx1ZXMgPSBBcnJheS5pc0FycmF5KGRlZmF1bHRWYWx1ZSlcbiAgICA/IGRlZmF1bHRWYWx1ZVxuICAgIDogW2RlZmF1bHRWYWx1ZV07XG5cbiAgY29uc3QgZGVmYXVsdFZhbHVlUXVlcnlPblN1Y2Nlc3MgPSB1c2VDYWxsYmFjayhcbiAgICAoZGF0YTogR2V0TWFueVJlc3BvbnNlPFREYXRhPikgPT4ge1xuICAgICAgc2V0U2VsZWN0ZWRPcHRpb25zKFxuICAgICAgICBkYXRhLmRhdGEubWFwKFxuICAgICAgICAgIChpdGVtKSA9PlxuICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgbGFiZWw6IGdldE9wdGlvbkxhYmVsKGl0ZW0pLFxuICAgICAgICAgICAgICB2YWx1ZTogZ2V0T3B0aW9uVmFsdWUoaXRlbSksXG4gICAgICAgICAgICB9KSBhcyBUT3B0aW9uLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9LFxuICAgIFtvcHRpb25MYWJlbCwgb3B0aW9uVmFsdWVdLFxuICApO1xuXG4gIGNvbnN0IGRlZmF1bHRWYWx1ZVF1ZXJ5T3B0aW9ucyA9XG4gICAgZGVmYXVsdFZhbHVlUXVlcnlPcHRpb25zRnJvbVByb3BzID8/IChxdWVyeU9wdGlvbnMgYXMgYW55KTtcblxuICBjb25zdCBkZWZhdWx0VmFsdWVRdWVyeVJlc3VsdCA9IHVzZU1hbnk8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhPih7XG4gICAgcmVzb3VyY2U6IGlkZW50aWZpZXIsXG4gICAgaWRzOiBkZWZhdWx0VmFsdWVzLFxuICAgIHF1ZXJ5T3B0aW9uczoge1xuICAgICAgLi4uZGVmYXVsdFZhbHVlUXVlcnlPcHRpb25zLFxuICAgICAgZW5hYmxlZDpcbiAgICAgICAgZGVmYXVsdFZhbHVlcy5sZW5ndGggPiAwICYmIChkZWZhdWx0VmFsdWVRdWVyeU9wdGlvbnM/LmVuYWJsZWQgPz8gdHJ1ZSksXG4gICAgICBvblN1Y2Nlc3M6IChkYXRhKSA9PiB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZVF1ZXJ5T25TdWNjZXNzKGRhdGEpO1xuICAgICAgICBkZWZhdWx0VmFsdWVRdWVyeU9wdGlvbnM/Lm9uU3VjY2Vzcz8uKGRhdGEpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIG1ldGE6IGNvbWJpbmVkTWV0YSxcbiAgICBtZXRhRGF0YTogY29tYmluZWRNZXRhLFxuICAgIGxpdmVNb2RlOiBcIm9mZlwiLFxuICAgIGRhdGFQcm92aWRlck5hbWUsXG4gIH0pO1xuXG4gIGNvbnN0IGRlZmF1bHRRdWVyeU9uU3VjY2VzcyA9IHVzZUNhbGxiYWNrKFxuICAgIChkYXRhOiBHZXRMaXN0UmVzcG9uc2U8VERhdGE+KSA9PiB7XG4gICAgICBzZXRPcHRpb25zKFxuICAgICAgICBkYXRhLmRhdGEubWFwKFxuICAgICAgICAgIChpdGVtKSA9PlxuICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgbGFiZWw6IGdldE9wdGlvbkxhYmVsKGl0ZW0pLFxuICAgICAgICAgICAgICB2YWx1ZTogZ2V0T3B0aW9uVmFsdWUoaXRlbSksXG4gICAgICAgICAgICB9KSBhcyBUT3B0aW9uLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9LFxuICAgIFtvcHRpb25MYWJlbCwgb3B0aW9uVmFsdWVdLFxuICApO1xuXG4gIGNvbnN0IHF1ZXJ5UmVzdWx0ID0gdXNlTGlzdDxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+KHtcbiAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICBzb3J0ZXJzOiBwaWNrTm90RGVwcmVjYXRlZChzb3J0ZXJzLCBzb3J0KSxcbiAgICBmaWx0ZXJzOiBmaWx0ZXJzLmNvbmNhdChzZWFyY2gpLFxuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGN1cnJlbnQ6IHBhZ2luYXRpb24/LmN1cnJlbnQsXG4gICAgICBwYWdlU2l6ZTogcGFnaW5hdGlvbj8ucGFnZVNpemUgPz8gZmV0Y2hTaXplLFxuICAgICAgbW9kZTogcGFnaW5hdGlvbj8ubW9kZSxcbiAgICB9LFxuICAgIGhhc1BhZ2luYXRpb24sXG4gICAgcXVlcnlPcHRpb25zOiB7XG4gICAgICAuLi5xdWVyeU9wdGlvbnMsXG4gICAgICBvblN1Y2Nlc3M6IChkYXRhKSA9PiB7XG4gICAgICAgIGRlZmF1bHRRdWVyeU9uU3VjY2VzcyhkYXRhKTtcbiAgICAgICAgcXVlcnlPcHRpb25zPy5vblN1Y2Nlc3M/LihkYXRhKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzdWNjZXNzTm90aWZpY2F0aW9uLFxuICAgIGVycm9yTm90aWZpY2F0aW9uLFxuICAgIG1ldGE6IGNvbWJpbmVkTWV0YSxcbiAgICBtZXRhRGF0YTogY29tYmluZWRNZXRhLFxuICAgIGxpdmVNb2RlLFxuICAgIGxpdmVQYXJhbXMsXG4gICAgb25MaXZlRXZlbnQsXG4gICAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgfSk7XG5cbiAgY29uc3QgeyBlbGFwc2VkVGltZSB9ID0gdXNlTG9hZGluZ092ZXJ0aW1lKHtcbiAgICBpc0xvYWRpbmc6IHF1ZXJ5UmVzdWx0LmlzRmV0Y2hpbmcgfHwgZGVmYXVsdFZhbHVlUXVlcnlSZXN1bHQuaXNGZXRjaGluZyxcbiAgICBpbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5pbnRlcnZhbCxcbiAgICBvbkludGVydmFsOiBvdmVydGltZU9wdGlvbnM/Lm9uSW50ZXJ2YWwsXG4gIH0pO1xuXG4gIGNvbnN0IGNvbWJpbmVkT3B0aW9ucyA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHVuaXFCeShcbiAgICAgICAgc2VsZWN0ZWRPcHRpb25zT3JkZXIgPT09IFwiaW4tcGxhY2VcIlxuICAgICAgICAgID8gWy4uLm9wdGlvbnMsIC4uLnNlbGVjdGVkT3B0aW9uc11cbiAgICAgICAgICA6IFsuLi5zZWxlY3RlZE9wdGlvbnMsIC4uLm9wdGlvbnNdLFxuICAgICAgICBcInZhbHVlXCIsXG4gICAgICApLFxuICAgIFtvcHRpb25zLCBzZWxlY3RlZE9wdGlvbnNdLFxuICApO1xuXG4gIC8qKlxuICAgKiBUbyBhdm9pZCBhbnkgY2hhbmdlcyBpbiB0aGUgYG9uU2VhcmNoYCBjYWxsYmFjayxcbiAgICogV2UncmUgc3RvcmluZyBgb25TZWFyY2hGcm9tUHJvcGAgaW4gYSByZWYgYW5kIGFjY2Vzc2luZyBpdCBpbiB0aGUgYG9uU2VhcmNoYCBjYWxsYmFjay5cbiAgICovXG4gIGNvbnN0IG9uU2VhcmNoRnJvbVByb3BSZWYgPSB1c2VSZWYob25TZWFyY2hGcm9tUHJvcCk7XG5cbiAgY29uc3Qgb25TZWFyY2ggPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gZGVib3VuY2UoKHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChvblNlYXJjaEZyb21Qcm9wUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgc2V0U2VhcmNoKG9uU2VhcmNoRnJvbVByb3BSZWYuY3VycmVudCh2YWx1ZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgc2V0U2VhcmNoKFtdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZXRTZWFyY2goW1xuICAgICAgICB7XG4gICAgICAgICAgZmllbGQ6IHNlYXJjaEZpZWxkLFxuICAgICAgICAgIG9wZXJhdG9yOiBcImNvbnRhaW5zXCIsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9LCBkZWJvdW5jZVZhbHVlKTtcbiAgfSwgW3NlYXJjaEZpZWxkLCBkZWJvdW5jZVZhbHVlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBvblNlYXJjaEZyb21Qcm9wUmVmLmN1cnJlbnQgPSBvblNlYXJjaEZyb21Qcm9wO1xuICB9LCBbb25TZWFyY2hGcm9tUHJvcF0pO1xuXG4gIHJldHVybiB7XG4gICAgcXVlcnlSZXN1bHQsXG4gICAgZGVmYXVsdFZhbHVlUXVlcnlSZXN1bHQsXG4gICAgcXVlcnk6IHF1ZXJ5UmVzdWx0LFxuICAgIGRlZmF1bHRWYWx1ZVF1ZXJ5OiBkZWZhdWx0VmFsdWVRdWVyeVJlc3VsdCxcbiAgICBvcHRpb25zOiBjb21iaW5lZE9wdGlvbnMsXG4gICAgb25TZWFyY2gsXG4gICAgb3ZlcnRpbWU6IHsgZWxhcHNlZFRpbWUgfSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHR5cGUge1xuICBRdWVyeU9ic2VydmVyUmVzdWx0LFxuICBVc2VRdWVyeU9wdGlvbnMsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbmltcG9ydCBkaWZmZXJlbmNlV2l0aCBmcm9tIFwibG9kYXNoLWVzL2RpZmZlcmVuY2VXaXRoLmpzXCI7XG5pbXBvcnQgaXNFcXVhbCBmcm9tIFwibG9kYXNoLWVzL2lzRXF1YWwuanNcIjtcbmltcG9ydCBxcyBmcm9tIFwicXNcIjtcbmltcG9ydCB3YXJuT25jZSBmcm9tIFwid2Fybi1vbmNlXCI7XG5cbmltcG9ydCB7IHBpY2tOb3REZXByZWNhdGVkIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5pbXBvcnQge1xuICBwYXJzZVRhYmxlUGFyYW1zLFxuICBzZXRJbml0aWFsRmlsdGVycyxcbiAgc2V0SW5pdGlhbFNvcnRlcnMsXG4gIHN0cmluZ2lmeVRhYmxlUGFyYW1zLFxuICB1bmlvbkZpbHRlcnMsXG4gIHVuaW9uU29ydGVycyxcbn0gZnJvbSBcIkBkZWZpbml0aW9ucy90YWJsZVwiO1xuaW1wb3J0IHtcbiAgdXNlR28sXG4gIHVzZUxpc3QsXG4gIHVzZUxpdmVNb2RlLFxuICB1c2VNZXRhLFxuICB1c2VOYXZpZ2F0aW9uLFxuICB1c2VQYXJzZWQsXG4gIHVzZVJlc291cmNlLFxuICB1c2VSb3V0ZXJDb250ZXh0LFxuICB1c2VSb3V0ZXJUeXBlLFxuICB1c2VTeW5jV2l0aExvY2F0aW9uLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgQmFzZVJlY29yZCxcbiAgQ3J1ZEZpbHRlcixcbiAgQ3J1ZFNvcnQsXG4gIEdldExpc3RSZXNwb25zZSxcbiAgSHR0cEVycm9yLFxuICBNZXRhUXVlcnksXG4gIFBhZ2luYXRpb24sXG4gIFByZXR0aWZ5LFxufSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBMaXZlTW9kZVByb3BzIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2xpdmUvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgU3VjY2Vzc0Vycm9yTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvbi90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBCYXNlTGlzdFByb3BzIH0gZnJvbSBcIi4uL2RhdGEvdXNlTGlzdFwiO1xuaW1wb3J0IHtcbiAgdHlwZSBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHMsXG4gIHR5cGUgVXNlTG9hZGluZ092ZXJ0aW1lUmV0dXJuVHlwZSxcbiAgdXNlTG9hZGluZ092ZXJ0aW1lLFxufSBmcm9tIFwiLi4vdXNlTG9hZGluZ092ZXJ0aW1lXCI7XG5cbnR5cGUgU2V0RmlsdGVyQmVoYXZpb3IgPSBcIm1lcmdlXCIgfCBcInJlcGxhY2VcIjtcblxuZXhwb3J0IHR5cGUgdXNlVGFibGVQcm9wczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+ID0ge1xuICAvKipcbiAgICogUmVzb3VyY2UgbmFtZSBmb3IgQVBJIGRhdGEgaW50ZXJhY3Rpb25zXG4gICAqIEBkZWZhdWx0IFJlc291cmNlIG5hbWUgdGhhdCBpdCByZWFkcyBmcm9tIHJvdXRlXG4gICAqL1xuICByZXNvdXJjZT86IHN0cmluZztcbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHBhZ2luYXRpb25cbiAgICovXG4gIHBhZ2luYXRpb24/OiBQYWdpbmF0aW9uO1xuICAvKipcbiAgICogSW5pdGlhbCBwYWdlIGluZGV4XG4gICAqIEBkZWZhdWx0IDFcbiAgICogQGRlcHJlY2F0ZWQgYGluaXRpYWxDdXJyZW50YCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiBVc2UgYHBhZ2luYXRpb24uY3VycmVudGAgaW5zdGVhZC5cbiAgICovXG4gIGluaXRpYWxDdXJyZW50PzogbnVtYmVyO1xuICAvKipcbiAgICogSW5pdGlhbCBudW1iZXIgb2YgaXRlbXMgcGVyIHBhZ2VcbiAgICogQGRlZmF1bHQgMTBcbiAgICogQGRlcHJlY2F0ZWQgYGluaXRpYWxQYWdlU2l6ZWAgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gVXNlIGBwYWdpbmF0aW9uLnBhZ2VTaXplYCBpbnN0ZWFkLlxuICAgKi9cbiAgaW5pdGlhbFBhZ2VTaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogU29ydCBjb25maWdzXG4gICAqL1xuICBzb3J0ZXJzPzoge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWwgc29ydGVyIHN0YXRlXG4gICAgICovXG4gICAgaW5pdGlhbD86IENydWRTb3J0W107XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBhbmQgdW5jaGFuZ2VhYmxlIHNvcnRlciBzdGF0ZVxuICAgICAqICBAZGVmYXVsdCBgW11gXG4gICAgICovXG4gICAgcGVybWFuZW50PzogQ3J1ZFNvcnRbXTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHVzZSBzZXJ2ZXIgc2lkZSBzb3J0aW5nIG9yIG5vdC5cbiAgICAgKiBAZGVmYXVsdCBcInNlcnZlclwiXG4gICAgICovXG4gICAgbW9kZT86IFwic2VydmVyXCIgfCBcIm9mZlwiO1xuICB9O1xuICAvKipcbiAgICogSW5pdGlhbCBzb3J0ZXIgc3RhdGVcbiAgICogQGRlcHJlY2F0ZWQgYGluaXRpYWxTb3J0ZXJgIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuIFVzZSBgc29ydGVycy5pbml0aWFsYCBpbnN0ZWFkLlxuICAgKi9cbiAgaW5pdGlhbFNvcnRlcj86IENydWRTb3J0W107XG4gIC8qKlxuICAgKiBEZWZhdWx0IGFuZCB1bmNoYW5nZWFibGUgc29ydGVyIHN0YXRlXG4gICAqICBAZGVmYXVsdCBgW11gXG4gICAqICBAZGVwcmVjYXRlZCBgcGVybWFuZW50U29ydGVyYCBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiBVc2UgYHNvcnRlcnMucGVybWFuZW50YCBpbnN0ZWFkLlxuICAgKi9cbiAgcGVybWFuZW50U29ydGVyPzogQ3J1ZFNvcnRbXTtcbiAgLyoqXG4gICAqIEZpbHRlciBjb25maWdzXG4gICAqL1xuICBmaWx0ZXJzPzoge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWwgZmlsdGVyIHN0YXRlXG4gICAgICovXG4gICAgaW5pdGlhbD86IENydWRGaWx0ZXJbXTtcbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGFuZCB1bmNoYW5nZWFibGUgZmlsdGVyIHN0YXRlXG4gICAgICogIEBkZWZhdWx0IGBbXWBcbiAgICAgKi9cbiAgICBwZXJtYW5lbnQ/OiBDcnVkRmlsdGVyW107XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBiZWhhdmlvciBvZiB0aGUgYHNldEZpbHRlcnNgIGZ1bmN0aW9uXG4gICAgICogQGRlZmF1bHQgYFwibWVyZ2VcImBcbiAgICAgKi9cbiAgICBkZWZhdWx0QmVoYXZpb3I/OiBTZXRGaWx0ZXJCZWhhdmlvcjtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIHVzZSBzZXJ2ZXIgc2lkZSBmaWx0ZXIgb3Igbm90LlxuICAgICAqIEBkZWZhdWx0IFwic2VydmVyXCJcbiAgICAgKi9cbiAgICBtb2RlPzogXCJzZXJ2ZXJcIiB8IFwib2ZmXCI7XG4gIH07XG4gIC8qKlxuICAgKiBJbml0aWFsIGZpbHRlciBzdGF0ZVxuICAgKiBAZGVwcmVjYXRlZCBgaW5pdGlhbEZpbHRlcmAgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gVXNlIGBmaWx0ZXJzLmluaXRpYWxgIGluc3RlYWQuXG4gICAqL1xuICBpbml0aWFsRmlsdGVyPzogQ3J1ZEZpbHRlcltdO1xuICAvKipcbiAgICogRGVmYXVsdCBhbmQgdW5jaGFuZ2VhYmxlIGZpbHRlciBzdGF0ZVxuICAgKiBAZGVmYXVsdCBgW11gXG4gICAqIEBkZXByZWNhdGVkIGBwZXJtYW5lbnRGaWx0ZXJgIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQuIFVzZSBgZmlsdGVycy5wZXJtYW5lbnRgIGluc3RlYWQuXG4gICAqL1xuICBwZXJtYW5lbnRGaWx0ZXI/OiBDcnVkRmlsdGVyW107XG4gIC8qKlxuICAgKiBEZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSBgc2V0RmlsdGVyc2AgZnVuY3Rpb25cbiAgICogQGRlZmF1bHQgYFwibWVyZ2VcImBcbiAgICogQGRlcHJlY2F0ZWQgYGRlZmF1bHRTZXRGaWx0ZXJCZWhhdmlvcmAgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gVXNlIGBmaWx0ZXJzLmRlZmF1bHRCZWhhdmlvcmAgaW5zdGVhZC5cbiAgICovXG4gIGRlZmF1bHRTZXRGaWx0ZXJCZWhhdmlvcj86IFNldEZpbHRlckJlaGF2aW9yO1xuICAvKipcbiAgICogV2hldGhlciB0byB1c2Ugc2VydmVyIHNpZGUgcGFnaW5hdGlvbiBvciBub3QuXG4gICAqIEBkZWZhdWx0IGB0cnVlYFxuICAgKiBAZGVwcmVjYXRlZCBgaGFzUGFnaW5hdGlvbmAgcHJvcGVydHkgaXMgZGVwcmVjYXRlZC4gVXNlIGBwYWdpbmF0aW9uLm1vZGVgIGluc3RlYWQuXG4gICAqL1xuICBoYXNQYWdpbmF0aW9uPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNvcnRpbmdzLCBmaWx0ZXJzLCBwYWdlIGluZGV4IGFuZCByZWNvcmRzIHNob3duIHBlciBwYWdlIGFyZSB0cmFja2VkIGJ5IGJyb3dzZXIgaGlzdG9yeVxuICAgKiBAZGVmYXVsdCBWYWx1ZSBzZXQgaW4gW1JlZmluZV0oL2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2NvbXBvbmVudHMvcmVmaW5lLWNvbmZpZy8jc3luY3dpdGhsb2NhdGlvbikuIElmIGEgY3VzdG9tIHJlc291cmNlIGlzIGdpdmVuLCBpdCB3aWxsIGJlIGBmYWxzZWBcbiAgICovXG4gIHN5bmNXaXRoTG9jYXRpb24/OiBib29sZWFuO1xuICAvKipcbiAgICogcmVhY3QtcXVlcnkncyBbdXNlUXVlcnldKGh0dHBzOi8vdGFuc3RhY2suY29tL3F1ZXJ5L3Y0L2RvY3MvcmVmZXJlbmNlL3VzZVF1ZXJ5KSBvcHRpb25zXG4gICAqL1xuICBxdWVyeU9wdGlvbnM/OiBVc2VRdWVyeU9wdGlvbnM8XG4gICAgR2V0TGlzdFJlc3BvbnNlPFRRdWVyeUZuRGF0YT4sXG4gICAgVEVycm9yLFxuICAgIEdldExpc3RSZXNwb25zZTxURGF0YT5cbiAgPjtcbiAgLyoqXG4gICAqIE1ldGFkYXRhIHF1ZXJ5IGZvciBkYXRhUHJvdmlkZXJcbiAgICovXG4gIG1ldGE/OiBNZXRhUXVlcnk7XG4gIC8qKlxuICAgKiBNZXRhZGF0YSBxdWVyeSBmb3IgZGF0YVByb3ZpZGVyXG4gICAqIEBkZXByZWNhdGVkIGBtZXRhRGF0YWAgaXMgZGVwcmVjYXRlZCB3aXRoIHJlZmluZUA0LCByZWZpbmUgd2lsbCBwYXNzIGBtZXRhYCBpbnN0ZWFkLCBob3dldmVyLCB3ZSBzdGlsbCBzdXBwb3J0IGBtZXRhRGF0YWAgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBtZXRhRGF0YT86IE1ldGFRdWVyeTtcbiAgLyoqXG4gICAqIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgYGRhdGFQcm92aWRlcmAsIHlvdSBzaG91bGQgdXNlIHRoZSBgZGF0YVByb3ZpZGVyTmFtZWAgdGhhdCB5b3Ugd2lsbCB1c2UuXG4gICAqL1xuICBkYXRhUHJvdmlkZXJOYW1lPzogc3RyaW5nO1xufSAmIFN1Y2Nlc3NFcnJvck5vdGlmaWNhdGlvbjxcbiAgR2V0TGlzdFJlc3BvbnNlPFREYXRhPixcbiAgVEVycm9yLFxuICBQcmV0dGlmeTxCYXNlTGlzdFByb3BzPlxuPiAmXG4gIExpdmVNb2RlUHJvcHMgJlxuICBVc2VMb2FkaW5nT3ZlcnRpbWVPcHRpb25zUHJvcHM7XG5cbnR5cGUgUmVhY3RTZXRTdGF0ZTxUPiA9IFJlYWN0LkRpc3BhdGNoPFJlYWN0LlNldFN0YXRlQWN0aW9uPFQ+PjtcblxudHlwZSBTeW5jV2l0aExvY2F0aW9uUGFyYW1zID0ge1xuICBwYWdpbmF0aW9uOiB7IGN1cnJlbnQ/OiBudW1iZXI7IHBhZ2VTaXplPzogbnVtYmVyIH07XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBgc29ydGVyYCBpcyBkZXByZWNhdGVkLiBVc2UgYHNvcnRlcnNgIGluc3RlYWQuXG4gICAqL1xuICBzb3J0ZXI/OiBDcnVkU29ydFtdO1xuICBzb3J0ZXJzOiBDcnVkU29ydFtdO1xuICBmaWx0ZXJzOiBDcnVkRmlsdGVyW107XG59O1xuXG5leHBvcnQgdHlwZSB1c2VUYWJsZVJldHVyblR5cGU8XG4gIFREYXRhIGV4dGVuZHMgQmFzZVJlY29yZCA9IEJhc2VSZWNvcmQsXG4gIFRFcnJvciBleHRlbmRzIEh0dHBFcnJvciA9IEh0dHBFcnJvcixcbj4gPSB7XG4gIHRhYmxlUXVlcnk6IFF1ZXJ5T2JzZXJ2ZXJSZXN1bHQ8R2V0TGlzdFJlc3BvbnNlPFREYXRhPiwgVEVycm9yPjtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIGB0YWJsZVF1ZXJ5UmVzdWx0YCBpcyBkZXByZWNhdGVkLiBVc2UgYHRhYmxlUXVlcnlgIGluc3RlYWQuXG4gICAqL1xuICB0YWJsZVF1ZXJ5UmVzdWx0OiBRdWVyeU9ic2VydmVyUmVzdWx0PEdldExpc3RSZXNwb25zZTxURGF0YT4sIFRFcnJvcj47XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBgc29ydGVyYCBpcyBkZXByZWNhdGVkLiBVc2UgYHNvcnRlcnNgIGluc3RlYWQuXG4gICAqL1xuICBzb3J0ZXI6IENydWRTb3J0W107XG4gIHNvcnRlcnM6IENydWRTb3J0W107XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBgc2V0U29ydGVyYCBpcyBkZXByZWNhdGVkLiBVc2UgYHNldFNvcnRlcnNgIGluc3RlYWQuXG4gICAqL1xuICBzZXRTb3J0ZXI6IChzb3J0ZXI6IENydWRTb3J0W10pID0+IHZvaWQ7XG4gIHNldFNvcnRlcnM6IChzb3J0ZXI6IENydWRTb3J0W10pID0+IHZvaWQ7XG4gIGZpbHRlcnM6IENydWRGaWx0ZXJbXTtcbiAgc2V0RmlsdGVyczogKChmaWx0ZXJzOiBDcnVkRmlsdGVyW10sIGJlaGF2aW9yPzogU2V0RmlsdGVyQmVoYXZpb3IpID0+IHZvaWQpICZcbiAgICAoKHNldHRlcjogKHByZXZGaWx0ZXJzOiBDcnVkRmlsdGVyW10pID0+IENydWRGaWx0ZXJbXSkgPT4gdm9pZCk7XG4gIGNyZWF0ZUxpbmtGb3JTeW5jV2l0aExvY2F0aW9uOiAocGFyYW1zOiBTeW5jV2l0aExvY2F0aW9uUGFyYW1zKSA9PiBzdHJpbmc7XG4gIGN1cnJlbnQ6IG51bWJlcjtcbiAgc2V0Q3VycmVudDogUmVhY3RTZXRTdGF0ZTx1c2VUYWJsZVJldHVyblR5cGVbXCJjdXJyZW50XCJdPjtcbiAgcGFnZVNpemU6IG51bWJlcjtcbiAgc2V0UGFnZVNpemU6IFJlYWN0U2V0U3RhdGU8dXNlVGFibGVSZXR1cm5UeXBlW1wicGFnZVNpemVcIl0+O1xuICBwYWdlQ291bnQ6IG51bWJlcjtcbn0gJiBVc2VMb2FkaW5nT3ZlcnRpbWVSZXR1cm5UeXBlO1xuXG4vKipcbiAqIEJ5IHVzaW5nIHVzZVRhYmxlLCB5b3UgYXJlIGFibGUgdG8gZ2V0IHByb3BlcnRpZXMgdGhhdCBhcmUgY29tcGF0aWJsZSB3aXRoXG4gKiBBbnQgRGVzaWduIHtAbGluayBodHRwczovL2FudC5kZXNpZ24vY29tcG9uZW50cy90YWJsZS8gYDxUYWJsZT5gfSBjb21wb25lbnQuXG4gKiBBbGwgZmVhdHVyZXMgc3VjaCBhcyBzb3J0aW5nLCBmaWx0ZXJpbmcgYW5kIHBhZ2luYXRpb24gY29tZXMgYXMgb3V0IG9mIGJveC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvdXNlVGFibGV9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBUUXVlcnlGbkRhdGEgLSBSZXN1bHQgZGF0YSByZXR1cm5lZCBieSB0aGUgcXVlcnkgZnVuY3Rpb24uIEV4dGVuZHMge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzI2Jhc2VyZWNvcmQgYEJhc2VSZWNvcmRgfVxuICogQHR5cGVQYXJhbSBURXJyb3IgLSBDdXN0b20gZXJyb3Igb2JqZWN0IHRoYXQgZXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjaHR0cGVycm9yIGBIdHRwRXJyb3JgfVxuICogQHR5cGVQYXJhbSBURGF0YSAtIFJlc3VsdCBkYXRhIHJldHVybmVkIGJ5IHRoZSBgc2VsZWN0YCBmdW5jdGlvbi4gRXh0ZW5kcyB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMjYmFzZXJlY29yZCBgQmFzZVJlY29yZGB9LiBEZWZhdWx0cyB0byBgVFF1ZXJ5Rm5EYXRhYFxuICpcbiAqL1xuXG5jb25zdCBkZWZhdWx0UGVybWFuZW50RmlsdGVyOiBDcnVkRmlsdGVyW10gPSBbXTtcbmNvbnN0IGRlZmF1bHRQZXJtYW5lbnRTb3J0ZXI6IENydWRTb3J0W10gPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRhYmxlPFxuICBUUXVlcnlGbkRhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBURGF0YSBleHRlbmRzIEJhc2VSZWNvcmQgPSBUUXVlcnlGbkRhdGEsXG4+KHtcbiAgaW5pdGlhbEN1cnJlbnQsXG4gIGluaXRpYWxQYWdlU2l6ZSxcbiAgaGFzUGFnaW5hdGlvbiA9IHRydWUsXG4gIHBhZ2luYXRpb24sXG4gIGluaXRpYWxTb3J0ZXIsXG4gIHBlcm1hbmVudFNvcnRlciA9IGRlZmF1bHRQZXJtYW5lbnRTb3J0ZXIsXG4gIGRlZmF1bHRTZXRGaWx0ZXJCZWhhdmlvcixcbiAgaW5pdGlhbEZpbHRlcixcbiAgcGVybWFuZW50RmlsdGVyID0gZGVmYXVsdFBlcm1hbmVudEZpbHRlcixcbiAgZmlsdGVyczogZmlsdGVyc0Zyb21Qcm9wLFxuICBzb3J0ZXJzOiBzb3J0ZXJzRnJvbVByb3AsXG4gIHN5bmNXaXRoTG9jYXRpb246IHN5bmNXaXRoTG9jYXRpb25Qcm9wLFxuICByZXNvdXJjZTogcmVzb3VyY2VGcm9tUHJvcCxcbiAgc3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgZXJyb3JOb3RpZmljYXRpb24sXG4gIHF1ZXJ5T3B0aW9ucyxcbiAgbGl2ZU1vZGU6IGxpdmVNb2RlRnJvbVByb3AsXG4gIG9uTGl2ZUV2ZW50LFxuICBsaXZlUGFyYW1zLFxuICBtZXRhLFxuICBtZXRhRGF0YSxcbiAgZGF0YVByb3ZpZGVyTmFtZSxcbiAgb3ZlcnRpbWVPcHRpb25zLFxufTogdXNlVGFibGVQcm9wczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+ID0ge30pOiB1c2VUYWJsZVJldHVyblR5cGU8XG4gIFREYXRhLFxuICBURXJyb3Jcbj4ge1xuICBjb25zdCB7IHN5bmNXaXRoTG9jYXRpb246IHN5bmNXaXRoTG9jYXRpb25Db250ZXh0IH0gPSB1c2VTeW5jV2l0aExvY2F0aW9uKCk7XG5cbiAgY29uc3Qgc3luY1dpdGhMb2NhdGlvbiA9IHN5bmNXaXRoTG9jYXRpb25Qcm9wID8/IHN5bmNXaXRoTG9jYXRpb25Db250ZXh0O1xuXG4gIGNvbnN0IGxpdmVNb2RlID0gdXNlTGl2ZU1vZGUobGl2ZU1vZGVGcm9tUHJvcCk7XG5cbiAgY29uc3Qgcm91dGVyVHlwZSA9IHVzZVJvdXRlclR5cGUoKTtcbiAgY29uc3QgeyB1c2VMb2NhdGlvbiB9ID0gdXNlUm91dGVyQ29udGV4dCgpO1xuICBjb25zdCB7IHNlYXJjaCwgcGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGNvbnN0IGdldE1ldGEgPSB1c2VNZXRhKCk7XG4gIGNvbnN0IHBhcnNlZFBhcmFtcyA9IHVzZVBhcnNlZCgpO1xuXG4gIGNvbnN0IGlzU2VydmVyU2lkZUZpbHRlcmluZ0VuYWJsZWQgPVxuICAgIChmaWx0ZXJzRnJvbVByb3A/Lm1vZGUgfHwgXCJzZXJ2ZXJcIikgPT09IFwic2VydmVyXCI7XG4gIGNvbnN0IGlzU2VydmVyU2lkZVNvcnRpbmdFbmFibGVkID1cbiAgICAoc29ydGVyc0Zyb21Qcm9wPy5tb2RlIHx8IFwic2VydmVyXCIpID09PSBcInNlcnZlclwiO1xuICBjb25zdCBoYXNQYWdpbmF0aW9uU3RyaW5nID0gaGFzUGFnaW5hdGlvbiA9PT0gZmFsc2UgPyBcIm9mZlwiIDogXCJzZXJ2ZXJcIjtcbiAgY29uc3QgaXNQYWdpbmF0aW9uRW5hYmxlZCA9XG4gICAgKHBhZ2luYXRpb24/Lm1vZGUgPz8gaGFzUGFnaW5hdGlvblN0cmluZykgIT09IFwib2ZmXCI7XG4gIGNvbnN0IHByZWZmZXJlZEN1cnJlbnQgPSBwaWNrTm90RGVwcmVjYXRlZChcbiAgICBwYWdpbmF0aW9uPy5jdXJyZW50LFxuICAgIGluaXRpYWxDdXJyZW50LFxuICApO1xuICBjb25zdCBwcmVmZmVyZWRQYWdlU2l6ZSA9IHBpY2tOb3REZXByZWNhdGVkKFxuICAgIHBhZ2luYXRpb24/LnBhZ2VTaXplLFxuICAgIGluaXRpYWxQYWdlU2l6ZSxcbiAgKTtcbiAgY29uc3QgcHJlZmVycmVkTWV0YSA9IHBpY2tOb3REZXByZWNhdGVkKG1ldGEsIG1ldGFEYXRhKTtcblxuICAvKiogYHBhcnNlVGFibGVQYXJhbXNgIGlzIHJlZHVuZGFudCB3aXRoIHRoZSBuZXcgcm91dGluZyAqL1xuICAvLyBXZSB3YW50IHRvIGFsd2F5cyBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGV2ZW4gd2hlbiBzeW5jV2l0aExvY2F0aW9uIGlzXG4gIC8vIGRlYWN0aXZhdGVkLCBmb3IgaG90bGlua2luZyB0byB3b3JrIHByb3Blcmx5XG4gIGNvbnN0IHsgcGFyc2VkQ3VycmVudCwgcGFyc2VkUGFnZVNpemUsIHBhcnNlZFNvcnRlciwgcGFyc2VkRmlsdGVycyB9ID1cbiAgICBwYXJzZVRhYmxlUGFyYW1zKHNlYXJjaCA/PyBcIj9cIik7XG5cbiAgY29uc3QgcHJlZmVycmVkSW5pdGlhbEZpbHRlcnMgPSBwaWNrTm90RGVwcmVjYXRlZChcbiAgICBmaWx0ZXJzRnJvbVByb3A/LmluaXRpYWwsXG4gICAgaW5pdGlhbEZpbHRlcixcbiAgKTtcbiAgY29uc3QgcHJlZmVycmVkUGVybWFuZW50RmlsdGVycyA9XG4gICAgcGlja05vdERlcHJlY2F0ZWQoZmlsdGVyc0Zyb21Qcm9wPy5wZXJtYW5lbnQsIHBlcm1hbmVudEZpbHRlcikgPz9cbiAgICBkZWZhdWx0UGVybWFuZW50RmlsdGVyO1xuXG4gIGNvbnN0IHByZWZlcnJlZEluaXRpYWxTb3J0ZXJzID0gcGlja05vdERlcHJlY2F0ZWQoXG4gICAgc29ydGVyc0Zyb21Qcm9wPy5pbml0aWFsLFxuICAgIGluaXRpYWxTb3J0ZXIsXG4gICk7XG4gIGNvbnN0IHByZWZlcnJlZFBlcm1hbmVudFNvcnRlcnMgPVxuICAgIHBpY2tOb3REZXByZWNhdGVkKHNvcnRlcnNGcm9tUHJvcD8ucGVybWFuZW50LCBwZXJtYW5lbnRTb3J0ZXIpID8/XG4gICAgZGVmYXVsdFBlcm1hbmVudFNvcnRlcjtcblxuICBjb25zdCBwcmVmZmVyZWRGaWx0ZXJCZWhhdmlvciA9XG4gICAgcGlja05vdERlcHJlY2F0ZWQoXG4gICAgICBmaWx0ZXJzRnJvbVByb3A/LmRlZmF1bHRCZWhhdmlvcixcbiAgICAgIGRlZmF1bHRTZXRGaWx0ZXJCZWhhdmlvcixcbiAgICApID8/IFwibWVyZ2VcIjtcblxuICBsZXQgZGVmYXVsdEN1cnJlbnQ6IG51bWJlcjtcbiAgbGV0IGRlZmF1bHRQYWdlU2l6ZTogbnVtYmVyO1xuICBsZXQgZGVmYXVsdFNvcnRlcjogQ3J1ZFNvcnRbXSB8IHVuZGVmaW5lZDtcbiAgbGV0IGRlZmF1bHRGaWx0ZXI6IENydWRGaWx0ZXJbXSB8IHVuZGVmaW5lZDtcblxuICBpZiAoc3luY1dpdGhMb2NhdGlvbikge1xuICAgIGRlZmF1bHRDdXJyZW50ID1cbiAgICAgIHBhcnNlZFBhcmFtcz8ucGFyYW1zPy5jdXJyZW50IHx8IHBhcnNlZEN1cnJlbnQgfHwgcHJlZmZlcmVkQ3VycmVudCB8fCAxO1xuICAgIGRlZmF1bHRQYWdlU2l6ZSA9XG4gICAgICBwYXJzZWRQYXJhbXM/LnBhcmFtcz8ucGFnZVNpemUgfHxcbiAgICAgIHBhcnNlZFBhZ2VTaXplIHx8XG4gICAgICBwcmVmZmVyZWRQYWdlU2l6ZSB8fFxuICAgICAgMTA7XG4gICAgZGVmYXVsdFNvcnRlciA9XG4gICAgICBwYXJzZWRQYXJhbXM/LnBhcmFtcz8uc29ydGVycyB8fFxuICAgICAgKHBhcnNlZFNvcnRlci5sZW5ndGggPyBwYXJzZWRTb3J0ZXIgOiBwcmVmZXJyZWRJbml0aWFsU29ydGVycyk7XG4gICAgZGVmYXVsdEZpbHRlciA9XG4gICAgICBwYXJzZWRQYXJhbXM/LnBhcmFtcz8uZmlsdGVycyB8fFxuICAgICAgKHBhcnNlZEZpbHRlcnMubGVuZ3RoID8gcGFyc2VkRmlsdGVycyA6IHByZWZlcnJlZEluaXRpYWxGaWx0ZXJzKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZhdWx0Q3VycmVudCA9IHByZWZmZXJlZEN1cnJlbnQgfHwgMTtcbiAgICBkZWZhdWx0UGFnZVNpemUgPSBwcmVmZmVyZWRQYWdlU2l6ZSB8fCAxMDtcbiAgICBkZWZhdWx0U29ydGVyID0gcHJlZmVycmVkSW5pdGlhbFNvcnRlcnM7XG4gICAgZGVmYXVsdEZpbHRlciA9IHByZWZlcnJlZEluaXRpYWxGaWx0ZXJzO1xuICB9XG5cbiAgY29uc3QgeyByZXBsYWNlIH0gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIC8qKiBOZXcgd2F5IG9mIGByZXBsYWNlYCBjYWxscyB0byB0aGUgcm91dGVyIGlzIHVzaW5nIGB1c2VHb2AgKi9cbiAgY29uc3QgZ28gPSB1c2VHbygpO1xuXG4gIGNvbnN0IHsgcmVzb3VyY2UsIGlkZW50aWZpZXIgfSA9IHVzZVJlc291cmNlKHJlc291cmNlRnJvbVByb3ApO1xuXG4gIGNvbnN0IGNvbWJpbmVkTWV0YSA9IGdldE1ldGEoe1xuICAgIHJlc291cmNlLFxuICAgIG1ldGE6IHByZWZlcnJlZE1ldGEsXG4gIH0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2Fybk9uY2UoXG4gICAgICB0eXBlb2YgaWRlbnRpZmllciA9PT0gXCJ1bmRlZmluZWRcIixcbiAgICAgIFwidXNlVGFibGU6IGByZXNvdXJjZWAgaXMgbm90IGRlZmluZWQuXCIsXG4gICAgKTtcbiAgfSwgW2lkZW50aWZpZXJdKTtcblxuICBjb25zdCBbc29ydGVycywgc2V0U29ydGVyc10gPSB1c2VTdGF0ZTxDcnVkU29ydFtdPihcbiAgICBzZXRJbml0aWFsU29ydGVycyhwcmVmZXJyZWRQZXJtYW5lbnRTb3J0ZXJzLCBkZWZhdWx0U29ydGVyID8/IFtdKSxcbiAgKTtcbiAgY29uc3QgW2ZpbHRlcnMsIHNldEZpbHRlcnNdID0gdXNlU3RhdGU8Q3J1ZEZpbHRlcltdPihcbiAgICBzZXRJbml0aWFsRmlsdGVycyhwcmVmZXJyZWRQZXJtYW5lbnRGaWx0ZXJzLCBkZWZhdWx0RmlsdGVyID8/IFtdKSxcbiAgKTtcbiAgY29uc3QgW2N1cnJlbnQsIHNldEN1cnJlbnRdID0gdXNlU3RhdGU8bnVtYmVyPihkZWZhdWx0Q3VycmVudCk7XG4gIGNvbnN0IFtwYWdlU2l6ZSwgc2V0UGFnZVNpemVdID0gdXNlU3RhdGU8bnVtYmVyPihkZWZhdWx0UGFnZVNpemUpO1xuXG4gIGNvbnN0IGdldEN1cnJlbnRRdWVyeVBhcmFtcyA9ICgpOiBvYmplY3QgPT4ge1xuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcIm5ld1wiKSB7XG4gICAgICAvLyBXZSBnZXQgUXVlcnlTdHJpbmcgcGFyYW1ldGVycyB0aGF0IGFyZSB1bmNvbnRyb2xsZWQgYnkgcmVmaW5lLlxuICAgICAgY29uc3QgeyBzb3J0ZXJzLCBmaWx0ZXJzLCBwYWdlU2l6ZSwgY3VycmVudCwgLi4ucmVzdCB9ID1cbiAgICAgICAgcGFyc2VkUGFyYW1zPy5wYXJhbXMgPz8ge307XG5cbiAgICAgIHJldHVybiByZXN0O1xuICAgIH1cblxuICAgIC8vIFdlIGdldCBRdWVyeVN0cmluZyBwYXJhbWV0ZXJzIHRoYXQgYXJlIHVuY29udHJvbGxlZCBieSByZWZpbmUuXG4gICAgY29uc3QgeyBzb3J0ZXIsIGZpbHRlcnMsIHBhZ2VTaXplLCBjdXJyZW50LCAuLi5yZXN0IH0gPSBxcy5wYXJzZShzZWFyY2gsIHtcbiAgICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiB0cnVlLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3Q7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlTGlua0ZvclN5bmNXaXRoTG9jYXRpb24gPSAoe1xuICAgIHBhZ2luYXRpb246IHsgY3VycmVudCwgcGFnZVNpemUgfSxcbiAgICBzb3J0ZXIsXG4gICAgZmlsdGVycyxcbiAgfTogU3luY1dpdGhMb2NhdGlvblBhcmFtcykgPT4ge1xuICAgIGlmIChyb3V0ZXJUeXBlID09PSBcIm5ld1wiKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBnbyh7XG4gICAgICAgICAgdHlwZTogXCJwYXRoXCIsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAga2VlcEhhc2g6IHRydWUsXG4gICAgICAgICAgICBrZWVwUXVlcnk6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgLi4uKGlzUGFnaW5hdGlvbkVuYWJsZWQgPyB7IGN1cnJlbnQsIHBhZ2VTaXplIH0gOiB7fSksXG4gICAgICAgICAgICBzb3J0ZXJzOiBzb3J0ZXIsXG4gICAgICAgICAgICBmaWx0ZXJzLFxuICAgICAgICAgICAgLi4uZ2V0Q3VycmVudFF1ZXJ5UGFyYW1zKCksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkgPz8gXCJcIlxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFF1ZXJ5UGFyYW1zID0gcXMucGFyc2Uoc2VhcmNoPy5zdWJzdHJpbmcoMSkpOyAvLyByZW1vdmUgZmlyc3QgPyBjaGFyYWN0ZXJcblxuICAgIGNvbnN0IHN0cmluZ2lmeVBhcmFtcyA9IHN0cmluZ2lmeVRhYmxlUGFyYW1zKHtcbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgcGFnZVNpemUsXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICB9LFxuICAgICAgc29ydGVyczogc29ydGVycyA/PyBzb3J0ZXIsXG4gICAgICBmaWx0ZXJzLFxuICAgICAgLi4uY3VycmVudFF1ZXJ5UGFyYW1zLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGAke3BhdGhuYW1lID8/IFwiXCJ9PyR7c3RyaW5naWZ5UGFyYW1zID8/IFwiXCJ9YDtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzZWFyY2ggPT09IFwiXCIpIHtcbiAgICAgIHNldEN1cnJlbnQoZGVmYXVsdEN1cnJlbnQpO1xuICAgICAgc2V0UGFnZVNpemUoZGVmYXVsdFBhZ2VTaXplKTtcbiAgICAgIHNldFNvcnRlcnMoXG4gICAgICAgIHNldEluaXRpYWxTb3J0ZXJzKHByZWZlcnJlZFBlcm1hbmVudFNvcnRlcnMsIGRlZmF1bHRTb3J0ZXIgPz8gW10pLFxuICAgICAgKTtcbiAgICAgIHNldEZpbHRlcnMoXG4gICAgICAgIHNldEluaXRpYWxGaWx0ZXJzKHByZWZlcnJlZFBlcm1hbmVudEZpbHRlcnMsIGRlZmF1bHRGaWx0ZXIgPz8gW10pLFxuICAgICAgKTtcbiAgICB9XG4gIH0sIFtzZWFyY2hdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzeW5jV2l0aExvY2F0aW9uKSB7XG4gICAgICAvLyBDYXJlZnVsISBUaGlzIHRyaWdnZXJzIHJlbmRlclxuICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSBnZXRDdXJyZW50UXVlcnlQYXJhbXMoKTtcblxuICAgICAgaWYgKHJvdXRlclR5cGUgPT09IFwibmV3XCIpIHtcbiAgICAgICAgZ28oe1xuICAgICAgICAgIHR5cGU6IFwicmVwbGFjZVwiLFxuICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIGtlZXBRdWVyeTogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAuLi4oaXNQYWdpbmF0aW9uRW5hYmxlZCA/IHsgcGFnZVNpemUsIGN1cnJlbnQgfSA6IHt9KSxcbiAgICAgICAgICAgIHNvcnRlcnM6IGRpZmZlcmVuY2VXaXRoKFxuICAgICAgICAgICAgICBzb3J0ZXJzLFxuICAgICAgICAgICAgICBwcmVmZXJyZWRQZXJtYW5lbnRTb3J0ZXJzLFxuICAgICAgICAgICAgICBpc0VxdWFsLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGZpbHRlcnM6IGRpZmZlcmVuY2VXaXRoKFxuICAgICAgICAgICAgICBmaWx0ZXJzLFxuICAgICAgICAgICAgICBwcmVmZXJyZWRQZXJtYW5lbnRGaWx0ZXJzLFxuICAgICAgICAgICAgICBpc0VxdWFsLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIC8vIC4uLnF1ZXJ5UGFyYW1zLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3RyaW5naWZ5UGFyYW1zID0gc3RyaW5naWZ5VGFibGVQYXJhbXMoe1xuICAgICAgICAgIC4uLihpc1BhZ2luYXRpb25FbmFibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICBwYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgc29ydGVyczogZGlmZmVyZW5jZVdpdGgoc29ydGVycywgcHJlZmVycmVkUGVybWFuZW50U29ydGVycywgaXNFcXVhbCksXG4gICAgICAgICAgZmlsdGVyczogZGlmZmVyZW5jZVdpdGgoZmlsdGVycywgcHJlZmVycmVkUGVybWFuZW50RmlsdGVycywgaXNFcXVhbCksXG4gICAgICAgICAgLi4ucXVlcnlQYXJhbXMsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVwbGFjZT8uKGAke3BhdGhuYW1lfT8ke3N0cmluZ2lmeVBhcmFtc31gLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICBzaGFsbG93OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtzeW5jV2l0aExvY2F0aW9uLCBjdXJyZW50LCBwYWdlU2l6ZSwgc29ydGVycywgZmlsdGVyc10pO1xuXG4gIGNvbnN0IHF1ZXJ5UmVzdWx0ID0gdXNlTGlzdDxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+KHtcbiAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICBoYXNQYWdpbmF0aW9uLFxuICAgIHBhZ2luYXRpb246IHsgY3VycmVudCwgcGFnZVNpemUsIG1vZGU6IHBhZ2luYXRpb24/Lm1vZGUgfSxcbiAgICBmaWx0ZXJzOiBpc1NlcnZlclNpZGVGaWx0ZXJpbmdFbmFibGVkXG4gICAgICA/IHVuaW9uRmlsdGVycyhwcmVmZXJyZWRQZXJtYW5lbnRGaWx0ZXJzLCBmaWx0ZXJzKVxuICAgICAgOiB1bmRlZmluZWQsXG4gICAgc29ydGVyczogaXNTZXJ2ZXJTaWRlU29ydGluZ0VuYWJsZWRcbiAgICAgID8gdW5pb25Tb3J0ZXJzKHByZWZlcnJlZFBlcm1hbmVudFNvcnRlcnMsIHNvcnRlcnMpXG4gICAgICA6IHVuZGVmaW5lZCxcbiAgICBxdWVyeU9wdGlvbnMsXG4gICAgc3VjY2Vzc05vdGlmaWNhdGlvbixcbiAgICBlcnJvck5vdGlmaWNhdGlvbixcbiAgICBtZXRhOiBjb21iaW5lZE1ldGEsXG4gICAgbWV0YURhdGE6IGNvbWJpbmVkTWV0YSxcbiAgICBsaXZlTW9kZSxcbiAgICBsaXZlUGFyYW1zLFxuICAgIG9uTGl2ZUV2ZW50LFxuICAgIGRhdGFQcm92aWRlck5hbWUsXG4gIH0pO1xuXG4gIGNvbnN0IHNldEZpbHRlcnNBc01lcmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKG5ld0ZpbHRlcnM6IENydWRGaWx0ZXJbXSkgPT4ge1xuICAgICAgc2V0RmlsdGVycygocHJldkZpbHRlcnMpID0+XG4gICAgICAgIHVuaW9uRmlsdGVycyhwcmVmZXJyZWRQZXJtYW5lbnRGaWx0ZXJzLCBuZXdGaWx0ZXJzLCBwcmV2RmlsdGVycyksXG4gICAgICApO1xuICAgIH0sXG4gICAgW3ByZWZlcnJlZFBlcm1hbmVudEZpbHRlcnNdLFxuICApO1xuXG4gIGNvbnN0IHNldEZpbHRlcnNBc1JlcGxhY2UgPSB1c2VDYWxsYmFjayhcbiAgICAobmV3RmlsdGVyczogQ3J1ZEZpbHRlcltdKSA9PiB7XG4gICAgICBzZXRGaWx0ZXJzKHVuaW9uRmlsdGVycyhwcmVmZXJyZWRQZXJtYW5lbnRGaWx0ZXJzLCBuZXdGaWx0ZXJzKSk7XG4gICAgfSxcbiAgICBbcHJlZmVycmVkUGVybWFuZW50RmlsdGVyc10sXG4gICk7XG5cbiAgY29uc3Qgc2V0RmlsdGVyc1dpdGhTZXR0ZXIgPSB1c2VDYWxsYmFjayhcbiAgICAoc2V0dGVyOiAocHJldkZpbHRlcnM6IENydWRGaWx0ZXJbXSkgPT4gQ3J1ZEZpbHRlcltdKSA9PiB7XG4gICAgICBzZXRGaWx0ZXJzKChwcmV2KSA9PlxuICAgICAgICB1bmlvbkZpbHRlcnMocHJlZmVycmVkUGVybWFuZW50RmlsdGVycywgc2V0dGVyKHByZXYpKSxcbiAgICAgICk7XG4gICAgfSxcbiAgICBbcHJlZmVycmVkUGVybWFuZW50RmlsdGVyc10sXG4gICk7XG5cbiAgY29uc3Qgc2V0RmlsdGVyc0ZuOiB1c2VUYWJsZVJldHVyblR5cGU8VFF1ZXJ5Rm5EYXRhPltcInNldEZpbHRlcnNcIl0gPVxuICAgIHVzZUNhbGxiYWNrKFxuICAgICAgKFxuICAgICAgICBzZXR0ZXJPckZpbHRlcnMsXG4gICAgICAgIGJlaGF2aW9yOiBTZXRGaWx0ZXJCZWhhdmlvciA9IHByZWZmZXJlZEZpbHRlckJlaGF2aW9yLFxuICAgICAgKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0dGVyT3JGaWx0ZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBzZXRGaWx0ZXJzV2l0aFNldHRlcihzZXR0ZXJPckZpbHRlcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChiZWhhdmlvciA9PT0gXCJyZXBsYWNlXCIpIHtcbiAgICAgICAgICAgIHNldEZpbHRlcnNBc1JlcGxhY2Uoc2V0dGVyT3JGaWx0ZXJzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0RmlsdGVyc0FzTWVyZ2Uoc2V0dGVyT3JGaWx0ZXJzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbc2V0RmlsdGVyc1dpdGhTZXR0ZXIsIHNldEZpbHRlcnNBc1JlcGxhY2UsIHNldEZpbHRlcnNBc01lcmdlXSxcbiAgICApO1xuXG4gIGNvbnN0IHNldFNvcnRXaXRoVW5pb24gPSB1c2VDYWxsYmFjayhcbiAgICAobmV3U29ydGVyOiBDcnVkU29ydFtdKSA9PiB7XG4gICAgICBzZXRTb3J0ZXJzKCgpID0+IHVuaW9uU29ydGVycyhwcmVmZXJyZWRQZXJtYW5lbnRTb3J0ZXJzLCBuZXdTb3J0ZXIpKTtcbiAgICB9LFxuICAgIFtwcmVmZXJyZWRQZXJtYW5lbnRTb3J0ZXJzXSxcbiAgKTtcblxuICBjb25zdCB7IGVsYXBzZWRUaW1lIH0gPSB1c2VMb2FkaW5nT3ZlcnRpbWUoe1xuICAgIGlzTG9hZGluZzogcXVlcnlSZXN1bHQuaXNGZXRjaGluZyxcbiAgICBpbnRlcnZhbDogb3ZlcnRpbWVPcHRpb25zPy5pbnRlcnZhbCxcbiAgICBvbkludGVydmFsOiBvdmVydGltZU9wdGlvbnM/Lm9uSW50ZXJ2YWwsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgdGFibGVRdWVyeVJlc3VsdDogcXVlcnlSZXN1bHQsXG4gICAgdGFibGVRdWVyeTogcXVlcnlSZXN1bHQsXG4gICAgc29ydGVycyxcbiAgICBzZXRTb3J0ZXJzOiBzZXRTb3J0V2l0aFVuaW9uLFxuICAgIHNvcnRlcjogc29ydGVycyxcbiAgICBzZXRTb3J0ZXI6IHNldFNvcnRXaXRoVW5pb24sXG4gICAgZmlsdGVycyxcbiAgICBzZXRGaWx0ZXJzOiBzZXRGaWx0ZXJzRm4sXG4gICAgY3VycmVudCxcbiAgICBzZXRDdXJyZW50LFxuICAgIHBhZ2VTaXplLFxuICAgIHNldFBhZ2VTaXplLFxuICAgIHBhZ2VDb3VudDogcGFnZVNpemVcbiAgICAgID8gTWF0aC5jZWlsKChxdWVyeVJlc3VsdC5kYXRhPy50b3RhbCA/PyAwKSAvIHBhZ2VTaXplKVxuICAgICAgOiAxLFxuICAgIGNyZWF0ZUxpbmtGb3JTeW5jV2l0aExvY2F0aW9uLFxuICAgIG92ZXJ0aW1lOiB7XG4gICAgICBlbGFwc2VkVGltZSxcbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBnZXRYUmF5IH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtaW50ZXJuYWxcIjtcbmltcG9ydCB7XG4gIHR5cGUgVXNlTXV0YXRpb25PcHRpb25zLFxuICB0eXBlIFVzZU11dGF0aW9uUmVzdWx0LFxuICB1c2VNdXRhdGlvbixcbiAgdXNlUXVlcnlDbGllbnQsXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgQXVkaXRMb2dDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9hdWRpdExvZ1wiO1xuaW1wb3J0IHsgUmVzb3VyY2VDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9yZXNvdXJjZVwiO1xuaW1wb3J0IHsgaGFzUGVybWlzc2lvbiwgcGlja05vdERlcHJlY2F0ZWQgfSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnNcIjtcbmltcG9ydCB7IHVzZUFjdGl2ZUF1dGhQcm92aWRlciB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuaW1wb3J0IHsgcGlja1Jlc291cmNlIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzL3BpY2stcmVzb3VyY2VcIjtcbmltcG9ydCB7IHVzZUdldElkZW50aXR5IH0gZnJvbSBcIkBob29rcy9hdXRoXCI7XG5pbXBvcnQgeyB1c2VLZXlzIH0gZnJvbSBcIkBob29rcy91c2VLZXlzXCI7XG5cbmltcG9ydCB0eXBlIHsgTG9nUGFyYW1zIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2F1ZGl0TG9nL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IEJhc2VLZXkgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuXG50eXBlIExvZ1JlbmFtZURhdGEgPVxuICB8IHtcbiAgICAgIHJlc291cmNlPzogc3RyaW5nO1xuICAgIH1cbiAgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCB0eXBlIFVzZUxvZ1JldHVyblR5cGU8VExvZ0RhdGEsIFRMb2dSZW5hbWVEYXRhPiA9IHtcbiAgbG9nOiBVc2VNdXRhdGlvblJlc3VsdDxUTG9nRGF0YSwgRXJyb3IsIExvZ1BhcmFtcz47XG4gIHJlbmFtZTogVXNlTXV0YXRpb25SZXN1bHQ8XG4gICAgVExvZ1JlbmFtZURhdGEsXG4gICAgRXJyb3IsXG4gICAge1xuICAgICAgaWQ6IEJhc2VLZXk7XG4gICAgICBuYW1lOiBzdHJpbmc7XG4gICAgfVxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgVXNlTG9nTXV0YXRpb25Qcm9wczxcbiAgVExvZ0RhdGEsXG4gIFRMb2dSZW5hbWVEYXRhIGV4dGVuZHMgTG9nUmVuYW1lRGF0YSA9IExvZ1JlbmFtZURhdGEsXG4+ID0ge1xuICBsb2dNdXRhdGlvbk9wdGlvbnM/OiBPbWl0PFxuICAgIFVzZU11dGF0aW9uT3B0aW9uczxUTG9nRGF0YSwgRXJyb3IsIExvZ1BhcmFtcywgdW5rbm93bj4sXG4gICAgXCJtdXRhdGlvbkZuXCJcbiAgPjtcbiAgcmVuYW1lTXV0YXRpb25PcHRpb25zPzogT21pdDxcbiAgICBVc2VNdXRhdGlvbk9wdGlvbnM8XG4gICAgICBUTG9nUmVuYW1lRGF0YSxcbiAgICAgIEVycm9yLFxuICAgICAgeyBpZDogQmFzZUtleTsgbmFtZTogc3RyaW5nIH0sXG4gICAgICB1bmtub3duXG4gICAgPixcbiAgICBcIm11dGF0aW9uRm5cIiB8IFwib25TdWNjZXNzXCJcbiAgPjtcbn07XG5cbi8qKlxuICogdXNlTG9nIGlzIHVzZWQgdG8gYGNyZWF0ZWAgYSBuZXcgYW5kIGByZW5hbWVgIHRoZSBleGlzdGluZyBhdWRpdCBsb2cuXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXVkaXQtbG9nL3VzZUxvZ30gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlTG9nID0gPFxuICBUTG9nRGF0YSxcbiAgVExvZ1JlbmFtZURhdGEgZXh0ZW5kcyBMb2dSZW5hbWVEYXRhID0gTG9nUmVuYW1lRGF0YSxcbj4oe1xuICBsb2dNdXRhdGlvbk9wdGlvbnMsXG4gIHJlbmFtZU11dGF0aW9uT3B0aW9ucyxcbn06IFVzZUxvZ011dGF0aW9uUHJvcHM8VExvZ0RhdGEsIFRMb2dSZW5hbWVEYXRhPiA9IHt9KTogVXNlTG9nUmV0dXJuVHlwZTxcbiAgVExvZ0RhdGEsXG4gIFRMb2dSZW5hbWVEYXRhXG4+ID0+IHtcbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICBjb25zdCBhdWRpdExvZ0NvbnRleHQgPSB1c2VDb250ZXh0KEF1ZGl0TG9nQ29udGV4dCk7XG4gIGNvbnN0IHsga2V5cywgcHJlZmVyTGVnYWN5S2V5cyB9ID0gdXNlS2V5cygpO1xuXG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuXG4gIGNvbnN0IHsgcmVzb3VyY2VzIH0gPSB1c2VDb250ZXh0KFJlc291cmNlQ29udGV4dCk7XG4gIGNvbnN0IHtcbiAgICBkYXRhOiBpZGVudGl0eURhdGEsXG4gICAgcmVmZXRjaCxcbiAgICBpc0xvYWRpbmcsXG4gIH0gPSB1c2VHZXRJZGVudGl0eSh7XG4gICAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBCb29sZWFuKGF1dGhQcm92aWRlcj8uaXNMZWdhY3kpLFxuICAgIHF1ZXJ5T3B0aW9uczoge1xuICAgICAgZW5hYmxlZDogISFhdWRpdExvZ0NvbnRleHQ/LmNyZWF0ZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBsb2cgPSB1c2VNdXRhdGlvbjxUTG9nRGF0YSwgRXJyb3IsIExvZ1BhcmFtcywgdW5rbm93bj4oXG4gICAgYXN5bmMgKHBhcmFtcykgPT4ge1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSBwaWNrUmVzb3VyY2UocGFyYW1zLnJlc291cmNlLCByZXNvdXJjZXMpO1xuICAgICAgY29uc3QgbG9nUGVybWlzc2lvbnMgPSBwaWNrTm90RGVwcmVjYXRlZChcbiAgICAgICAgcmVzb3VyY2U/Lm1ldGE/LmF1ZGl0LFxuICAgICAgICByZXNvdXJjZT8ub3B0aW9ucz8uYXVkaXQsXG4gICAgICAgIHJlc291cmNlPy5vcHRpb25zPy5hdWRpdExvZz8ucGVybWlzc2lvbnMsXG4gICAgICApO1xuXG4gICAgICBpZiAobG9nUGVybWlzc2lvbnMpIHtcbiAgICAgICAgaWYgKCFoYXNQZXJtaXNzaW9uKGxvZ1Blcm1pc3Npb25zLCBwYXJhbXMuYWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgYXV0aG9yRGF0YTtcbiAgICAgIGlmIChpc0xvYWRpbmcgJiYgISFhdWRpdExvZ0NvbnRleHQ/LmNyZWF0ZSkge1xuICAgICAgICBhdXRob3JEYXRhID0gYXdhaXQgcmVmZXRjaCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXdhaXQgYXVkaXRMb2dDb250ZXh0LmNyZWF0ZT8uKHtcbiAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICBhdXRob3I6IGlkZW50aXR5RGF0YSA/PyBhdXRob3JEYXRhPy5kYXRhLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICB7XG4gICAgICBtdXRhdGlvbktleToga2V5cygpLmF1ZGl0KCkuYWN0aW9uKFwibG9nXCIpLmdldCgpLFxuICAgICAgLi4ubG9nTXV0YXRpb25PcHRpb25zLFxuICAgICAgbWV0YToge1xuICAgICAgICAuLi5sb2dNdXRhdGlvbk9wdGlvbnM/Lm1ldGEsXG4gICAgICAgIC4uLmdldFhSYXkoXCJ1c2VMb2dcIiwgcHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICB9LFxuICAgIH0sXG4gICk7XG5cbiAgY29uc3QgcmVuYW1lID0gdXNlTXV0YXRpb248XG4gICAgVExvZ1JlbmFtZURhdGEsXG4gICAgRXJyb3IsXG4gICAgeyBpZDogQmFzZUtleTsgbmFtZTogc3RyaW5nIH0sXG4gICAgdW5rbm93blxuICA+KFxuICAgIGFzeW5jIChwYXJhbXMpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBhdWRpdExvZ0NvbnRleHQudXBkYXRlPy4ocGFyYW1zKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIG9uU3VjY2VzczogKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGRhdGE/LnJlc291cmNlKSB7XG4gICAgICAgICAgcXVlcnlDbGllbnQuaW52YWxpZGF0ZVF1ZXJpZXMoXG4gICAgICAgICAgICBrZXlzKClcbiAgICAgICAgICAgICAgLmF1ZGl0KClcbiAgICAgICAgICAgICAgLnJlc291cmNlKGRhdGE/LnJlc291cmNlID8/IFwiXCIpXG4gICAgICAgICAgICAgIC5hY3Rpb24oXCJsaXN0XCIpXG4gICAgICAgICAgICAgIC5nZXQocHJlZmVyTGVnYWN5S2V5cyksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG11dGF0aW9uS2V5OiBrZXlzKCkuYXVkaXQoKS5hY3Rpb24oXCJyZW5hbWVcIikuZ2V0KCksXG4gICAgICAuLi5yZW5hbWVNdXRhdGlvbk9wdGlvbnMsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIC4uLnJlbmFtZU11dGF0aW9uT3B0aW9ucz8ubWV0YSxcbiAgICAgICAgLi4uZ2V0WFJheShcInVzZUxvZ1wiLCBwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgKTtcblxuICByZXR1cm4geyBsb2csIHJlbmFtZSB9O1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB0eXBlIFByb3BzV2l0aENoaWxkcmVuIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB0eXBlIHsgSUF1ZGl0TG9nQ29udGV4dCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBBdWRpdExvZ0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PElBdWRpdExvZ0NvbnRleHQ+KHt9KTtcblxuZXhwb3J0IGNvbnN0IEF1ZGl0TG9nQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GQzxcbiAgUHJvcHNXaXRoQ2hpbGRyZW48SUF1ZGl0TG9nQ29udGV4dD5cbj4gPSAoeyBjcmVhdGUsIGdldCwgdXBkYXRlLCBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEF1ZGl0TG9nQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBjcmVhdGUsIGdldCwgdXBkYXRlIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQXVkaXRMb2dDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgZ2V0WFJheSB9IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLWludGVybmFsXCI7XG5pbXBvcnQge1xuICB0eXBlIFVzZVF1ZXJ5T3B0aW9ucyxcbiAgdHlwZSBVc2VRdWVyeVJlc3VsdCxcbiAgdXNlUXVlcnksXG59IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgQXVkaXRMb2dDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9hdWRpdExvZ1wiO1xuaW1wb3J0IHsgdXNlS2V5cyB9IGZyb20gXCJAaG9va3MvdXNlS2V5c1wiO1xuXG5pbXBvcnQgdHlwZSB7IEh0dHBFcnJvciwgTWV0YVF1ZXJ5IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgVXNlTG9nUHJvcHM8VFF1ZXJ5Rm5EYXRhLCBURXJyb3IsIFREYXRhPiA9IHtcbiAgcmVzb3VyY2U6IHN0cmluZztcbiAgYWN0aW9uPzogc3RyaW5nO1xuICBtZXRhPzogUmVjb3JkPG51bWJlciB8IHN0cmluZywgYW55PjtcbiAgYXV0aG9yPzogUmVjb3JkPG51bWJlciB8IHN0cmluZywgYW55PjtcbiAgcXVlcnlPcHRpb25zPzogVXNlUXVlcnlPcHRpb25zPFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YT47XG4gIG1ldGFEYXRhPzogTWV0YVF1ZXJ5O1xufTtcblxuLyoqXG4gKiB1c2VMb2dMaXN0IGlzIHVzZWQgdG8gZ2V0IGFuZCBmaWx0ZXIgYXVkaXQgbG9ncy5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXVkaXQtbG9nL3VzZUxvZ0xpc3R9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHR5cGVQYXJhbSBUUXVlcnlGbkRhdGEgLSBSZXN1bHQgZGF0YSByZXR1cm5lZCBieSB0aGUgcXVlcnkgZnVuY3Rpb24uXG4gKiBAdHlwZVBhcmFtIFRFcnJvciAtIEN1c3RvbSBlcnJvciBvYmplY3QgdGhhdCBleHRlbmRzIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaW50ZXJmYWNlUmVmZXJlbmNlcyNodHRwZXJyb3IgYEh0dHBFcnJvcmB9XG4gKiBAdHlwZVBhcmFtIFREYXRhIC0gUmVzdWx0IGRhdGEgcmV0dXJuZWQgYnkgdGhlIGBzZWxlY3RgIGZ1bmN0aW9uLiBEZWZhdWx0cyB0byBgVFF1ZXJ5Rm5EYXRhYFxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUxvZ0xpc3QgPSA8XG4gIFRRdWVyeUZuRGF0YSA9IGFueSxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBURGF0YSA9IFRRdWVyeUZuRGF0YSxcbj4oe1xuICByZXNvdXJjZSxcbiAgYWN0aW9uLFxuICBtZXRhLFxuICBhdXRob3IsXG4gIG1ldGFEYXRhLFxuICBxdWVyeU9wdGlvbnMsXG59OiBVc2VMb2dQcm9wczxUUXVlcnlGbkRhdGEsIFRFcnJvciwgVERhdGE+KTogVXNlUXVlcnlSZXN1bHQ8VERhdGE+ID0+IHtcbiAgY29uc3QgeyBnZXQgfSA9IHVzZUNvbnRleHQoQXVkaXRMb2dDb250ZXh0KTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgcXVlcnlSZXNwb25zZSA9IHVzZVF1ZXJ5PFRRdWVyeUZuRGF0YSwgVEVycm9yLCBURGF0YT4oe1xuICAgIHF1ZXJ5S2V5OiBrZXlzKClcbiAgICAgIC5hdWRpdCgpXG4gICAgICAucmVzb3VyY2UocmVzb3VyY2UpXG4gICAgICAuYWN0aW9uKFwibGlzdFwiKVxuICAgICAgLnBhcmFtcyhtZXRhKVxuICAgICAgLmdldChwcmVmZXJMZWdhY3lLZXlzKSxcbiAgICBxdWVyeUZuOiAoKSA9PlxuICAgICAgZ2V0Py4oe1xuICAgICAgICByZXNvdXJjZSxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBhdXRob3IsXG4gICAgICAgIG1ldGEsXG4gICAgICAgIG1ldGFEYXRhLFxuICAgICAgfSkgPz8gUHJvbWlzZS5yZXNvbHZlKFtdKSxcbiAgICBlbmFibGVkOiB0eXBlb2YgZ2V0ICE9PSBcInVuZGVmaW5lZFwiLFxuICAgIC4uLnF1ZXJ5T3B0aW9ucyxcbiAgICByZXRyeTogZmFsc2UsXG4gICAgbWV0YToge1xuICAgICAgLi4ucXVlcnlPcHRpb25zPy5tZXRhLFxuICAgICAgLi4uZ2V0WFJheShcInVzZUxvZ0xpc3RcIiwgcHJlZmVyTGVnYWN5S2V5cywgcmVzb3VyY2UpLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBxdWVyeVJlc3BvbnNlO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB3YXJuT25jZSBmcm9tIFwid2Fybi1vbmNlXCI7XG5cbmltcG9ydCB7IEkxOG5Db250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9pMThuXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJUeXBlIH0gZnJvbSBcIkBjb250ZXh0cy9yb3V0ZXIvcGlja2VyXCI7XG5pbXBvcnQgeyBwaWNrTm90RGVwcmVjYXRlZCB9IGZyb20gXCJAZGVmaW5pdGlvbnNcIjtcbmltcG9ydCB7IGdldEFjdGlvblJvdXRlc0Zyb21SZXNvdXJjZSB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXJcIjtcbmltcG9ydCB7IGNvbXBvc2VSb3V0ZSB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVycy9yb3V0ZXIvY29tcG9zZS1yb3V0ZVwiO1xuaW1wb3J0IHsgdXNlUmVmaW5lQ29udGV4dCwgdXNlUmVzb3VyY2UsIHVzZVRyYW5zbGF0ZSB9IGZyb20gXCJAaG9va3NcIjtcbmltcG9ydCB7IHVzZVBhcnNlZCB9IGZyb20gXCJAaG9va3Mvcm91dGVyL3VzZS1wYXJzZWRcIjtcblxuaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5pbXBvcnQgeyBwaWNrUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vZGVmaW5pdGlvbnMvaGVscGVycy9waWNrLXJlc291cmNlL2luZGV4XCI7XG5cbmV4cG9ydCB0eXBlIEJyZWFkY3J1bWJzVHlwZSA9IHtcbiAgbGFiZWw6IHN0cmluZztcbiAgaHJlZj86IHN0cmluZztcbiAgaWNvbj86IFJlYWN0LlJlYWN0Tm9kZTtcbn07XG5cbnR5cGUgVXNlQnJlYWRjcnVtYlJldHVyblR5cGUgPSB7XG4gIGJyZWFkY3J1bWJzOiBCcmVhZGNydW1ic1R5cGVbXTtcbn07XG5cbnR5cGUgVXNlQnJlYWRjcnVtYlByb3BzID0ge1xuICAvKipcbiAgICogQWRkaXRpb25hbCBwYXJhbXMgdG8gYmUgdXNlZCBpbiB0aGUgcm91dGUgZ2VuZXJhdGlvbiBwcm9jZXNzLlxuICAgKi9cbiAgbWV0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlcj47XG59O1xuXG5leHBvcnQgY29uc3QgdXNlQnJlYWRjcnVtYiA9ICh7XG4gIG1ldGE6IG1ldGFGcm9tUHJvcHMgPSB7fSxcbn06IFVzZUJyZWFkY3J1bWJQcm9wcyA9IHt9KTogVXNlQnJlYWRjcnVtYlJldHVyblR5cGUgPT4ge1xuICBjb25zdCByb3V0ZXJUeXBlID0gdXNlUm91dGVyVHlwZSgpO1xuICBjb25zdCB7IGkxOG5Qcm92aWRlciB9ID0gdXNlQ29udGV4dChJMThuQ29udGV4dCk7XG4gIGNvbnN0IHBhcnNlZCA9IHVzZVBhcnNlZCgpO1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgeyByZXNvdXJjZXMsIHJlc291cmNlLCBhY3Rpb24gfSA9IHVzZVJlc291cmNlKCk7XG4gIGNvbnN0IHtcbiAgICBvcHRpb25zOiB7IHRleHRUcmFuc2Zvcm1lcnMgfSxcbiAgfSA9IHVzZVJlZmluZUNvbnRleHQoKTtcblxuICBjb25zdCBicmVhZGNydW1iczogQnJlYWRjcnVtYnNUeXBlW10gPSBbXTtcblxuICBpZiAoIXJlc291cmNlPy5uYW1lKSB7XG4gICAgcmV0dXJuIHsgYnJlYWRjcnVtYnMgfTtcbiAgfVxuXG4gIGNvbnN0IGFkZEJyZWFkY3J1bWIgPSAocGFyZW50TmFtZTogc3RyaW5nIHwgSVJlc291cmNlSXRlbSkgPT4ge1xuICAgIGNvbnN0IHBhcmVudFJlc291cmNlID1cbiAgICAgIHR5cGVvZiBwYXJlbnROYW1lID09PSBcInN0cmluZ1wiXG4gICAgICAgID8gcGlja1Jlc291cmNlKHBhcmVudE5hbWUsIHJlc291cmNlcywgcm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIikgPz8ge1xuICAgICAgICAgICAgbmFtZTogcGFyZW50TmFtZSxcbiAgICAgICAgICB9XG4gICAgICAgIDogcGFyZW50TmFtZTtcblxuICAgIGlmIChwYXJlbnRSZXNvdXJjZSkge1xuICAgICAgY29uc3QgZ3JhbmRQYXJlbnROYW1lID0gcGlja05vdERlcHJlY2F0ZWQoXG4gICAgICAgIHBhcmVudFJlc291cmNlPy5tZXRhPy5wYXJlbnQsXG4gICAgICAgIHBhcmVudFJlc291cmNlPy5wYXJlbnROYW1lLFxuICAgICAgKTtcbiAgICAgIGlmIChncmFuZFBhcmVudE5hbWUpIHtcbiAgICAgICAgYWRkQnJlYWRjcnVtYihncmFuZFBhcmVudE5hbWUpO1xuICAgICAgfVxuICAgICAgY29uc3QgbGlzdEFjdGlvbk9mUmVzb3VyY2UgPSBnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UoXG4gICAgICAgIHBhcmVudFJlc291cmNlLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgIHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIsXG4gICAgICApLmZpbmQoKHIpID0+IHIuYWN0aW9uID09PSBcImxpc3RcIik7XG5cbiAgICAgIGNvbnN0IGhyZWZSYXcgPSBsaXN0QWN0aW9uT2ZSZXNvdXJjZT8ucmVzb3VyY2U/Lmxpc3RcbiAgICAgICAgPyBsaXN0QWN0aW9uT2ZSZXNvdXJjZT8ucm91dGVcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGNvbnN0IGhyZWYgPSBocmVmUmF3XG4gICAgICAgID8gcm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIlxuICAgICAgICAgID8gaHJlZlJhd1xuICAgICAgICAgIDogY29tcG9zZVJvdXRlKGhyZWZSYXcsIHBhcmVudFJlc291cmNlPy5tZXRhLCBwYXJzZWQsIG1ldGFGcm9tUHJvcHMpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICBicmVhZGNydW1icy5wdXNoKHtcbiAgICAgICAgbGFiZWw6XG4gICAgICAgICAgcGlja05vdERlcHJlY2F0ZWQoXG4gICAgICAgICAgICBwYXJlbnRSZXNvdXJjZS5tZXRhPy5sYWJlbCxcbiAgICAgICAgICAgIHBhcmVudFJlc291cmNlLm9wdGlvbnM/LmxhYmVsLFxuICAgICAgICAgICkgPz9cbiAgICAgICAgICB0cmFuc2xhdGUoXG4gICAgICAgICAgICBgJHtwYXJlbnRSZXNvdXJjZS5uYW1lfS4ke3BhcmVudFJlc291cmNlLm5hbWV9YCxcbiAgICAgICAgICAgIHRleHRUcmFuc2Zvcm1lcnMuaHVtYW5pemUocGFyZW50UmVzb3VyY2UubmFtZSksXG4gICAgICAgICAgKSxcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgaWNvbjogcGlja05vdERlcHJlY2F0ZWQoXG4gICAgICAgICAgcGFyZW50UmVzb3VyY2UubWV0YT8uaWNvbixcbiAgICAgICAgICBwYXJlbnRSZXNvdXJjZS5vcHRpb25zPy5pY29uLFxuICAgICAgICAgIHBhcmVudFJlc291cmNlLmljb24sXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgYWRkQnJlYWRjcnVtYihyZXNvdXJjZSk7XG5cbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24gIT09IFwibGlzdFwiKSB7XG4gICAgY29uc3Qga2V5ID0gYGFjdGlvbnMuJHthY3Rpb259YDtcbiAgICBjb25zdCBhY3Rpb25MYWJlbCA9IHRyYW5zbGF0ZShrZXkpO1xuICAgIGlmICh0eXBlb2YgaTE4blByb3ZpZGVyICE9PSBcInVuZGVmaW5lZFwiICYmIGFjdGlvbkxhYmVsID09PSBrZXkpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICB0cnVlLFxuICAgICAgICBgW3VzZUJyZWFkY3J1bWJdOiBCcmVhZGNydW1iIG1pc3NpbmcgdHJhbnNsYXRlIGtleSBmb3IgdGhlIFwiJHthY3Rpb259XCIgYWN0aW9uLiBQbGVhc2UgYWRkIFwiYWN0aW9ucy4ke2FjdGlvbn1cIiBrZXkgdG8geW91ciB0cmFuc2xhdGlvbiBmaWxlLlxcbkZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL3VzZUJyZWFkY3J1bWIvI2kxOG4tc3VwcG9ydGAsXG4gICAgICApO1xuICAgICAgYnJlYWRjcnVtYnMucHVzaCh7XG4gICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoXG4gICAgICAgICAgYGJ1dHRvbnMuJHthY3Rpb259YCxcbiAgICAgICAgICB0ZXh0VHJhbnNmb3JtZXJzLmh1bWFuaXplKGFjdGlvbiksXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWRjcnVtYnMucHVzaCh7XG4gICAgICAgIGxhYmVsOiB0cmFuc2xhdGUoa2V5LCB0ZXh0VHJhbnNmb3JtZXJzLmh1bWFuaXplKGFjdGlvbikpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBicmVhZGNydW1icyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IHBpY2tOb3REZXByZWNhdGVkLCB1c2VVc2VyRnJpZW5kbHlOYW1lIH0gZnJvbSBcIkBkZWZpbml0aW9uc1wiO1xuaW1wb3J0IHsgZ2V0UGFyZW50UmVzb3VyY2UgfSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnMvcm91dGVyXCI7XG5cbmltcG9ydCB7IHVzZVBhcnNlZCwgdXNlUmVzb3VyY2UsIHVzZVJvdXRlckNvbnRleHQsIHVzZVRyYW5zbGF0ZSB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgdXNlUm91dGVyVHlwZSB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9yb3V0ZXIvcGlja2VyXCI7XG5pbXBvcnQgeyBjcmVhdGVSZXNvdXJjZUtleSB9IGZyb20gXCIuLi8uLi9kZWZpbml0aW9ucy9oZWxwZXJzL21lbnUvY3JlYXRlLXJlc291cmNlLWtleVwiO1xuaW1wb3J0IHtcbiAgdHlwZSBGbGF0VHJlZUl0ZW0sXG4gIGNyZWF0ZVRyZWUsXG59IGZyb20gXCIuLi8uLi9kZWZpbml0aW9ucy9oZWxwZXJzL21lbnUvY3JlYXRlLXRyZWVcIjtcbmltcG9ydCB7IHVzZUdldFRvUGF0aCB9IGZyb20gXCIuLi9yb3V0ZXIvdXNlLWdldC10by1wYXRoL2luZGV4XCI7XG5cbnR5cGUgVXNlTWVudVJldHVyblR5cGUgPSB7XG4gIGRlZmF1bHRPcGVuS2V5czogc3RyaW5nW107XG4gIHNlbGVjdGVkS2V5OiBzdHJpbmc7XG4gIG1lbnVJdGVtczogVHJlZU1lbnVJdGVtW107XG59O1xuXG5leHBvcnQgdHlwZSBVc2VNZW51UHJvcHMgPSB7XG4gIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBoaWRlT25NaXNzaW5nUGFyYW1ldGVyPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFRyZWVNZW51SXRlbSA9XG4gIC8vIE9taXR0ZWQgYmVjYXVzZSBgbGFiZWxgIGFuZCBgcm91dGVgIGFyZSBkZXByZWNhdGVkIGluIGByZXNvdXJjZWAgYnV0IG5vdCBpbiBgbWVudUl0ZW1zYC4gVGhlc2UgYXJlIHBvcHVsYXRlZCBpbiBgcHJlcGFyZUl0ZW1gIGZvciBlYXNlIG9mIHVzZS5cbiAgT21pdDxGbGF0VHJlZUl0ZW0sIFwibGFiZWxcIiB8IFwicm91dGVcIiB8IFwiY2hpbGRyZW5cIj4gJiB7XG4gICAgcm91dGU/OiBzdHJpbmc7XG4gICAgaWNvbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBjaGlsZHJlbjogVHJlZU1lbnVJdGVtW107XG4gIH07XG5cbmNvbnN0IGdldENsZWFuUGF0aCA9IChwYXRobmFtZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBwYXRobmFtZVxuICAgIC5zcGxpdChcIj9cIilbMF1cbiAgICAuc3BsaXQoXCIjXCIpWzBdXG4gICAgLnJlcGxhY2UoLyguKykoXFwvJCkvLCBcIiQxXCIpO1xufTtcblxuLyoqXG4gKiBgdXNlTWVudWAgaXMgdXNlZCB0byBnZXQgbWVudSBpdGVtcyBvZiB0aGUgZGVmYXVsdCBzaWRlYmFyLlxuICogVGhlc2UgaXRlbXMgaW5jbHVkZSBhIGxpbmsgdG8gZGFzaGJvYXJkIHBhZ2UgKGlmIGl0IGV4aXN0cykgYW5kIGxpbmtzIHRvIHRoZSB1c2VyIGRlZmluZWQgcmVzb3VyY2VzXG4gKiAocGFzc2VkIGFzIGNoaWxkcmVuIHRvIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2NvbXBvbmVudHMvcmVmaW5lLWNvbmZpZyBgPFJlZmluZT5gfSkuXG4gKiBUaGlzIGhvb2sgY2FuIGFsc28gYmUgdXNlZCB0byBidWlsZCBjdXN0b20gbWVudXMsIHdoaWNoIGlzIGFsc28gdXNlZCBieSBkZWZhdWx0IHNpZGViYXIgdG8gc2hvdyBtZW51IGl0ZW1zLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9ob29rcy91aS91c2VNZW51fSBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgY29uc3QgdXNlTWVudSA9IChcbiAgeyBtZXRhLCBoaWRlT25NaXNzaW5nUGFyYW1ldGVyID0gdHJ1ZSB9OiBVc2VNZW51UHJvcHMgPSB7XG4gICAgaGlkZU9uTWlzc2luZ1BhcmFtZXRlcjogdHJ1ZSxcbiAgfSxcbik6IFVzZU1lbnVSZXR1cm5UeXBlID0+IHtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG5cbiAgY29uc3QgZ2V0VG9QYXRoID0gdXNlR2V0VG9QYXRoKCk7XG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG4gIGNvbnN0IHsgcmVzb3VyY2UsIHJlc291cmNlcyB9ID0gdXNlUmVzb3VyY2UoKTtcbiAgY29uc3QgeyBwYXRobmFtZSB9ID0gdXNlUGFyc2VkKCk7XG4gIGNvbnN0IHsgdXNlTG9jYXRpb24gfSA9IHVzZVJvdXRlckNvbnRleHQoKTtcbiAgY29uc3QgeyBwYXRobmFtZTogbGVnYWN5UGF0aCB9ID0gdXNlTG9jYXRpb24oKTtcbiAgY29uc3QgZ2V0RnJpZW5kbHlOYW1lID0gdXNlVXNlckZyaWVuZGx5TmFtZSgpO1xuXG4gIGNvbnN0IGNsZWFuUGF0aG5hbWUgPVxuICAgIHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCJcbiAgICAgID8gZ2V0Q2xlYW5QYXRoKGxlZ2FjeVBhdGgpXG4gICAgICA6IHBhdGhuYW1lXG4gICAgICAgID8gZ2V0Q2xlYW5QYXRoKHBhdGhuYW1lKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICBjb25zdCBjbGVhblJvdXRlID0gYC8keyhjbGVhblBhdGhuYW1lID8/IFwiXCIpLnJlcGxhY2UoL15cXC8vLCBcIlwiKX1gO1xuXG4gIGNvbnN0IHNlbGVjdGVkS2V5ID0gcmVzb3VyY2VcbiAgICA/IGNyZWF0ZVJlc291cmNlS2V5KHJlc291cmNlLCByZXNvdXJjZXMsIHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIpXG4gICAgOiBjbGVhblJvdXRlID8/IFwiXCI7XG5cbiAgY29uc3QgZGVmYXVsdE9wZW5LZXlzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFyZXNvdXJjZSkgcmV0dXJuIFtdO1xuICAgIGxldCBwYXJlbnQgPSBnZXRQYXJlbnRSZXNvdXJjZShyZXNvdXJjZSwgcmVzb3VyY2VzKTtcbiAgICBjb25zdCBrZXlzID0gW2NyZWF0ZVJlc291cmNlS2V5KHJlc291cmNlLCByZXNvdXJjZXMpXTtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBrZXlzLnB1c2goY3JlYXRlUmVzb3VyY2VLZXkocGFyZW50LCByZXNvdXJjZXMpKTtcbiAgICAgIHBhcmVudCA9IGdldFBhcmVudFJlc291cmNlKHBhcmVudCwgcmVzb3VyY2VzKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sIFtdKTtcblxuICBjb25zdCBwcmVwYXJlSXRlbSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChpdGVtOiBGbGF0VHJlZUl0ZW0pOiBUcmVlTWVudUl0ZW0gfCB1bmRlZmluZWQgPT4ge1xuICAgICAgaWYgKHBpY2tOb3REZXByZWNhdGVkKGl0ZW0/Lm1ldGE/LmhpZGUsIGl0ZW0/Lm9wdGlvbnM/LmhpZGUpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW0/Lmxpc3QgJiYgaXRlbS5jaGlsZHJlbi5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICAgIGNvbnN0IGNvbXBvc2VkID0gaXRlbS5saXN0XG4gICAgICAgID8gZ2V0VG9QYXRoKHtcbiAgICAgICAgICAgIHJlc291cmNlOiBpdGVtLFxuICAgICAgICAgICAgYWN0aW9uOiBcImxpc3RcIixcbiAgICAgICAgICAgIGxlZ2FjeTogcm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIixcbiAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgfSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChcbiAgICAgICAgaGlkZU9uTWlzc2luZ1BhcmFtZXRlciAmJlxuICAgICAgICBjb21wb3NlZCAmJlxuICAgICAgICBjb21wb3NlZC5tYXRjaCgvKFxcL3xeKTooLis/KShcXC98JCl7MX0vKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5pdGVtLFxuICAgICAgICByb3V0ZTogY29tcG9zZWQsXG4gICAgICAgIGljb246IHBpY2tOb3REZXByZWNhdGVkKGl0ZW0ubWV0YT8uaWNvbiwgaXRlbS5vcHRpb25zPy5pY29uLCBpdGVtLmljb24pLFxuICAgICAgICBsYWJlbDpcbiAgICAgICAgICBwaWNrTm90RGVwcmVjYXRlZChpdGVtPy5tZXRhPy5sYWJlbCwgaXRlbT8ub3B0aW9ucz8ubGFiZWwpID8/XG4gICAgICAgICAgdHJhbnNsYXRlKFxuICAgICAgICAgICAgYCR7aXRlbS5uYW1lfS4ke2l0ZW0ubmFtZX1gLFxuICAgICAgICAgICAgZ2V0RnJpZW5kbHlOYW1lKGl0ZW0ubmFtZSwgXCJwbHVyYWxcIiksXG4gICAgICAgICAgKSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBbcm91dGVyVHlwZSwgbWV0YSwgZ2V0VG9QYXRoLCB0cmFuc2xhdGUsIGhpZGVPbk1pc3NpbmdQYXJhbWV0ZXJdLFxuICApO1xuXG4gIGNvbnN0IHRyZWVJdGVtcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHRyZWVNZW51SXRlbXMgPSBjcmVhdGVUcmVlKHJlc291cmNlcywgcm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIik7XG5cbiAgICAvLyBhZGQgcGF0aHMgdG8gaXRlbXMgYW5kIHRoZWlyIG5vZGVzIHJlY3Vyc2l2ZWx5XG4gICAgY29uc3QgcHJlcGFyZSA9IChpdGVtczogVHJlZU1lbnVJdGVtW10pOiBUcmVlTWVudUl0ZW1bXSA9PiB7XG4gICAgICByZXR1cm4gaXRlbXMuZmxhdE1hcCgoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCBwcmVwYXJlZE5vZGVzID0gcHJlcGFyZShpdGVtLmNoaWxkcmVuKTtcbiAgICAgICAgY29uc3QgbmV3SXRlbSA9IHByZXBhcmVJdGVtKHtcbiAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgIGNoaWxkcmVuOiBwcmVwYXJlZE5vZGVzLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIW5ld0l0ZW0pIHJldHVybiBbXTtcblxuICAgICAgICByZXR1cm4gW25ld0l0ZW1dO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcmVwYXJlKHRyZWVNZW51SXRlbXMpO1xuICB9LCBbcmVzb3VyY2VzLCByb3V0ZXJUeXBlLCBwcmVwYXJlSXRlbV0pO1xuXG4gIHJldHVybiB7XG4gICAgZGVmYXVsdE9wZW5LZXlzLFxuICAgIHNlbGVjdGVkS2V5LFxuICAgIG1lbnVJdGVtczogdHJlZUl0ZW1zLFxuICB9O1xufTtcbiIsImltcG9ydCB0eXBlIHsgSVJlc291cmNlSXRlbSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuaW1wb3J0IHtcbiAgZ2V0UGFyZW50UmVzb3VyY2UsXG4gIHJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMsXG59IGZyb20gXCIuLi8uLi9oZWxwZXJzL3JvdXRlclwiO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUmVzb3VyY2VLZXkgPSAoXG4gIHJlc291cmNlOiBJUmVzb3VyY2VJdGVtLFxuICByZXNvdXJjZXM6IElSZXNvdXJjZUl0ZW1bXSxcbiAgbGVnYWN5ID0gZmFsc2UsXG4pID0+IHtcbiAgY29uc3QgcGFyZW50czogSVJlc291cmNlSXRlbVtdID0gW107XG5cbiAgbGV0IGN1cnJlbnRQYXJlbnRSZXNvdXJjZSA9IGdldFBhcmVudFJlc291cmNlKHJlc291cmNlLCByZXNvdXJjZXMpO1xuICB3aGlsZSAoY3VycmVudFBhcmVudFJlc291cmNlKSB7XG4gICAgcGFyZW50cy5wdXNoKGN1cnJlbnRQYXJlbnRSZXNvdXJjZSk7XG4gICAgY3VycmVudFBhcmVudFJlc291cmNlID0gZ2V0UGFyZW50UmVzb3VyY2UoY3VycmVudFBhcmVudFJlc291cmNlLCByZXNvdXJjZXMpO1xuICB9XG4gIHBhcmVudHMucmV2ZXJzZSgpO1xuXG4gIGNvbnN0IGtleSA9IFsuLi5wYXJlbnRzLCByZXNvdXJjZV1cbiAgICAubWFwKChyKSA9PlxuICAgICAgcmVtb3ZlTGVhZGluZ1RyYWlsaW5nU2xhc2hlcyhcbiAgICAgICAgKGxlZ2FjeSA/IHIucm91dGUgOiB1bmRlZmluZWQpID8/IHIuaWRlbnRpZmllciA/PyByLm5hbWUsXG4gICAgICApLFxuICAgIClcbiAgICAuam9pbihcIi9cIik7XG5cbiAgcmV0dXJuIGAvJHtrZXkucmVwbGFjZSgvXlxcLy8sIFwiXCIpfWA7XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5pbXBvcnQgeyBnZXRQYXJlbnRSZXNvdXJjZSB9IGZyb20gXCIuLi9yb3V0ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZVJlc291cmNlS2V5IH0gZnJvbSBcIi4vY3JlYXRlLXJlc291cmNlLWtleVwiO1xuXG5leHBvcnQgdHlwZSBUcmVlID0ge1xuICBpdGVtOiBJUmVzb3VyY2VJdGVtO1xuICBjaGlsZHJlbjogeyBba2V5OiBzdHJpbmddOiBUcmVlIH07XG59O1xuXG5leHBvcnQgdHlwZSBGbGF0VHJlZUl0ZW0gPSBJUmVzb3VyY2VJdGVtICYge1xuICBrZXk6IHN0cmluZztcbiAgY2hpbGRyZW46IEZsYXRUcmVlSXRlbVtdO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRyZWUgPSAoXG4gIHJlc291cmNlczogSVJlc291cmNlSXRlbVtdLFxuICBsZWdhY3kgPSBmYWxzZSxcbik6IEZsYXRUcmVlSXRlbVtdID0+IHtcbiAgY29uc3Qgcm9vdDogVHJlZSA9IHtcbiAgICBpdGVtOiB7XG4gICAgICBuYW1lOiBcIl9fcm9vdF9fXCIsXG4gICAgfSxcbiAgICBjaGlsZHJlbjoge30sXG4gIH07XG5cbiAgcmVzb3VyY2VzLmZvckVhY2goKHJlc291cmNlKSA9PiB7XG4gICAgY29uc3QgcGFyZW50czogSVJlc291cmNlSXRlbVtdID0gW107XG5cbiAgICBsZXQgY3VycmVudFBhcmVudCA9IGdldFBhcmVudFJlc291cmNlKHJlc291cmNlLCByZXNvdXJjZXMpO1xuICAgIHdoaWxlIChjdXJyZW50UGFyZW50KSB7XG4gICAgICBwYXJlbnRzLnB1c2goY3VycmVudFBhcmVudCk7XG4gICAgICBjdXJyZW50UGFyZW50ID0gZ2V0UGFyZW50UmVzb3VyY2UoY3VycmVudFBhcmVudCwgcmVzb3VyY2VzKTtcbiAgICB9XG4gICAgcGFyZW50cy5yZXZlcnNlKCk7XG5cbiAgICBsZXQgY3VycmVudFRyZWUgPSByb290O1xuXG4gICAgcGFyZW50cy5mb3JFYWNoKChwYXJlbnQpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9XG4gICAgICAgIChsZWdhY3kgPyBwYXJlbnQucm91dGUgOiB1bmRlZmluZWQpID8/IHBhcmVudC5pZGVudGlmaWVyID8/IHBhcmVudC5uYW1lO1xuXG4gICAgICBpZiAoIWN1cnJlbnRUcmVlLmNoaWxkcmVuW2tleV0pIHtcbiAgICAgICAgY3VycmVudFRyZWUuY2hpbGRyZW5ba2V5XSA9IHtcbiAgICAgICAgICBpdGVtOiBwYXJlbnQsXG4gICAgICAgICAgY2hpbGRyZW46IHt9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY3VycmVudFRyZWUgPSBjdXJyZW50VHJlZS5jaGlsZHJlbltrZXldO1xuICAgIH0pO1xuXG4gICAgY29uc3Qga2V5ID1cbiAgICAgIChsZWdhY3kgPyByZXNvdXJjZS5yb3V0ZSA6IHVuZGVmaW5lZCkgPz9cbiAgICAgIHJlc291cmNlLmlkZW50aWZpZXIgPz9cbiAgICAgIHJlc291cmNlLm5hbWU7XG5cbiAgICBpZiAoIWN1cnJlbnRUcmVlLmNoaWxkcmVuW2tleV0pIHtcbiAgICAgIGN1cnJlbnRUcmVlLmNoaWxkcmVuW2tleV0gPSB7XG4gICAgICAgIGl0ZW06IHJlc291cmNlLFxuICAgICAgICBjaGlsZHJlbjoge30sXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgZmxhdHRlbiA9ICh0cmVlOiBUcmVlKTogRmxhdFRyZWVJdGVtW10gPT4ge1xuICAgIGNvbnN0IGl0ZW1zOiBGbGF0VHJlZUl0ZW1bXSA9IFtdO1xuXG4gICAgT2JqZWN0LmtleXModHJlZS5jaGlsZHJlbikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCBpdGVtS2V5ID0gY3JlYXRlUmVzb3VyY2VLZXkoXG4gICAgICAgIHRyZWUuY2hpbGRyZW5ba2V5XS5pdGVtLFxuICAgICAgICByZXNvdXJjZXMsXG4gICAgICAgIGxlZ2FjeSxcbiAgICAgICk7XG4gICAgICBjb25zdCBpdGVtOiBGbGF0VHJlZUl0ZW0gPSB7XG4gICAgICAgIC4uLnRyZWUuY2hpbGRyZW5ba2V5XS5pdGVtLFxuICAgICAgICBrZXk6IGl0ZW1LZXksXG4gICAgICAgIGNoaWxkcmVuOiBmbGF0dGVuKHRyZWUuY2hpbGRyZW5ba2V5XSksXG4gICAgICB9O1xuICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBpdGVtcztcbiAgfTtcblxuICByZXR1cm4gZmxhdHRlbihyb290KTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHtcbiAgdHlwZSBSZWFjdE5vZGUsXG4gIGNyZWF0ZUNvbnRleHQsXG4gIHVzZUNvbnRleHQsXG4gIHVzZU1lbW8sXG59IGZyb20gXCJyZWFjdFwiO1xuXG50eXBlIE1ldGFDb250ZXh0VmFsdWUgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXG5leHBvcnQgY29uc3QgTWV0YUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PE1ldGFDb250ZXh0VmFsdWU+KHt9KTtcblxuLyoqXG4gKiBJcyB1c2VkIHRvIHByb3ZpZGUgbWV0YSBkYXRhIHRvIHRoZSBjaGlsZHJlbiBjb21wb25lbnRzLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCBNZXRhQ29udGV4dFByb3ZpZGVyID0gKHtcbiAgY2hpbGRyZW4sXG4gIHZhbHVlLFxufTogeyBjaGlsZHJlbjogUmVhY3ROb2RlOyB2YWx1ZTogTWV0YUNvbnRleHRWYWx1ZSB9KSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHVzZU1ldGFDb250ZXh0KCk7XG5cbiAgY29uc3QgbWV0YUNvbnRleHQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY3VycmVudFZhbHVlLFxuICAgICAgLi4udmFsdWUsXG4gICAgfTtcbiAgfSwgW2N1cnJlbnRWYWx1ZSwgdmFsdWVdKTtcblxuICByZXR1cm4gKFxuICAgIDxNZXRhQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bWV0YUNvbnRleHR9PntjaGlsZHJlbn08L01ldGFDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEByZXR1cm5zIFRoZSBNZXRhQ29udGV4dCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZU1ldGFDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChNZXRhQ29udGV4dCk7XG4gIGlmICghY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInVzZU1ldGFDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBNZXRhQ29udGV4dFByb3ZpZGVyXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoTWV0YUNvbnRleHQpO1xufTtcbiIsImltcG9ydCB7IHVzZU1ldGFDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9tZXRhQ29udGV4dFwiO1xuaW1wb3J0IHsgc2FuaXRpemVSZXNvdXJjZSB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVycy9zYW5pdGl6ZS1yZXNvdXJjZVwiO1xuaW1wb3J0IHsgdXNlUGFyc2VkIH0gZnJvbSBcIkBob29rcy9yb3V0ZXJcIjtcblxuaW1wb3J0IHR5cGUgeyBNZXRhUXVlcnkgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5cbi8qKlxuICogSG9vayB0aGF0IHJldHVybnMgYSBmdW5jdGlvbiB0byBnZXQgbWV0YS5cbiAqIFRoZSBtZXRhIGlzIGEgY29tYmluYXRpb24gb2YgdGhlIHJlc291cmNlIG1ldGEsIGhvb2sgbWV0YSwgcXVlcnkgcGFyYW1zIGFuZCBtZXRhQ29udGV4dCB2YWx1ZS5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdXNlTWV0YSA9ICgpID0+IHtcbiAgY29uc3QgeyBwYXJhbXMgfSA9IHVzZVBhcnNlZCgpO1xuXG4gIGNvbnN0IG1ldGFDb250ZXh0ID0gdXNlTWV0YUNvbnRleHQoKTtcblxuICBjb25zdCBnZXRNZXRhRm4gPSAoe1xuICAgIHJlc291cmNlLFxuICAgIG1ldGE6IG1ldGFGcm9tUHJvcCxcbiAgfToge1xuICAgIHJlc291cmNlPzogSVJlc291cmNlSXRlbTtcbiAgICBtZXRhPzogTWV0YVF1ZXJ5O1xuICB9ID0ge30pID0+IHtcbiAgICBjb25zdCB7IG1ldGEgfSA9IHNhbml0aXplUmVzb3VyY2UocmVzb3VyY2UpID8/IHsgbWV0YToge30gfTtcblxuICAgIC8vIHRoaXMgZmllbGRzIGNhbWUgZnJvbSB0aGUgcXVlcnkgcGFyYW1zIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCBmcm9tIHRoZSBtZXRhIGJlY2F1c2UgdGhleSBhcmUgbm90IHBhcnQgb2YgdGhlIG1ldGEuXG4gICAgY29uc3Qge1xuICAgICAgZmlsdGVyczogX2ZpbHRlcnMsXG4gICAgICBzb3J0ZXJzOiBfc29ydGVycyxcbiAgICAgIGN1cnJlbnQ6IF9jdXJyZW50LFxuICAgICAgcGFnZVNpemU6IF9wYWdlU2l6ZSxcbiAgICAgIC4uLmFkZGl0aW9uYWxQYXJhbXNcbiAgICB9ID0gcGFyYW1zID8/IHt9O1xuXG4gICAgY29uc3QgcmVzdWx0OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHtcbiAgICAgIC4uLm1ldGEsXG4gICAgICAuLi5hZGRpdGlvbmFsUGFyYW1zLFxuICAgICAgLi4ubWV0YUZyb21Qcm9wLFxuICAgIH07XG5cbiAgICAvLyB3aGVuIE11bHRpVGVuYW5jeVByb3ZpZGVyIGZyb20gXCJAcmVmaW5lZGV2LWVlL211bHRpLXRlbmFuY3lcIiBpcyBwcm92aWRlZCwgd2UgbmVlZCB0byBhZGQgdGVuYW50SWQgdG8gdGhlIG1ldGFcbiAgICBpZiAobWV0YUNvbnRleHQ/LnRlbmFudElkKSB7XG4gICAgICByZXN1bHRbXCJ0ZW5hbnRJZFwiXSA9IG1ldGFDb250ZXh0LnRlbmFudElkO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgcmV0dXJuIGdldE1ldGFGbjtcbn07XG4iLCJpbXBvcnQgeyBSZWZpbmVDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9yZWZpbmVcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IHVzZVJlZmluZU9wdGlvbnMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgb3B0aW9ucyB9ID0gUmVhY3QudXNlQ29udGV4dChSZWZpbmVDb250ZXh0KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IHVzZUlkIH0gZnJvbSBcIi4vdXNlLWlkXCI7XG5pbXBvcnQgeyB1c2VBY3Rpb24gfSBmcm9tIFwiLi91c2UtYWN0aW9uXCI7XG5pbXBvcnQgeyB1c2VSZXNvdXJjZSB9IGZyb20gXCIuLi9yZXNvdXJjZVwiO1xuaW1wb3J0IHR5cGUgeyBCYXNlS2V5IH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgSVJlc291cmNlSXRlbSB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvcm91dGVyL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IEZvcm1BY3Rpb24gfSBmcm9tIFwiLi4vZm9ybS90eXBlc1wiO1xuXG50eXBlIFByb3BzID0ge1xuICBpZD86IEJhc2VLZXk7XG4gIHJlc291cmNlPzogc3RyaW5nO1xuICBhY3Rpb24/OiBBY3Rpb247XG59O1xuXG50eXBlIFJlc291cmNlUGFyYW1zID0ge1xuICBpZD86IEJhc2VLZXk7XG4gIHNldElkOiBSZWFjdC5EaXNwYXRjaDxSZWFjdC5TZXRTdGF0ZUFjdGlvbjxCYXNlS2V5IHwgdW5kZWZpbmVkPj47XG4gIHJlc291cmNlPzogSVJlc291cmNlSXRlbTtcbiAgYWN0aW9uPzogQWN0aW9uO1xuICBpZGVudGlmaWVyPzogc3RyaW5nO1xuICBmb3JtQWN0aW9uOiBGb3JtQWN0aW9uO1xufTtcblxuLyoqXG4gKiBJbnRlcmFjdGlvbnMgaW4gUmVmaW5lIGhhcyAzIG1haW4gcGFyYW1ldGVyczogcmVzb3VyY2UsIGFjdGlvbiBhbmQgaWQuXG4gKlxuICogVGhpcyBob29rIGlzIHVzZWQgdG8gbWFuYWdlIHRoZXNlIHBhcmFtZXRlcnMgYmFzZWQgb24gYmVsb3cgY29uZGl0aW9ucyBhbmQgb3V0cHV0cyB0aGUgZmluYWwgcGFyYW1ldGVycy5cbiAqXG4gKiBgcmVzb3VyY2VgOiBUaGUgcmVzb3VyY2UgdG8gYmUgdXNlZC4gKGVpdGhlciB0aGUgaWRlbnRpZmllciBvciB0aGUgbmFtZSBvZiB0aGUgcmVzb3VyY2UpXG4gKiAtIElmIGEgYHJlc291cmNlYCBpcyBwcm92aWRlZCwgaXQgd2lsbCBiZSB1c2VkIChldmVuIGlmIGl0J3Mgbm90IGRlZmluZWQgaW4gdGhlIDxSZWZpbmUvPiBjb21wb25lbnQpXG4gKiAtIElmIGEgYHJlc291cmNlYCBpcyBub3QgcHJvdmlkZWQsIGl0IHdpbGwgYmUgaW5mZXJyZWQgZnJvbSB0aGUgcm91dGUuXG4gKiBgaWRgOiBUaGUgYGlkYCBvZiB0aGUgcmVjb3JkIHRvIGJlIHVzZWQuXG4gKiAtIElmIGFuIGBpZGAgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgdXNlZC5cbiAqIC0gSWYgYW4gYGlkYCBpcyBub3QgcHJvdmlkZWQsIGl0IHdpbGwgZWl0aGVyIGJlIGluZmVycmVkIGZyb20gdGhlIHJvdXRlIG9yIHdpbGwgYmUgYHVuZGVmaW5lZGAuXG4gKiAtLSBJZiBhIGN1c3RvbSByZXNvdXJjZSBpcyBwcm92aWRlZCBhbmQgaXQncyBkaWZmZXJlbnQgZnJvbSB0aGUgaW5mZXJyZWQgcmVzb3VyY2UsIHRoZSBpZCB3aWxsIGJlIHVuZGVmaW5lZC5cbiAqIC0tIElmIGEgY3VzdG9tIHJlc291cmNlIGlzIHByb3ZpZGVkIGFuZCBpdCdzIHNhbWUgYXMgdGhlIGluZmVycmVkIHJlc291cmNlLCB0aGUgaWQgd2lsbCBiZSBpbmZlcnJlZCBmcm9tIHRoZSByb3V0ZS5cbiAqIC0tIElmIGEgY3VzdG9tIHJlc291cmNlIGlzIG5vdCBwcm92aWRlZCwgdGhlIGlkIHdpbGwgYmUgaW5mZXJyZWQgZnJvbSB0aGUgcm91dGUuXG4gKiBgYWN0aW9uYDogVGhlIGFjdGlvbiB0byBiZSB1c2VkLlxuICogLSBJZiBhbiBgYWN0aW9uYCBpcyBwcm92aWRlZCwgaXQgd2lsbCBiZSB1c2VkLlxuICogLSBJZiBhbiBgYWN0aW9uYCBpcyBub3QgcHJvdmlkZWQsIGl0IHdpbGwgYmUgaW5mZXJyZWQgZnJvbSB0aGUgcm91dGUuXG4gKiBgZm9ybUFjdGlvbmA6IFRoZSBhY3Rpb24gdG8gYmUgdXNlZCBpbiB0aGUgZm9ybS5cbiAqIC0gYGZvcm1BY3Rpb25gIGNhbiBvbmx5IGJlIFwiZWRpdFwiLCBcImNsb25lXCIgb3IgXCJjcmVhdGVcIi5cbiAqIC0gSWYgYWN0aW9uIGlzIFwiZWRpdFwiIG9yIFwiY2xvbmVcIiwgYGZvcm1BY3Rpb25gIHdpbGwgYmUgdGhlIHNhbWUgYXMgYWN0aW9uLlxuICogLSBTYW1lIGFzIGBpZGAsIGlmIHBhc3NlZCByZXNvdXJjZSBpcyBkaWZmZXJlbnQgZnJvbSBpbmZlcnJlZCByZXNvdXJjZSwgYGZvcm1BY3Rpb25gIHdpbGwgZmFsbGJhY2sgdG8gXCJjcmVhdGVcIiBhbmQgaWdub3JlIHRoZSBhY3Rpb24gZnJvbSB0aGUgcm91dGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZXNvdXJjZVBhcmFtcyhwcm9wcz86IFByb3BzKTogUmVzb3VyY2VQYXJhbXMge1xuICBjb25zdCB7IHNlbGVjdCwgaWRlbnRpZmllcjogaW5mZXJyZWRJZGVudGlmaWVyIH0gPSB1c2VSZXNvdXJjZSgpO1xuICBjb25zdCByZXNvdXJjZVRvQ2hlY2sgPSBwcm9wcz8ucmVzb3VyY2UgPz8gaW5mZXJyZWRJZGVudGlmaWVyO1xuICBjb25zdCB7IGlkZW50aWZpZXIgPSB1bmRlZmluZWQsIHJlc291cmNlID0gdW5kZWZpbmVkIH0gPSByZXNvdXJjZVRvQ2hlY2tcbiAgICA/IHNlbGVjdChyZXNvdXJjZVRvQ2hlY2ssIHRydWUpXG4gICAgOiB7fTtcblxuICBjb25zdCBpc1NhbWVSZXNvdXJjZSA9IGluZmVycmVkSWRlbnRpZmllciA9PT0gaWRlbnRpZmllcjtcbiAgY29uc3QgaW5mZXJyZWRJZCA9IHVzZUlkKCk7XG4gIGNvbnN0IGFjdGlvbiA9IHVzZUFjdGlvbihwcm9wcz8uYWN0aW9uKTtcblxuICBjb25zdCBkZWZhdWx0SWQgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoIWlzU2FtZVJlc291cmNlKSByZXR1cm4gcHJvcHM/LmlkO1xuXG4gICAgcmV0dXJuIHByb3BzPy5pZCA/PyBpbmZlcnJlZElkO1xuICB9LCBbaXNTYW1lUmVzb3VyY2UsIHByb3BzPy5pZCwgaW5mZXJyZWRJZF0pO1xuXG4gIGNvbnN0IFtpZCwgc2V0SWRdID0gUmVhY3QudXNlU3RhdGU8QmFzZUtleSB8IHVuZGVmaW5lZD4oZGVmYXVsdElkKTtcblxuICBSZWFjdC51c2VNZW1vKCgpID0+IHNldElkKGRlZmF1bHRJZCksIFtkZWZhdWx0SWRdKTtcblxuICBjb25zdCBmb3JtQWN0aW9uID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFpc1NhbWVSZXNvdXJjZSAmJiAhcHJvcHM/LmFjdGlvbikge1xuICAgICAgcmV0dXJuIFwiY3JlYXRlXCI7XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvbiA9PT0gXCJlZGl0XCIgfHwgYWN0aW9uID09PSBcImNsb25lXCIpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiY3JlYXRlXCI7XG4gIH0sIFthY3Rpb24sIGlzU2FtZVJlc291cmNlLCBwcm9wcz8uYWN0aW9uXSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpZCxcbiAgICBzZXRJZCxcbiAgICByZXNvdXJjZSxcbiAgICBhY3Rpb24sXG4gICAgaWRlbnRpZmllcixcbiAgICBmb3JtQWN0aW9uLFxuICB9O1xufVxuIiwiaW1wb3J0IHsgdXNlUGFyc2VkIH0gZnJvbSBcIi4uLy4uL3JvdXRlci91c2UtcGFyc2VkXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJDb250ZXh0IH0gZnJvbSBcIi4uLy4uL2xlZ2FjeS1yb3V0ZXIvdXNlUm91dGVyQ29udGV4dFwiO1xuaW1wb3J0IHR5cGUgeyBCYXNlS2V5IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB7IHVzZVJvdXRlclR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcm91dGVyL3BpY2tlclwiO1xuaW1wb3J0IHR5cGUgeyBSZXNvdXJjZVJvdXRlclBhcmFtcyB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvbGVnYWN5L3R5cGVzXCI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaWQgZnJvbSB0aGUgcm91dGVyIHJlZ2FyZGxlc3Mgb2YgdGhlIHJvdXRlciB0eXBlLlxuICogSW4gbGVnYWN5IHJvdXRlcnMsIGB1c2VQYXJzZWRgIHdvbid0IHdvcmsgYW5kIGluIHRoZSBuZXcgcm91dGVyIGJpbmRpbmdzLCBgdXNlUGFyYW1zYCB3b24ndCB3b3JrLlxuICogVG8gbWFrZSBpdCBlYXNpZXIgdG8gZ2V0IHRoZSBpZCBmcm9tIHRoZSByb3V0ZXIsIHRoaXMgaG9vayBjYW4gYmUgdXNlZC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGlmIGFuIGlkIGlzIHByb3ZpZGVkIGFzIGEgcGFyYW1ldGVyLCBpdCB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGUgaW5mZXJyZWQgaWQuXG4gKlxuICogQGludGVybmFsIHVzYWdlIG9ubHlcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUlkID0gKGlkPzogQmFzZUtleSkgPT4ge1xuICBjb25zdCByb3V0ZXJUeXBlID0gdXNlUm91dGVyVHlwZSgpO1xuICBjb25zdCB7IHVzZVBhcmFtcyB9ID0gdXNlUm91dGVyQ29udGV4dCgpO1xuXG4gIGNvbnN0IHBhcnNlZCA9IHVzZVBhcnNlZCgpO1xuICBjb25zdCBsZWdhY3lQYXJhbXMgPSB1c2VQYXJhbXM8UGFydGlhbDxSZXNvdXJjZVJvdXRlclBhcmFtcz4+KCk7XG5cbiAgY29uc3QgaW5mZXJyZWRJZCA9IHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIgPyBsZWdhY3lQYXJhbXMuaWQgOiBwYXJzZWQuaWQ7XG5cbiAgcmV0dXJuIGlkID8/IGluZmVycmVkSWQ7XG59O1xuIiwiaW1wb3J0IHsgdXNlUGFyc2VkIH0gZnJvbSBcIi4uLy4uL3JvdXRlci91c2UtcGFyc2VkXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJDb250ZXh0IH0gZnJvbSBcIi4uLy4uL2xlZ2FjeS1yb3V0ZXIvdXNlUm91dGVyQ29udGV4dFwiO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24gfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcm91dGVyL3R5cGVzXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci9waWNrZXJcIjtcbmltcG9ydCB0eXBlIHsgUmVzb3VyY2VSb3V0ZXJQYXJhbXMgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcm91dGVyL2xlZ2FjeS90eXBlc1wiO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGlvbiBmcm9tIHRoZSByb3V0ZXIgcmVnYXJkbGVzcyBvZiB0aGUgcm91dGVyIHR5cGUuXG4gKiBJbiBsZWdhY3kgcm91dGVycywgYHVzZVBhcnNlZGAgd29uJ3Qgd29yayBhbmQgaW4gdGhlIG5ldyByb3V0ZXIgYmluZGluZ3MsIGB1c2VQYXJhbXNgIHdvbid0IHdvcmsuXG4gKiBUbyBtYWtlIGl0IGVhc2llciB0byBnZXQgdGhlIGFjdGlvbiBmcm9tIHRoZSByb3V0ZXIsIHRoaXMgaG9vayBjYW4gYmUgdXNlZC5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGlmIGFuIGFjdGlvbiBpcyBwcm92aWRlZCBhcyBhIHBhcmFtZXRlciwgaXQgd2lsbCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGluZmVycmVkIGFjdGlvbi5cbiAqXG4gKiBAaW50ZXJuYWwgdXNhZ2Ugb25seVxuICovXG5leHBvcnQgY29uc3QgdXNlQWN0aW9uID0gKGFjdGlvbj86IEFjdGlvbikgPT4ge1xuICBjb25zdCByb3V0ZXJUeXBlID0gdXNlUm91dGVyVHlwZSgpO1xuICBjb25zdCB7IHVzZVBhcmFtcyB9ID0gdXNlUm91dGVyQ29udGV4dCgpO1xuXG4gIGNvbnN0IHBhcnNlZCA9IHVzZVBhcnNlZCgpO1xuICBjb25zdCBsZWdhY3lQYXJhbXMgPSB1c2VQYXJhbXM8UGFydGlhbDxSZXNvdXJjZVJvdXRlclBhcmFtcz4+KCk7XG5cbiAgY29uc3QgaW5mZXJyZWRBY3Rpb24gPVxuICAgIHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIgPyBsZWdhY3lQYXJhbXMuYWN0aW9uIDogcGFyc2VkLmFjdGlvbjtcblxuICByZXR1cm4gYWN0aW9uID8/IGluZmVycmVkQWN0aW9uO1xufTtcbiIsImltcG9ydCB7IHVzZVJlZmluZU9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vdXNlLXJlZmluZS1vcHRpb25zXCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGUgfSBmcm9tIFwiLi4vLi4vaTE4blwiO1xuXG5leHBvcnQgdHlwZSBBY3Rpb25hYmxlQnV0dG9uUHJvcHMgPSB7XG4gIHR5cGU6IFwic2F2ZVwiIHwgXCJleHBvcnRcIiB8IFwiaW1wb3J0XCI7XG59O1xuXG5leHBvcnQgdHlwZSBBY3Rpb25hYmxlQnV0dG9uVmFsdWVzID0ge1xuICBsYWJlbDogc3RyaW5nO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFjdGlvbmFibGVCdXR0b24oe1xuICB0eXBlLFxufTogQWN0aW9uYWJsZUJ1dHRvblByb3BzKTogQWN0aW9uYWJsZUJ1dHRvblZhbHVlcyB7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuICBjb25zdCB7XG4gICAgdGV4dFRyYW5zZm9ybWVyczogeyBodW1hbml6ZSB9LFxuICB9ID0gdXNlUmVmaW5lT3B0aW9ucygpO1xuXG4gIGNvbnN0IGtleSA9IGBidXR0b25zLiR7dHlwZX1gO1xuICBjb25zdCBmYWxsYmFjayA9IGh1bWFuaXplKHR5cGUpO1xuXG4gIGNvbnN0IGxhYmVsID0gdHJhbnNsYXRlKGtleSwgZmFsbGJhY2spO1xuXG4gIHJldHVybiB7IGxhYmVsIH07XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IHVzZVVzZXJGcmllbmRseU5hbWUgfSBmcm9tIFwiLi4vLi4vLi4vZGVmaW5pdGlvbnMvaGVscGVycy91c2VVc2VyRnJpZW5kbHlOYW1lXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci9waWNrZXJcIjtcbmltcG9ydCB7IHVzZVJlc291cmNlUGFyYW1zIH0gZnJvbSBcIi4uLy4uL3VzZS1yZXNvdXJjZS1wYXJhbXNcIjtcbmltcG9ydCB7IHVzZVJlZmluZU9wdGlvbnMgfSBmcm9tIFwiLi4vLi4vdXNlLXJlZmluZS1vcHRpb25zXCI7XG5pbXBvcnQgeyB1c2VCdXR0b25DYW5BY2Nlc3MgfSBmcm9tIFwiLi4vYnV0dG9uLWNhbi1hY2Nlc3NcIjtcbmltcG9ydCB7IHVzZVJvdXRlckNvbnRleHQgfSBmcm9tIFwiLi4vLi4vbGVnYWN5LXJvdXRlclwiO1xuaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gXCIuLi8uLi9uYXZpZ2F0aW9uXCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGUgfSBmcm9tIFwiLi4vLi4vaTE4blwiO1xuaW1wb3J0IHsgdXNlTGluayB9IGZyb20gXCIuLi8uLi9yb3V0ZXJcIjtcblxuaW1wb3J0IHR5cGUgeyBCYXNlS2V5IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBDYW5SZXR1cm5UeXBlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2FjY2Vzc0NvbnRyb2wvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgTmF2aWdhdGlvbkJ1dHRvblByb3BzID0ge1xuICBhY3Rpb246IEFjdGlvbjtcbiAgaWQ/OiBCYXNlS2V5O1xuICByZXNvdXJjZT86IHN0cmluZztcbiAgbWV0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBhY2Nlc3NDb250cm9sPzoge1xuICAgIGVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGhpZGVJZlVuYXV0aG9yaXplZD86IGJvb2xlYW47XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBOYXZpZ2F0aW9uQnV0dG9uVmFsdWVzID0ge1xuICB0bzogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xuICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgdGl0bGU6IHN0cmluZztcbiAgaGlkZGVuOiBib29sZWFuO1xuICBjYW5BY2Nlc3M6IENhblJldHVyblR5cGUgfCB1bmRlZmluZWQ7XG4gIExpbmtDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8XG4gICAgUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48e1xuICAgICAgW3Byb3A6IHN0cmluZ106IGFueTtcbiAgICAgIHRvOiBzdHJpbmc7XG4gICAgfT5cbiAgPjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VOYXZpZ2F0aW9uQnV0dG9uKFxuICBwcm9wczogTmF2aWdhdGlvbkJ1dHRvblByb3BzLFxuKTogTmF2aWdhdGlvbkJ1dHRvblZhbHVlcyB7XG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG4gIGNvbnN0IExpbmsgPSB1c2VMaW5rKCk7XG4gIGNvbnN0IHsgTGluazogTGVnYWN5TGluayB9ID0gdXNlUm91dGVyQ29udGV4dCgpO1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgZ2V0VXNlckZyaWVuZGx5TmFtZSA9IHVzZVVzZXJGcmllbmRseU5hbWUoKTtcbiAgY29uc3Qge1xuICAgIHRleHRUcmFuc2Zvcm1lcnM6IHsgaHVtYW5pemUgfSxcbiAgfSA9IHVzZVJlZmluZU9wdGlvbnMoKTtcblxuICBjb25zdCB7IGlkLCByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gdXNlUmVzb3VyY2VQYXJhbXMoe1xuICAgIHJlc291cmNlOiBwcm9wcy5yZXNvdXJjZSxcbiAgICBpZDogcHJvcHMuYWN0aW9uID09PSBcImNyZWF0ZVwiID8gdW5kZWZpbmVkIDogcHJvcHMuaWQsXG4gIH0pO1xuXG4gIGNvbnN0IHsgY2FuQWNjZXNzLCB0aXRsZSwgaGlkZGVuLCBkaXNhYmxlZCB9ID0gdXNlQnV0dG9uQ2FuQWNjZXNzKHtcbiAgICBhY3Rpb246IHByb3BzLmFjdGlvbixcbiAgICBhY2Nlc3NDb250cm9sOiBwcm9wcy5hY2Nlc3NDb250cm9sLFxuICAgIGlkLFxuICAgIHJlc291cmNlLFxuICB9KTtcblxuICBjb25zdCBMaW5rQ29tcG9uZW50ID0gcm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIiA/IExlZ2FjeUxpbmsgOiBMaW5rO1xuXG4gIGNvbnN0IHRvID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKCFyZXNvdXJjZSkgcmV0dXJuIFwiXCI7XG4gICAgc3dpdGNoIChwcm9wcy5hY3Rpb24pIHtcbiAgICAgIGNhc2UgXCJjcmVhdGVcIjpcbiAgICAgIGNhc2UgXCJsaXN0XCI6XG4gICAgICAgIHJldHVybiBuYXZpZ2F0aW9uW2Ake3Byb3BzLmFjdGlvbn1VcmxgXShyZXNvdXJjZSwgcHJvcHMubWV0YSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoIWlkKSByZXR1cm4gXCJcIjtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRpb25bYCR7cHJvcHMuYWN0aW9ufVVybGBdKHJlc291cmNlLCBpZCwgcHJvcHMubWV0YSk7XG4gICAgfVxuICB9LCBbcmVzb3VyY2UsIGlkLCBwcm9wcy5tZXRhLCBuYXZpZ2F0aW9uW2Ake3Byb3BzLmFjdGlvbn1VcmxgXV0pO1xuXG4gIGNvbnN0IGxhYmVsID1cbiAgICBwcm9wcy5hY3Rpb24gPT09IFwibGlzdFwiXG4gICAgICA/IHRyYW5zbGF0ZShcbiAgICAgICAgICBgJHtpZGVudGlmaWVyID8/IHByb3BzLnJlc291cmNlfS50aXRsZXMubGlzdGAsXG4gICAgICAgICAgZ2V0VXNlckZyaWVuZGx5TmFtZShcbiAgICAgICAgICAgIHJlc291cmNlPy5tZXRhPy5sYWJlbCA/P1xuICAgICAgICAgICAgICByZXNvdXJjZT8ubGFiZWwgPz9cbiAgICAgICAgICAgICAgaWRlbnRpZmllciA/P1xuICAgICAgICAgICAgICBwcm9wcy5yZXNvdXJjZSxcbiAgICAgICAgICAgIFwicGx1cmFsXCIsXG4gICAgICAgICAgKSxcbiAgICAgICAgKVxuICAgICAgOiB0cmFuc2xhdGUoYGJ1dHRvbnMuJHtwcm9wcy5hY3Rpb259YCwgaHVtYW5pemUocHJvcHMuYWN0aW9uKSk7XG5cbiAgcmV0dXJuIHtcbiAgICB0byxcbiAgICBsYWJlbCxcbiAgICB0aXRsZSxcbiAgICBkaXNhYmxlZCxcbiAgICBoaWRkZW4sXG4gICAgY2FuQWNjZXNzLFxuICAgIExpbmtDb21wb25lbnQsXG4gIH07XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IEFjY2Vzc0NvbnRyb2xDb250ZXh0IH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2FjY2Vzc0NvbnRyb2xcIjtcbmltcG9ydCB7IHVzZUNhbiB9IGZyb20gXCIuLi8uLi9hY2Nlc3NDb250cm9sXCI7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGUgfSBmcm9tIFwiLi4vLi4vaTE4blwiO1xuXG5pbXBvcnQgdHlwZSB7IENhblJldHVyblR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvYWNjZXNzQ29udHJvbC90eXBlc1wiO1xuaW1wb3J0IHR5cGUgeyBJUmVzb3VyY2VJdGVtIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Jlc291cmNlL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IEFjdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQmFzZUtleSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5cbnR5cGUgQnV0dG9uQ2FuQWNjZXNzUHJvcHMgPSB7XG4gIGFjdGlvbjogQWN0aW9uIHwgXCJkZWxldGVcIjtcbiAgcmVzb3VyY2U/OiBJUmVzb3VyY2VJdGVtO1xuICBpZD86IEJhc2VLZXk7XG4gIGFjY2Vzc0NvbnRyb2w/OiB7XG4gICAgZW5hYmxlZD86IGJvb2xlYW47XG4gICAgaGlkZUlmVW5hdXRob3JpemVkPzogYm9vbGVhbjtcbiAgfTtcbn07XG5cbnR5cGUgQnV0dG9uQ2FuQWNjZXNzVmFsdWVzID0ge1xuICB0aXRsZTogc3RyaW5nO1xuICBoaWRkZW46IGJvb2xlYW47XG4gIGRpc2FibGVkOiBib29sZWFuO1xuICBjYW5BY2Nlc3M6IENhblJldHVyblR5cGUgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlQnV0dG9uQ2FuQWNjZXNzID0gKFxuICBwcm9wczogQnV0dG9uQ2FuQWNjZXNzUHJvcHMsXG4pOiBCdXR0b25DYW5BY2Nlc3NWYWx1ZXMgPT4ge1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgYWNjZXNzQ29udHJvbENvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KEFjY2Vzc0NvbnRyb2xDb250ZXh0KTtcblxuICBjb25zdCBhY2Nlc3NDb250cm9sRW5hYmxlZCA9XG4gICAgcHJvcHMuYWNjZXNzQ29udHJvbD8uZW5hYmxlZCA/P1xuICAgIGFjY2Vzc0NvbnRyb2xDb250ZXh0Lm9wdGlvbnMuYnV0dG9ucy5lbmFibGVBY2Nlc3NDb250cm9sO1xuXG4gIGNvbnN0IGhpZGVJZlVuYXV0aG9yaXplZCA9XG4gICAgcHJvcHMuYWNjZXNzQ29udHJvbD8uaGlkZUlmVW5hdXRob3JpemVkID8/XG4gICAgYWNjZXNzQ29udHJvbENvbnRleHQub3B0aW9ucy5idXR0b25zLmhpZGVJZlVuYXV0aG9yaXplZDtcblxuICBjb25zdCB7IGRhdGE6IGNhbkFjY2VzcyB9ID0gdXNlQ2FuKHtcbiAgICByZXNvdXJjZTogcHJvcHMucmVzb3VyY2U/Lm5hbWUsXG4gICAgYWN0aW9uOiBwcm9wcy5hY3Rpb24gPT09IFwiY2xvbmVcIiA/IFwiY3JlYXRlXCIgOiBwcm9wcy5hY3Rpb24sXG4gICAgcGFyYW1zOiB7IGlkOiBwcm9wcy5pZCwgcmVzb3VyY2U6IHByb3BzLnJlc291cmNlIH0sXG4gICAgcXVlcnlPcHRpb25zOiB7XG4gICAgICBlbmFibGVkOiBhY2Nlc3NDb250cm9sRW5hYmxlZCxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCB0aXRsZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChjYW5BY2Nlc3M/LmNhbikgcmV0dXJuIFwiXCI7XG4gICAgaWYgKGNhbkFjY2Vzcz8ucmVhc29uKSByZXR1cm4gY2FuQWNjZXNzLnJlYXNvbjtcblxuICAgIHJldHVybiB0cmFuc2xhdGUoXG4gICAgICBcImJ1dHRvbnMubm90QWNjZXNzVGl0bGVcIixcbiAgICAgIFwiWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3NcIixcbiAgICApO1xuICB9LCBbY2FuQWNjZXNzPy5jYW4sIGNhbkFjY2Vzcz8ucmVhc29uLCB0cmFuc2xhdGVdKTtcblxuICBjb25zdCBoaWRkZW4gPSBhY2Nlc3NDb250cm9sRW5hYmxlZCAmJiBoaWRlSWZVbmF1dGhvcml6ZWQgJiYgIWNhbkFjY2Vzcz8uY2FuO1xuXG4gIGNvbnN0IGRpc2FibGVkID0gY2FuQWNjZXNzPy5jYW4gPT09IGZhbHNlO1xuXG4gIHJldHVybiB7XG4gICAgdGl0bGUsXG4gICAgaGlkZGVuLFxuICAgIGRpc2FibGVkLFxuICAgIGNhbkFjY2VzcyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyB1c2VUcmFuc2xhdGUgfSBmcm9tIFwiLi4vLi4vaTE4blwiO1xuaW1wb3J0IHsgdXNlRGVsZXRlIH0gZnJvbSBcIi4uLy4uL2RhdGEvdXNlRGVsZXRlXCI7XG5pbXBvcnQgeyB1c2VCdXR0b25DYW5BY2Nlc3MgfSBmcm9tIFwiLi4vYnV0dG9uLWNhbi1hY2Nlc3NcIjtcbmltcG9ydCB7IHVzZVJlc291cmNlUGFyYW1zIH0gZnJvbSBcIi4uLy4uL3VzZS1yZXNvdXJjZS1wYXJhbXNcIjtcbmltcG9ydCB7IHVzZU11dGF0aW9uTW9kZSwgdXNlV2FybkFib3V0Q2hhbmdlIH0gZnJvbSBcIi4uLy4uL3JlZmluZVwiO1xuXG5pbXBvcnQgdHlwZSB7IEJhc2VLZXksIERlbGV0ZU9uZVJlc3BvbnNlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQ2FuUmV0dXJuVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9hY2Nlc3NDb250cm9sL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IERlbGV0ZVBhcmFtcyB9IGZyb20gXCIuLi8uLi9kYXRhL3VzZURlbGV0ZVwiO1xuXG5leHBvcnQgdHlwZSBEZWxldGVCdXR0b25Qcm9wcyA9IHtcbiAgcmVzb3VyY2U/OiBzdHJpbmc7XG4gIGlkPzogQmFzZUtleTtcbiAgZGF0YVByb3ZpZGVyTmFtZT86IHN0cmluZztcbiAgbWV0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICBhY2Nlc3NDb250cm9sPzoge1xuICAgIGVuYWJsZWQ/OiBib29sZWFuO1xuICAgIGhpZGVJZlVuYXV0aG9yaXplZD86IGJvb2xlYW47XG4gIH07XG4gIG9uU3VjY2Vzcz86ICh2YWx1ZTogRGVsZXRlT25lUmVzcG9uc2UpID0+IHZvaWQ7XG59ICYgUGljazxcbiAgRGVsZXRlUGFyYW1zPGFueSwgYW55LCBhbnk+LFxuICBcIm11dGF0aW9uTW9kZVwiIHwgXCJzdWNjZXNzTm90aWZpY2F0aW9uXCIgfCBcImVycm9yTm90aWZpY2F0aW9uXCIgfCBcImludmFsaWRhdGVzXCJcbj47XG5cbmV4cG9ydCB0eXBlIERlbGV0ZUJ1dHRvblZhbHVlcyA9IHtcbiAgbGFiZWw6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgaGlkZGVuOiBib29sZWFuO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgY2FuQWNjZXNzOiBDYW5SZXR1cm5UeXBlIHwgdW5kZWZpbmVkO1xuICBjb25maXJtT2tMYWJlbDogc3RyaW5nO1xuICBjYW5jZWxMYWJlbDogc3RyaW5nO1xuICBjb25maXJtVGl0bGU6IHN0cmluZztcbiAgb25Db25maXJtOiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZURlbGV0ZUJ1dHRvbihwcm9wczogRGVsZXRlQnV0dG9uUHJvcHMpOiBEZWxldGVCdXR0b25WYWx1ZXMge1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgeyBtdXRhdGUsIGlzTG9hZGluZywgdmFyaWFibGVzIH0gPSB1c2VEZWxldGUoKTtcbiAgY29uc3QgeyBzZXRXYXJuV2hlbiB9ID0gdXNlV2FybkFib3V0Q2hhbmdlKCk7XG4gIGNvbnN0IHsgbXV0YXRpb25Nb2RlIH0gPSB1c2VNdXRhdGlvbk1vZGUocHJvcHMubXV0YXRpb25Nb2RlKTtcblxuICBjb25zdCB7IGlkLCByZXNvdXJjZSwgaWRlbnRpZmllciB9ID0gdXNlUmVzb3VyY2VQYXJhbXMoe1xuICAgIHJlc291cmNlOiBwcm9wcy5yZXNvdXJjZSxcbiAgICBpZDogcHJvcHMuaWQsXG4gIH0pO1xuXG4gIGNvbnN0IHsgdGl0bGUsIGRpc2FibGVkLCBoaWRkZW4sIGNhbkFjY2VzcyB9ID0gdXNlQnV0dG9uQ2FuQWNjZXNzKHtcbiAgICBhY3Rpb246IFwiZGVsZXRlXCIsXG4gICAgYWNjZXNzQ29udHJvbDogcHJvcHMuYWNjZXNzQ29udHJvbCxcbiAgICBpZCxcbiAgICByZXNvdXJjZSxcbiAgfSk7XG5cbiAgY29uc3QgbGFiZWwgPSB0cmFuc2xhdGUoXCJidXR0b25zLmRlbGV0ZVwiLCBcIkRlbGV0ZVwiKTtcblxuICBjb25zdCBjb25maXJtT2tMYWJlbCA9IHRyYW5zbGF0ZShcImJ1dHRvbnMuZGVsZXRlXCIsIFwiRGVsZXRlXCIpO1xuXG4gIGNvbnN0IGNvbmZpcm1UaXRsZSA9IHRyYW5zbGF0ZShcImJ1dHRvbnMuY29uZmlybVwiLCBcIkFyZSB5b3Ugc3VyZT9cIik7XG5cbiAgY29uc3QgY2FuY2VsTGFiZWwgPSB0cmFuc2xhdGUoXCJidXR0b25zLmNhbmNlbFwiLCBcIkNhbmNlbFwiKTtcblxuICBjb25zdCBsb2FkaW5nID0gaWQgPT09IHZhcmlhYmxlcz8uaWQgJiYgaXNMb2FkaW5nO1xuXG4gIGNvbnN0IG9uQ29uZmlybSA9ICgpID0+IHtcbiAgICBpZiAoaWQgJiYgaWRlbnRpZmllcikge1xuICAgICAgc2V0V2FybldoZW4oZmFsc2UpO1xuICAgICAgbXV0YXRlKFxuICAgICAgICB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgcmVzb3VyY2U6IGlkZW50aWZpZXIsXG4gICAgICAgICAgbXV0YXRpb25Nb2RlLFxuICAgICAgICAgIHN1Y2Nlc3NOb3RpZmljYXRpb246IHByb3BzLnN1Y2Nlc3NOb3RpZmljYXRpb24sXG4gICAgICAgICAgZXJyb3JOb3RpZmljYXRpb246IHByb3BzLmVycm9yTm90aWZpY2F0aW9uLFxuICAgICAgICAgIG1ldGE6IHByb3BzLm1ldGEsXG4gICAgICAgICAgbWV0YURhdGE6IHByb3BzLm1ldGEsXG4gICAgICAgICAgZGF0YVByb3ZpZGVyTmFtZTogcHJvcHMuZGF0YVByb3ZpZGVyTmFtZSxcbiAgICAgICAgICBpbnZhbGlkYXRlczogcHJvcHMuaW52YWxpZGF0ZXMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBvblN1Y2Nlc3M6IHByb3BzLm9uU3VjY2VzcyxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbGFiZWwsXG4gICAgdGl0bGUsXG4gICAgaGlkZGVuLFxuICAgIGRpc2FibGVkLFxuICAgIGNhbkFjY2VzcyxcbiAgICBsb2FkaW5nLFxuICAgIGNvbmZpcm1Pa0xhYmVsLFxuICAgIGNhbmNlbExhYmVsLFxuICAgIGNvbmZpcm1UaXRsZSxcbiAgICBvbkNvbmZpcm0sXG4gIH07XG59XG4iLCJpbXBvcnQgeyB1c2VRdWVyeUNsaWVudCB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgdXNlVHJhbnNsYXRlIH0gZnJvbSBcIi4uLy4uL2kxOG5cIjtcbmltcG9ydCB7IHVzZUludmFsaWRhdGUgfSBmcm9tIFwiLi4vLi4vaW52YWxpZGF0ZVwiO1xuaW1wb3J0IHsgdXNlUmVzb3VyY2VQYXJhbXMgfSBmcm9tIFwiLi4vLi4vdXNlLXJlc291cmNlLXBhcmFtc1wiO1xuaW1wb3J0IHsgdXNlUmVzb3VyY2UgfSBmcm9tIFwiLi4vLi4vcmVzb3VyY2VcIjtcbmltcG9ydCB7IHVzZUtleXMgfSBmcm9tIFwiLi4vLi4vdXNlS2V5c1wiO1xuaW1wb3J0IHsgcGlja0RhdGFQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9kZWZpbml0aW9uc1wiO1xuXG5pbXBvcnQgdHlwZSB7IEJhc2VLZXkgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvZGF0YS90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBSZWZyZXNoQnV0dG9uUHJvcHMgPSB7XG4gIHJlc291cmNlPzogc3RyaW5nO1xuICBpZD86IEJhc2VLZXk7XG4gIGRhdGFQcm92aWRlck5hbWU/OiBzdHJpbmc7XG4gIG1ldGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbn07XG5cbmV4cG9ydCB0eXBlIFJlZnJlc2hCdXR0b25WYWx1ZXMgPSB7XG4gIG9uQ2xpY2s6ICgpID0+IHZvaWQ7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGxvYWRpbmc6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVmcmVzaEJ1dHRvbihcbiAgcHJvcHM6IFJlZnJlc2hCdXR0b25Qcm9wcyxcbik6IFJlZnJlc2hCdXR0b25WYWx1ZXMge1xuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcbiAgY29uc3QgeyBrZXlzLCBwcmVmZXJMZWdhY3lLZXlzIH0gPSB1c2VLZXlzKCk7XG5cbiAgY29uc3QgcXVlcnlDbGllbnQgPSB1c2VRdWVyeUNsaWVudCgpO1xuICBjb25zdCBpbnZhbGlkYXRlcyA9IHVzZUludmFsaWRhdGUoKTtcblxuICBjb25zdCB7IGlkZW50aWZpZXIsIGlkIH0gPSB1c2VSZXNvdXJjZVBhcmFtcyh7XG4gICAgcmVzb3VyY2U6IHByb3BzLnJlc291cmNlLFxuICAgIGlkOiBwcm9wcy5pZCxcbiAgfSk7XG5cbiAgY29uc3QgeyByZXNvdXJjZXMgfSA9IHVzZVJlc291cmNlKCk7XG5cbiAgY29uc3QgbG9hZGluZyA9ICEhcXVlcnlDbGllbnQuaXNGZXRjaGluZyh7XG4gICAgcXVlcnlLZXk6IGtleXMoKVxuICAgICAgLmRhdGEocGlja0RhdGFQcm92aWRlcihpZGVudGlmaWVyLCBwcm9wcy5kYXRhUHJvdmlkZXJOYW1lLCByZXNvdXJjZXMpKVxuICAgICAgLnJlc291cmNlKGlkZW50aWZpZXIpXG4gICAgICAuYWN0aW9uKFwib25lXCIpXG4gICAgICAuZ2V0KHByZWZlckxlZ2FjeUtleXMpLFxuICB9KTtcblxuICBjb25zdCBvbkNsaWNrID0gKCkgPT4ge1xuICAgIGludmFsaWRhdGVzKHtcbiAgICAgIGlkLFxuICAgICAgaW52YWxpZGF0ZXM6IFtcImRldGFpbFwiXSxcbiAgICAgIGRhdGFQcm92aWRlck5hbWU6IHByb3BzLmRhdGFQcm92aWRlck5hbWUsXG4gICAgICByZXNvdXJjZTogaWRlbnRpZmllcixcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBsYWJlbCA9IHRyYW5zbGF0ZShcImJ1dHRvbnMucmVmcmVzaFwiLCBcIlJlZnJlc2hcIik7XG5cbiAgcmV0dXJuIHtcbiAgICBvbkNsaWNrLFxuICAgIGxhYmVsLFxuICAgIGxvYWRpbmcsXG4gIH07XG59XG4iLCJpbXBvcnQgeyB1c2VBY3Rpb25hYmxlQnV0dG9uIH0gZnJvbSBcIi4vYWN0aW9uYWJsZS1idXR0b25cIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRpb25CdXR0b24gfSBmcm9tIFwiLi9uYXZpZ2F0aW9uLWJ1dHRvblwiO1xuXG5pbXBvcnQgdHlwZSB7IE5hdmlnYXRpb25CdXR0b25Qcm9wcyB9IGZyb20gXCIuL25hdmlnYXRpb24tYnV0dG9uXCI7XG5pbXBvcnQgdHlwZSB7IFByZXR0aWZ5IH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcblxuZXhwb3J0IHsgdXNlRGVsZXRlQnV0dG9uIH0gZnJvbSBcIi4vZGVsZXRlLWJ1dHRvblwiO1xuXG5leHBvcnQgeyB1c2VSZWZyZXNoQnV0dG9uIH0gZnJvbSBcIi4vcmVmcmVzaC1idXR0b25cIjtcblxuZXhwb3J0IGNvbnN0IHVzZVNob3dCdXR0b24gPSAoXG4gIHByb3BzOiBQcmV0dGlmeTxPbWl0PE5hdmlnYXRpb25CdXR0b25Qcm9wcywgXCJhY3Rpb25cIj4+LFxuKSA9PiB1c2VOYXZpZ2F0aW9uQnV0dG9uKHsgLi4ucHJvcHMsIGFjdGlvbjogXCJzaG93XCIgfSk7XG5cbmV4cG9ydCBjb25zdCB1c2VFZGl0QnV0dG9uID0gKFxuICBwcm9wczogUHJldHRpZnk8T21pdDxOYXZpZ2F0aW9uQnV0dG9uUHJvcHMsIFwiYWN0aW9uXCI+PixcbikgPT4gdXNlTmF2aWdhdGlvbkJ1dHRvbih7IC4uLnByb3BzLCBhY3Rpb246IFwiZWRpdFwiIH0pO1xuXG5leHBvcnQgY29uc3QgdXNlQ2xvbmVCdXR0b24gPSAoXG4gIHByb3BzOiBQcmV0dGlmeTxPbWl0PE5hdmlnYXRpb25CdXR0b25Qcm9wcywgXCJhY3Rpb25cIj4+LFxuKSA9PiB1c2VOYXZpZ2F0aW9uQnV0dG9uKHsgLi4ucHJvcHMsIGFjdGlvbjogXCJjbG9uZVwiIH0pO1xuXG5leHBvcnQgY29uc3QgdXNlQ3JlYXRlQnV0dG9uID0gKFxuICBwcm9wczogUHJldHRpZnk8T21pdDxOYXZpZ2F0aW9uQnV0dG9uUHJvcHMsIFwiYWN0aW9uXCIgfCBcImlkXCI+PixcbikgPT4gdXNlTmF2aWdhdGlvbkJ1dHRvbih7IC4uLnByb3BzLCBhY3Rpb246IFwiY3JlYXRlXCIgfSk7XG5cbmV4cG9ydCBjb25zdCB1c2VMaXN0QnV0dG9uID0gKFxuICBwcm9wczogUHJldHRpZnk8T21pdDxOYXZpZ2F0aW9uQnV0dG9uUHJvcHMsIFwiYWN0aW9uXCIgfCBcImlkXCI+PixcbikgPT4gdXNlTmF2aWdhdGlvbkJ1dHRvbih7IC4uLnByb3BzLCBhY3Rpb246IFwibGlzdFwiIH0pO1xuXG5leHBvcnQgY29uc3QgdXNlU2F2ZUJ1dHRvbiA9ICgpID0+IHVzZUFjdGlvbmFibGVCdXR0b24oeyB0eXBlOiBcInNhdmVcIiB9KTtcblxuZXhwb3J0IGNvbnN0IHVzZUV4cG9ydEJ1dHRvbiA9ICgpID0+IHVzZUFjdGlvbmFibGVCdXR0b24oeyB0eXBlOiBcImV4cG9ydFwiIH0pO1xuXG5leHBvcnQgY29uc3QgdXNlSW1wb3J0QnV0dG9uID0gKCkgPT4gdXNlQWN0aW9uYWJsZUJ1dHRvbih7IHR5cGU6IFwiaW1wb3J0XCIgfSk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlTG9naW4sIHVzZVRyYW5zbGF0ZSB9IGZyb20gXCJAaG9va3NcIjtcbmltcG9ydCB7IHVzZUFjdGl2ZUF1dGhQcm92aWRlciB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaGVscGVyc1wiO1xuZXhwb3J0IGludGVyZmFjZSBJTG9naW5Gb3JtIHtcbiAgdXNlcm5hbWU6IHN0cmluZztcbiAgcGFzc3dvcmQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBMb2dpblBhZ2UgaXMgZGVwcmVjYXRlZC4gVXNlIEF1dGhQYWdlIGluc3RlYWQuIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2NvcmUvY29tcG9uZW50cy9hdXRoLXBhZ2V9IGZvciBtb3JlIGRldGFpbHMuXG4gKiAqKnJlZmluZSoqIGhhcyBhIGRlZmF1bHQgbG9naW4gcGFnZSBmb3JtIHdoaWNoIGlzIHNlcnZlZCBvbiBgL2xvZ2luYCByb3V0ZSB3aGVuIHRoZSBgYXV0aFByb3ZpZGVyYCBjb25maWd1cmF0aW9uIGlzIHByb3ZpZGVkLlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9jb21wb25lbnRzL3JlZmluZS1jb25maWcvI2xvZ2lucGFnZX0gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNvbnN0IExvZ2luUGFnZTogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IFt1c2VybmFtZSwgc2V0VXNlcm5hbWVdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG5cbiAgY29uc3QgYXV0aFByb3ZpZGVyID0gdXNlQWN0aXZlQXV0aFByb3ZpZGVyKCk7XG4gIGNvbnN0IHsgbXV0YXRlOiBsb2dpbiB9ID0gdXNlTG9naW48SUxvZ2luRm9ybT4oe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbihhdXRoUHJvdmlkZXI/LmlzTGVnYWN5KSxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGgxPnt0cmFuc2xhdGUoXCJwYWdlcy5sb2dpbi50aXRsZVwiLCBcIlNpZ24gaW4geW91ciBhY2NvdW50XCIpfTwvaDE+XG4gICAgICA8Zm9ybVxuICAgICAgICBvblN1Ym1pdD17KGUpID0+IHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbG9naW4oeyB1c2VybmFtZSwgcGFzc3dvcmQgfSk7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICB7dHJhbnNsYXRlKFwicGFnZXMubG9naW4udXNlcm5hbWVcIiwgdW5kZWZpbmVkLCBcInVzZXJuYW1lXCIpfTpcbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgICAgc2l6ZT17MjB9XG4gICAgICAgICAgICAgICAgICBhdXRvQ29ycmVjdD1cIm9mZlwiXG4gICAgICAgICAgICAgICAgICBzcGVsbENoZWNrPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgIGF1dG9DYXBpdGFsaXplPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0VXNlcm5hbWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAge3RyYW5zbGF0ZShcInBhZ2VzLmxvZ2luLnBhc3N3b3JkXCIsIHVuZGVmaW5lZCwgXCJwYXNzd29yZFwiKX06XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgc2l6ZT17MjB9XG4gICAgICAgICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFBhc3N3b3JkKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8YnIgLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cImxvZ2luXCIgLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8Lz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHtcbiAgdHlwZSBEZXRhaWxlZEhUTUxQcm9wcyxcbiAgdHlwZSBIVE1MQXR0cmlidXRlcyxcbiAgdHlwZSBGb3JtSFRNTEF0dHJpYnV0ZXMsXG59IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQge1xuICBGb3Jnb3RQYXNzd29yZFBhZ2UsXG4gIExvZ2luUGFnZSxcbiAgUmVnaXN0ZXJQYWdlLFxuICBVcGRhdGVQYXNzd29yZFBhZ2UsXG59IGZyb20gXCIuL2NvbXBvbmVudHNcIjtcblxuaW1wb3J0IHR5cGUgeyBBdXRoUGFnZVByb3BzIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgRGl2UHJvcHNUeXBlID0gRGV0YWlsZWRIVE1MUHJvcHM8XG4gIEhUTUxBdHRyaWJ1dGVzPEhUTUxEaXZFbGVtZW50PixcbiAgSFRNTERpdkVsZW1lbnRcbj47XG5leHBvcnQgdHlwZSBGb3JtUHJvcHNUeXBlID0gRGV0YWlsZWRIVE1MUHJvcHM8XG4gIEZvcm1IVE1MQXR0cmlidXRlczxIVE1MRm9ybUVsZW1lbnQ+LFxuICBIVE1MRm9ybUVsZW1lbnRcbj47XG5cbmV4cG9ydCB0eXBlIEF1dGhQcm9wcyA9IEF1dGhQYWdlUHJvcHM8XG4gIERpdlByb3BzVHlwZSxcbiAgRGl2UHJvcHNUeXBlLFxuICBGb3JtUHJvcHNUeXBlXG4+O1xuXG4vKipcbiAqICoqcmVmaW5lKiogaGFzIGEgZGVmYXVsdCBhdXRoIHBhZ2UgZm9ybSB3aGljaCBpcyBzZXJ2ZWQgb24gYC9sb2dpbmAgcm91dGUgd2hlbiB0aGUgYGF1dGhQcm92aWRlcmAgY29uZmlndXJhdGlvbiBpcyBwcm92aWRlZC5cbiAqIEBwYXJhbSB0aXRsZSBpcyBub3QgaW1wbGVtZW50ZWQgeWV0LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2NvbXBvbmVudHMvYXV0aC1wYWdlL30gZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNvbnN0IEF1dGhQYWdlOiBSZWFjdC5GQzxBdXRoUHJvcHM+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgdHlwZSB9ID0gcHJvcHM7XG4gIGNvbnN0IHJlbmRlclZpZXcgPSAoKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwicmVnaXN0ZXJcIjpcbiAgICAgICAgcmV0dXJuIDxSZWdpc3RlclBhZ2Ugey4uLnByb3BzfSAvPjtcbiAgICAgIGNhc2UgXCJmb3Jnb3RQYXNzd29yZFwiOlxuICAgICAgICByZXR1cm4gPEZvcmdvdFBhc3N3b3JkUGFnZSB7Li4ucHJvcHN9IC8+O1xuICAgICAgY2FzZSBcInVwZGF0ZVBhc3N3b3JkXCI6XG4gICAgICAgIHJldHVybiA8VXBkYXRlUGFzc3dvcmRQYWdlIHsuLi5wcm9wc30gLz47XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gPExvZ2luUGFnZSB7Li4ucHJvcHN9IC8+O1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gPD57cmVuZGVyVmlldygpfTwvPjtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlQWN0aXZlQXV0aFByb3ZpZGVyIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5pbXBvcnQge1xuICB1c2VMaW5rLFxuICB1c2VMb2dpbixcbiAgdXNlUm91dGVyQ29udGV4dCxcbiAgdXNlUm91dGVyVHlwZSxcbiAgdXNlVHJhbnNsYXRlLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHsgRGl2UHJvcHNUeXBlLCBGb3JtUHJvcHNUeXBlIH0gZnJvbSBcIi4uLy4uXCI7XG5pbXBvcnQgdHlwZSB7IExvZ2luRm9ybVR5cGVzLCBMb2dpblBhZ2VQcm9wcyB9IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG50eXBlIExvZ2luUHJvcHMgPSBMb2dpblBhZ2VQcm9wczxEaXZQcm9wc1R5cGUsIERpdlByb3BzVHlwZSwgRm9ybVByb3BzVHlwZT47XG5cbmV4cG9ydCBjb25zdCBMb2dpblBhZ2U6IFJlYWN0LkZDPExvZ2luUHJvcHM+ID0gKHtcbiAgcHJvdmlkZXJzLFxuICByZWdpc3RlckxpbmssXG4gIGZvcmdvdFBhc3N3b3JkTGluayxcbiAgcmVtZW1iZXJNZSxcbiAgY29udGVudFByb3BzLFxuICB3cmFwcGVyUHJvcHMsXG4gIHJlbmRlckNvbnRlbnQsXG4gIGZvcm1Qcm9wcyxcbiAgdGl0bGUgPSB1bmRlZmluZWQsXG4gIGhpZGVGb3JtLFxuICBtdXRhdGlvblZhcmlhYmxlcyxcbn0pID0+IHtcbiAgY29uc3Qgcm91dGVyVHlwZSA9IHVzZVJvdXRlclR5cGUoKTtcbiAgY29uc3QgTGluayA9IHVzZUxpbmsoKTtcbiAgY29uc3QgeyBMaW5rOiBMZWdhY3lMaW5rIH0gPSB1c2VSb3V0ZXJDb250ZXh0KCk7XG5cbiAgY29uc3QgQWN0aXZlTGluayA9IHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIgPyBMZWdhY3lMaW5rIDogTGluaztcblxuICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbcmVtZW1iZXIsIHNldFJlbWVtYmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCB0cmFuc2xhdGUgPSB1c2VUcmFuc2xhdGUoKTtcblxuICBjb25zdCBhdXRoUHJvdmlkZXIgPSB1c2VBY3RpdmVBdXRoUHJvdmlkZXIoKTtcbiAgY29uc3QgeyBtdXRhdGU6IGxvZ2luIH0gPSB1c2VMb2dpbjxMb2dpbkZvcm1UeXBlcz4oe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbihhdXRoUHJvdmlkZXI/LmlzTGVnYWN5KSxcbiAgfSk7XG5cbiAgY29uc3QgcmVuZGVyTGluayA9IChsaW5rOiBzdHJpbmcsIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gPEFjdGl2ZUxpbmsgdG89e2xpbmt9Pnt0ZXh0fTwvQWN0aXZlTGluaz47XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyUHJvdmlkZXJzID0gKCkgPT4ge1xuICAgIGlmIChwcm92aWRlcnMpIHtcbiAgICAgIHJldHVybiBwcm92aWRlcnMubWFwKChwcm92aWRlcikgPT4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAga2V5PXtwcm92aWRlci5uYW1lfVxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIxcmVtXCIsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgIGxvZ2luKHtcbiAgICAgICAgICAgICAgICAuLi5tdXRhdGlvblZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICBwcm92aWRlck5hbWU6IHByb3ZpZGVyLm5hbWUsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb3ZpZGVyPy5pY29ufVxuICAgICAgICAgICAge3Byb3ZpZGVyLmxhYmVsID8/IDxsYWJlbD57cHJvdmlkZXIubGFiZWx9PC9sYWJlbD59XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGNvbnN0IGNvbnRlbnQgPSAoXG4gICAgPGRpdiB7Li4uY29udGVudFByb3BzfT5cbiAgICAgIDxoMSBzdHlsZT17eyB0ZXh0QWxpZ246IFwiY2VudGVyXCIgfX0+XG4gICAgICAgIHt0cmFuc2xhdGUoXCJwYWdlcy5sb2dpbi50aXRsZVwiLCBcIlNpZ24gaW4gdG8geW91ciBhY2NvdW50XCIpfVxuICAgICAgPC9oMT5cbiAgICAgIHtyZW5kZXJQcm92aWRlcnMoKX1cbiAgICAgIHshaGlkZUZvcm0gJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxociAvPlxuICAgICAgICAgIDxmb3JtXG4gICAgICAgICAgICBvblN1Ym1pdD17KGUpID0+IHtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBsb2dpbih7IC4uLm11dGF0aW9uVmFyaWFibGVzLCBlbWFpbCwgcGFzc3dvcmQsIHJlbWVtYmVyIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHsuLi5mb3JtUHJvcHN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMjUsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZW1haWwtaW5wdXRcIj5cbiAgICAgICAgICAgICAgICB7dHJhbnNsYXRlKFwicGFnZXMubG9naW4uZmllbGRzLmVtYWlsXCIsIFwiRW1haWxcIil9XG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGlkPVwiZW1haWwtaW5wdXRcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIHNpemU9ezIwfVxuICAgICAgICAgICAgICAgIGF1dG9Db3JyZWN0PVwib2ZmXCJcbiAgICAgICAgICAgICAgICBzcGVsbENoZWNrPXtmYWxzZX1cbiAgICAgICAgICAgICAgICBhdXRvQ2FwaXRhbGl6ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICB2YWx1ZT17ZW1haWx9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRFbWFpbChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc3dvcmQtaW5wdXRcIj5cbiAgICAgICAgICAgICAgICB7dHJhbnNsYXRlKFwicGFnZXMubG9naW4uZmllbGRzLnBhc3N3b3JkXCIsIFwiUGFzc3dvcmRcIil9XG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGlkPVwicGFzc3dvcmQtaW5wdXRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgIHNpemU9ezIwfVxuICAgICAgICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFBhc3N3b3JkKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge3JlbWVtYmVyTWUgPz8gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInJlbWVtYmVyLW1lLWlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgIHt0cmFuc2xhdGUoXCJwYWdlcy5sb2dpbi5idXR0b25zLnJlbWVtYmVyTWVcIiwgXCJSZW1lbWJlciBtZVwiKX1cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgaWQ9XCJyZW1lbWJlci1tZS1pbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInJlbWVtYmVyXCJcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICAgIHNpemU9ezIwfVxuICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3JlbWVtYmVyfVxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtyZW1lbWJlci50b1N0cmluZygpfVxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZW1lbWJlcighcmVtZW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAge2ZvcmdvdFBhc3N3b3JkTGluayA/P1xuICAgICAgICAgICAgICAgIHJlbmRlckxpbmsoXG4gICAgICAgICAgICAgICAgICBcIi9mb3Jnb3QtcGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgICAgICAgXCJwYWdlcy5sb2dpbi5idXR0b25zLmZvcmdvdFBhc3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiRm9yZ290IHBhc3N3b3JkP1wiLFxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dHJhbnNsYXRlKFwicGFnZXMubG9naW4uc2lnbmluXCIsIFwiU2lnbiBpblwiKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge3JlZ2lzdGVyTGluayA/PyAoXG4gICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICB7dHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICAgICBcInBhZ2VzLmxvZ2luLmJ1dHRvbnMubm9BY2NvdW50XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiRG9u4oCZdCBoYXZlIGFuIGFjY291bnQ/XCIsXG4gICAgICAgICAgICAgICAgICApfXtcIiBcIn1cbiAgICAgICAgICAgICAgICAgIHtyZW5kZXJMaW5rKFxuICAgICAgICAgICAgICAgICAgICBcIi9yZWdpc3RlclwiLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUoXCJwYWdlcy5sb2dpbi5yZWdpc3RlclwiLCBcIlNpZ24gdXBcIiksXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3JlZ2lzdGVyTGluayAhPT0gZmFsc2UgJiYgaGlkZUZvcm0gJiYgKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHRleHRBbGlnbjogXCJjZW50ZXJcIiB9fT5cbiAgICAgICAgICB7dHJhbnNsYXRlKFwicGFnZXMubG9naW4uYnV0dG9ucy5ub0FjY291bnRcIiwgXCJEb27igJl0IGhhdmUgYW4gYWNjb3VudD9cIil9e1wiIFwifVxuICAgICAgICAgIHtyZW5kZXJMaW5rKFxuICAgICAgICAgICAgXCIvcmVnaXN0ZXJcIixcbiAgICAgICAgICAgIHRyYW5zbGF0ZShcInBhZ2VzLmxvZ2luLnJlZ2lzdGVyXCIsIFwiU2lnbiB1cFwiKSxcbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi53cmFwcGVyUHJvcHN9PlxuICAgICAge3JlbmRlckNvbnRlbnQgPyByZW5kZXJDb250ZW50KGNvbnRlbnQsIHRpdGxlKSA6IGNvbnRlbnR9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7XG4gIHVzZUxpbmssXG4gIHVzZVJlZ2lzdGVyLFxuICB1c2VSb3V0ZXJDb250ZXh0LFxuICB1c2VSb3V0ZXJUeXBlLFxuICB1c2VUcmFuc2xhdGUsXG59IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHsgdXNlQWN0aXZlQXV0aFByb3ZpZGVyIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5cbmltcG9ydCB0eXBlIHsgRGl2UHJvcHNUeXBlLCBGb3JtUHJvcHNUeXBlIH0gZnJvbSBcIi4uLy4uXCI7XG5pbXBvcnQgdHlwZSB7IFJlZ2lzdGVyUGFnZVByb3BzIH0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5cbnR5cGUgUmVnaXN0ZXJQcm9wcyA9IFJlZ2lzdGVyUGFnZVByb3BzPFxuICBEaXZQcm9wc1R5cGUsXG4gIERpdlByb3BzVHlwZSxcbiAgRm9ybVByb3BzVHlwZVxuPjtcblxuZXhwb3J0IGNvbnN0IFJlZ2lzdGVyUGFnZTogUmVhY3QuRkM8UmVnaXN0ZXJQcm9wcz4gPSAoe1xuICBwcm92aWRlcnMsXG4gIGxvZ2luTGluayxcbiAgd3JhcHBlclByb3BzLFxuICBjb250ZW50UHJvcHMsXG4gIHJlbmRlckNvbnRlbnQsXG4gIGZvcm1Qcm9wcyxcbiAgdGl0bGUgPSB1bmRlZmluZWQsXG4gIGhpZGVGb3JtLFxuICBtdXRhdGlvblZhcmlhYmxlcyxcbn0pID0+IHtcbiAgY29uc3Qgcm91dGVyVHlwZSA9IHVzZVJvdXRlclR5cGUoKTtcbiAgY29uc3QgTGluayA9IHVzZUxpbmsoKTtcbiAgY29uc3QgeyBMaW5rOiBMZWdhY3lMaW5rIH0gPSB1c2VSb3V0ZXJDb250ZXh0KCk7XG5cbiAgY29uc3QgQWN0aXZlTGluayA9IHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCIgPyBMZWdhY3lMaW5rIDogTGluaztcblxuICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKFwiXCIpO1xuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuXG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuICBjb25zdCB7IG11dGF0ZTogcmVnaXN0ZXIsIGlzTG9hZGluZyB9ID0gdXNlUmVnaXN0ZXIoe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogQm9vbGVhbihhdXRoUHJvdmlkZXI/LmlzTGVnYWN5KSxcbiAgfSk7XG5cbiAgY29uc3QgcmVuZGVyTGluayA9IChsaW5rOiBzdHJpbmcsIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gPEFjdGl2ZUxpbmsgdG89e2xpbmt9Pnt0ZXh0fTwvQWN0aXZlTGluaz47XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyUHJvdmlkZXJzID0gKCkgPT4ge1xuICAgIGlmIChwcm92aWRlcnMpIHtcbiAgICAgIHJldHVybiBwcm92aWRlcnMubWFwKChwcm92aWRlcikgPT4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAga2V5PXtwcm92aWRlci5uYW1lfVxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogXCIxcmVtXCIsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+XG4gICAgICAgICAgICAgIHJlZ2lzdGVyKHtcbiAgICAgICAgICAgICAgICAuLi5tdXRhdGlvblZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICBwcm92aWRlck5hbWU6IHByb3ZpZGVyLm5hbWUsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Byb3ZpZGVyPy5pY29ufVxuICAgICAgICAgICAge3Byb3ZpZGVyLmxhYmVsID8/IDxsYWJlbD57cHJvdmlkZXIubGFiZWx9PC9sYWJlbD59XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGNvbnN0IGNvbnRlbnQgPSAoXG4gICAgPGRpdiB7Li4uY29udGVudFByb3BzfT5cbiAgICAgIDxoMSBzdHlsZT17eyB0ZXh0QWxpZ246IFwiY2VudGVyXCIgfX0+XG4gICAgICAgIHt0cmFuc2xhdGUoXCJwYWdlcy5yZWdpc3Rlci50aXRsZVwiLCBcIlNpZ24gdXAgZm9yIHlvdXIgYWNjb3VudFwiKX1cbiAgICAgIDwvaDE+XG4gICAgICB7cmVuZGVyUHJvdmlkZXJzKCl9XG4gICAgICB7IWhpZGVGb3JtICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICA8Zm9ybVxuICAgICAgICAgICAgb25TdWJtaXQ9eyhlKSA9PiB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgcmVnaXN0ZXIoeyAuLi5tdXRhdGlvblZhcmlhYmxlcywgZW1haWwsIHBhc3N3b3JkIH0pO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHsuLi5mb3JtUHJvcHN9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMjUsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZW1haWwtaW5wdXRcIj5cbiAgICAgICAgICAgICAgICB7dHJhbnNsYXRlKFwicGFnZXMucmVnaXN0ZXIuZmllbGRzLmVtYWlsXCIsIFwiRW1haWxcIil9XG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGlkPVwiZW1haWwtaW5wdXRcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgICBzaXplPXsyMH1cbiAgICAgICAgICAgICAgICBhdXRvQ29ycmVjdD1cIm9mZlwiXG4gICAgICAgICAgICAgICAgc3BlbGxDaGVjaz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgYXV0b0NhcGl0YWxpemU9XCJvZmZcIlxuICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgdmFsdWU9e2VtYWlsfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0RW1haWwoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3N3b3JkLWlucHV0XCI+XG4gICAgICAgICAgICAgICAge3RyYW5zbGF0ZShcInBhZ2VzLnJlZ2lzdGVyLmZpZWxkcy5wYXNzd29yZFwiLCBcIlBhc3N3b3JkXCIpfVxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBpZD1cInBhc3N3b3JkLWlucHV0XCJcbiAgICAgICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgICAgICBzaXplPXsyMH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRQYXNzd29yZChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgIHZhbHVlPXt0cmFuc2xhdGUoXCJwYWdlcy5yZWdpc3Rlci5idXR0b25zLnN1Ym1pdFwiLCBcIlNpZ24gdXBcIil9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9hZGluZ31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAge2xvZ2luTGluayA/PyAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICB7dHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICAgICAgIFwicGFnZXMubG9naW4uYnV0dG9ucy5oYXZlQWNjb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiSGF2ZSBhbiBhY2NvdW50P1wiLFxuICAgICAgICAgICAgICAgICAgICApfXtcIiBcIn1cbiAgICAgICAgICAgICAgICAgICAge3JlbmRlckxpbmsoXG4gICAgICAgICAgICAgICAgICAgICAgXCIvbG9naW5cIixcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGUoXCJwYWdlcy5sb2dpbi5zaWduaW5cIiwgXCJTaWduIGluXCIpLFxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgICB7bG9naW5MaW5rICE9PSBmYWxzZSAmJiBoaWRlRm9ybSAmJiAoXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgdGV4dEFsaWduOiBcImNlbnRlclwiIH19PlxuICAgICAgICAgIHt0cmFuc2xhdGUoXCJwYWdlcy5sb2dpbi5idXR0b25zLmhhdmVBY2NvdW50XCIsIFwiSGF2ZSBhbiBhY2NvdW50P1wiKX17XCIgXCJ9XG4gICAgICAgICAge3JlbmRlckxpbmsoXCIvbG9naW5cIiwgdHJhbnNsYXRlKFwicGFnZXMubG9naW4uc2lnbmluXCIsIFwiU2lnbiBpblwiKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgey4uLndyYXBwZXJQcm9wc30+XG4gICAgICB7cmVuZGVyQ29udGVudCA/IHJlbmRlckNvbnRlbnQoY29udGVudCwgdGl0bGUpIDogY29udGVudH1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHtcbiAgdXNlRm9yZ290UGFzc3dvcmQsXG4gIHVzZUxpbmssXG4gIHVzZVJvdXRlckNvbnRleHQsXG4gIHVzZVJvdXRlclR5cGUsXG4gIHVzZVRyYW5zbGF0ZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuXG5pbXBvcnQgdHlwZSB7IERpdlByb3BzVHlwZSwgRm9ybVByb3BzVHlwZSB9IGZyb20gXCIuLi8uLlwiO1xuaW1wb3J0IHR5cGUge1xuICBGb3Jnb3RQYXNzd29yZEZvcm1UeXBlcyxcbiAgRm9yZ290UGFzc3dvcmRQYWdlUHJvcHMsXG59IGZyb20gXCIuLi8uLi90eXBlc1wiO1xuXG50eXBlIEZvcmdvdFBhc3N3b3JkUHJvcHMgPSBGb3Jnb3RQYXNzd29yZFBhZ2VQcm9wczxcbiAgRGl2UHJvcHNUeXBlLFxuICBEaXZQcm9wc1R5cGUsXG4gIEZvcm1Qcm9wc1R5cGVcbj47XG5cbmV4cG9ydCBjb25zdCBGb3Jnb3RQYXNzd29yZFBhZ2U6IFJlYWN0LkZDPEZvcmdvdFBhc3N3b3JkUHJvcHM+ID0gKHtcbiAgbG9naW5MaW5rLFxuICB3cmFwcGVyUHJvcHMsXG4gIGNvbnRlbnRQcm9wcyxcbiAgcmVuZGVyQ29udGVudCxcbiAgZm9ybVByb3BzLFxuICB0aXRsZSA9IHVuZGVmaW5lZCxcbiAgbXV0YXRpb25WYXJpYWJsZXMsXG59KSA9PiB7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuICBjb25zdCByb3V0ZXJUeXBlID0gdXNlUm91dGVyVHlwZSgpO1xuICBjb25zdCBMaW5rID0gdXNlTGluaygpO1xuICBjb25zdCB7IExpbms6IExlZ2FjeUxpbmsgfSA9IHVzZVJvdXRlckNvbnRleHQoKTtcblxuICBjb25zdCBBY3RpdmVMaW5rID0gcm91dGVyVHlwZSA9PT0gXCJsZWdhY3lcIiA/IExlZ2FjeUxpbmsgOiBMaW5rO1xuXG4gIGNvbnN0IFtlbWFpbCwgc2V0RW1haWxdID0gdXNlU3RhdGUoXCJcIik7XG5cbiAgY29uc3QgeyBtdXRhdGU6IGZvcmdvdFBhc3N3b3JkLCBpc0xvYWRpbmcgfSA9XG4gICAgdXNlRm9yZ290UGFzc3dvcmQ8Rm9yZ290UGFzc3dvcmRGb3JtVHlwZXM+KCk7XG5cbiAgY29uc3QgcmVuZGVyTGluayA9IChsaW5rOiBzdHJpbmcsIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gPEFjdGl2ZUxpbmsgdG89e2xpbmt9Pnt0ZXh0fTwvQWN0aXZlTGluaz47XG4gIH07XG5cbiAgY29uc3QgY29udGVudCA9IChcbiAgICA8ZGl2IHsuLi5jb250ZW50UHJvcHN9PlxuICAgICAgPGgxIHN0eWxlPXt7IHRleHRBbGlnbjogXCJjZW50ZXJcIiB9fT5cbiAgICAgICAge3RyYW5zbGF0ZShcInBhZ2VzLmZvcmdvdFBhc3N3b3JkLnRpdGxlXCIsIFwiRm9yZ290IHlvdXIgcGFzc3dvcmQ/XCIpfVxuICAgICAgPC9oMT5cbiAgICAgIDxociAvPlxuICAgICAgPGZvcm1cbiAgICAgICAgb25TdWJtaXQ9eyhlKSA9PiB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGZvcmdvdFBhc3N3b3JkKHsgLi4ubXV0YXRpb25WYXJpYWJsZXMsIGVtYWlsIH0pO1xuICAgICAgICB9fVxuICAgICAgICB7Li4uZm9ybVByb3BzfVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgICAgIHBhZGRpbmc6IDI1LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImVtYWlsLWlucHV0XCI+XG4gICAgICAgICAgICB7dHJhbnNsYXRlKFwicGFnZXMuZm9yZ290UGFzc3dvcmQuZmllbGRzLmVtYWlsXCIsIFwiRW1haWxcIil9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGlkPVwiZW1haWwtaW5wdXRcIlxuICAgICAgICAgICAgbmFtZT1cImVtYWlsXCJcbiAgICAgICAgICAgIHR5cGU9XCJtYWlsXCJcbiAgICAgICAgICAgIGF1dG9Db3JyZWN0PVwib2ZmXCJcbiAgICAgICAgICAgIHNwZWxsQ2hlY2s9e2ZhbHNlfVxuICAgICAgICAgICAgYXV0b0NhcGl0YWxpemU9XCJvZmZcIlxuICAgICAgICAgICAgcmVxdWlyZWRcbiAgICAgICAgICAgIHZhbHVlPXtlbWFpbH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0RW1haWwoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmd9XG4gICAgICAgICAgICB2YWx1ZT17dHJhbnNsYXRlKFxuICAgICAgICAgICAgICBcInBhZ2VzLmZvcmdvdFBhc3N3b3JkLmJ1dHRvbnMuc3VibWl0XCIsXG4gICAgICAgICAgICAgIFwiU2VuZCByZXNldCBpbnN0cnVjdGlvbnNcIixcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICB7bG9naW5MaW5rID8/IChcbiAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICB7dHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgIFwicGFnZXMucmVnaXN0ZXIuYnV0dG9ucy5oYXZlQWNjb3VudFwiLFxuICAgICAgICAgICAgICAgIFwiSGF2ZSBhbiBhY2NvdW50PyBcIixcbiAgICAgICAgICAgICAgKX17XCIgXCJ9XG4gICAgICAgICAgICAgIHtyZW5kZXJMaW5rKFwiL2xvZ2luXCIsIHRyYW5zbGF0ZShcInBhZ2VzLmxvZ2luLnNpZ25pblwiLCBcIlNpZ24gaW5cIikpfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9mb3JtPlxuICAgIDwvZGl2PlxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiB7Li4ud3JhcHBlclByb3BzfT5cbiAgICAgIHtyZW5kZXJDb250ZW50ID8gcmVuZGVyQ29udGVudChjb250ZW50LCB0aXRsZSkgOiBjb250ZW50fVxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB1c2VBY3RpdmVBdXRoUHJvdmlkZXIgfSBmcm9tIFwiQGRlZmluaXRpb25zL2hlbHBlcnNcIjtcbmltcG9ydCB7IHVzZVRyYW5zbGF0ZSwgdXNlVXBkYXRlUGFzc3dvcmQgfSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHsgRGl2UHJvcHNUeXBlLCBGb3JtUHJvcHNUeXBlIH0gZnJvbSBcIi4uLy4uXCI7XG5pbXBvcnQgdHlwZSB7XG4gIFVwZGF0ZVBhc3N3b3JkRm9ybVR5cGVzLFxuICBVcGRhdGVQYXNzd29yZFBhZ2VQcm9wcyxcbn0gZnJvbSBcIi4uLy4uL3R5cGVzXCI7XG5cbnR5cGUgVXBkYXRlUGFzc3dvcmRQcm9wcyA9IFVwZGF0ZVBhc3N3b3JkUGFnZVByb3BzPFxuICBEaXZQcm9wc1R5cGUsXG4gIERpdlByb3BzVHlwZSxcbiAgRm9ybVByb3BzVHlwZVxuPjtcblxuZXhwb3J0IGNvbnN0IFVwZGF0ZVBhc3N3b3JkUGFnZTogUmVhY3QuRkM8VXBkYXRlUGFzc3dvcmRQcm9wcz4gPSAoe1xuICB3cmFwcGVyUHJvcHMsXG4gIGNvbnRlbnRQcm9wcyxcbiAgcmVuZGVyQ29udGVudCxcbiAgZm9ybVByb3BzLFxuICB0aXRsZSA9IHVuZGVmaW5lZCxcbiAgbXV0YXRpb25WYXJpYWJsZXMsXG59KSA9PiB7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHVzZVRyYW5zbGF0ZSgpO1xuXG4gIGNvbnN0IGF1dGhQcm92aWRlciA9IHVzZUFjdGl2ZUF1dGhQcm92aWRlcigpO1xuICBjb25zdCB7IG11dGF0ZTogdXBkYXRlUGFzc3dvcmQsIGlzTG9hZGluZyB9ID1cbiAgICB1c2VVcGRhdGVQYXNzd29yZDxVcGRhdGVQYXNzd29yZEZvcm1UeXBlcz4oe1xuICAgICAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlOiBCb29sZWFuKGF1dGhQcm92aWRlcj8uaXNMZWdhY3kpLFxuICAgIH0pO1xuXG4gIGNvbnN0IFtuZXdQYXNzd29yZCwgc2V0TmV3UGFzc3dvcmRdID0gdXNlU3RhdGUoXCJcIik7XG4gIGNvbnN0IFtjb25maXJtUGFzc3dvcmQsIHNldENvbmZpcm1QYXNzd29yZF0gPSB1c2VTdGF0ZShcIlwiKTtcblxuICBjb25zdCBjb250ZW50ID0gKFxuICAgIDxkaXYgey4uLmNvbnRlbnRQcm9wc30+XG4gICAgICA8aDEgc3R5bGU9e3sgdGV4dEFsaWduOiBcImNlbnRlclwiIH19PlxuICAgICAgICB7dHJhbnNsYXRlKFwicGFnZXMudXBkYXRlUGFzc3dvcmQudGl0bGVcIiwgXCJVcGRhdGUgUGFzc3dvcmRcIil9XG4gICAgICA8L2gxPlxuICAgICAgPGhyIC8+XG4gICAgICA8Zm9ybVxuICAgICAgICBvblN1Ym1pdD17KGUpID0+IHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdXBkYXRlUGFzc3dvcmQoe1xuICAgICAgICAgICAgLi4ubXV0YXRpb25WYXJpYWJsZXMsXG4gICAgICAgICAgICBwYXNzd29yZDogbmV3UGFzc3dvcmQsXG4gICAgICAgICAgICBjb25maXJtUGFzc3dvcmQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH19XG4gICAgICAgIHsuLi5mb3JtUHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgICAgcGFkZGluZzogMjUsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc3dvcmQtaW5wdXRcIj5cbiAgICAgICAgICAgIHt0cmFuc2xhdGUoXCJwYWdlcy51cGRhdGVQYXNzd29yZC5maWVsZHMucGFzc3dvcmRcIiwgXCJOZXcgUGFzc3dvcmRcIil9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGlkPVwicGFzc3dvcmQtaW5wdXRcIlxuICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgc2l6ZT17MjB9XG4gICAgICAgICAgICB2YWx1ZT17bmV3UGFzc3dvcmR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldE5ld1Bhc3N3b3JkKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY29uZmlybS1wYXNzd29yZC1pbnB1dFwiPlxuICAgICAgICAgICAge3RyYW5zbGF0ZShcbiAgICAgICAgICAgICAgXCJwYWdlcy51cGRhdGVQYXNzd29yZC5maWVsZHMuY29uZmlybVBhc3N3b3JkXCIsXG4gICAgICAgICAgICAgIFwiQ29uZmlybSBOZXcgUGFzc3dvcmRcIixcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGlkPVwiY29uZmlybS1wYXNzd29yZC1pbnB1dFwiXG4gICAgICAgICAgICBuYW1lPVwiY29uZmlybVBhc3N3b3JkXCJcbiAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgc2l6ZT17MjB9XG4gICAgICAgICAgICB2YWx1ZT17Y29uZmlybVBhc3N3b3JkfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRDb25maXJtUGFzc3dvcmQoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwic3VibWl0XCJcbiAgICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmd9XG4gICAgICAgICAgICB2YWx1ZT17dHJhbnNsYXRlKFwicGFnZXMudXBkYXRlUGFzc3dvcmQuYnV0dG9ucy5zdWJtaXRcIiwgXCJVcGRhdGVcIil9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHsuLi53cmFwcGVyUHJvcHN9PlxuICAgICAge3JlbmRlckNvbnRlbnQgPyByZW5kZXJDb250ZW50KGNvbnRlbnQsIHRpdGxlKSA6IGNvbnRlbnR9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG4vKipcbiAqICoqcmVmaW5lKiogc2hvd3MgYSBkZWZhdWx0IHJlYWR5IHBhZ2Ugb24gcm9vdCByb3V0ZSB3aGVuIG5vIGByZXNvdXJjZXNgIGlzIHBhc3NlZCB0byB0aGUgYDxSZWZpbmU+YCBjb21wb25lbnQgYXMgYSBwcm9wZXJ0eS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBgUmVhZHlQYWdlYCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFJlYWR5UGFnZTogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxoMT5XZWxjb21lIG9uIGJvYXJkPC9oMT5cbiAgICAgIDxwPllvdXIgY29uZmlndXJhdGlvbiBpcyBjb21wbGV0ZWQuPC9wPlxuICAgICAgPHA+XG4gICAgICAgIE5vdyB5b3UgY2FuIGdldCBzdGFydGVkIGJ5IGFkZGluZyB5b3VyIHJlc291cmNlcyB0byB0aGV7XCIgXCJ9XG4gICAgICAgIDxjb2RlPmByZXNvdXJjZXNgPC9jb2RlPiBwcm9wZXJ0eSBvZiA8Y29kZT57XCJgPFJlZmluZT5gXCJ9PC9jb2RlPlxuICAgICAgPC9wPlxuICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiBcImZsZXhcIiwgZ2FwOiA4IH19PlxuICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9yZWZpbmUuZGV2XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9yZWZlcnJlclwiPlxuICAgICAgICAgIDxidXR0b24+RG9jdW1lbnRhdGlvbjwvYnV0dG9uPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL3JlZmluZS5kZXYvZXhhbXBsZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub3JlZmVycmVyXCI+XG4gICAgICAgICAgPGJ1dHRvbj5FeGFtcGxlczwvYnV0dG9uPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL2Rpc2NvcmQuZ2cvcmVmaW5lXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9yZWZlcnJlclwiPlxuICAgICAgICAgIDxidXR0b24+Q29tbXVuaXR5PC9idXR0b24+XG4gICAgICAgIDwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IENvbmZpZ1N1Y2Nlc3NQYWdlIH0gZnJvbSBcIi4uL2NvbmZpZy1zdWNjZXNzXCI7XG5pbXBvcnQgeyB1c2VSZWZpbmVDb250ZXh0IH0gZnJvbSBcIkBob29rcy9yZWZpbmVcIjtcbmltcG9ydCB7IENvbmZpZ0Vycm9yUGFnZSB9IGZyb20gXCIuLi9jb25maWctZXJyb3JcIjtcblxuZXhwb3J0IGNvbnN0IFdlbGNvbWVQYWdlID0gKCkgPT4ge1xuICBjb25zdCB7IF9faW5pdGlhbGl6ZWQgfSA9IHVzZVJlZmluZUNvbnRleHQoKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Q29uZmlnU3VjY2Vzc1BhZ2UgLz5cbiAgICAgIHshX19pbml0aWFsaXplZCAmJiA8Q29uZmlnRXJyb3JQYWdlIC8+fVxuICAgIDwvPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB1c2VNZWRpYVF1ZXJ5IH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5cbnR5cGUgQ2FyZEluZm8gPSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGxpbms6IHN0cmluZztcbiAgaWNvblVybDogc3RyaW5nO1xufTtcblxuY29uc3QgY2FyZHM6IENhcmRJbmZvW10gPSBbXG4gIHtcbiAgICB0aXRsZTogXCJEb2N1bWVudGF0aW9uXCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIkxlYXJuIGFib3V0IHRoZSB0ZWNobmljYWwgZGV0YWlscyBvZiB1c2luZyBSZWZpbmUgaW4geW91ciBwcm9qZWN0cy5cIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcmVmaW5lLmRldi9kb2NzXCIsXG4gICAgaWNvblVybDpcbiAgICAgIFwiaHR0cHM6Ly9yZWZpbmUuYW1zMy5jZG4uZGlnaXRhbG9jZWFuc3BhY2VzLmNvbS93ZWxjb21lLXBhZ2UvYm9vay5zdmdcIixcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBcIlR1dG9yaWFsXCIsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICBcIkxlYXJuIGhvdyB0byB1c2UgUmVmaW5lIGJ5IGJ1aWxkaW5nIGEgZnVsbHktZnVuY3Rpb25pbmcgQ1JVRCBhcHAsIGZyb20gc2NyYXRjaCB0byBmdWxsIGxhdW5jaC5cIixcbiAgICBsaW5rOiBcImh0dHBzOi8vcmVmaW5lLmRldi90dXRvcmlhbFwiLFxuICAgIGljb25Vcmw6XG4gICAgICBcImh0dHBzOi8vcmVmaW5lLmFtczMuY2RuLmRpZ2l0YWxvY2VhbnNwYWNlcy5jb20vd2VsY29tZS1wYWdlL2hhdC5zdmdcIixcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBcIlRlbXBsYXRlc1wiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJFeHBsb3JlIGEgcmFuZ2Ugb2YgcHJlLWJ1aWx0IHRlbXBsYXRlcywgcGVyZmVjdCBldmVyeXRoaW5nIGZyb20gYWRtaW4gcGFuZWxzIHRvIGRhc2hib2FyZHMgYW5kIENSTXMuXCIsXG4gICAgbGluazogXCJodHRwczovL3JlZmluZS5kZXYvdGVtcGxhdGVzXCIsXG4gICAgaWNvblVybDpcbiAgICAgIFwiaHR0cHM6Ly9yZWZpbmUuYW1zMy5jZG4uZGlnaXRhbG9jZWFuc3BhY2VzLmNvbS93ZWxjb21lLXBhZ2UvYXBwbGljYXRpb24uc3ZnXCIsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogXCJDb21tdW5pdHlcIixcbiAgICBkZXNjcmlwdGlvbjogXCJKb2luIG91ciBEaXNjb3JkIGNvbW11bml0eSBhbmQga2VlcCB1cCB3aXRoIHRoZSBsYXRlc3QgbmV3cy5cIixcbiAgICBsaW5rOiBcImh0dHBzOi8vZGlzY29yZC5nZy9yZWZpbmVcIixcbiAgICBpY29uVXJsOlxuICAgICAgXCJodHRwczovL3JlZmluZS5hbXMzLmNkbi5kaWdpdGFsb2NlYW5zcGFjZXMuY29tL3dlbGNvbWUtcGFnZS9kaXNjb3JkLnN2Z1wiLFxuICB9LFxuXTtcblxuLyoqXG4gKiBJdCBpcyBhIHBhZ2UgdGhhdCB3ZWxjb21lcyB5b3UgYWZ0ZXIgdGhlIGNvbmZpZ3VyYXRpb24gaXMgY29tcGxldGVkLlxuICovXG5leHBvcnQgY29uc3QgQ29uZmlnU3VjY2Vzc1BhZ2U6IFJlYWN0LkZDID0gKCkgPT4ge1xuICBjb25zdCBpc1RhYmxldCA9IHVzZU1lZGlhUXVlcnkoXCIobWF4LXdpZHRoOiAxMDEwcHgpXCIpO1xuICBjb25zdCBpc01vYmlsZSA9IHVzZU1lZGlhUXVlcnkoXCIobWF4LXdpZHRoOiA2NTBweClcIik7XG5cbiAgY29uc3QgZ2V0R3JpZFRlbXBsYXRlQ29sdW1ucyA9ICgpID0+IHtcbiAgICBpZiAoaXNNb2JpbGUpIHtcbiAgICAgIHJldHVybiBcIjEsIDI4MHB4XCI7XG4gICAgfVxuICAgIGlmIChpc1RhYmxldCkge1xuICAgICAgcmV0dXJuIFwiMiwgMjgwcHhcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwiNCwgMWZyXCI7XG4gIH07XG5cbiAgY29uc3QgZ2V0SGVhZGVyRm9udFNpemUgPSAoKSA9PiB7XG4gICAgaWYgKGlzTW9iaWxlKSB7XG4gICAgICByZXR1cm4gXCIzMnB4XCI7XG4gICAgfVxuICAgIGlmIChpc1RhYmxldCkge1xuICAgICAgcmV0dXJuIFwiNDBweFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCI0OHB4XCI7XG4gIH07XG5cbiAgY29uc3QgZ2V0U3ViSGVhZGVyRm9udFNpemUgPSAoKSA9PiB7XG4gICAgaWYgKGlzTW9iaWxlKSB7XG4gICAgICByZXR1cm4gXCIxNnB4XCI7XG4gICAgfVxuICAgIGlmIChpc1RhYmxldCkge1xuICAgICAgcmV0dXJuIFwiMjBweFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCIyNHB4XCI7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17e1xuICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICBpbnNldDogMCxcbiAgICAgICAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICAgICAgICB3aWR0aDogXCIxMDBkdndcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMGR2aFwiLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG4gICAgICAgICAgYmFja2dyb3VuZDogaXNNb2JpbGVcbiAgICAgICAgICAgID8gXCJ1cmwoaHR0cHM6Ly9yZWZpbmUuYW1zMy5jZG4uZGlnaXRhbG9jZWFuc3BhY2VzLmNvbS93ZWJzaXRlL3N0YXRpYy9hc3NldHMvbGFuZGluZy1ub2lzZS53ZWJwKSwgcmFkaWFsLWdyYWRpZW50KDg4Ljg5JSA1MCUgYXQgNTAlIDEwMCUsIHJnYmEoMzgsIDIxNywgMTI3LCAwLjEwKSAwJSwgcmdiYSgzOCwgMjE3LCAxMjcsIDAuMDApIDEwMCUpLCByYWRpYWwtZ3JhZGllbnQoODguODklIDUwJSBhdCA1MCUgMCUsIHJnYmEoNzEsIDIzNSwgMjM1LCAwLjE1KSAwJSwgcmdiYSg3MSwgMjM1LCAyMzUsIDAuMDApIDEwMCUpLCAjMUQxRTMwXCJcbiAgICAgICAgICAgIDogaXNUYWJsZXRcbiAgICAgICAgICAgICAgPyBcInVybChodHRwczovL3JlZmluZS5hbXMzLmNkbi5kaWdpdGFsb2NlYW5zcGFjZXMuY29tL3dlYnNpdGUvc3RhdGljL2Fzc2V0cy9sYW5kaW5nLW5vaXNlLndlYnApLCByYWRpYWwtZ3JhZGllbnQoNjYuNjclIDUwJSBhdCA1MCUgMTAwJSwgcmdiYSgzOCwgMjE3LCAxMjcsIDAuMTApIDAlLCByZ2JhKDM4LCAyMTcsIDEyNywgMC4wMCkgMTAwJSksIHJhZGlhbC1ncmFkaWVudCg2Ni42NyUgNTAlIGF0IDUwJSAwJSwgcmdiYSg3MSwgMjM1LCAyMzUsIDAuMTUpIDAlLCByZ2JhKDcxLCAyMzUsIDIzNSwgMC4wMCkgMTAwJSksICMxRDFFMzBcIlxuICAgICAgICAgICAgICA6IFwidXJsKGh0dHBzOi8vcmVmaW5lLmFtczMuY2RuLmRpZ2l0YWxvY2VhbnNwYWNlcy5jb20vd2Vic2l0ZS9zdGF0aWMvYXNzZXRzL2xhbmRpbmctbm9pc2Uud2VicCksIHJhZGlhbC1ncmFkaWVudCgzNS41NiUgNTAlIGF0IDUwJSAxMDAlLCByZ2JhKDM4LCAyMTcsIDEyNywgMC4xMikgMCUsIHJnYmEoMzgsIDIxNywgMTI3LCAwKSAxMDAlKSwgcmFkaWFsLWdyYWRpZW50KDM1LjU2JSA1MCUgYXQgNTAlIDAlLCByZ2JhKDcxLCAyMzUsIDIzNSwgMC4xOCkgMCUsIHJnYmEoNzEsIDIzNSwgMjM1LCAwKSAxMDAlKSwgIzFEMUUzMFwiLFxuICAgICAgICAgIG1pbkhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgbWluV2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgIGZvbnRGYW1pbHk6IFwiQXJpYWxcIixcbiAgICAgICAgICBjb2xvcjogXCIjRkZGRkZGXCIsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgekluZGV4OiAyLFxuICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgIHdpZHRoOiBpc01vYmlsZSA/IFwiNDAwcHhcIiA6IFwiODAwcHhcIixcbiAgICAgICAgICAgIGhlaWdodDogXCI1NTJweFwiLFxuICAgICAgICAgICAgb3BhY2l0eTogXCIwLjVcIixcbiAgICAgICAgICAgIGJhY2tncm91bmQ6XG4gICAgICAgICAgICAgIFwidXJsKGh0dHBzOi8vcmVmaW5lLmFtczMuY2RuLmRpZ2l0YWxvY2VhbnNwYWNlcy5jb20vYXNzZXRzL3dlbGNvbWUtcGFnZS1oZXhhZ29uLnBuZylcIixcbiAgICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6IFwibm8tcmVwZWF0XCIsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb250YWluXCIsXG4gICAgICAgICAgICB0b3A6IFwiMFwiLFxuICAgICAgICAgICAgbGVmdDogXCI1MCVcIixcbiAgICAgICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGVYKC01MCUpXCIsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IGlzTW9iaWxlID8gXCI0MHB4XCIgOiBcIjgwcHhcIiB9fSAvPlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6IFwiZmxleFwiLCBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIiB9fT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogaXNNb2JpbGUgPyBcIjExMnB4IDU4cHhcIiA6IFwiMjI0cHggMTE2cHhcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOlxuICAgICAgICAgICAgICAgIFwidXJsKGh0dHBzOi8vcmVmaW5lLmFtczMuY2RuLmRpZ2l0YWxvY2VhbnNwYWNlcy5jb20vYXNzZXRzL3JlZmluZS1sb2dvLnN2ZylcIixcbiAgICAgICAgICAgICAgd2lkdGg6IGlzTW9iaWxlID8gMTEyIDogMjI0LFxuICAgICAgICAgICAgICBoZWlnaHQ6IGlzTW9iaWxlID8gNTggOiAxMTYsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGhlaWdodDogaXNNb2JpbGUgPyBcIjEyMHB4XCIgOiBpc1RhYmxldCA/IFwiMjAwcHhcIiA6IFwiMzB2aFwiLFxuICAgICAgICAgICAgbWluSGVpZ2h0OiBpc01vYmlsZSA/IFwiMTIwcHhcIiA6IGlzVGFibGV0ID8gXCIyMDBweFwiIDogXCIyMDBweFwiLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgICAgZ2FwOiBcIjE2cHhcIixcbiAgICAgICAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGgxXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBmb250U2l6ZTogZ2V0SGVhZGVyRm9udFNpemUoKSxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNzAwLFxuICAgICAgICAgICAgICBtYXJnaW46IFwiMHB4XCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFdlbGNvbWUgQWJvYXJkIVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPGg0XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBmb250U2l6ZTogZ2V0U3ViSGVhZGVyRm9udFNpemUoKSxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgICAgICAgICBtYXJnaW46IFwiMHB4XCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFlvdXIgY29uZmlndXJhdGlvbiBpcyBjb21wbGV0ZWQuXG4gICAgICAgICAgPC9oND5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiBcIjY0cHhcIiB9fSAvPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZ3JpZFwiLFxuICAgICAgICAgICAgZ3JpZFRlbXBsYXRlQ29sdW1uczogYHJlcGVhdCgke2dldEdyaWRUZW1wbGF0ZUNvbHVtbnMoKX0pYCxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZ2FwOiBcIjQ4cHhcIixcbiAgICAgICAgICAgIHBhZGRpbmdSaWdodDogXCIxNnB4XCIsXG4gICAgICAgICAgICBwYWRkaW5nTGVmdDogXCIxNnB4XCIsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiBcIjMycHhcIixcbiAgICAgICAgICAgIG1heFdpZHRoOiBcIjk3NnB4XCIsXG4gICAgICAgICAgICBtYXJnaW46IFwiYXV0b1wiLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7Y2FyZHMubWFwKChjYXJkKSA9PiAoXG4gICAgICAgICAgICA8Q2FyZCBrZXk9e2B3ZWxjb21lLXBhZ2UtJHtjYXJkLnRpdGxlfWB9IGNhcmQ9e2NhcmR9IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG50eXBlIENhcmRQcm9wcyA9IHtcbiAgY2FyZDogQ2FyZEluZm87XG59O1xuXG5jb25zdCBDYXJkOiBSZWFjdC5GQzxDYXJkUHJvcHM+ID0gKHsgY2FyZCB9KSA9PiB7XG4gIGNvbnN0IHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBpY29uVXJsLCBsaW5rIH0gPSBjYXJkO1xuXG4gIGNvbnN0IFtpc0hvdmVyLCBzZXRJc0hvdmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBnYXA6IFwiMTZweFwiLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGFcbiAgICAgICAgICBvblBvaW50ZXJFbnRlcj17KCkgPT4gc2V0SXNIb3Zlcih0cnVlKX1cbiAgICAgICAgICBvblBvaW50ZXJMZWF2ZT17KCkgPT4gc2V0SXNIb3ZlcihmYWxzZSl9XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIGNvbG9yOiBcIiNmZmZcIixcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgICB9fVxuICAgICAgICAgIGhyZWY9e2xpbmt9XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICB3aWR0aDogXCIxNnB4XCIsXG4gICAgICAgICAgICAgIGhlaWdodDogXCIxNnB4XCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiY29udGFpblwiLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtpY29uVXJsfSlgLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBmb250U2l6ZTogXCIxNnB4XCIsXG4gICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDcwMCxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogXCIxM3B4XCIsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiBcIjE0cHhcIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RpdGxlfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uOlxuICAgICAgICAgICAgICAgIFwidHJhbnNmb3JtIDAuNXMgZWFzZS1pbi1vdXQsIG9wYWNpdHkgMC4ycyBlYXNlLWluLW91dFwiLFxuICAgICAgICAgICAgICAuLi4oaXNIb3ZlciAmJiB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVgoNHB4KVwiLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHdpZHRoPVwiMTJcIlxuICAgICAgICAgICAgaGVpZ2h0PVwiOFwiXG4gICAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgICBvcGFjaXR5PVwiMC41XCJcbiAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgIGQ9XCJNNy4yOTMuMjkzYTEgMSAwIDAgMSAxLjQxNCAwbDMgM2ExIDEgMCAwIDEgMCAxLjQxNGwtMyAzYTEgMSAwIDAgMS0xLjQxNC0xLjQxNEw4LjU4NiA1SDFhMSAxIDAgMCAxIDAtMmg3LjU4Nkw3LjI5MyAxLjcwN2ExIDEgMCAwIDEgMC0xLjQxNFpcIlxuICAgICAgICAgICAgICBmaWxsPVwiI2ZmZlwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvc3ZnPlxuICAgICAgICA8L2E+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzcGFuXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgZm9udFNpemU6IFwiMTJweFwiLFxuICAgICAgICAgIG9wYWNpdHk6IDAuNSxcbiAgICAgICAgICBsaW5lSGVpZ2h0OiBcIjE2cHhcIixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGNvbnN0IENvbmZpZ0Vycm9yUGFnZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17e1xuICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICAgICAgICB6SW5kZXg6IDExLFxuICAgICAgICBpbnNldDogMCxcbiAgICAgICAgb3ZlcmZsb3c6IFwiYXV0b1wiLFxuICAgICAgICB3aWR0aDogXCIxMDBkdndcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMGR2aFwiLFxuICAgICAgfX1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICBwYWRkaW5nOiBcIjI0cHhcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiMxNDE0MUZCRlwiLFxuICAgICAgICAgIGJhY2tkcm9wRmlsdGVyOiBcImJsdXIoM3B4KVwiLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIG1heFdpZHRoOiBcIjY0MHB4XCIsXG4gICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBcIiMxRDFFMzBcIixcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCIxNnB4XCIsXG4gICAgICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkICMzMDM0NTBcIixcbiAgICAgICAgICAgIGJveFNoYWRvdzogXCIwcHggMHB4IDEyMHB4IC0yNHB4ICMwMDAwMDBcIixcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgcGFkZGluZzogXCIxNnB4IDIwcHhcIixcbiAgICAgICAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCAjMzAzNDUwXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICBnYXA6IFwiOHB4XCIsXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxFcnJvckdyYWRpZW50XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogXCIyNHB4XCIsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IFwiMTZweFwiLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNGRkZGRkZcIixcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgIGdhcDogXCIxNnB4XCIsXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxFcnJvckljb24gLz5cbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBDb25maWd1cmF0aW9uIEVycm9yXG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIHBhZGRpbmc6IFwiMjBweFwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjQTNBREMyXCIsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IFwiMjBweFwiLFxuICAgICAgICAgICAgICBmb250U2l6ZTogXCIxNHB4XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICAgICAgICBnYXA6IFwiMjBweFwiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8cFxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IFwiMjhweFwiLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjE2cHhcIixcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGNvZGVcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiIzMwMzQ1MDgwXCIsXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiBcIjAgNHB4XCIsXG4gICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiBcIjI0cHhcIixcbiAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjE2cHhcIixcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI0cHhcIixcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiBcIiNGRkZGRkZcIixcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge1wiPFJlZmluZSAvPlwifVxuICAgICAgICAgICAgICA8L2NvZGU+e1wiIFwifVxuICAgICAgICAgICAgICBpcyBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBtYWtlIHN1cmUgeW91IGhhdmUgaXQgbW91bnRlZCBpbiB5b3VyXG4gICAgICAgICAgICAgIGFwcCBhbmQgcGxhY2VkIHlvdXIgY29tcG9uZW50cyBpbnNpZGUgaXQuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8RXhhbXBsZUltcGxlbWVudGF0aW9uIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEV4YW1wbGVJbXBsZW1lbnRhdGlvbiA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8cHJlXG4gICAgICBzdHlsZT17e1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICAgIG92ZXJmbG93WDogXCJhdXRvXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCI4cHhcIixcbiAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxuICAgICAgICBsaW5lSGVpZ2h0OiBcIjI0cHhcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMxNDE0MUZcIixcbiAgICAgICAgY29sb3I6IFwiI0U1RUNGMlwiLFxuICAgICAgICBwYWRkaW5nOiBcIjE2cHhcIixcbiAgICAgICAgbWFyZ2luOiBcIjBcIixcbiAgICAgICAgbWF4SGVpZ2h0OiBcIjQwMHB4XCIsXG4gICAgICAgIG92ZXJmbG93OiBcImF1dG9cIixcbiAgICAgIH19XG4gICAgPlxuICAgICAgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0ZGN0I3MlwiIH19PmltcG9ydDwvc3Bhbj4ge1wie1wifSBSZWZpbmUsIFdlbGNvbWVQYWdle1wiIFwifVxuICAgICAge1wifVwifSA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjRkY3QjcyXCIgfX0+ZnJvbTwvc3Bhbj57XCIgXCJ9XG4gICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjQTVENkZGXCIgfX0+eydcIkByZWZpbmVkZXYvY29yZVwiJ308L3NwYW4+O3tcIlxcblwifVxuICAgICAge1wiXFxuXCJ9XG4gICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjRkY3QjcyXCIgfX0+ZXhwb3J0PC9zcGFuPntcIiBcIn1cbiAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNGRjdCNzJcIiB9fT5kZWZhdWx0PC9zcGFuPntcIiBcIn1cbiAgICAgIDxzcGFuPlxuICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjRkY3QjcyXCIgfX0+ZnVuY3Rpb248L3NwYW4+e1wiIFwifVxuICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjRkZBNjU3XCIgfX0+QXBwPC9zcGFuPlxuICAgICAgICAoXG4gICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcInJnYigyMjIsIDE0NywgOTUpXCIgfX0gLz4pe1wiIFwifVxuICAgICAgPC9zcGFuPlxuICAgICAge1wie1wifVxuICAgICAge1wiXFxuXCJ9XG4gICAgICB7XCIgIFwifVxuICAgICAgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0ZGN0I3MlwiIH19PnJldHVybjwvc3Bhbj4gKHtcIlxcblwifVxuICAgICAge1wiICAgIFwifVxuICAgICAgPHNwYW4+XG4gICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiM3OUMwRkZcIiB9fT5cbiAgICAgICAgICAmbHQ7XG4gICAgICAgICAgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiIzc5QzBGRlwiIH19PlJlZmluZTwvc3Bhbj5cbiAgICAgICAgICB7XCJcXG5cIn1cbiAgICAgICAgICB7XCIgICAgICBcIn1cbiAgICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjRTVFQ0YyXCIsIG9wYWNpdHk6IDAuNiB9fT5cbiAgICAgICAgICAgIHtcIi8vIFwifVxuICAgICAgICAgICAgPHNwYW4+Li4uPC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICB7XCJcXG5cIn1cbiAgICAgICAgICB7XCIgICAgXCJ9Jmd0O1xuICAgICAgICA8L3NwYW4+XG4gICAgICAgIHtcIlxcblwifVxuICAgICAgICB7XCIgICAgICBcIn1cbiAgICAgICAgPHNwYW4gc3R5bGU9e3sgb3BhY2l0eTogMC42IH19PlxuICAgICAgICAgIHtcIntcIn1cbiAgICAgICAgICB7XCIvKiAuLi4gKi9cIn1cbiAgICAgICAgICB7XCJ9XCJ9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAge1wiXFxuXCJ9XG4gICAgICAgIHtcIiAgICAgIFwifVxuICAgICAgICA8c3BhbiBzdHlsZT17eyBjb2xvcjogXCIjNzlDMEZGXCIgfX0+XG4gICAgICAgICAgJmx0O1xuICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiM3OUMwRkZcIiB9fT5XZWxjb21lUGFnZTwvc3Bhbj4gLyZndDtcbiAgICAgICAgPC9zcGFuPlxuICAgICAgICB7XCJcXG5cIn1cbiAgICAgICAge1wiICAgICAgXCJ9XG4gICAgICAgIDxzcGFuIHN0eWxlPXt7IG9wYWNpdHk6IDAuNiB9fT5cbiAgICAgICAgICB7XCJ7XCJ9XG4gICAgICAgICAge1wiLyogLi4uICovXCJ9XG4gICAgICAgICAge1wifVwifVxuICAgICAgICA8L3NwYW4+XG4gICAgICAgIHtcIlxcblwifVxuICAgICAgICB7XCIgICAgXCJ9XG4gICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiM3OUMwRkZcIiB9fT5cbiAgICAgICAgICAmbHQ7L1xuICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiM3OUMwRkZcIiB9fT5SZWZpbmU8L3NwYW4+XG4gICAgICAgICAgJmd0O1xuICAgICAgICA8L3NwYW4+XG4gICAgICA8L3NwYW4+XG4gICAgICB7XCJcXG5cIn1cbiAgICAgIHtcIiAgXCJ9KTt7XCJcXG5cIn1cbiAgICAgIHtcIn1cIn1cbiAgICA8L3ByZT5cbiAgKTtcbn07XG5cbmNvbnN0IEVycm9yR3JhZGllbnQgPSAocHJvcHM6IFJlYWN0LlNWR1Byb3BzPFNWR1NWR0VsZW1lbnQ+KSA9PiAoXG4gIDxzdmdcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICB3aWR0aD17MjA0fVxuICAgIGhlaWdodD17NTZ9XG4gICAgdmlld0JveD1cIjAgMCAyMDQgNTZcIlxuICAgIGZpbGw9XCJub25lXCJcbiAgICB7Li4ucHJvcHN9XG4gID5cbiAgICA8cGF0aCBmaWxsPVwidXJsKCN3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtYSlcIiBkPVwiTTEyIDBIMHYxMkwxMiAwWlwiIC8+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCJ1cmwoI3dlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1iKVwiXG4gICAgICBkPVwiTTI4IDBoLThMMCAyMHY4TDI4IDBaXCJcbiAgICAvPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwidXJsKCN3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtYylcIlxuICAgICAgZD1cIk0zNiAwaDhMMCA0NHYtOEwzNiAwWlwiXG4gICAgLz5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cInVybCgjd2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWQpXCJcbiAgICAgIGQ9XCJNNjAgMGgtOEwwIDUydjRoNEw2MCAwWlwiXG4gICAgLz5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cInVybCgjd2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWUpXCJcbiAgICAgIGQ9XCJNNjggMGg4TDIwIDU2aC04TDY4IDBaXCJcbiAgICAvPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwidXJsKCN3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtZilcIlxuICAgICAgZD1cIk05MiAwaC04TDI4IDU2aDhMOTIgMFpcIlxuICAgIC8+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCJ1cmwoI3dlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1nKVwiXG4gICAgICBkPVwiTTEwMCAwaDhMNTIgNTZoLThsNTYtNTZaXCJcbiAgICAvPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwidXJsKCN3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtaClcIlxuICAgICAgZD1cIk0xMjQgMGgtOEw2MCA1Nmg4bDU2LTU2WlwiXG4gICAgLz5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cInVybCgjd2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWkpXCJcbiAgICAgIGQ9XCJNMTQwIDBoLThMNzYgNTZoOGw1Ni01NlpcIlxuICAgIC8+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCJ1cmwoI3dlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1qKVwiXG4gICAgICBkPVwiTTEzMiAwaDhMODQgNTZoLThsNTYtNTZaXCJcbiAgICAvPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwidXJsKCN3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtaylcIlxuICAgICAgZD1cIk0xNTYgMGgtOEw5MiA1Nmg4bDU2LTU2WlwiXG4gICAgLz5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cInVybCgjd2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWwpXCJcbiAgICAgIGQ9XCJNMTY0IDBoOGwtNTYgNTZoLThsNTYtNTZaXCJcbiAgICAvPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwidXJsKCN3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtbSlcIlxuICAgICAgZD1cIk0xODggMGgtOGwtNTYgNTZoOGw1Ni01NlpcIlxuICAgIC8+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCJ1cmwoI3dlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1uKVwiXG4gICAgICBkPVwiTTIwNCAwaC04bC01NiA1Nmg4bDU2LTU2WlwiXG4gICAgLz5cbiAgICA8ZGVmcz5cbiAgICAgIDxyYWRpYWxHcmFkaWVudFxuICAgICAgICBpZD1cIndlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1hXCJcbiAgICAgICAgY3g9ezB9XG4gICAgICAgIGN5PXswfVxuICAgICAgICByPXsxfVxuICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cInNjYWxlKDEyNClcIlxuICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgPlxuICAgICAgICA8c3RvcCBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezAuMX0gLz5cbiAgICAgICAgPHN0b3Agb2Zmc2V0PXsxfSBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezB9IC8+XG4gICAgICA8L3JhZGlhbEdyYWRpZW50PlxuICAgICAgPHJhZGlhbEdyYWRpZW50XG4gICAgICAgIGlkPVwid2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWJcIlxuICAgICAgICBjeD17MH1cbiAgICAgICAgY3k9ezB9XG4gICAgICAgIHI9ezF9XG4gICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwic2NhbGUoMTI0KVwiXG4gICAgICAgIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiXG4gICAgICA+XG4gICAgICAgIDxzdG9wIHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MC4xfSAvPlxuICAgICAgICA8c3RvcCBvZmZzZXQ9ezF9IHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MH0gLz5cbiAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgICA8cmFkaWFsR3JhZGllbnRcbiAgICAgICAgaWQ9XCJ3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtY1wiXG4gICAgICAgIGN4PXswfVxuICAgICAgICBjeT17MH1cbiAgICAgICAgcj17MX1cbiAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJzY2FsZSgxMjQpXCJcbiAgICAgICAgZ3JhZGllbnRVbml0cz1cInVzZXJTcGFjZU9uVXNlXCJcbiAgICAgID5cbiAgICAgICAgPHN0b3Agc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswLjF9IC8+XG4gICAgICAgIDxzdG9wIG9mZnNldD17MX0gc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswfSAvPlxuICAgICAgPC9yYWRpYWxHcmFkaWVudD5cbiAgICAgIDxyYWRpYWxHcmFkaWVudFxuICAgICAgICBpZD1cIndlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1kXCJcbiAgICAgICAgY3g9ezB9XG4gICAgICAgIGN5PXswfVxuICAgICAgICByPXsxfVxuICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cInNjYWxlKDEyNClcIlxuICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgPlxuICAgICAgICA8c3RvcCBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezAuMX0gLz5cbiAgICAgICAgPHN0b3Agb2Zmc2V0PXsxfSBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezB9IC8+XG4gICAgICA8L3JhZGlhbEdyYWRpZW50PlxuICAgICAgPHJhZGlhbEdyYWRpZW50XG4gICAgICAgIGlkPVwid2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWVcIlxuICAgICAgICBjeD17MH1cbiAgICAgICAgY3k9ezB9XG4gICAgICAgIHI9ezF9XG4gICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwic2NhbGUoMTI0KVwiXG4gICAgICAgIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiXG4gICAgICA+XG4gICAgICAgIDxzdG9wIHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MC4xfSAvPlxuICAgICAgICA8c3RvcCBvZmZzZXQ9ezF9IHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MH0gLz5cbiAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgICA8cmFkaWFsR3JhZGllbnRcbiAgICAgICAgaWQ9XCJ3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtZlwiXG4gICAgICAgIGN4PXswfVxuICAgICAgICBjeT17MH1cbiAgICAgICAgcj17MX1cbiAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJzY2FsZSgxMjQpXCJcbiAgICAgICAgZ3JhZGllbnRVbml0cz1cInVzZXJTcGFjZU9uVXNlXCJcbiAgICAgID5cbiAgICAgICAgPHN0b3Agc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswLjF9IC8+XG4gICAgICAgIDxzdG9wIG9mZnNldD17MX0gc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswfSAvPlxuICAgICAgPC9yYWRpYWxHcmFkaWVudD5cbiAgICAgIDxyYWRpYWxHcmFkaWVudFxuICAgICAgICBpZD1cIndlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1nXCJcbiAgICAgICAgY3g9ezB9XG4gICAgICAgIGN5PXswfVxuICAgICAgICByPXsxfVxuICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cInNjYWxlKDEyNClcIlxuICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgPlxuICAgICAgICA8c3RvcCBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezAuMX0gLz5cbiAgICAgICAgPHN0b3Agb2Zmc2V0PXsxfSBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezB9IC8+XG4gICAgICA8L3JhZGlhbEdyYWRpZW50PlxuICAgICAgPHJhZGlhbEdyYWRpZW50XG4gICAgICAgIGlkPVwid2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWhcIlxuICAgICAgICBjeD17MH1cbiAgICAgICAgY3k9ezB9XG4gICAgICAgIHI9ezF9XG4gICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwic2NhbGUoMTI0KVwiXG4gICAgICAgIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiXG4gICAgICA+XG4gICAgICAgIDxzdG9wIHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MC4xfSAvPlxuICAgICAgICA8c3RvcCBvZmZzZXQ9ezF9IHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MH0gLz5cbiAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgICA8cmFkaWFsR3JhZGllbnRcbiAgICAgICAgaWQ9XCJ3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtaVwiXG4gICAgICAgIGN4PXswfVxuICAgICAgICBjeT17MH1cbiAgICAgICAgcj17MX1cbiAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJzY2FsZSgxMjQpXCJcbiAgICAgICAgZ3JhZGllbnRVbml0cz1cInVzZXJTcGFjZU9uVXNlXCJcbiAgICAgID5cbiAgICAgICAgPHN0b3Agc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswLjF9IC8+XG4gICAgICAgIDxzdG9wIG9mZnNldD17MX0gc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswfSAvPlxuICAgICAgPC9yYWRpYWxHcmFkaWVudD5cbiAgICAgIDxyYWRpYWxHcmFkaWVudFxuICAgICAgICBpZD1cIndlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1qXCJcbiAgICAgICAgY3g9ezB9XG4gICAgICAgIGN5PXswfVxuICAgICAgICByPXsxfVxuICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cInNjYWxlKDEyNClcIlxuICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgPlxuICAgICAgICA8c3RvcCBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezAuMX0gLz5cbiAgICAgICAgPHN0b3Agb2Zmc2V0PXsxfSBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezB9IC8+XG4gICAgICA8L3JhZGlhbEdyYWRpZW50PlxuICAgICAgPHJhZGlhbEdyYWRpZW50XG4gICAgICAgIGlkPVwid2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LWtcIlxuICAgICAgICBjeD17MH1cbiAgICAgICAgY3k9ezB9XG4gICAgICAgIHI9ezF9XG4gICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwic2NhbGUoMTI0KVwiXG4gICAgICAgIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiXG4gICAgICA+XG4gICAgICAgIDxzdG9wIHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MC4xfSAvPlxuICAgICAgICA8c3RvcCBvZmZzZXQ9ezF9IHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MH0gLz5cbiAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgICA8cmFkaWFsR3JhZGllbnRcbiAgICAgICAgaWQ9XCJ3ZWxjb21lLXBhZ2UtZXJyb3ItZ3JhZGllbnQtbFwiXG4gICAgICAgIGN4PXswfVxuICAgICAgICBjeT17MH1cbiAgICAgICAgcj17MX1cbiAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm09XCJzY2FsZSgxMjQpXCJcbiAgICAgICAgZ3JhZGllbnRVbml0cz1cInVzZXJTcGFjZU9uVXNlXCJcbiAgICAgID5cbiAgICAgICAgPHN0b3Agc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswLjF9IC8+XG4gICAgICAgIDxzdG9wIG9mZnNldD17MX0gc3RvcENvbG9yPVwiI0ZGNEM0RFwiIHN0b3BPcGFjaXR5PXswfSAvPlxuICAgICAgPC9yYWRpYWxHcmFkaWVudD5cbiAgICAgIDxyYWRpYWxHcmFkaWVudFxuICAgICAgICBpZD1cIndlbGNvbWUtcGFnZS1lcnJvci1ncmFkaWVudC1tXCJcbiAgICAgICAgY3g9ezB9XG4gICAgICAgIGN5PXswfVxuICAgICAgICByPXsxfVxuICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cInNjYWxlKDEyNClcIlxuICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgPlxuICAgICAgICA8c3RvcCBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezAuMX0gLz5cbiAgICAgICAgPHN0b3Agb2Zmc2V0PXsxfSBzdG9wQ29sb3I9XCIjRkY0QzREXCIgc3RvcE9wYWNpdHk9ezB9IC8+XG4gICAgICA8L3JhZGlhbEdyYWRpZW50PlxuICAgICAgPHJhZGlhbEdyYWRpZW50XG4gICAgICAgIGlkPVwid2VsY29tZS1wYWdlLWVycm9yLWdyYWRpZW50LW5cIlxuICAgICAgICBjeD17MH1cbiAgICAgICAgY3k9ezB9XG4gICAgICAgIHI9ezF9XG4gICAgICAgIGdyYWRpZW50VHJhbnNmb3JtPVwic2NhbGUoMTI0KVwiXG4gICAgICAgIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiXG4gICAgICA+XG4gICAgICAgIDxzdG9wIHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MC4xfSAvPlxuICAgICAgICA8c3RvcCBvZmZzZXQ9ezF9IHN0b3BDb2xvcj1cIiNGRjRDNERcIiBzdG9wT3BhY2l0eT17MH0gLz5cbiAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgPC9kZWZzPlxuICA8L3N2Zz5cbik7XG5cbmNvbnN0IEVycm9ySWNvbiA9IChwcm9wczogUmVhY3QuU1ZHUHJvcHM8U1ZHU1ZHRWxlbWVudD4pID0+IChcbiAgPHN2Z1xuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgIHdpZHRoPXsxNn1cbiAgICBoZWlnaHQ9ezE2fVxuICAgIHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuICAgIGZpbGw9XCJub25lXCJcbiAgICB7Li4ucHJvcHN9XG4gID5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cIiNGRjRDNERcIlxuICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIGQ9XCJNOCAxNkE4IDggMCAxIDAgOCAwYTggOCAwIDAgMCAwIDE2WlwiXG4gICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgIC8+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCIjZmZmXCJcbiAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICBkPVwiTTcgOGExIDEgMCAxIDAgMiAwVjVhMSAxIDAgMSAwLTIgMHYzWm0wIDNhMSAxIDAgMSAxIDIgMCAxIDEgMCAwIDEtMiAwWlwiXG4gICAgICBjbGlwUnVsZT1cImV2ZW5vZGRcIlxuICAgIC8+XG4gIDwvc3ZnPlxuKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlUXVlcnlTdWJzY3JpcHRpb24gfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbFwiO1xuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5cbmltcG9ydCB7IFJlYWR5UGFnZSBhcyBEZWZhdWx0UmVhZHlQYWdlLCBSb3V0ZUNoYW5nZUhhbmRsZXIgfSBmcm9tIFwiQGNvbXBvbmVudHNcIjtcbmltcG9ydCB7IFRlbGVtZXRyeSB9IGZyb20gXCJAY29tcG9uZW50cy90ZWxlbWV0cnlcIjtcbmltcG9ydCB7IGhhbmRsZVJlZmluZU9wdGlvbnMgfSBmcm9tIFwiQGRlZmluaXRpb25zXCI7XG5pbXBvcnQgeyB1c2VEZWVwTWVtbyB9IGZyb20gXCJAaG9va3MvZGVlcE1lbW9cIjtcblxuaW1wb3J0IHsgQWNjZXNzQ29udHJvbENvbnRleHRQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9hY2Nlc3NDb250cm9sXCI7XG5pbXBvcnQgeyBBdWRpdExvZ0NvbnRleHRQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9hdWRpdExvZ1wiO1xuaW1wb3J0IHtcbiAgQXV0aEJpbmRpbmdzQ29udGV4dFByb3ZpZGVyLFxuICBMZWdhY3lBdXRoQ29udGV4dFByb3ZpZGVyLFxufSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvYXV0aFwiO1xuaW1wb3J0IHsgRGF0YUNvbnRleHRQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9kYXRhXCI7XG5pbXBvcnQgeyBJMThuQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL2kxOG5cIjtcbmltcG9ydCB7IExpdmVDb250ZXh0UHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvbGl2ZVwiO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL25vdGlmaWNhdGlvblwiO1xuaW1wb3J0IHsgUmVmaW5lQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JlZmluZVwiO1xuaW1wb3J0IHsgUmVzb3VyY2VDb250ZXh0UHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVzb3VyY2VcIjtcbmltcG9ydCB7IFJvdXRlckNvbnRleHRQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXJcIjtcbmltcG9ydCB7IExlZ2FjeVJvdXRlckNvbnRleHRQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvbGVnYWN5XCI7XG5pbXBvcnQgeyBSb3V0ZXJQaWNrZXJQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvcGlja2VyXCI7XG5pbXBvcnQgeyBVbmRvYWJsZVF1ZXVlQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3VuZG9hYmxlUXVldWVcIjtcbmltcG9ydCB7IFVuc2F2ZWRXYXJuQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3Vuc2F2ZWRXYXJuXCI7XG5cbmltcG9ydCB0eXBlIHsgUmVmaW5lUHJvcHMgfSBmcm9tIFwiLi4vLi4vLi4vY29udGV4dHMvcmVmaW5lL3R5cGVzXCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJNaXN1c2VXYXJuaW5nIH0gZnJvbSBcIi4uLy4uLy4uL2hvb2tzL3JvdXRlci91c2Utcm91dGVyLW1pc3VzZS13YXJuaW5nL2luZGV4XCI7XG5cbi8qKlxuICoge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9jb21wb25lbnRzL3JlZmluZS1jb25maWcgYDxSZWZpbmU+IGNvbXBvbmVudGB9IGlzIHRoZSBlbnRyeSBwb2ludCBvZiBhIHJlZmluZSBhcHAuXG4gKiBJdCBpcyB3aGVyZSB0aGUgaGlnaGVzdCBsZXZlbCBvZiBjb25maWd1cmF0aW9uIG9mIHRoZSBhcHAgb2NjdXJzLlxuICogT25seSBhIGRhdGFQcm92aWRlciBpcyByZXF1aXJlZCB0byBib290c3RyYXAgdGhlIGFwcC4gQWZ0ZXIgYWRkaW5nIGEgZGF0YVByb3ZpZGVyLCByZXNvdXJjZXMgY2FuIGJlIGFkZGVkIGFzIHByb3BlcnR5LlxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9jb21wb25lbnRzL3JlZmluZS1jb25maWd9IGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBjb25zdCBSZWZpbmU6IFJlYWN0LkZDPFJlZmluZVByb3BzPiA9ICh7XG4gIGxlZ2FjeUF1dGhQcm92aWRlcixcbiAgYXV0aFByb3ZpZGVyLFxuICBkYXRhUHJvdmlkZXIsXG4gIGxlZ2FjeVJvdXRlclByb3ZpZGVyLFxuICByb3V0ZXJQcm92aWRlcixcbiAgbm90aWZpY2F0aW9uUHJvdmlkZXIsXG4gIGFjY2Vzc0NvbnRyb2xQcm92aWRlcixcbiAgYXVkaXRMb2dQcm92aWRlcixcbiAgcmVzb3VyY2VzLFxuICBEYXNoYm9hcmRQYWdlLFxuICBSZWFkeVBhZ2UsXG4gIExvZ2luUGFnZSxcbiAgY2F0Y2hBbGwsXG4gIGNoaWxkcmVuLFxuICBsaXZlUHJvdmlkZXIsXG4gIGkxOG5Qcm92aWRlcixcbiAgVGl0bGUsXG4gIExheW91dCxcbiAgU2lkZXIsXG4gIEhlYWRlcixcbiAgRm9vdGVyLFxuICBPZmZMYXlvdXRBcmVhLFxuICBvbkxpdmVFdmVudCxcbiAgb3B0aW9ucyxcbn0pID0+IHtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnNXaXRoRGVmYXVsdHMsXG4gICAgZGlzYWJsZVRlbGVtZXRyeVdpdGhEZWZhdWx0LFxuICAgIHJlYWN0UXVlcnlXaXRoRGVmYXVsdHMsXG4gIH0gPSBoYW5kbGVSZWZpbmVPcHRpb25zKHtcbiAgICBvcHRpb25zLFxuICB9KTtcblxuICBjb25zdCBxdWVyeUNsaWVudCA9IHVzZURlZXBNZW1vKCgpID0+IHtcbiAgICBpZiAocmVhY3RRdWVyeVdpdGhEZWZhdWx0cy5jbGllbnRDb25maWcgaW5zdGFuY2VvZiBRdWVyeUNsaWVudCkge1xuICAgICAgcmV0dXJuIHJlYWN0UXVlcnlXaXRoRGVmYXVsdHMuY2xpZW50Q29uZmlnO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUXVlcnlDbGllbnQoe1xuICAgICAgLi4ucmVhY3RRdWVyeVdpdGhEZWZhdWx0cy5jbGllbnRDb25maWcsXG4gICAgICBkZWZhdWx0T3B0aW9uczoge1xuICAgICAgICAuLi5yZWFjdFF1ZXJ5V2l0aERlZmF1bHRzLmNsaWVudENvbmZpZy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgICAgcXVlcmllczoge1xuICAgICAgICAgIHJlZmV0Y2hPbldpbmRvd0ZvY3VzOiBmYWxzZSxcbiAgICAgICAgICBrZWVwUHJldmlvdXNEYXRhOiB0cnVlLFxuICAgICAgICAgIC4uLnJlYWN0UXVlcnlXaXRoRGVmYXVsdHMuY2xpZW50Q29uZmlnLmRlZmF1bHRPcHRpb25zPy5xdWVyaWVzLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSwgW3JlYWN0UXVlcnlXaXRoRGVmYXVsdHMuY2xpZW50Q29uZmlnXSk7XG5cbiAgdXNlUXVlcnlTdWJzY3JpcHRpb24ocXVlcnlDbGllbnQpO1xuXG4gIGNvbnN0IHVzZU5vdGlmaWNhdGlvblByb3ZpZGVyVmFsdWVzID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBub3RpZmljYXRpb25Qcm92aWRlciA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IG5vdGlmaWNhdGlvblByb3ZpZGVyXG4gICAgICA6ICgpID0+IG5vdGlmaWNhdGlvblByb3ZpZGVyO1xuICB9LCBbbm90aWZpY2F0aW9uUHJvdmlkZXJdKTtcblxuICBjb25zdCBub3RpZmljYXRpb25Qcm92aWRlckNvbnRleHRWYWx1ZXMgPSB1c2VOb3RpZmljYXRpb25Qcm92aWRlclZhbHVlcygpO1xuXG4gIC8qKlxuICAgKiBXYXJuIG91ciB1c2VycyBpZiB0aGV5IGFyZSB1c2luZyB0aGUgb2xkIHdheSBvZiByb3V0aW5nIGluIHRoZSB3cm9uZyBwcm9wLlxuICAgKi9cbiAgdXNlUm91dGVyTWlzdXNlV2FybmluZyhyb3V0ZXJQcm92aWRlcik7XG4gIC8qKiAqL1xuXG4gIC8qKlxuICAgKiBgPFJlYWR5UGFnZSAvPmAgaXMgb25seSB1c2VkIGluIHRoZSBsZWdhY3kgcm91dGluZyBhbmQgaXMgbm90IHVzZWQgaW4gdGhlIG5ldyByb3V0aW5nLlxuICAgKiBJZiBgbGVnYWN5Um91dGVyUHJvdmlkZXJgIGlzIHByb3ZpZGVkIGFuZCBgcm91dGVyUHJvdmlkZXJgIGlzIG5vdCwgd2UnbGwgY2hlY2sgZm9yIHRoZSBgcmVzb3VyY2VzYCBwcm9wIHRvIGJlIGVtcHR5LlxuICAgKiBJZiBgcmVzb3VyY2VzYCBpcyBlbXB0eSwgdGhlbiB3ZSdsbCByZW5kZXIgYDxSZWFkeVBhZ2UgLz5gIGNvbXBvbmVudC5cbiAgICovXG4gIGlmIChcbiAgICBsZWdhY3lSb3V0ZXJQcm92aWRlciAmJlxuICAgICFyb3V0ZXJQcm92aWRlciAmJlxuICAgIChyZXNvdXJjZXMgPz8gW10pLmxlbmd0aCA9PT0gMFxuICApIHtcbiAgICByZXR1cm4gUmVhZHlQYWdlID8gPFJlYWR5UGFnZSAvPiA6IDxEZWZhdWx0UmVhZHlQYWdlIC8+O1xuICB9XG5cbiAgLyoqIFJvdXRlclxuICAgKlxuICAgKiBIYW5kbGUgcm91dGluZyBmcm9tIGBSb3V0ZXJDb250ZXh0UHJvdmlkZXJgIGFuZCBgcm91dGVyYCBwcm9wIGZvciB0aGUgYnJhbmQgbmV3IHdheVxuICAgKiBJZiBgcm91dGVyYCBpcyBub3QgcHJvdmlkZWQsIHRoZW4gd2UnciBjaGVja2luZyBmb3IgYHJvdXRlclByb3ZpZGVyYCBwcm9wXG4gICAqIElmIGByb3V0ZXJQcm92aWRlcmAgaXMgcHJvdmlkZWQsIHRoZW4gYFJvdXRlckNvbnRleHRQcm92aWRlcmAgaXMgdXNlZFxuICAgKiBJZiBub25lIG9mIHRoZW0gaXMgcHJvdmlkZWQsIHRoZW4gYFJvdXRlckNvbnRleHRQcm92aWRlcmAgaXMgdXNlZCBiZWNhdXNlIGl0IHN1cHBvcnRzIHVuZGVmaW5lZCByb3V0ZXJcbiAgICpcbiAgICogYFJvdXRlckNvbnRleHRQcm92aWRlcmAgaXMgc2tpcHBlZCB3aGVuZXZlciBwb3NzaWJsZSBhbmQgYnkgdGhpcyB3YXksXG4gICAqIHdlIGNhbiBhY2hpZXZlIGJhY2t3YXJkIGNvbXBhYmlsaXR5IG9ubHkgd2hlbiBpdHMgcHJvdmlkZWQgYnkgdXNlclxuICAgKlxuICAgKi9cbiAgY29uc3QgeyBSb3V0ZXJDb21wb25lbnQgPSBSZWFjdC5GcmFnbWVudCB9ID0gIXJvdXRlclByb3ZpZGVyXG4gICAgPyBsZWdhY3lSb3V0ZXJQcm92aWRlciA/PyB7fVxuICAgIDoge307XG4gIC8qKiAqL1xuXG4gIHJldHVybiAoXG4gICAgPFF1ZXJ5Q2xpZW50UHJvdmlkZXIgY2xpZW50PXtxdWVyeUNsaWVudH0+XG4gICAgICA8Tm90aWZpY2F0aW9uQ29udGV4dFByb3ZpZGVyIHsuLi5ub3RpZmljYXRpb25Qcm92aWRlckNvbnRleHRWYWx1ZXN9PlxuICAgICAgICA8TGVnYWN5QXV0aENvbnRleHRQcm92aWRlclxuICAgICAgICAgIHsuLi4obGVnYWN5QXV0aFByb3ZpZGVyID8/IHt9KX1cbiAgICAgICAgICBpc1Byb3ZpZGVkPXtCb29sZWFuKGxlZ2FjeUF1dGhQcm92aWRlcil9XG4gICAgICAgID5cbiAgICAgICAgICA8QXV0aEJpbmRpbmdzQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICB7Li4uKGF1dGhQcm92aWRlciA/PyB7fSl9XG4gICAgICAgICAgICBpc1Byb3ZpZGVkPXtCb29sZWFuKGF1dGhQcm92aWRlcil9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPERhdGFDb250ZXh0UHJvdmlkZXIgZGF0YVByb3ZpZGVyPXtkYXRhUHJvdmlkZXJ9PlxuICAgICAgICAgICAgICA8TGl2ZUNvbnRleHRQcm92aWRlciBsaXZlUHJvdmlkZXI9e2xpdmVQcm92aWRlcn0+XG4gICAgICAgICAgICAgICAgPFJvdXRlclBpY2tlclByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgICAgICAgICAgIGxlZ2FjeVJvdXRlclByb3ZpZGVyICYmICFyb3V0ZXJQcm92aWRlciA/IFwibGVnYWN5XCIgOiBcIm5ld1wiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPFJvdXRlckNvbnRleHRQcm92aWRlciByb3V0ZXI9e3JvdXRlclByb3ZpZGVyfT5cbiAgICAgICAgICAgICAgICAgICAgPExlZ2FjeVJvdXRlckNvbnRleHRQcm92aWRlciB7Li4ubGVnYWN5Um91dGVyUHJvdmlkZXJ9PlxuICAgICAgICAgICAgICAgICAgICAgIDxSZXNvdXJjZUNvbnRleHRQcm92aWRlciByZXNvdXJjZXM9e3Jlc291cmNlcyA/PyBbXX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8STE4bkNvbnRleHRQcm92aWRlciBpMThuUHJvdmlkZXI9e2kxOG5Qcm92aWRlcn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxBY2Nlc3NDb250cm9sQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLihhY2Nlc3NDb250cm9sUHJvdmlkZXIgPz8ge30pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEF1ZGl0TG9nQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Li4uKGF1ZGl0TG9nUHJvdmlkZXIgPz8ge30pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxVbmRvYWJsZVF1ZXVlQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVmaW5lQ29udGV4dFByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25Nb2RlPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNXaXRoRGVmYXVsdHMubXV0YXRpb25Nb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5XaGVuVW5zYXZlZENoYW5nZXM9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1dpdGhEZWZhdWx0cy53YXJuV2hlblVuc2F2ZWRDaGFuZ2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNXaXRoTG9jYXRpb249e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1dpdGhEZWZhdWx0cy5zeW5jV2l0aExvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpdGxlPXtUaXRsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRvYWJsZVRpbWVvdXQ9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1dpdGhEZWZhdWx0cy51bmRvYWJsZVRpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2hBbGw9e2NhdGNoQWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhc2hib2FyZFBhZ2U9e0Rhc2hib2FyZFBhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9naW5QYWdlPXtMb2dpblBhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTGF5b3V0PXtMYXlvdXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2lkZXI9e1NpZGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvb3Rlcj17Rm9vdGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlYWRlcj17SGVhZGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9mZkxheW91dEFyZWE9e09mZkxheW91dEFyZWF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRGFzaGJvYXJkPXshIURhc2hib2FyZFBhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZU1vZGU9e29wdGlvbnNXaXRoRGVmYXVsdHMubGl2ZU1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25MaXZlRXZlbnQ9e29uTGl2ZUV2ZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnNXaXRoRGVmYXVsdHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VW5zYXZlZFdhcm5Db250ZXh0UHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Um91dGVyQ29tcG9uZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHshZGlzYWJsZVRlbGVtZXRyeVdpdGhEZWZhdWx0ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGVsZW1ldHJ5IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSb3V0ZUNoYW5nZUhhbmRsZXIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUm91dGVyQ29tcG9uZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVW5zYXZlZFdhcm5Db250ZXh0UHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVmaW5lQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9VbmRvYWJsZVF1ZXVlQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQXVkaXRMb2dDb250ZXh0UHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvQWNjZXNzQ29udHJvbENvbnRleHRQcm92aWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvSTE4bkNvbnRleHRQcm92aWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICA8L1Jlc291cmNlQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICAgICAgICAgICAgICA8L0xlZ2FjeVJvdXRlckNvbnRleHRQcm92aWRlcj5cbiAgICAgICAgICAgICAgICAgIDwvUm91dGVyQ29udGV4dFByb3ZpZGVyPlxuICAgICAgICAgICAgICAgIDwvUm91dGVyUGlja2VyUHJvdmlkZXI+XG4gICAgICAgICAgICAgIDwvTGl2ZUNvbnRleHRQcm92aWRlcj5cbiAgICAgICAgICAgIDwvRGF0YUNvbnRleHRQcm92aWRlcj5cbiAgICAgICAgICA8L0F1dGhCaW5kaW5nc0NvbnRleHRQcm92aWRlcj5cbiAgICAgICAgPC9MZWdhY3lBdXRoQ29udGV4dFByb3ZpZGVyPlxuICAgICAgPC9Ob3RpZmljYXRpb25Db250ZXh0UHJvdmlkZXI+XG4gICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlVGVsZW1ldHJ5RGF0YSB9IGZyb20gXCJAaG9va3MvdXNlVGVsZW1ldHJ5RGF0YVwiO1xuXG5pbXBvcnQgdHlwZSB7IElUZWxlbWV0cnlEYXRhIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3QgZW5jb2RlID0gKHBheWxvYWQ6IElUZWxlbWV0cnlEYXRhKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdHJpbmdpZmllZFBheWxvYWQgPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkIHx8IHt9KTtcblxuICAgIGlmICh0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIGJ0b2Eoc3RyaW5naWZpZWRQYXlsb2FkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyaW5naWZpZWRQYXlsb2FkKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufTtcblxuY29uc3QgdGhyb3VnaEltYWdlID0gKHNyYzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gIGltZy5zcmMgPSBzcmM7XG59O1xuXG5jb25zdCB0aHJvdWdoRmV0Y2ggPSAoc3JjOiBzdHJpbmcpID0+IHtcbiAgZmV0Y2goc3JjKTtcbn07XG5cbmNvbnN0IHRyYW5zcG9ydCA9IChzcmM6IHN0cmluZykgPT4ge1xuICBpZiAodHlwZW9mIEltYWdlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3VnaEltYWdlKHNyYyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGZldGNoICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3VnaEZldGNoKHNyYyk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBUZWxlbWV0cnk6IFJlYWN0LkZDPHt9PiA9ICgpID0+IHtcbiAgY29uc3QgcGF5bG9hZCA9IHVzZVRlbGVtZXRyeURhdGEoKTtcbiAgY29uc3Qgc2VudCA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoc2VudC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGUocGF5bG9hZCk7XG5cbiAgICBpZiAoIWVuY29kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cmFuc3BvcnQoYGh0dHBzOi8vdGVsZW1ldHJ5LnJlZmluZS5kZXYvdGVsZW1ldHJ5P3BheWxvYWQ9JHtlbmNvZGVkfWApO1xuICAgIHNlbnQuY3VycmVudCA9IHRydWU7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IEFjY2Vzc0NvbnRyb2xDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9hY2Nlc3NDb250cm9sXCI7XG5pbXBvcnQgeyBBdWRpdExvZ0NvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2F1ZGl0TG9nXCI7XG5pbXBvcnQgeyBEYXRhQ29udGV4dCB9IGZyb20gXCJAY29udGV4dHMvZGF0YVwiO1xuaW1wb3J0IHsgSTE4bkNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2kxOG5cIjtcbmltcG9ydCB7IExpdmVDb250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9saXZlXCI7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25Db250ZXh0IH0gZnJvbSBcIkBjb250ZXh0cy9ub3RpZmljYXRpb25cIjtcbmltcG9ydCB7IExlZ2FjeVJvdXRlckNvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL3JvdXRlci9sZWdhY3lcIjtcbmltcG9ydCB7IHVzZVJlc291cmNlIH0gZnJvbSBcIkBob29rcy9yZXNvdXJjZVwiO1xuXG5pbXBvcnQgeyB1c2VJc0V4aXN0QXV0aGVudGljYXRpb24sIHVzZVJlZmluZUNvbnRleHQgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB0eXBlIHsgSVRlbGVtZXRyeURhdGEgfSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy90ZWxlbWV0cnkvdHlwZXNcIjtcblxuLy8gSXQgcmVhZHMgYW5kIHVwZGF0ZXMgZnJvbSBwYWNrYWdlLmpzb24gZHVyaW5nIGJ1aWxkLiByZWY6IHRzdXAuY29uZmlnLnRzXG5jb25zdCBSRUZJTkVfVkVSU0lPTiA9IFwiNC41Ni4wXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VUZWxlbWV0cnlEYXRhID0gKCk6IElUZWxlbWV0cnlEYXRhID0+IHtcbiAgY29uc3QgYXV0aCA9IHVzZUlzRXhpc3RBdXRoZW50aWNhdGlvbigpO1xuICBjb25zdCBhdWRpdExvZ0NvbnRleHQgPSB1c2VDb250ZXh0KEF1ZGl0TG9nQ29udGV4dCk7XG4gIGNvbnN0IHsgbGl2ZVByb3ZpZGVyIH0gPSB1c2VDb250ZXh0KExpdmVDb250ZXh0KTtcbiAgY29uc3Qgcm91dGVyQ29udGV4dCA9IHVzZUNvbnRleHQoTGVnYWN5Um91dGVyQ29udGV4dCk7XG4gIGNvbnN0IGRhdGFDb250ZXh0ID0gdXNlQ29udGV4dChEYXRhQ29udGV4dCk7XG4gIGNvbnN0IHsgaTE4blByb3ZpZGVyIH0gPSB1c2VDb250ZXh0KEkxOG5Db250ZXh0KTtcbiAgY29uc3Qgbm90aWZpY2F0aW9uQ29udGV4dCA9IHVzZUNvbnRleHQoTm90aWZpY2F0aW9uQ29udGV4dCk7XG4gIGNvbnN0IGFjY2Vzc0NvbnRyb2xDb250ZXh0ID0gdXNlQ29udGV4dChBY2Nlc3NDb250cm9sQ29udGV4dCk7XG4gIGNvbnN0IHsgcmVzb3VyY2VzIH0gPSB1c2VSZXNvdXJjZSgpO1xuICBjb25zdCByZWZpbmVPcHRpb25zID0gdXNlUmVmaW5lQ29udGV4dCgpO1xuXG4gIGNvbnN0IGF1ZGl0TG9nID1cbiAgICAhIWF1ZGl0TG9nQ29udGV4dC5jcmVhdGUgfHxcbiAgICAhIWF1ZGl0TG9nQ29udGV4dC5nZXQgfHxcbiAgICAhIWF1ZGl0TG9nQ29udGV4dC51cGRhdGU7XG5cbiAgY29uc3QgbGl2ZSA9XG4gICAgISFsaXZlUHJvdmlkZXI/LnB1Ymxpc2ggfHxcbiAgICAhIWxpdmVQcm92aWRlcj8uc3Vic2NyaWJlIHx8XG4gICAgISFsaXZlUHJvdmlkZXI/LnVuc3Vic2NyaWJlO1xuXG4gIGNvbnN0IHJvdXRlciA9XG4gICAgISFyb3V0ZXJDb250ZXh0LnVzZUhpc3RvcnkgfHxcbiAgICAhIXJvdXRlckNvbnRleHQuTGluayB8fFxuICAgICEhcm91dGVyQ29udGV4dC5Qcm9tcHQgfHxcbiAgICAhIXJvdXRlckNvbnRleHQudXNlTG9jYXRpb24gfHxcbiAgICAhIXJvdXRlckNvbnRleHQudXNlUGFyYW1zO1xuXG4gIGNvbnN0IGRhdGEgPSAhIWRhdGFDb250ZXh0O1xuXG4gIGNvbnN0IGkxOG4gPVxuICAgICEhaTE4blByb3ZpZGVyPy5jaGFuZ2VMb2NhbGUgfHxcbiAgICAhIWkxOG5Qcm92aWRlcj8uZ2V0TG9jYWxlIHx8XG4gICAgISFpMThuUHJvdmlkZXI/LnRyYW5zbGF0ZTtcblxuICBjb25zdCBub3RpZmljYXRpb24gPVxuICAgICEhbm90aWZpY2F0aW9uQ29udGV4dC5jbG9zZSB8fCAhIW5vdGlmaWNhdGlvbkNvbnRleHQub3BlbjtcblxuICBjb25zdCBhY2Nlc3NDb250cm9sID0gISFhY2Nlc3NDb250cm9sQ29udGV4dC5jYW47XG5cbiAgY29uc3QgcHJvamVjdElkID0gcmVmaW5lT3B0aW9ucz8ub3B0aW9ucz8ucHJvamVjdElkO1xuXG4gIHJldHVybiB7XG4gICAgcHJvdmlkZXJzOiB7XG4gICAgICBhdXRoLFxuICAgICAgYXVkaXRMb2csXG4gICAgICBsaXZlLFxuICAgICAgcm91dGVyLFxuICAgICAgZGF0YSxcbiAgICAgIGkxOG4sXG4gICAgICBub3RpZmljYXRpb24sXG4gICAgICBhY2Nlc3NDb250cm9sLFxuICAgIH0sXG4gICAgdmVyc2lvbjogUkVGSU5FX1ZFUlNJT04sXG4gICAgcmVzb3VyY2VDb3VudDogcmVzb3VyY2VzLmxlbmd0aCxcbiAgICBwcm9qZWN0SWQsXG4gIH07XG59O1xuIiwiaW1wb3J0IHR5cGUgeyBMZWdhY3lSb3V0ZXJQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvbGVnYWN5L3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IFJvdXRlclByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRleHRzL3JvdXRlci90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgY2hlY2tSb3V0ZXJQcm9wTWlzdXNlID0gKFxuICB2YWx1ZTogTGVnYWN5Um91dGVyUHJvdmlkZXIgfCBSb3V0ZXJQcm92aWRlcixcbikgPT4ge1xuICAvLyBjaGVjayBpZiBgcm91dGVyUHJvdmlkZXJgIHByb3AgaXMgcGFzc2VkIHdpdGggbGVnYWN5IHByb3BlcnRpZXMuXG4gIC8vIElmIHllcywgY29uc29sZS53YXJuIHRoZSB1c2VyIHRvIHVzZSBgbGVnYWN5UnV0ZXJQcm92aWRlcmAgcHJvcCBpbnN0ZWFkLlxuICBjb25zdCBiaW5kaW5ncyA9IFtcImdvXCIsIFwicGFyc2VcIiwgXCJiYWNrXCIsIFwiTGlua1wiXTtcblxuICAvLyBjaGVjayBpZiBgdmFsdWVgIGNvbnRhaW5zIHByb3BlcnRpZXMgb3RoZXIgdGhhbiBgYmluZGluZ3NgXG4gIGNvbnN0IG90aGVyUHJvcHMgPSBPYmplY3Qua2V5cyh2YWx1ZSkuZmlsdGVyKFxuICAgIChrZXkpID0+ICFiaW5kaW5ncy5pbmNsdWRlcyhrZXkpLFxuICApO1xuXG4gIGNvbnN0IGhhc090aGVyUHJvcHMgPSBvdGhlclByb3BzLmxlbmd0aCA+IDA7XG5cbiAgaWYgKGhhc090aGVyUHJvcHMpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgVW5zdXBwb3J0ZWQgcHJvcGVydGllcyBhcmUgZm91bmQgaW4gXFxgcm91dGVyUHJvdmlkZXJcXGAgcHJvcC4gWW91IHByb3ZpZGVkIFxcYCR7b3RoZXJQcm9wcy5qb2luKFxuICAgICAgICBcIiwgXCIsXG4gICAgICApfVxcYC4gU3VwcG9ydGVkIHByb3BlcnRpZXMgYXJlIFxcYCR7YmluZGluZ3Muam9pbihcbiAgICAgICAgXCIsIFwiLFxuICAgICAgKX1cXGAuIFlvdSBtYXkgd2FudGVkIHRvIHVzZSBcXGBsZWdhY3lSb3V0ZXJQcm92aWRlclxcYCBwcm9wIGluc3RlYWQuYCxcbiAgICApO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiaW1wb3J0IHsgY2hlY2tSb3V0ZXJQcm9wTWlzdXNlIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzL2NoZWNrLXJvdXRlci1wcm9wLW1pc3VzZVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBSb3V0ZXJQcm92aWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb250ZXh0cy9yb3V0ZXIvdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IHVzZVJvdXRlck1pc3VzZVdhcm5pbmcgPSAodmFsdWU/OiBSb3V0ZXJQcm92aWRlcikgPT4ge1xuICBjb25zdCB3YXJuZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHdhcm5lZC5jdXJyZW50ID09PSBmYWxzZSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHdhcm4gPSBjaGVja1JvdXRlclByb3BNaXN1c2UodmFsdWUpO1xuICAgICAgICBpZiAod2Fybikge1xuICAgICAgICAgIHdhcm5lZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwgW3ZhbHVlXSk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlQ2FuY2VsTm90aWZpY2F0aW9uLCB1c2VOb3RpZmljYXRpb24sIHVzZVRyYW5zbGF0ZSB9IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHsgdXNlckZyaWVuZGx5U2Vjb25kIH0gZnJvbSBcIkBkZWZpbml0aW9ucy9oZWxwZXJzXCI7XG5pbXBvcnQge1xuICBBY3Rpb25UeXBlcyxcbiAgdHlwZSBJVW5kb2FibGVRdWV1ZSxcbn0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL3VuZG9hYmxlUXVldWUvdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IFVuZG9hYmxlUXVldWU6IFJlYWN0LkZDPHtcbiAgbm90aWZpY2F0aW9uOiBJVW5kb2FibGVRdWV1ZTtcbn0+ID0gKHsgbm90aWZpY2F0aW9uIH0pID0+IHtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG5cbiAgY29uc3QgeyBub3RpZmljYXRpb25EaXNwYXRjaCB9ID0gdXNlQ2FuY2VsTm90aWZpY2F0aW9uKCk7XG4gIGNvbnN0IHsgb3BlbiB9ID0gdXNlTm90aWZpY2F0aW9uKCk7XG5cbiAgY29uc3QgW3RpbWVvdXRJZCwgc2V0VGltZW91dElkXSA9IHVzZVN0YXRlPG51bWJlciB8IHVuZGVmaW5lZD4oKTtcblxuICBjb25zdCBjYW5jZWxOb3RpZmljYXRpb24gPSAoKSA9PiB7XG4gICAgaWYgKG5vdGlmaWNhdGlvbi5pc1J1bm5pbmcgPT09IHRydWUpIHtcbiAgICAgIGlmIChub3RpZmljYXRpb24uc2Vjb25kcyA9PT0gMCkge1xuICAgICAgICBub3RpZmljYXRpb24uZG9NdXRhdGlvbigpO1xuICAgICAgfVxuICAgICAgaWYgKCFub3RpZmljYXRpb24uaXNTaWxlbnQpIHtcbiAgICAgICAgb3Blbj8uKHtcbiAgICAgICAgICBrZXk6IGAke25vdGlmaWNhdGlvbi5pZH0tJHtub3RpZmljYXRpb24ucmVzb3VyY2V9LW5vdGlmaWNhdGlvbmAsXG4gICAgICAgICAgdHlwZTogXCJwcm9ncmVzc1wiLFxuICAgICAgICAgIG1lc3NhZ2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICAgIFwibm90aWZpY2F0aW9ucy51bmRvYWJsZVwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzZWNvbmRzOiB1c2VyRnJpZW5kbHlTZWNvbmQobm90aWZpY2F0aW9uLnNlY29uZHMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGBZb3UgaGF2ZSAke3VzZXJGcmllbmRseVNlY29uZChcbiAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLnNlY29uZHMsXG4gICAgICAgICAgICApfSBzZWNvbmRzIHRvIHVuZG9gLFxuICAgICAgICAgICksXG4gICAgICAgICAgY2FuY2VsTXV0YXRpb246IG5vdGlmaWNhdGlvbi5jYW5jZWxNdXRhdGlvbixcbiAgICAgICAgICB1bmRvYWJsZVRpbWVvdXQ6IHVzZXJGcmllbmRseVNlY29uZChub3RpZmljYXRpb24uc2Vjb25kcyksXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAobm90aWZpY2F0aW9uLnNlY29uZHMgPiAwKSB7XG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIG5vdGlmaWNhdGlvbkRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGVzLkRFQ1JFQVNFX05PVElGSUNBVElPTl9TRUNPTkQsXG4gICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgIGlkOiBub3RpZmljYXRpb24uaWQsXG4gICAgICAgICAgICAgIHNlY29uZHM6IG5vdGlmaWNhdGlvbi5zZWNvbmRzLFxuICAgICAgICAgICAgICByZXNvdXJjZTogbm90aWZpY2F0aW9uLnJlc291cmNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMTAwMCkgYXMgdW5rbm93biBhcyBudW1iZXI7XG5cbiAgICAgICAgc2V0VGltZW91dElkKG5ld1RpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2FuY2VsTm90aWZpY2F0aW9uKCk7XG4gIH0sIFtub3RpZmljYXRpb25dKTtcblxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7XG4gIHVzZVJlZmluZUNvbnRleHQsXG4gIHVzZVJvdXRlckNvbnRleHQsXG4gIHVzZVRyYW5zbGF0ZSxcbiAgdXNlV2FybkFib3V0Q2hhbmdlLFxufSBmcm9tIFwiQGhvb2tzXCI7XG5cbmltcG9ydCB0eXBlIHsgTGF5b3V0UHJvcHMsIFRpdGxlUHJvcHMgfSBmcm9tIFwiLi4vLi4vY29udGV4dHMvcmVmaW5lL3R5cGVzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF5b3V0V3JhcHBlclByb3BzIHtcbiAgLyoqXG4gICAqIE91dGVyIGNvbXBvbmVudCB0aGF0IHJlbmRlcnMgb3RoZXIgY29tcG9uZW50c1xuICAgKiBAZGVmYXVsdCAqXG4gICAqL1xuICBMYXlvdXQ/OiBSZWFjdC5GQzxMYXlvdXRQcm9wcz47XG4gIC8qKlxuICAgKiBbQ3VzdG9tIHNpZGVyIHRvIHVzZV0oL2FwaS1yZWZlcmVuY2UvY29yZS9jb21wb25lbnRzL3JlZmluZS1jb25maWcubWQjc2lkZXIpXG4gICAqIEBkZWZhdWx0ICpcbiAgICovXG4gIFNpZGVyPzogUmVhY3QuRkM7XG4gIC8qKlxuICAgKiBbQ3VzdG9tIGhlYWRlciB0byB1c2VdKC9hcGktcmVmZXJlbmNlL2NvcmUvY29tcG9uZW50cy9yZWZpbmUtY29uZmlnLm1kI2hlYWRlcilcbiAgICogQGRlZmF1bHQgKlxuICAgKi9cbiAgSGVhZGVyPzogUmVhY3QuRkM7XG4gIC8qKlxuICAgKiBbQ3VzdG9tIHRpdGxlIHRvIHVzZV0oL2FwaS1yZWZlcmVuY2UvY29yZS9jb21wb25lbnRzL3JlZmluZS1jb25maWcubWQjdGl0bGUpXG4gICAqIEBkZWZhdWx0ICpcbiAgICovXG4gIFRpdGxlPzogUmVhY3QuRkM8VGl0bGVQcm9wcz47XG4gIC8qKlxuICAgKiBbQ3VzdG9tIGZvb3RlciB0byB1c2VdKC9hcGktcmVmZXJlbmNlL2NvcmUvY29tcG9uZW50cy9yZWZpbmUtY29uZmlnLm1kI2Zvb3RlcilcbiAgICogQGRlZmF1bHQgKlxuICAgKi9cbiAgRm9vdGVyPzogUmVhY3QuRkM7XG4gIC8qKlxuICAgKiBbQ3VzdG9tIG9mZiBsYXlvdXQgYXJlYSB0byB1c2VdKC9hcGktcmVmZXJlbmNlL2NvcmUvY29tcG9uZW50cy9yZWZpbmUtY29uZmlnLm1kI29mZmxheW91dGFyZWEpXG4gICAqIEBkZWZhdWx0ICpcbiAgICovXG4gIE9mZkxheW91dEFyZWE/OiBSZWFjdC5GQztcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuLyoqXG4gKiBgPExheW91dFdyYXBwZXI+YCB3cmFwcyBpdHMgY29udGVudHMgaW4gKipyZWZpbmUncyoqIGxheW91dCB3aXRoIGFsbCBjdXN0b21pemF0aW9ucyBtYWRlIGluIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2NvbXBvbmVudHMvcmVmaW5lLWNvbmZpZyBgPFJlZmluZT5gfSBjb21wb25lbnQuXG4gKiBJdCBpcyB0aGUgZGVmYXVsdCBsYXlvdXQgdXNlZCBpbiByZXNvdXJjZSBwYWdlcy5cbiAqIEl0IGNhbiBiZSB1c2VkIGluIGN1c3RvbSBwYWdlcyB0byB1c2UgZ2xvYmFsIGxheW91dC5cbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2NvbXBvbmVudHMvbGF5b3V0LXdyYXBwZXJ9IGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBjb21wb25lbnQgaXMgb2Jzb2xldGUgYW5kIG9ubHkgd29ya3Mgd2l0aCB0aGUgbGVnYWN5IHJvdXRlciBwcm92aWRlcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBMYXlvdXRXcmFwcGVyOiBSZWFjdC5GQzxMYXlvdXRXcmFwcGVyUHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIExheW91dDogTGF5b3V0RnJvbVByb3BzLFxuICBTaWRlcjogU2lkZXJGcm9tUHJvcHMsXG4gIEhlYWRlcjogSGVhZGVyRnJvbVByb3BzLFxuICBUaXRsZTogVGl0bGVGcm9tUHJvcHMsXG4gIEZvb3RlcjogRm9vdGVyRnJvbVByb3BzLFxuICBPZmZMYXlvdXRBcmVhOiBPZmZMYXlvdXRBcmVhRnJvbVByb3BzLFxufSkgPT4ge1xuICBjb25zdCB7IExheW91dCwgRm9vdGVyLCBIZWFkZXIsIFNpZGVyLCBUaXRsZSwgT2ZmTGF5b3V0QXJlYSB9ID1cbiAgICB1c2VSZWZpbmVDb250ZXh0KCk7XG5cbiAgY29uc3QgTGF5b3V0VG9SZW5kZXIgPSBMYXlvdXRGcm9tUHJvcHMgPz8gTGF5b3V0O1xuXG4gIHJldHVybiAoXG4gICAgPExheW91dFRvUmVuZGVyXG4gICAgICBTaWRlcj17U2lkZXJGcm9tUHJvcHMgPz8gU2lkZXJ9XG4gICAgICBIZWFkZXI9e0hlYWRlckZyb21Qcm9wcyA/PyBIZWFkZXJ9XG4gICAgICBGb290ZXI9e0Zvb3RlckZyb21Qcm9wcyA/PyBGb290ZXJ9XG4gICAgICBUaXRsZT17VGl0bGVGcm9tUHJvcHMgPz8gVGl0bGV9XG4gICAgICBPZmZMYXlvdXRBcmVhPXtPZmZMYXlvdXRBcmVhRnJvbVByb3BzID8/IE9mZkxheW91dEFyZWF9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgICAgPFVuc2F2ZWRQcm9tcHQgLz5cbiAgICA8L0xheW91dFRvUmVuZGVyPlxuICApO1xufTtcblxuY29uc3QgVW5zYXZlZFByb21wdDogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgUHJvbXB0IH0gPSB1c2VSb3V0ZXJDb250ZXh0KCk7XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG5cbiAgY29uc3QgeyB3YXJuV2hlbiwgc2V0V2FybldoZW4gfSA9IHVzZVdhcm5BYm91dENoYW5nZSgpO1xuXG4gIGNvbnN0IHdhcm5XaGVuTGlzdGVuZXIgPSAoZToge1xuICAgIHByZXZlbnREZWZhdWx0OiAoKSA9PiB2b2lkO1xuICAgIHJldHVyblZhbHVlOiBzdHJpbmc7XG4gIH0pID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBlLnJldHVyblZhbHVlID0gdHJhbnNsYXRlKFxuICAgICAgXCJ3YXJuV2hlblVuc2F2ZWRDaGFuZ2VzXCIsXG4gICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZT8gWW91IGhhdmUgdW5zYXZlZCBjaGFuZ2VzLlwiLFxuICAgICk7XG5cbiAgICByZXR1cm4gZS5yZXR1cm5WYWx1ZTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh3YXJuV2hlbikge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgd2FybldoZW5MaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHdhcm5XaGVuTGlzdGVuZXIpO1xuICB9LCBbd2FybldoZW5dKTtcblxuICByZXR1cm4gKFxuICAgIDxQcm9tcHRcbiAgICAgIHdoZW49e3dhcm5XaGVufVxuICAgICAgbWVzc2FnZT17dHJhbnNsYXRlKFxuICAgICAgICBcIndhcm5XaGVuVW5zYXZlZENoYW5nZXNcIixcbiAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmU/IFlvdSBoYXZlIHVuc2F2ZWQgY2hhbmdlcy5cIixcbiAgICAgICl9XG4gICAgICBzZXRXYXJuV2hlbj17c2V0V2FybldoZW59XG4gICAgLz5cbiAgKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IHVzZUFjdGl2ZUF1dGhQcm92aWRlciB9IGZyb20gXCJAZGVmaW5pdGlvbnMvaW5kZXhcIjtcbmltcG9ydCB7XG4gIHVzZUdvLFxuICB1c2VJc0F1dGhlbnRpY2F0ZWQsXG4gIHVzZU5hdmlnYXRpb24sXG4gIHVzZVBhcnNlZCxcbiAgdXNlUm91dGVyQ29udGV4dCxcbiAgdXNlUm91dGVyVHlwZSxcbn0gZnJvbSBcIkBob29rc1wiO1xuaW1wb3J0IHR5cGUgeyBHb0NvbmZpZyB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9yb3V0ZXIvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgQXV0aGVudGljYXRlZENvbW1vblByb3BzID0ge1xuICAvKipcbiAgICogVW5pcXVlIGtleSB0byBpZGVudGlmeSB0aGUgY29tcG9uZW50LlxuICAgKiBUaGlzIGlzIHJlcXVpcmVkIGlmIHlvdSBoYXZlIG11bHRpcGxlIGBBdXRoZW50aWNhdGVkYCBjb21wb25lbnRzIGF0IHRoZSBzYW1lIGxldmVsLlxuICAgKiBAcmVxdWlyZWRcbiAgICovXG4gIGtleTogUmVhY3QuS2V5O1xuICAvKipcbiAgICogV2hldGhlciB0byByZWRpcmVjdCB1c2VyIGlmIG5vdCBsb2dnZWQgaW4gb3Igbm90LlxuICAgKiBJZiBub3Qgc2V0LCB1c2VyIHdpbGwgYmUgcmVkaXJlY3RlZCB0byBgcmVkaXJlY3RUb2AgcHJvcGVydHkgb2YgdGhlIGBjaGVja2AgZnVuY3Rpb24ncyByZXNwb25zZS5cbiAgICogVGhpcyBiZWhhdmlvciBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgbmV3IGF1dGggcHJvdmlkZXJzLlxuICAgKiBMZWdhY3kgYXV0aCBwcm92aWRlcnMgd2lsbCByZWRpcmVjdCB0byBgL2xvZ2luYCBieSBkZWZhdWx0IGlmIHRoaXMgcHJvcGVydHkgaXMgbm90IHNldC5cbiAgICogSWYgc2V0IHRvIGEgc3RyaW5nLCB1c2VyIHdpbGwgYmUgcmVkaXJlY3RlZCB0byB0aGF0IHN0cmluZy5cbiAgICpcbiAgICogVGhpcyBwcm9wZXJ0eSBvbmx5IHdvcmtzIGlmIGBmYWxsYmFja2AgaXMgKipub3Qgc2V0KiouXG4gICAqL1xuICByZWRpcmVjdE9uRmFpbD86IHN0cmluZyB8IHRydWU7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFwcGVuZCBjdXJyZW50IHBhdGggdG8gc2VhcmNoIHBhcmFtcyBvZiB0aGUgcmVkaXJlY3QgdXJsIGF0IGB0b2AgcHJvcGVydHkuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGB0b2AgcGFyYW1ldGVyIGlzIHVzZWQgYnkgc3VjY2Vzc2Z1bCBpbnZvY2F0aW9ucyBvZiB0aGUgYHVzZUxvZ2luYCBob29rLlxuICAgKiBJZiBgdG9gIHByZXNlbnQsIGl0IHdpbGwgYmUgdXNlZCBhcyB0aGUgcmVkaXJlY3QgdXJsIGFmdGVyIHN1Y2Nlc3NmdWwgbG9naW4uXG4gICAqL1xuICBhcHBlbmRDdXJyZW50UGF0aFRvUXVlcnk/OiBib29sZWFuO1xuICAvKipcbiAgICogQ29udGVudCB0byBzaG93IGlmIHVzZXIgaXMgbm90IGxvZ2dlZCBpbi5cbiAgICovXG4gIGZhbGxiYWNrPzogUmVhY3QuUmVhY3ROb2RlO1xuICAvKipcbiAgICogQ29udGVudCB0byBzaG93IHdoaWxlIGNoZWNraW5nIHdoZXRoZXIgdXNlciBpcyBsb2dnZWQgaW4gb3Igbm90LlxuICAgKi9cbiAgbG9hZGluZz86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIENvbnRlbnQgdG8gc2hvdyBpZiB1c2VyIGlzIGxvZ2dlZCBpblxuICAgKi9cbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuXG5leHBvcnQgdHlwZSBMZWdhY3lBdXRoZW50aWNhdGVkUHJvcHMgPSB7XG4gIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogdHJ1ZTtcbn0gJiBBdXRoZW50aWNhdGVkQ29tbW9uUHJvcHM7XG5cbmV4cG9ydCB0eXBlIEF1dGhlbnRpY2F0ZWRQcm9wcyA9IHtcbiAgdjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlPzogZmFsc2U7XG59ICYgQXV0aGVudGljYXRlZENvbW1vblByb3BzO1xuXG4vKipcbiAqIGA8QXV0aGVudGljYXRlZD5gIGlzIHRoZSBjb21wb25lbnQgZm9ybSBvZiB7QGxpbmsgaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2hvb2tzL2F1dGgvdXNlQXV0aGVudGljYXRlZCBgdXNlQXV0aGVudGljYXRlZGB9LiBJdCBpbnRlcm5hbGx5IHVzZXMgYHVzZUF1dGhlbnRpY2F0ZWRgIHRvIHByb3ZpZGUgaXQncyBmdW5jdGlvbmFsaXR5LlxuICpcbiAqIEByZXF1aXJlcyB7QGxpbmsgaHR0cHM6Ly9yZWFjdC5kZXYvbGVhcm4vcmVuZGVyaW5nLWxpc3RzI3doeS1kb2VzLXJlYWN0LW5lZWQta2V5cyBga2V5YH0gcHJvcCBpZiB5b3UgaGF2ZSBtdWx0aXBsZSBjb21wb25lbnRzIGF0IHRoZSBzYW1lIGxldmVsLlxuICogSW4gUmVhY3QsIGNvbXBvbmVudHMgZG9uJ3QgYXV0b21hdGljYWxseSB1bm1vdW50IGFuZCByZW1vdW50IHdpdGggcHJvcCBjaGFuZ2VzLCB3aGljaCBpcyBnZW5lcmFsbHkgZ29vZCBmb3IgcGVyZm9ybWFuY2UuIEhvd2V2ZXIsIGZvciBzcGVjaWZpYyBjYXNlcyB0aGlzIGNhbiBjYXVzZSBpc3N1ZXMgbGlrZSB1bndhbnRlZCBjb250ZW50IHJlbmRlcmluZyAoYGZhbGxiYWNrYCBvciBgY2hpbGRyZW5gKS4gVG8gc29sdmUgdGhpcywgYXNzaWduaW5nIHVuaXF1ZSBga2V5YCB2YWx1ZXMgdG8gZWFjaCBpbnN0YW5jZSBvZiBjb21wb25lbnQgaXMgbmVjZXNzYXJ5LCBmb3JjaW5nIFJlYWN0IHRvIHVubW91bnQgYW5kIHJlbW91bnQgdGhlIGNvbXBvbmVudCwgcmF0aGVyIHRoYW4ganVzdCB1cGRhdGluZyBpdHMgcHJvcHMuXG4gKiBAZXhhbXBsZVxuICpgYGB0c3hcbiAqIDxBdXRoZW50aWNhdGVkIGtleT1cImRhc2hib2FyZFwiPlxuICogICA8aDE+RGFzaGJvYXJkIFBhZ2U8L2gxPlxuICogPC9BdXRoZW50aWNhdGVkPlxuICpgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9jb3JlL2NvbXBvbmVudHMvYXV0aC9hdXRoZW50aWNhdGVkIGA8QXV0aGVudGljYXRlZD5gfSBjb21wb25lbnQgZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEF1dGhlbnRpY2F0ZWQoXG4gIHByb3BzOiBMZWdhY3lBdXRoZW50aWNhdGVkUHJvcHMsXG4pOiBKU1guRWxlbWVudCB8IG51bGw7XG5cbi8qKlxuICogYDxBdXRoZW50aWNhdGVkPmAgaXMgdGhlIGNvbXBvbmVudCBmb3JtIG9mIHtAbGluayBodHRwczovL3JlZmluZS5kZXYvZG9jcy9hcGktcmVmZXJlbmNlL2NvcmUvaG9va3MvYXV0aC91c2VBdXRoZW50aWNhdGVkIGB1c2VBdXRoZW50aWNhdGVkYH0uIEl0IGludGVybmFsbHkgdXNlcyBgdXNlQXV0aGVudGljYXRlZGAgdG8gcHJvdmlkZSBpdCdzIGZ1bmN0aW9uYWxpdHkuXG4gKlxuICogQHJlcXVpcmVzIHtAbGluayBodHRwczovL3JlYWN0LmRldi9sZWFybi9yZW5kZXJpbmctbGlzdHMjd2h5LWRvZXMtcmVhY3QtbmVlZC1rZXlzIGBrZXlgfSBwcm9wIGlmIHlvdSBoYXZlIG11bHRpcGxlIGNvbXBvbmVudHMgYXQgdGhlIHNhbWUgbGV2ZWwuXG4gKiBJbiBSZWFjdCwgY29tcG9uZW50cyBkb24ndCBhdXRvbWF0aWNhbGx5IHVubW91bnQgYW5kIHJlbW91bnQgd2l0aCBwcm9wIGNoYW5nZXMsIHdoaWNoIGlzIGdlbmVyYWxseSBnb29kIGZvciBwZXJmb3JtYW5jZS4gSG93ZXZlciwgZm9yIHNwZWNpZmljIGNhc2VzIHRoaXMgY2FuIGNhdXNlIGlzc3VlcyBsaWtlIHVud2FudGVkIGNvbnRlbnQgcmVuZGVyaW5nIChgZmFsbGJhY2tgIG9yIGBjaGlsZHJlbmApLiBUbyBzb2x2ZSB0aGlzLCBhc3NpZ25pbmcgdW5pcXVlIGBrZXlgIHZhbHVlcyB0byBlYWNoIGluc3RhbmNlIG9mIGNvbXBvbmVudCBpcyBuZWNlc3NhcnksIGZvcmNpbmcgUmVhY3QgdG8gdW5tb3VudCBhbmQgcmVtb3VudCB0aGUgY29tcG9uZW50LCByYXRoZXIgdGhhbiBqdXN0IHVwZGF0aW5nIGl0cyBwcm9wcy5cbiAqIEBleGFtcGxlXG4gKmBgYHRzeFxuICogPEF1dGhlbnRpY2F0ZWQga2V5PVwiZGFzaGJvYXJkXCI+XG4gKiAgIDxoMT5EYXNoYm9hcmQgUGFnZTwvaDE+XG4gKiA8L0F1dGhlbnRpY2F0ZWQ+XG4gKmBgYFxuICpcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2NvcmUvY29tcG9uZW50cy9hdXRoL2F1dGhlbnRpY2F0ZWQgYDxBdXRoZW50aWNhdGVkPmB9IGNvbXBvbmVudCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gQXV0aGVudGljYXRlZChwcm9wczogQXV0aGVudGljYXRlZFByb3BzKTogSlNYLkVsZW1lbnQgfCBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gQXV0aGVudGljYXRlZCh7XG4gIHJlZGlyZWN0T25GYWlsID0gdHJ1ZSxcbiAgYXBwZW5kQ3VycmVudFBhdGhUb1F1ZXJ5ID0gdHJ1ZSxcbiAgY2hpbGRyZW4sXG4gIGZhbGxiYWNrOiBmYWxsYmFja0NvbnRlbnQsXG4gIGxvYWRpbmc6IGxvYWRpbmdDb250ZW50LFxufTogQXV0aGVudGljYXRlZFByb3BzIHwgTGVnYWN5QXV0aGVudGljYXRlZFByb3BzKTogSlNYLkVsZW1lbnQgfCBudWxsIHtcbiAgY29uc3QgYWN0aXZlQXV0aFByb3ZpZGVyID0gdXNlQWN0aXZlQXV0aFByb3ZpZGVyKCk7XG4gIGNvbnN0IHJvdXRlclR5cGUgPSB1c2VSb3V0ZXJUeXBlKCk7XG5cbiAgY29uc3QgaGFzQXV0aFByb3ZpZGVyID0gQm9vbGVhbihhY3RpdmVBdXRoUHJvdmlkZXI/LmlzUHJvdmlkZWQpO1xuICBjb25zdCBpc0xlZ2FjeUF1dGggPSBCb29sZWFuKGFjdGl2ZUF1dGhQcm92aWRlcj8uaXNMZWdhY3kpO1xuICBjb25zdCBpc0xlZ2FjeVJvdXRlciA9IHJvdXRlclR5cGUgPT09IFwibGVnYWN5XCI7XG5cbiAgY29uc3QgcGFyc2VkID0gdXNlUGFyc2VkKCk7XG4gIGNvbnN0IGdvID0gdXNlR28oKTtcbiAgY29uc3QgeyB1c2VMb2NhdGlvbiB9ID0gdXNlUm91dGVyQ29udGV4dCgpO1xuICBjb25zdCBsZWdhY3lMb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgY29uc3Qge1xuICAgIGlzRmV0Y2hpbmcsXG4gICAgaXNTdWNjZXNzLFxuICAgIGRhdGE6IHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQ6IGlzQXV0aGVudGljYXRlZFN0YXR1cyxcbiAgICAgIHJlZGlyZWN0VG86IGF1dGhlbnRpY2F0ZWRSZWRpcmVjdCxcbiAgICB9ID0ge30sXG4gIH0gPSB1c2VJc0F1dGhlbnRpY2F0ZWQoe1xuICAgIHYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZTogaXNMZWdhY3lBdXRoLFxuICB9KTtcblxuICAvLyBBdXRoZW50aWNhdGlvbiBzdGF0dXNcbiAgY29uc3QgaXNBdXRoZW50aWNhdGVkID0gaGFzQXV0aFByb3ZpZGVyXG4gICAgPyBpc0xlZ2FjeUF1dGhcbiAgICAgID8gaXNTdWNjZXNzXG4gICAgICA6IGlzQXV0aGVudGljYXRlZFN0YXR1c1xuICAgIDogdHJ1ZTtcblxuICAvLyB3aGVuIHRoZXJlIGlzIG5vIGF1dGggcHJvdmlkZXJcbiAgaWYgKCFoYXNBdXRoUHJvdmlkZXIpIHtcbiAgICByZXR1cm4gPD57Y2hpbGRyZW4gPz8gbnVsbH08Lz47XG4gIH1cblxuICAvLyB3aGVuIGNoZWNraW5nIGF1dGhlbnRpY2F0aW9uIHN0YXR1c1xuICBpZiAoaXNGZXRjaGluZykge1xuICAgIHJldHVybiA8Pntsb2FkaW5nQ29udGVudCA/PyBudWxsfTwvPjtcbiAgfVxuXG4gIC8vIHdoZW4gdXNlciBpcyBhdXRoZW50aWNhdGVkIHJldHVybiBjaGlsZHJlblxuICBpZiAoaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgcmV0dXJuIDw+e2NoaWxkcmVuID8/IG51bGx9PC8+O1xuICB9XG4gIC8vIHdoZW4gdXNlciBpcyBub3QgYXV0aGVudGljYXRlZCByZWRpcmVjdCBvciByZW5kZXIgZmFsbGJhY2tDb250ZW50XG5cbiAgLy8gcmVuZGVyIGZhbGxiYWNrQ29udGVudCBpZiBpdCBpcyBleGlzdFxuICBpZiAodHlwZW9mIGZhbGxiYWNrQ29udGVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiA8PntmYWxsYmFja0NvbnRlbnQgPz8gbnVsbH08Lz47XG4gIH1cbiAgLy8gaWYgdGhlcmUgaXMgbm8gZmFsbGJhY2tDb250ZW50LCByZWRpcmVjdCBwYWdlXG5cbiAgLy8gUmVkaXJlY3QgdXJsIHRvIHVzZS4gdXNlIHJlZGlyZWN0T25GYWlsIGlmIGl0IGlzIHNldC5cbiAgLy8gT3RoZXJ3aXNlIHVzZSByZWRpcmVjdFRvIHByb3BlcnR5IG9mIHRoZSBjaGVjayBmdW5jdGlvbidzIHJlc3BvbnNlLlxuICAvLyBJZiBib3RoIGFyZSBub3Qgc2V0LCB1c2UgYC9sb2dpbmAgYXMgdGhlIGRlZmF1bHQgcmVkaXJlY3QgdXJsLiAob25seSBmb3IgbGVnYWN5IGF1dGggcHJvdmlkZXJzKVxuICBjb25zdCBhcHBsaWVkUmVkaXJlY3QgPSBpc0xlZ2FjeUF1dGhcbiAgICA/IHR5cGVvZiByZWRpcmVjdE9uRmFpbCA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyByZWRpcmVjdE9uRmFpbFxuICAgICAgOiBcIi9sb2dpblwiXG4gICAgOiB0eXBlb2YgcmVkaXJlY3RPbkZhaWwgPT09IFwic3RyaW5nXCJcbiAgICAgID8gcmVkaXJlY3RPbkZhaWxcbiAgICAgIDogKGF1dGhlbnRpY2F0ZWRSZWRpcmVjdCBhcyBzdHJpbmcgfCB1bmRlZmluZWQpO1xuXG4gIC8vIEN1cnJlbnQgcGF0aG5hbWUgdG8gYXBwZW5kIHRvIHRoZSByZWRpcmVjdCB1cmwuXG4gIC8vIFVzZXIgd2lsbCBiZSByZWRpcmVjdGVkIHRvIHRoaXMgdXJsIGFmdGVyIHN1Y2Nlc3NmdWwgbXV0YXRpb24uIChsaWtlIGxvZ2luKVxuICBjb25zdCBwYXRobmFtZSA9IGAke1xuICAgIGlzTGVnYWN5Um91dGVyID8gbGVnYWN5TG9jYXRpb24/LnBhdGhuYW1lIDogcGFyc2VkLnBhdGhuYW1lXG4gIH1gLnJlcGxhY2UoLyhcXD8uKnwjLiopJC8sIFwiXCIpO1xuICAvLyBSZWRpcmVjdCBpZiBhcHBsaWVkUmVkaXJlY3QgaXMgc2V0LCBvdGhlcndpc2UgcmV0dXJuIG51bGwuXG4gIC8vICBVc2VzIGByZXBsYWNlYCBmb3IgbGVnYWN5IHJvdXRlciBhbmQgYGdvYCBmb3IgbmV3IHJvdXRlci5cbiAgaWYgKGFwcGxpZWRSZWRpcmVjdCkge1xuICAgIGlmIChpc0xlZ2FjeVJvdXRlcikge1xuICAgICAgY29uc3QgdG9RdWVyeSA9IGFwcGVuZEN1cnJlbnRQYXRoVG9RdWVyeVxuICAgICAgICA/IGA/dG89JHtlbmNvZGVVUklDb21wb25lbnQocGF0aG5hbWUpfWBcbiAgICAgICAgOiBcIlwiO1xuICAgICAgcmV0dXJuIDxSZWRpcmVjdExlZ2FjeSB0bz17YCR7YXBwbGllZFJlZGlyZWN0fSR7dG9RdWVyeX1gfSAvPjtcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeVRvVmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHBhcnNlZC5wYXJhbXM/LnRvXG4gICAgICA/IHBhcnNlZC5wYXJhbXMudG9cbiAgICAgIDogZ28oe1xuICAgICAgICAgIHRvOiBwYXRobmFtZSxcbiAgICAgICAgICBvcHRpb25zOiB7IGtlZXBRdWVyeTogdHJ1ZSB9LFxuICAgICAgICAgIHR5cGU6IFwicGF0aFwiLFxuICAgICAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8UmVkaXJlY3RcbiAgICAgICAgY29uZmlnPXt7XG4gICAgICAgICAgdG86IGFwcGxpZWRSZWRpcmVjdCxcbiAgICAgICAgICBxdWVyeTpcbiAgICAgICAgICAgIGFwcGVuZEN1cnJlbnRQYXRoVG9RdWVyeSAmJiAocXVlcnlUb1ZhbHVlID8/IFwiXCIpLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICB0bzogcXVlcnlUb1ZhbHVlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgdHlwZTogXCJyZXBsYWNlXCIsXG4gICAgICAgIH19XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgUmVkaXJlY3QgPSAoeyBjb25maWcgfTogeyBjb25maWc6IEdvQ29uZmlnIH0pID0+IHtcbiAgY29uc3QgZ28gPSB1c2VHbygpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZ28oY29uZmlnKTtcbiAgfSwgW2dvLCBjb25maWddKTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IFJlZGlyZWN0TGVnYWN5ID0gKHsgdG8gfTogeyB0bzogc3RyaW5nIH0pID0+IHtcbiAgY29uc3QgeyByZXBsYWNlIH0gPSB1c2VOYXZpZ2F0aW9uKCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXBsYWNlKHRvKTtcbiAgfSwgW3JlcGxhY2UsIHRvXSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuIiwiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VSb3V0ZXJDb250ZXh0IH0gZnJvbSBcIkBob29rc1wiO1xuaW1wb3J0IHsgdXNlTGVnYWN5QXV0aENvbnRleHQgfSBmcm9tIFwiQGNvbnRleHRzL2F1dGhcIjtcblxuZXhwb3J0IGNvbnN0IFJvdXRlQ2hhbmdlSGFuZGxlcjogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHsgdXNlTG9jYXRpb24gfSA9IHVzZVJvdXRlckNvbnRleHQoKTtcblxuICBjb25zdCB7IGNoZWNrQXV0aCB9ID0gdXNlTGVnYWN5QXV0aENvbnRleHQoKTtcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2hlY2tBdXRoPy4oKS5jYXRjaCgoKSA9PiBmYWxzZSk7XG4gIH0sIFtsb2NhdGlvbj8ucGF0aG5hbWVdKTtcblxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7IFVzZVF1ZXJ5T3B0aW9ucyB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuaW1wb3J0IHsgdXNlQ2FuLCB1c2VSZXNvdXJjZVBhcmFtcyB9IGZyb20gXCJAaG9va3NcIjtcblxuaW1wb3J0IHR5cGUgeyBDYW5SZXR1cm5UeXBlIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2FjY2Vzc0NvbnRyb2wvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQmFzZUtleSB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9kYXRhL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IElSZXNvdXJjZUl0ZW0sIElUcmVlTWVudSB9IGZyb20gXCIuLi8uLi9jb250ZXh0cy9yZXNvdXJjZS90eXBlc1wiO1xuXG50eXBlIENhblBhcmFtcyA9IHtcbiAgcmVzb3VyY2U/OiBJUmVzb3VyY2VJdGVtICYgeyBjaGlsZHJlbj86IElUcmVlTWVudVtdIH07XG4gIGlkPzogQmFzZUtleTtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufTtcblxudHlwZSBPblVuYXV0aG9yaXplZFByb3BzID0ge1xuICByZXNvdXJjZT86IHN0cmluZztcbiAgcmVhc29uPzogc3RyaW5nO1xuICBhY3Rpb246IHN0cmluZztcbiAgcGFyYW1zOiBDYW5QYXJhbXM7XG59O1xuXG50eXBlIENhbkFjY2Vzc0Jhc2VQcm9wcyA9IHtcbiAgLyoqXG4gICAqIFJlc291cmNlIG5hbWUgZm9yIEFQSSBkYXRhIGludGVyYWN0aW9uc1xuICAgKi9cbiAgcmVzb3VyY2U/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBJbnRlbmRlZCBhY3Rpb24gb24gcmVzb3VyY2VcbiAgICovXG4gIGFjdGlvbjogc3RyaW5nO1xuICAvKipcbiAgICogUGFyYW1ldGVycyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlc291cmNlXG4gICAqIEB0eXBlIHsgcmVzb3VyY2U/OiBbSVJlc291cmNlSXRlbV0oaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL2ludGVyZmFjZVJlZmVyZW5jZXMvI2NhbnBhcmFtcyksIGlkPzogW0Jhc2VLZXldKGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9pbnRlcmZhY2VSZWZlcmVuY2VzLyNiYXNla2V5KSwgW2tleTogc3RyaW5nXTogYW55IH1cbiAgICovXG4gIHBhcmFtcz86IENhblBhcmFtcztcbiAgLyoqXG4gICAqIENvbnRlbnQgdG8gc2hvdyBpZiBhY2Nlc3MgY29udHJvbCByZXR1cm5zIGBmYWxzZWBcbiAgICovXG4gIGZhbGxiYWNrPzogUmVhY3QuUmVhY3ROb2RlO1xuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIGlmIGFjY2VzcyBjb250cm9sIHJldHVybnMgYGNhbjogZmFsc2VgXG4gICAqL1xuICBvblVuYXV0aG9yaXplZD86IChwcm9wczogT25VbmF1dGhvcml6ZWRQcm9wcykgPT4gdm9pZDtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcXVlcnlPcHRpb25zPzogVXNlUXVlcnlPcHRpb25zPENhblJldHVyblR5cGU+O1xufTtcblxudHlwZSBDYW5BY2Nlc3NXaXRob3V0UGFyYW1zUHJvcHMgPSB7XG4gIFtrZXkgaW4gRXhjbHVkZTxcbiAgICBrZXlvZiBDYW5BY2Nlc3NCYXNlUHJvcHMsXG4gICAgXCJmYWxsYmFja1wiIHwgXCJjaGlsZHJlblwiXG4gID5dPzogdW5kZWZpbmVkO1xufSAmIHtcbiAgW2tleSBpbiBcImZhbGxiYWNrXCIgfCBcImNoaWxkcmVuXCJdPzogQ2FuQWNjZXNzQmFzZVByb3BzW2tleV07XG59O1xuXG5leHBvcnQgdHlwZSBDYW5BY2Nlc3NQcm9wcyA9IENhbkFjY2Vzc0Jhc2VQcm9wcyB8IENhbkFjY2Vzc1dpdGhvdXRQYXJhbXNQcm9wcztcblxuZXhwb3J0IGNvbnN0IENhbkFjY2VzczogUmVhY3QuRkM8Q2FuQWNjZXNzUHJvcHM+ID0gKHtcbiAgcmVzb3VyY2U6IHJlc291cmNlRnJvbVByb3AsXG4gIGFjdGlvbjogYWN0aW9uRnJvbVByb3AsXG4gIHBhcmFtczogcGFyYW1zRnJvbVByb3AsXG4gIGZhbGxiYWNrLFxuICBvblVuYXV0aG9yaXplZCxcbiAgY2hpbGRyZW4sXG4gIHF1ZXJ5T3B0aW9uczogY29tcG9uZW50UXVlcnlPcHRpb25zLFxuICAuLi5yZXN0XG59KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBpZCxcbiAgICByZXNvdXJjZSxcbiAgICBhY3Rpb246IGZhbGxiYWNrQWN0aW9uID0gXCJcIixcbiAgfSA9IHVzZVJlc291cmNlUGFyYW1zKHtcbiAgICByZXNvdXJjZTogcmVzb3VyY2VGcm9tUHJvcCxcbiAgICBpZDogcGFyYW1zRnJvbVByb3A/LmlkLFxuICB9KTtcblxuICBjb25zdCBhY3Rpb24gPSBhY3Rpb25Gcm9tUHJvcCA/PyBmYWxsYmFja0FjdGlvbjtcblxuICBjb25zdCBwYXJhbXMgPSBwYXJhbXNGcm9tUHJvcCA/PyB7XG4gICAgaWQsXG4gICAgcmVzb3VyY2UsXG4gIH07XG5cbiAgY29uc3QgeyBkYXRhIH0gPSB1c2VDYW4oe1xuICAgIHJlc291cmNlOiByZXNvdXJjZT8ubmFtZSxcbiAgICBhY3Rpb24sXG4gICAgcGFyYW1zLFxuICAgIHF1ZXJ5T3B0aW9uczogY29tcG9uZW50UXVlcnlPcHRpb25zLFxuICB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvblVuYXV0aG9yaXplZCAmJiBkYXRhPy5jYW4gPT09IGZhbHNlKSB7XG4gICAgICBvblVuYXV0aG9yaXplZCh7XG4gICAgICAgIHJlc291cmNlOiByZXNvdXJjZT8ubmFtZSxcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICByZWFzb246IGRhdGE/LnJlYXNvbixcbiAgICAgICAgcGFyYW1zLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZGF0YT8uY2FuXSk7XG5cbiAgaWYgKGRhdGE/LmNhbikge1xuICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgIGNvbnN0IENoaWxkcmVuID0gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCByZXN0KTtcbiAgICAgIHJldHVybiBDaGlsZHJlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xuICB9XG5cbiAgaWYgKGRhdGE/LmNhbiA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gPD57ZmFsbGJhY2sgPz8gbnVsbH08Lz47XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdHlwZSBDU1NQcm9wZXJ0aWVzLCB0eXBlIFNWR1Byb3BzLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IENTU1J1bGVzIH0gZnJvbSBcIi4vc3R5bGVzXCI7XG5cbmNvbnN0IHRleHQgPVxuICBcIklmIHlvdSBmaW5kIFJlZmluZSB1c2VmdWwsIHlvdSBjYW4gY29udHJpYnV0ZSB0byBpdHMgZ3Jvd3RoIGJ5IGdpdmluZyBpdCBhIHN0YXIgb24gR2l0SHViXCI7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNvbnRhaW5lclN0eWxlPzogQ1NTUHJvcGVydGllcztcbn07XG5cbmV4cG9ydCBjb25zdCBHaXRIdWJCYW5uZXIgPSAoeyBjb250YWluZXJTdHlsZSB9OiBQcm9wcykgPT4ge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVUYWcpO1xuICAgIENTU1J1bGVzLmZvckVhY2goKHJ1bGUpID0+XG4gICAgICBzdHlsZVRhZy5zaGVldD8uaW5zZXJ0UnVsZShydWxlLCBzdHlsZVRhZy5zaGVldC5jc3NSdWxlcy5sZW5ndGgpLFxuICAgICk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cImJhbm5lciBiZy10b3AtYW5ub3VuY2VtZW50XCJcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjQ4cHhcIixcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgICBwYWRkaW5nTGVmdDogXCIyMDBweFwiLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBtYXhXaWR0aDogXCIxMDB2d1wiLFxuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCAjNDdlYmViMjZcIixcbiAgICAgICAgICAuLi5jb250YWluZXJTdHlsZSxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cInRvcC1hbm5vdW5jZW1lbnQtbWFza1wiXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgIzQ3ZWJlYjI2XCIsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgICAgICAgIHdpZHRoOiBcIjk2MHB4XCIsXG4gICAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gICAgICAgICAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiBcImNhbGMoNTAlIC0gMzAwcHgpXCIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8R2xvd1NtYWxsXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBcIjEuNXNcIixcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgICAgICAgICB0b3A6IFwiMnB4XCIsXG4gICAgICAgICAgICAgICAgICByaWdodDogXCIyMjBweFwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgaWQ9e1wiMVwifVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8R2xvd1NtYWxsXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkRlbGF5OiBcIjFzXCIsXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgICAgICAgdG9wOiBcIjhweFwiLFxuICAgICAgICAgICAgICAgICAgcmlnaHQ6IFwiMTAwcHhcIixcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoMTgwZGVnKVwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgaWQ9e1wiMlwifVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8R2xvd0JpZ1xuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICAgICAgICAgICAgcmlnaHQ6IFwiMTBweFwiLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgaWQ9e1wiM1wifVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICB3aWR0aDogXCJjYWxjKDUwJSAtIDMwMHB4KVwiLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPEdsb3dTbWFsbFxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25EZWxheTogXCIyc1wiLFxuICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgIHRvcDogXCI2cHhcIixcbiAgICAgICAgICAgICAgICAgIHJpZ2h0OiBcIjE4MHB4XCIsXG4gICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwicm90YXRlKDE4MGRlZylcIixcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGlkPXtcIjRcIn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPEdsb3dTbWFsbFxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICBhbmltYXRpb25EZWxheTogXCIwLjVzXCIsXG4gICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRGVsYXk6IFwiMS4zc1wiLFxuICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgIHRvcDogXCIycHhcIixcbiAgICAgICAgICAgICAgICAgIHJpZ2h0OiBcIjQwcHhcIixcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIGlkPXtcIjVcIn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPEdsb3dCaWdcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgICAgIHJpZ2h0OiBcIi03MHB4XCIsXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBpZD17XCI2XCJ9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxUZXh0IHRleHQ9e3RleHR9IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFRleHQgPSAoeyB0ZXh0IH06IHsgdGV4dDogc3RyaW5nIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8YVxuICAgICAgY2xhc3NOYW1lPVwiZ2gtbGlua1wiXG4gICAgICBocmVmPVwiaHR0cHM6Ly9zLnJlZmluZS5kZXYvZ2l0aHViLXN1cHBvcnRcIlxuICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgIHJlbD1cIm5vcmVmZXJyZXJcIlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgcGFkZGluZzogXCIwIDYwcHhcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXhXcmFwOiBcIm5vd3JhcFwiLFxuICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOlxuICAgICAgICAgIFwibGluZWFyLWdyYWRpZW50KDkwZGVnLCByZ2JhKDMxLCA2MywgNzIsIDAuMDApIDAlLCAjMUYzRjQ4IDEwJSwgIzFGM0Y0OCA5MCUsIHJnYmEoMzEsIDYzLCA3MiwgMC4wMCkgMTAwJSlcIixcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIGNvbG9yOiBcIiNmZmZcIixcbiAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgICAgICAgIGdhcDogXCI4cHhcIixcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICDirZDvuI9cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNsYXNzTmFtZT1cInRleHRcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBmb250U2l6ZTogXCIxNnB4XCIsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiBcIjI0cHhcIixcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge3RleHR9XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICDirZDvuI9cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9hPlxuICApO1xufTtcblxuY29uc3QgR2xvd1NtYWxsID0gKHsgc3R5bGUsIC4uLnByb3BzIH06IFNWR1Byb3BzPFNWR1NWR0VsZW1lbnQ+KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHN2Z1xuICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICB3aWR0aD17ODB9XG4gICAgICBoZWlnaHQ9ezQwfVxuICAgICAgZmlsbD1cIm5vbmVcIlxuICAgICAgc3R5bGU9e3tcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYW5pbWF0aW9uOiBcInRvcC1hbm5vdW5jZW1lbnQtZ2xvdyAxcyBlYXNlLWluLW91dCBpbmZpbml0ZSBhbHRlcm5hdGVcIixcbiAgICAgICAgLi4uc3R5bGUsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxjaXJjbGUgY3g9ezQwfSByPXs0MH0gZmlsbD17YHVybCgjJHtwcm9wcy5pZH0tYSlgfSBmaWxsT3BhY2l0eT17MC41fSAvPlxuICAgICAgPGRlZnM+XG4gICAgICAgIDxyYWRpYWxHcmFkaWVudFxuICAgICAgICAgIGlkPXtgJHtwcm9wcy5pZH0tYWB9XG4gICAgICAgICAgY3g9ezB9XG4gICAgICAgICAgY3k9ezB9XG4gICAgICAgICAgcj17MX1cbiAgICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgwIDQwIC00MCAwIDQwIDApXCJcbiAgICAgICAgICBncmFkaWVudFVuaXRzPVwidXNlclNwYWNlT25Vc2VcIlxuICAgICAgICA+XG4gICAgICAgICAgPHN0b3Agc3RvcENvbG9yPVwiIzQ3RUJFQlwiIC8+XG4gICAgICAgICAgPHN0b3Agb2Zmc2V0PXsxfSBzdG9wQ29sb3I9XCIjNDdFQkVCXCIgc3RvcE9wYWNpdHk9ezB9IC8+XG4gICAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgICA8L2RlZnM+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5jb25zdCBHbG93QmlnID0gKHsgc3R5bGUsIC4uLnByb3BzIH06IFNWR1Byb3BzPFNWR1NWR0VsZW1lbnQ+KSA9PiAoXG4gIDxzdmdcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICB3aWR0aD17MTIwfVxuICAgIGhlaWdodD17NDh9XG4gICAgZmlsbD1cIm5vbmVcIlxuICAgIHsuLi5wcm9wc31cbiAgICBzdHlsZT17e1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGFuaW1hdGlvbjogXCJ0b3AtYW5ub3VuY2VtZW50LWdsb3cgMXMgZWFzZS1pbi1vdXQgaW5maW5pdGUgYWx0ZXJuYXRlXCIsXG4gICAgICAuLi5zdHlsZSxcbiAgICB9fVxuICA+XG4gICAgPGNpcmNsZVxuICAgICAgY3g9ezYwfVxuICAgICAgY3k9ezI0fVxuICAgICAgcj17NjB9XG4gICAgICBmaWxsPXtgdXJsKCMke3Byb3BzLmlkfS1hKWB9XG4gICAgICBmaWxsT3BhY2l0eT17MC41fVxuICAgIC8+XG4gICAgPGRlZnM+XG4gICAgICA8cmFkaWFsR3JhZGllbnRcbiAgICAgICAgaWQ9e2Ake3Byb3BzLmlkfS1hYH1cbiAgICAgICAgY3g9ezB9XG4gICAgICAgIGN5PXswfVxuICAgICAgICByPXsxfVxuICAgICAgICBncmFkaWVudFRyYW5zZm9ybT1cIm1hdHJpeCgwIDYwIC02MCAwIDYwIDI0KVwiXG4gICAgICAgIGdyYWRpZW50VW5pdHM9XCJ1c2VyU3BhY2VPblVzZVwiXG4gICAgICA+XG4gICAgICAgIDxzdG9wIHN0b3BDb2xvcj1cIiM0N0VCRUJcIiAvPlxuICAgICAgICA8c3RvcCBvZmZzZXQ9ezF9IHN0b3BDb2xvcj1cIiM0N0VCRUJcIiBzdG9wT3BhY2l0eT17MH0gLz5cbiAgICAgIDwvcmFkaWFsR3JhZGllbnQ+XG4gICAgPC9kZWZzPlxuICA8L3N2Zz5cbik7XG4iLCJleHBvcnQgY29uc3QgQ1NTUnVsZXMgPSBbXG4gIGBcbiAgICAuYmctdG9wLWFubm91bmNlbWVudCB7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZ2JhKDcxLCAyMzUsIDIzNSwgMC4xNSk7XG4gICAgICAgIGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChcbiAgICAgICAgICAgICAgICAyMTguMTklIDExMS44JSBhdCAwJSAwJSxcbiAgICAgICAgICAgICAgICByZ2JhKDcxLCAyMzUsIDIzNSwgMC4xKSAwJSxcbiAgICAgICAgICAgICAgICByZ2JhKDcxLCAyMzUsIDIzNSwgMC4yKSAxMDAlXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgIzE0MTQxZjtcbiAgICB9XG4gICAgYCxcbiAgYFxuICAgIC50b3AtYW5ub3VuY2VtZW50LW1hc2sge1xuICAgICAgICBtYXNrLWltYWdlOiB1cmwoaHR0cHM6Ly9yZWZpbmUuYW1zMy5jZG4uZGlnaXRhbG9jZWFuc3BhY2VzLmNvbS93ZWJzaXRlL3N0YXRpYy9hc3NldHMvaGV4YWdvbi5zdmcpO1xuICAgICAgICAtd2Via2l0LW1hc2staW1hZ2U6IHVybChodHRwczovL3JlZmluZS5hbXMzLmNkbi5kaWdpdGFsb2NlYW5zcGFjZXMuY29tL3dlYnNpdGUvc3RhdGljL2Fzc2V0cy9oZXhhZ29uLnN2Zyk7XG4gICAgICAgIG1hc2stcmVwZWF0OiByZXBlYXQ7XG4gICAgICAgIC13ZWJraXQtbWFzay1yZXBlYXQ6IHJlcGVhdDtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSg3MSwgMjM1LCAyMzUsIDAuMjUpO1xuICAgIH1cbiAgICBgLFxuICBgXG4gICAgLmJhbm5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICB9YCxcbiAgYFxuICAgIC5naC1saW5rLCAuZ2gtbGluazpob3ZlciwgLmdoLWxpbms6YWN0aXZlLCAuZ2gtbGluazp2aXNpdGVkLCAuZ2gtbGluazpmb2N1cyB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgei1pbmRleDogOTtcbiAgICB9XG4gICAgYCxcbiAgYFxuICAgIEBrZXlmcmFtZXMgdG9wLWFubm91bmNlbWVudC1nbG93IHtcbiAgICAgICAgMCUge1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgfVxuXG4gICAgICAgIDEwMCUge1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBgLFxuXTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHsgdXNlVHJhbnNsYXRlIH0gZnJvbSBcIkBob29rcy9pMThuXCI7XG5cbmltcG9ydCB0eXBlIHsgQmFzZVJlY29yZCwgSHR0cEVycm9yIH0gZnJvbSBcIi4uLy4uL2NvbnRleHRzL2RhdGEvdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgQXV0b1NhdmVJbmRpY2F0b3JFbGVtZW50cyB9IGZyb20gXCIuLi8uLi9ob29rcy9mb3JtL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IFVzZVVwZGF0ZVJldHVyblR5cGUgfSBmcm9tIFwiLi4vLi4vaG9va3MvZGF0YS91c2VVcGRhdGVcIjtcblxuZXhwb3J0IHR5cGUgQXV0b1NhdmVJbmRpY2F0b3JQcm9wczxcbiAgVERhdGEgZXh0ZW5kcyBCYXNlUmVjb3JkID0gQmFzZVJlY29yZCxcbiAgVEVycm9yIGV4dGVuZHMgSHR0cEVycm9yID0gSHR0cEVycm9yLFxuICBUVmFyaWFibGVzID0ge30sXG4+ID0ge1xuICAvKipcbiAgICogVGhlIGRhdGEgcmV0dXJuZWQgYnkgdGhlIHVwZGF0ZSByZXF1ZXN0LlxuICAgKi9cbiAgZGF0YT86IFVzZVVwZGF0ZVJldHVyblR5cGU8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz5bXCJkYXRhXCJdO1xuICAvKipcbiAgICogVGhlIGVycm9yIHJldHVybmVkIGJ5IHRoZSB1cGRhdGUgcmVxdWVzdC5cbiAgICovXG4gIGVycm9yPzogVXNlVXBkYXRlUmV0dXJuVHlwZTxURGF0YSwgVEVycm9yLCBUVmFyaWFibGVzPltcImVycm9yXCJdO1xuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgdXBkYXRlIHJlcXVlc3QuXG4gICAqL1xuICBzdGF0dXM6IFVzZVVwZGF0ZVJldHVyblR5cGU8VERhdGEsIFRFcnJvciwgVFZhcmlhYmxlcz5bXCJzdGF0dXNcIl07XG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudHMgdG8gZGlzcGxheSBmb3IgZWFjaCBzdGF0dXMuXG4gICAqL1xuICBlbGVtZW50cz86IEF1dG9TYXZlSW5kaWNhdG9yRWxlbWVudHM7XG59O1xuXG5leHBvcnQgY29uc3QgQXV0b1NhdmVJbmRpY2F0b3I6IFJlYWN0LkZDPEF1dG9TYXZlSW5kaWNhdG9yUHJvcHM+ID0gKHtcbiAgc3RhdHVzLFxuICBlbGVtZW50czoge1xuICAgIHN1Y2Nlc3MgPSAoXG4gICAgICA8TWVzc2FnZSB0cmFuc2xhdGlvbktleT1cImF1dG9TYXZlLnN1Y2Nlc3NcIiBkZWZhdWx0TWVzc2FnZT1cInNhdmVkXCIgLz5cbiAgICApLFxuICAgIGVycm9yID0gKFxuICAgICAgPE1lc3NhZ2VcbiAgICAgICAgdHJhbnNsYXRpb25LZXk9XCJhdXRvU2F2ZS5lcnJvclwiXG4gICAgICAgIGRlZmF1bHRNZXNzYWdlPVwiYXV0byBzYXZlIGZhaWx1cmVcIlxuICAgICAgLz5cbiAgICApLFxuICAgIGxvYWRpbmcgPSAoXG4gICAgICA8TWVzc2FnZSB0cmFuc2xhdGlvbktleT1cImF1dG9TYXZlLmxvYWRpbmdcIiBkZWZhdWx0TWVzc2FnZT1cInNhdmluZy4uLlwiIC8+XG4gICAgKSxcbiAgICBpZGxlID0gKFxuICAgICAgPE1lc3NhZ2VcbiAgICAgICAgdHJhbnNsYXRpb25LZXk9XCJhdXRvU2F2ZS5pZGxlXCJcbiAgICAgICAgZGVmYXVsdE1lc3NhZ2U9XCJ3YWl0aW5nIGZvciBjaGFuZ2VzXCJcbiAgICAgIC8+XG4gICAgKSxcbiAgfSA9IHt9LFxufSkgPT4ge1xuICBzd2l0Y2ggKHN0YXR1cykge1xuICAgIGNhc2UgXCJzdWNjZXNzXCI6XG4gICAgICByZXR1cm4gPD57c3VjY2Vzc308Lz47XG4gICAgY2FzZSBcImVycm9yXCI6XG4gICAgICByZXR1cm4gPD57ZXJyb3J9PC8+O1xuICAgIGNhc2UgXCJsb2FkaW5nXCI6XG4gICAgICByZXR1cm4gPD57bG9hZGluZ308Lz47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiA8PntpZGxlfTwvPjtcbiAgfVxufTtcblxuY29uc3QgTWVzc2FnZSA9ICh7XG4gIHRyYW5zbGF0aW9uS2V5LFxuICBkZWZhdWx0TWVzc2FnZSxcbn06IHtcbiAgdHJhbnNsYXRpb25LZXk6IHN0cmluZztcbiAgZGVmYXVsdE1lc3NhZ2U6IHN0cmluZztcbn0pID0+IHtcbiAgY29uc3QgdHJhbnNsYXRlID0gdXNlVHJhbnNsYXRlKCk7XG5cbiAgcmV0dXJuIDxzcGFuPnt0cmFuc2xhdGUodHJhbnNsYXRpb25LZXksIGRlZmF1bHRNZXNzYWdlKX08L3NwYW4+O1xufTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiZ2V0WFJheSIsInVzZVF1ZXJ5IiwiTGVnYWN5QXV0aENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiTGVnYWN5QXV0aENvbnRleHRQcm92aWRlciIsIl9fbmFtZSIsImNoaWxkcmVuIiwiaXNQcm92aWRlZCIsImF1dGhPcGVyYXRpb25zIiwicmVwbGFjZSIsInVzZU5hdmlnYXRpb24iLCJsb2dpbkZ1bmMiLCJwYXJhbXMiLCJfYSIsImxvZ2luIiwiY2FsbCIsImVycm9yIiwiUHJvbWlzZSIsInJlamVjdCIsInJlZ2lzdGVyRnVuYyIsInJlZ2lzdGVyIiwibG9nb3V0RnVuYyIsImxvZ291dCIsImNoZWNrQXV0aEZ1bmMiLCJjaGVja0F1dGgiLCJyZXNvbHZlIiwicmVkaXJlY3RQYXRoIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJBdXRoQmluZGluZ3NDb250ZXh0IiwiQXV0aEJpbmRpbmdzQ29udGV4dFByb3ZpZGVyIiwiYXV0aEJpbmRpbmdzIiwiaGFuZGxlTG9naW4iLCJjb25zb2xlIiwid2FybiIsImhhbmRsZVJlZ2lzdGVyIiwiaGFuZGxlTG9nb3V0IiwiaGFuZGxlQ2hlY2siLCJyZXN1bHQiLCJjaGVjayIsImhhbmRsZUZvcmdvdFBhc3N3b3JkIiwiZm9yZ290UGFzc3dvcmQiLCJoYW5kbGVVcGRhdGVQYXNzd29yZCIsInVwZGF0ZVBhc3N3b3JkIiwidXNlTGVnYWN5QXV0aENvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlQXV0aEJpbmRpbmdzQ29udGV4dCIsImRpZmZlcmVuY2VXaXRoIiwidW5pb25XaXRoIiwicXMiLCJ3YXJuT25jZSIsInVzZXJGcmllbmRseVNlY29uZCIsIm1pbGlzZWNvbmRzIiwiZnJvbVBhaXJzIiwiemlwIiwiaW1wb3J0Q1NWTWFwcGVyIiwiZGF0YSIsIm1hcERhdGEiLCJpdGVtIiwiaGVhZGVycyIsImJvZHkiLCJtYXAiLCJlbnRyeSIsImluZGV4IiwiYXJyYXkiLCJwbHVyYWxpemUiLCJ1c2VyRnJpZW5kbHlSZXNvdXJjZU5hbWUiLCJyZXNvdXJjZSIsInR5cGUiLCJodW1hbml6ZVJlc291cmNlIiwiaHVtYW5pemVTdHJpbmciLCJzaW5ndWxhciIsInBsdXJhbCIsImhhbmRsZVVzZVBhcmFtcyIsImlkIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXJyYXlGaW5kSW5kZXgiLCJzbGljZSIsImZpbmRJbmRleCIsImxlbmd0aCIsImV2ZXJ5Iiwic2xpY2VJdGVtIiwic2xpY2VJbmRleCIsImNvbnZlcnRUb0xlZ2FjeSIsInNlZ21lbnRzIiwibmV3U2VnbWVudHMiLCJuZXdQYXJhbXMiLCJtZXRob2QiLCJ1cmwiLCJhY3Rpb24iLCJCYXNlS2V5QnVpbGRlciIsImNvbnN0cnVjdG9yIiwia2V5IiwibGVnYWN5IiwiZ2V0IiwiUGFyYW1zS2V5QnVpbGRlciIsInBhcmFtc1ZhbHVlIiwiRGF0YUlkUmVxdWlyaW5nS2V5QnVpbGRlciIsImlkVmFsdWUiLCJTdHJpbmciLCJEYXRhSWRzUmVxdWlyaW5nS2V5QnVpbGRlciIsImlkcyIsImlkc1ZhbHVlIiwiZWwiLCJEYXRhUmVzb3VyY2VLZXlCdWlsZGVyIiwiYWN0aW9uVHlwZSIsImluY2x1ZGVzIiwiRXJyb3IiLCJEYXRhS2V5QnVpbGRlciIsInJlc291cmNlTmFtZSIsIm11dGF0aW9uIiwibXV0YXRpb25OYW1lIiwiQXV0aEtleUJ1aWxkZXIiLCJBY2Nlc3NSZXNvdXJjZUtleUJ1aWxkZXIiLCJBY2Nlc3NLZXlCdWlsZGVyIiwiQXVkaXRBY3Rpb25LZXlCdWlsZGVyIiwiQXVkaXRLZXlCdWlsZGVyIiwiS2V5QnVpbGRlciIsIm5hbWUiLCJhdXRoIiwiYWNjZXNzIiwiYXVkaXQiLCJrZXlzIiwicGlja05vdERlcHJlY2F0ZWQiLCJhcmdzIiwiZmluZCIsImFyZyIsInF1ZXJ5S2V5cyIsImRhdGFQcm92aWRlck5hbWUiLCJtZXRhIiwibWV0YURhdGEiLCJwcm92aWRlck5hbWUiLCJhbGwiLCJyZXNvdXJjZUFsbCIsImxpc3QiLCJjb25maWciLCJtYW55IiwiZmlsdGVyIiwiZGV0YWlsIiwidG9TdHJpbmciLCJsb2dMaXN0IiwicXVlcnlLZXlzUmVwbGFjZW1lbnQiLCJwcmVmZXJMZWdhY3lLZXlzIiwiaGFzUGVybWlzc2lvbiIsInBlcm1pc3Npb25zIiwiaSIsImlzUGFyYW1ldGVyIiwic2VnbWVudCIsInN0YXJ0c1dpdGgiLCJzcGxpdFRvU2VnbWVudHMiLCJwYXRoIiwic3BsaXQiLCJpc1NlZ21lbnRDb3VudHNTYW1lIiwicm91dGUiLCJyZXNvdXJjZVJvdXRlIiwicm91dGVTZWdtZW50cyIsInJlc291cmNlUm91dGVTZWdtZW50cyIsInJlbW92ZUxlYWRpbmdUcmFpbGluZ1NsYXNoZXMiLCJjaGVja0J5U2VnbWVudHMiLCJzdGRSb3V0ZSIsInN0ZFJlc291cmNlUm91dGUiLCJnZXREZWZhdWx0QWN0aW9uUGF0aCIsInBhcmVudFByZWZpeCIsImNsZWFuUGFyZW50UHJlZml4IiwiZ2V0UGFyZW50UmVzb3VyY2UiLCJyZXNvdXJjZXMiLCJfYiIsInBhcmVudE5hbWUiLCJwYXJlbnQiLCJvcHRpb25zIiwiaWRlbnRpZmllciIsImdldFBhcmVudFByZWZpeEZvclJlc291cmNlIiwicGFyZW50cyIsInB1c2giLCJyZXZlcnNlIiwidiIsImpvaW4iLCJnZXRBY3Rpb25Sb3V0ZXNGcm9tUmVzb3VyY2UiLCJhY3Rpb25zIiwiYWN0aW9uTGlzdCIsImZvckVhY2giLCJjcmVhdGUiLCJwaWNrTWF0Y2hlZFJvdXRlIiwicm91dGVzIiwic2FuaXRpemVkUm91dGVzIiwic3BsaXR0ZWQiLCJzZWdtZW50c0NvdW50IiwiZWxpZ2libGVSb3V0ZXMiLCJub25QYXJhbWV0cml6ZWRSb3V0ZXMiLCJtYXRjaFJlc291cmNlRnJvbVJvdXRlIiwiYWxsRm91bmQiLCJmbGF0TWFwIiwiYWN0aW9uUm91dGUiLCJtb3N0RWxpZ2libGUiLCJmb3VuZCIsIm1hdGNoZWRSb3V0ZSIsInJvdXRlR2VuZXJhdG9yIiwicmVzb3VyY2VzRnJvbVByb3BzIiwiY3JlYXRlVHJlZVZpZXciLCJ0cmVlIiwicmVzb3VyY2VzUm91dGVPYmplY3QiLCJyZXNvdXJjZXNOYW1lT2JqZWN0IiwiY2hpbGQiLCJPYmplY3QiLCJoYXNPd24iLCJ0ZXh0IiwidG9Mb3dlckNhc2UiLCJ0cmltIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJEZWZhdWx0TGF5b3V0IiwiZGVmYXVsdFRpdGxlIiwiaWNvbiIsIndpZHRoIiwiaGVpZ2h0Iiwidmlld0JveCIsImZpbGwiLCJ4bWxucyIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJkIiwiZGVmYXVsdFJlZmluZU9wdGlvbnMiLCJtdXRhdGlvbk1vZGUiLCJzeW5jV2l0aExvY2F0aW9uIiwidW5kb2FibGVUaW1lb3V0Iiwid2FybldoZW5VbnNhdmVkQ2hhbmdlcyIsImxpdmVNb2RlIiwicmVkaXJlY3QiLCJhZnRlckNyZWF0ZSIsImFmdGVyQ2xvbmUiLCJhZnRlckVkaXQiLCJvdmVydGltZSIsImludGVydmFsIiwidGV4dFRyYW5zZm9ybWVycyIsImh1bWFuaXplIiwiZGlzYWJsZVNlcnZlclNpZGVWYWxpZGF0aW9uIiwidGl0bGUiLCJSZWZpbmVDb250ZXh0IiwiaGFzRGFzaGJvYXJkIiwiVGl0bGUiLCJTaWRlciIsIkhlYWRlciIsIkZvb3RlciIsIkxheW91dCIsIk9mZkxheW91dEFyZWEiLCJvbkxpdmVFdmVudCIsIlJlZmluZUNvbnRleHRQcm92aWRlciIsIkRhc2hib2FyZFBhZ2UiLCJMb2dpblBhZ2UiLCJjYXRjaEFsbCIsIl9faW5pdGlhbGl6ZWQiLCJoYW5kbGVSZWZpbmVPcHRpb25zIiwiZGlzYWJsZVRlbGVtZXRyeSIsInJlYWN0UXVlcnlDbGllbnRDb25maWciLCJyZWFjdFF1ZXJ5RGV2dG9vbENvbmZpZyIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJfaCIsIl9pIiwiX2oiLCJfayIsIl9sIiwib3B0aW9uc1dpdGhEZWZhdWx0cyIsImJyZWFkY3J1bWIiLCJwcm9qZWN0SWQiLCJ1c2VOZXdRdWVyeUtleXMiLCJkaXNhYmxlVGVsZW1ldHJ5V2l0aERlZmF1bHQiLCJyZWFjdFF1ZXJ5V2l0aERlZmF1bHRzIiwiY2xpZW50Q29uZmlnIiwicmVhY3RRdWVyeSIsImRldnRvb2xDb25maWciLCJyZWRpcmVjdFBhZ2UiLCJyZWRpcmVjdEZyb21Qcm9wcyIsInJlZGlyZWN0T3B0aW9ucyIsInNlcXVlbnRpYWxQcm9taXNlcyIsInByb21pc2VzIiwib25FYWNoUmVzb2x2ZSIsIm9uRWFjaFJlamVjdCIsInJlc3VsdHMiLCJwcm9taXNlIiwiZW50cmllcyIsInBpY2tSZXNvdXJjZSIsInJlc291cmNlQnlSb3V0ZSIsInIiLCJwaWNrRGF0YVByb3ZpZGVyIiwiaGFuZGxlTXVsdGlwbGUiLCJyZXMiLCJnZXROZXh0UGFnZVBhcmFtIiwibGFzdFBhZ2UiLCJwYWdpbmF0aW9uIiwiY3Vyc29yIiwibmV4dCIsImN1cnJlbnQiLCJwYWdlU2l6ZSIsInRvdGFsUGFnZXMiLCJNYXRoIiwiY2VpbCIsInRvdGFsIiwiTnVtYmVyIiwiZ2V0UHJldmlvdXNQYWdlUGFyYW0iLCJwcmV2IiwibGVnYWN5UmVzb3VyY2VUcmFuc2Zvcm0iLCJfcmVzb3VyY2VzIiwibGFiZWwiLCJjYW5DcmVhdGUiLCJjYW5FZGl0IiwiZWRpdCIsImNhblNob3ciLCJzaG93IiwiY2FuRGVsZXRlIiwicGlja1JvdXRlUGFyYW1zIiwicyIsInByZXBhcmVSb3V0ZVBhcmFtcyIsInJvdXRlUGFyYW1zIiwicmVkdWNlIiwiYWNjIiwiY29tcG9zZVJvdXRlIiwiZGVzaWduYXRlZFJvdXRlIiwicmVzb3VyY2VNZXRhIiwicGFyc2VkIiwicHJlcGFyZWRSb3V0ZVBhcmFtcyIsIm1hdGNoIiwiZnJvbVBhcmFtcyIsInVzZUFjdGl2ZUF1dGhQcm92aWRlciIsImxlZ2FjeUF1dGhQcm92aWRlciIsImF1dGhQcm92aWRlciIsImlzTGVnYWN5Iiwib25FcnJvciIsImNoZWNrRXJyb3IiLCJnZXRJZGVudGl0eSIsImdldFVzZXJJZGVudGl0eSIsImhhbmRsZVBhZ2luYXRpb25QYXJhbXMiLCJoYXNQYWdpbmF0aW9uIiwiY29uZmlnUGFnaW5hdGlvbiIsImhhc1BhZ2luYXRpb25TdHJpbmciLCJtb2RlIiwidXNlTWVkaWFRdWVyeSIsInF1ZXJ5IiwibWF0Y2hlcyIsInNldE1hdGNoZXMiLCJtZWRpYSIsIndpbmRvdyIsIm1hdGNoTWVkaWEiLCJsaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2FmZVRyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsImRlZmF1bHRNZXNzYWdlIiwidHJhbnNsYXRlZCIsImZhbGxiYWNrIiwiZ2VuZXJhdGVEZWZhdWx0RG9jdW1lbnRUaXRsZSIsImFjdGlvblByZWZpeE1hdGNoZXIiLCJjbG9uZSIsInJlc291cmNlTmFtZUZhbGxiYWNrIiwicmVzb3VyY2VOYW1lV2l0aEZhbGxiYWNrIiwic3VmZml4IiwiYXV0b0dlbmVyYXRlZFRpdGxlIiwidXNlTXV0YXRpb25Nb2RlIiwicHJlZmVycmVkTXV0YXRpb25Nb2RlIiwicHJlZmVycmVkVW5kb2FibGVUaW1lb3V0IiwiVW5zYXZlZFdhcm5Db250ZXh0IiwiVW5zYXZlZFdhcm5Db250ZXh0UHJvdmlkZXIiLCJ3YXJuV2hlbiIsInNldFdhcm5XaGVuIiwidXNlV2FybkFib3V0Q2hhbmdlIiwidXNlU3luY1dpdGhMb2NhdGlvbiIsInVzZVRpdGxlIiwidXNlUmVmaW5lQ29udGV4dCIsInVzZVVzZXJGcmllbmRseU5hbWUiLCJodW1hbml6ZU5hbWUiLCJpc05lc3RlZCIsIm9iaiIsImlzQXJyYXkiLCJBcnJheSIsImZsYXR0ZW5PYmplY3RLZXlzIiwicHJlZml4IiwiY3VycmVudFByZWZpeCIsImFzc2lnbiIsInByb3BlcnR5UGF0aFRvQXJyYXkiLCJwcm9wZXJ0eVBhdGgiLCJpc05hTiIsImRvd25sb2FkSW5Ccm93c2VyIiwiZmlsZW5hbWUiLCJjb250ZW50IiwiYmxvYiIsIkJsb2IiLCJsaW5rIiwiZG9jdW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJkb3dubG9hZCIsImJsb2JVcmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJocmVmIiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsInJldm9rZU9iamVjdFVSTCIsImRlZmVyRXhlY3V0aW9uIiwiZm4iLCJkZWJvdW5jZSIsImFzeW5jRGVib3VuY2UiLCJmdW5jIiwid2FpdCIsImNhbmNlbFJlYXNvbiIsImNhbGxiYWNrcyIsImNhbmNlbFByZXZpb3VzIiwiY2IiLCJkZWJvdW5jZWRGdW5jIiwicG9wIiwidGhlbiIsImNhdGNoIiwicnVubmVyIiwiZmx1c2giLCJjYW5jZWwiLCJwcmVwYXJlUXVlcnlDb250ZXh0IiwiY29udGV4dCIsInF1ZXJ5Q29udGV4dCIsInF1ZXJ5S2V5IiwicGFnZVBhcmFtIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwic2lnbmFsIiwicGFyc2VUYWJsZVBhcmFtcyIsInNvcnRlciIsInNvcnRlcnMiLCJmaWx0ZXJzIiwicGFyc2UiLCJzdWJzdHJpbmciLCJwYXJzZWRDdXJyZW50IiwicGFyc2VkUGFnZVNpemUiLCJwYXJzZWRTb3J0ZXIiLCJwYXJzZWRGaWx0ZXJzIiwicGFyc2VUYWJsZVBhcmFtc0Zyb21RdWVyeSIsInN0cmluZ2lmeSIsInN0cmluZ2lmeVRhYmxlUGFyYW1zIiwic2tpcE51bGxzIiwiYXJyYXlGb3JtYXQiLCJlbmNvZGUiLCJyZXN0IiwiY29tcGFyZUZpbHRlcnMiLCJsZWZ0IiwicmlnaHQiLCJvcGVyYXRvciIsImZpZWxkIiwiY29tcGFyZVNvcnRlcnMiLCJ1bmlvbkZpbHRlcnMiLCJwZXJtYW5lbnRGaWx0ZXIiLCJuZXdGaWx0ZXJzIiwicHJldkZpbHRlcnMiLCJmIiwiY3J1ZEZpbHRlciIsInVuaW9uU29ydGVycyIsInBlcm1hbmVudFNvcnRlciIsIm5ld1NvcnRlcnMiLCJjcnVkU29ydGVyIiwib3JkZXIiLCJzZXRJbml0aWFsRmlsdGVycyIsImRlZmF1bHRGaWx0ZXIiLCJzZXRJbml0aWFsU29ydGVycyIsImRlZmF1bHRTb3J0ZXIiLCJnZXREZWZhdWx0U29ydE9yZGVyIiwiY29sdW1uTmFtZSIsInNvcnRJdGVtIiwiZ2V0RGVmYXVsdEZpbHRlciIsIm9wZXJhdG9yVHlwZSIsImZpbGUyQmFzZTY0IiwiZmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZXN1bHRIYW5kbGVyIiwicmVhZEFzRGF0YVVSTCIsIm9yaWdpbkZpbGVPYmoiLCJvbmVycm9yIiwidXNlS2V5cyIsInVzZVBlcm1pc3Npb25zIiwidjNMZWdhY3lBdXRoUHJvdmlkZXJDb21wYXRpYmxlIiwiZ2V0UGVybWlzc2lvbnMiLCJsZWdhY3lHZXRQZXJtaXNzaW9uIiwicXVlcnlSZXNwb25zZSIsInF1ZXJ5Rm4iLCJlbmFibGVkIiwibGVnYWN5UXVlcnlSZXNwb25zZSIsInVzZUdldElkZW50aXR5IiwicXVlcnlPcHRpb25zIiwibGVnYWN5R2V0VXNlcklkZW50aXR5IiwicmV0cnkiLCJ1c2VNdXRhdGlvbiIsInVzZVF1ZXJ5Q2xpZW50IiwidXNlSW52YWxpZGF0ZUF1dGhTdG9yZSIsInF1ZXJ5Q2xpZW50IiwiaW52YWxpZGF0ZVF1ZXJpZXMiLCJ1c2VMb2dvdXQiLCJtdXRhdGlvbk9wdGlvbnMiLCJpbnZhbGlkYXRlQXV0aFN0b3JlIiwicm91dGVyVHlwZSIsInVzZVJvdXRlclR5cGUiLCJnbyIsInVzZUdvIiwib3BlbiIsImNsb3NlIiwidXNlTm90aWZpY2F0aW9uIiwibGVnYWN5TG9nb3V0RnJvbUNvbnRleHQiLCJsb2dvdXRGcm9tQ29udGV4dCIsIm11dGF0aW9uS2V5IiwibXV0YXRpb25GbiIsIm9uU3VjY2VzcyIsInZhcmlhYmxlcyIsInN1Y2Nlc3MiLCJyZWRpcmVjdFRvIiwic3VjY2Vzc05vdGlmaWNhdGlvbiIsImJ1aWxkU3VjY2Vzc05vdGlmaWNhdGlvbiIsImJ1aWxkTm90aWZpY2F0aW9uIiwidG8iLCJ2M0xlZ2FjeUF1dGhQcm92aWRlckNvbXBhdGlibGVNdXRhdGlvbiIsIm1lc3NhZ2UiLCJkZXNjcmlwdGlvbiIsInVzZUxvZ2luIiwidXNlUGFyc2VkIiwidXNlTG9jYXRpb24iLCJ1c2VSb3V0ZXJDb250ZXh0Iiwic2VhcmNoIiwibGVnYWN5TG9naW5Gcm9tQ29udGV4dCIsImxvZ2luRnJvbUNvbnRleHQiLCJ1c2VNZW1vIiwiaWdub3JlUXVlcnlQcmVmaXgiLCJyZWRpcmVjdFBhdGhGcm9tQXV0aCIsInVzZVJlZ2lzdGVyIiwibGVnYWN5UmVnaXN0ZXJGcm9tQ29udGV4dCIsInJlZ2lzdGVyRnJvbUNvbnRleHQiLCJ1c2VGb3Jnb3RQYXNzd29yZCIsInYzTGVnYWN5QXV0aFByb3ZpZGVyQ29tcGF0aWJsZUZvcmdvdFBhc3N3b3JkRnJvbUNvbnRleHQiLCJmb3Jnb3RQYXNzd29yZEZyb21Db250ZXh0IiwidXNlVXBkYXRlUGFzc3dvcmQiLCJsZWdhY3lVcGRhdGVQYXNzd29yZEZyb21Db250ZXh0IiwidXBkYXRlUGFzc3dvcmRGcm9tQ29udGV4dCIsInVzZUlzQXV0aGVudGljYXRlZCIsInVzZUF1dGhlbnRpY2F0ZWQiLCJ1c2VPbkVycm9yIiwibGVnYWN5Q2hlY2tFcnJvckZyb21Db250ZXh0Iiwib25FcnJvckZyb21Db250ZXh0IiwibXV0YXRlIiwibGVnYWN5TG9nb3V0Iiwic2hvdWxkTG9nb3V0IiwidXNlQ2hlY2tFcnJvciIsInVzZUlzRXhpc3RBdXRoZW50aWNhdGlvbiIsImxlZ2FjeUlzUHJvdmlkZWQiLCJ1c2VMb2FkaW5nT3ZlcnRpbWUiLCJpc0xvYWRpbmciLCJpbnRlcnZhbFByb3AiLCJvbkludGVydmFsIiwib25JbnRlcnZhbFByb3AiLCJlbGFwc2VkVGltZSIsInNldEVsYXBzZWRUaW1lIiwiaW50ZXJ2YWxGbiIsInNldEludGVydmFsIiwicHJldkVsYXBzZWRUaW1lIiwiY2xlYXJJbnRlcnZhbCIsInVzZUxpc3QiLCJyZXNvdXJjZUZyb21Qcm9wIiwiZXJyb3JOb3RpZmljYXRpb24iLCJsaXZlUGFyYW1zIiwib3ZlcnRpbWVPcHRpb25zIiwidXNlUmVzb3VyY2UiLCJkYXRhUHJvdmlkZXIiLCJ1c2VEYXRhUHJvdmlkZXIiLCJ1c2VUcmFuc2xhdGUiLCJoYW5kbGVOb3RpZmljYXRpb24iLCJ1c2VIYW5kbGVOb3RpZmljYXRpb24iLCJnZXRNZXRhIiwidXNlTWV0YSIsInBpY2tlZERhdGFQcm92aWRlciIsInByZWZlcnJlZE1ldGEiLCJwcmVmZmVyZWRGaWx0ZXJzIiwicHJlZmZlcmVkU29ydGVycyIsInNvcnQiLCJwcmVmZmVyZWRIYXNQYWdpbmF0aW9uIiwicHJlZmZlcmVkUGFnaW5hdGlvbiIsImlzU2VydmVyUGFnaW5hdGlvbiIsImNvbWJpbmVkTWV0YSIsIm5vdGlmaWNhdGlvblZhbHVlcyIsImlzRW5hYmxlZCIsImdldExpc3QiLCJ1c2VSZXNvdXJjZVN1YnNjcmlwdGlvbiIsInR5cGVzIiwic3Vic2NyaXB0aW9uVHlwZSIsImNoYW5uZWwiLCJzZWxlY3QiLCJyYXdEYXRhIiwibm90aWZpY2F0aW9uQ29uZmlnIiwiZXJyIiwic3RhdHVzQ29kZSIsImlzRmV0Y2hpbmciLCJ1c2VPbmUiLCJnZXRPbmUiLCJ1c2VNYW55IiwiZ2V0TWFueSIsIkFjdGlvblR5cGVzIiwiQUREIiwiUkVNT1ZFIiwiREVDUkVBU0VfTk9USUZJQ0FUSU9OX1NFQ09ORCIsInVzZVVwZGF0ZSIsImlkRnJvbVByb3BzIiwicmVzb3VyY2VGcm9tUHJvcHMiLCJ2YWx1ZXMiLCJ2YWx1ZXNGcm9tUHJvcHMiLCJkYXRhUHJvdmlkZXJOYW1lRnJvbVByb3BzIiwic3VjY2Vzc05vdGlmaWNhdGlvbkZyb21Qcm9wcyIsImVycm9yTm90aWZpY2F0aW9uRnJvbVByb3BzIiwibWV0YUZyb21Qcm9wcyIsIm1ldGFEYXRhRnJvbVByb3BzIiwibXV0YXRpb25Nb2RlRnJvbVByb3BzIiwidW5kb2FibGVUaW1lb3V0RnJvbVByb3BzIiwib25DYW5jZWwiLCJvbkNhbmNlbEZyb21Qcm9wcyIsIm9wdGltaXN0aWNVcGRhdGVNYXAiLCJvcHRpbWlzdGljVXBkYXRlTWFwRnJvbVByb3BzIiwiaW52YWxpZGF0ZXMiLCJpbnZhbGlkYXRlc0Zyb21Qcm9wcyIsIm11dGF0aW9uTW9kZUNvbnRleHQiLCJ1bmRvYWJsZVRpbWVvdXRDb250ZXh0IiwicHVibGlzaCIsInVzZVB1Ymxpc2giLCJsb2ciLCJ1c2VMb2ciLCJub3RpZmljYXRpb25EaXNwYXRjaCIsInVzZUNhbmNlbE5vdGlmaWNhdGlvbiIsImludmFsaWRhdGVTdG9yZSIsInVzZUludmFsaWRhdGUiLCJtdXRhdGlvblJlc3VsdCIsIm1pc3NpbmdJZEVycm9yIiwibWlzc2luZ1ZhbHVlc0Vycm9yIiwibWlzc2luZ1Jlc291cmNlRXJyb3IiLCJtdXRhdGlvbk1vZGVQcm9wT3JDb250ZXh0IiwidW5kb2FibGVUaW1lb3V0UHJvcE9yQ29udGV4dCIsInVwZGF0ZSIsImRvTXV0YXRpb24iLCJjYW5jZWxNdXRhdGlvbiIsInBheWxvYWQiLCJzZWNvbmRzIiwiaXNTaWxlbnQiLCJvbk11dGF0ZSIsImdxbE11dGF0aW9uIiwiXyIsImdxbFF1ZXJ5IiwiX18iLCJyZXNvdXJjZUtleXMiLCJwcmV2aW91c1F1ZXJpZXMiLCJnZXRRdWVyaWVzRGF0YSIsImNhbmNlbFF1ZXJpZXMiLCJzaWxlbnQiLCJzZXRRdWVyaWVzRGF0YSIsInByZXZpb3VzIiwicmVjb3JkIiwib25TZXR0bGVkIiwiZGF0YVByb3ZpZGVyTmFtZUZyb21Qcm9wIiwicmVzb3VyY2VTaW5ndWxhciIsImRhdGUiLCJEYXRlIiwicHJldmlvdXNEYXRhIiwicXVlcnlEYXRhIiwiZ2V0UXVlcnlEYXRhIiwiZmllbGRzIiwiX2ZpZWxkcyIsIm9wZXJhdGlvbiIsIl9vcGVyYXRpb24iLCJfdmFyaWFibGVzIiwic2V0UXVlcnlEYXRhIiwibXV0YXRlQXN5bmMiLCJ1c2VDcmVhdGUiLCJzdWNjZXNzTm90aWZpY2F0aW9uRnJvbVByb3AiLCJlcnJvck5vdGlmaWNhdGlvbkZyb21Qcm9wIiwidXNlRGVsZXRlIiwiZGVsZXRlT25lIiwiX2RhdGEiLCJfZXJyb3IiLCJyZW1vdmVRdWVyaWVzIiwidXNlQ3JlYXRlTWFueSIsInNlbGVjdGVkRGF0YVByb3ZpZGVyIiwiY3JlYXRlTWFueSIsInZhbCIsInJlc3BvbnNlIiwicmVzb3VyY2VQbHVyYWwiLCJ1c2VVcGRhdGVNYW55IiwiaWRzRnJvbVByb3BzIiwidXBkYXRlTWFueSIsInVzZURlbGV0ZU1hbnkiLCJkZWxldGVNYW55IiwidXNlQXBpVXJsIiwiZ2V0QXBpVXJsIiwidXNlQ3VzdG9tIiwiY3VzdG9tIiwidXNlQ3VzdG9tTXV0YXRpb24iLCJ1c2VDYWxsYmFjayIsImRlZmF1bHREYXRhUHJvdmlkZXIiLCJkZWZhdWx0IiwiRGF0YUNvbnRleHQiLCJEYXRhQ29udGV4dFByb3ZpZGVyIiwicHJvdmlkZXJWYWx1ZSIsInVzZUluZmluaXRlUXVlcnkiLCJ1c2VJbmZpbml0ZUxpc3QiLCJwYWdpbmF0aW9uUHJvcGVydGllcyIsIkxpdmVDb250ZXh0IiwiTGl2ZUNvbnRleHRQcm92aWRlciIsImxpdmVQcm92aWRlciIsImludmFsaWRhdGlvbkZpbHRlcnMiLCJyZWZldGNoVHlwZSIsImludmFsaWRhdGlvbk9wdGlvbnMiLCJjYW5jZWxSZWZldGNoIiwiZHAiLCJ1c2VSZWYiLCJpc0VxdWFsIiwidXNlTWVtb2l6ZWQiLCJyZWYiLCJ1c2VEZWVwTWVtbyIsImRlcGVuZGVuY2llcyIsIm1lbW9pemVkRGVwZW5kZW5jaWVzIiwiUmVzb3VyY2VDb250ZXh0IiwiUmVzb3VyY2VDb250ZXh0UHJvdmlkZXIiLCJwcm92aWRlZFJlc291cmNlcyIsIlJvdXRlclBpY2tlckNvbnRleHQiLCJSb3V0ZXJQaWNrZXJQcm92aWRlciIsImRlZmF1bHRSb3V0ZXJQcm92aWRlciIsIlJvdXRlckNvbnRleHQiLCJSb3V0ZXJDb250ZXh0UHJvdmlkZXIiLCJyb3V0ZXIiLCJ1c2VQYXJzZSIsInJvdXRlckNvbnRleHQiLCJvbGRQcm9wcyIsInJlc291cmNlTmFtZU9yUm91dGVOYW1lIiwicmVjb3JkSXRlbUlkIiwiZm9yY2UiLCJwaWNrZWRSZXNvdXJjZSIsInJlc291cmNlV2l0aFJvdXRlIiwidXNlUmVzb3VyY2VXaXRoUm91dGUiLCJ1c2VQYXJhbXMiLCJsZWdhY3lQYXJhbXMiLCJyZXNvdXJjZUtleVRvQ2hlY2siLCJsZWdhY3lSZXNvdXJjZSIsImxlZ2FjeUlkIiwibGVnYWN5QWN0aW9uIiwibGVnYWN5UmVzb3VyY2VOYW1lIiwibGVnYWN5SWRlbnRpZmllciIsInBpY2tlZEZyb21Qcm9wcyIsInBpY2tlZCIsImxpdmVNb2RlRnJvbVByb3AiLCJsaXZlTW9kZUZyb21Db250ZXh0Iiwib25MaXZlRXZlbnRDb250ZXh0Q2FsbGJhY2siLCJpbnZhbGlkYXRlIiwic3Vic2NyaXB0aW9uIiwiY2FsbGJhY2siLCJldmVudCIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwidXNlTGl2ZU1vZGUiLCJ1c2VTdWJzY3JpcHRpb24iLCJ1c2VSZWR1Y2VyIiwiVW5kb2FibGVRdWV1ZUNvbnRleHQiLCJub3RpZmljYXRpb25zIiwiaW5pdGlhbFN0YXRlIiwidW5kb2FibGVRdWV1ZVJlZHVjZXIiLCJzdGF0ZSIsIm5vdGlmaWNhdGlvbkl0ZW0iLCJpc1J1bm5pbmciLCJVbmRvYWJsZVF1ZXVlQ29udGV4dFByb3ZpZGVyIiwibm90aWZpY2F0aW9uRGF0YSIsIm5vdGlmaWNhdGlvbiIsIlVuZG9hYmxlUXVldWUiLCJOb3RpZmljYXRpb25Db250ZXh0IiwiTm90aWZpY2F0aW9uQ29udGV4dFByb3ZpZGVyIiwiZmFsbGJhY2tOb3RpZmljYXRpb24iLCJJMThuQ29udGV4dCIsIkkxOG5Db250ZXh0UHJvdmlkZXIiLCJpMThuUHJvdmlkZXIiLCJ1c2VTZXRMb2NhbGUiLCJsYW5nIiwiY2hhbmdlTG9jYWxlIiwidXNlR2V0TG9jYWxlIiwiZ2V0TG9jYWxlIiwidXNlVHJhbnNsYXRpb24iLCJwYXBhcGFyc2UiLCJ1c2VFeHBvcnQiLCJtYXhJdGVtQ291bnQiLCJleHBvcnRPcHRpb25zIiwidW5wYXJzZUNvbmZpZyIsInNldElzTG9hZGluZyIsInRvTG9jYWxlU3RyaW5nIiwidHJpZ2dlckV4cG9ydCIsInByZXBhcmluZ0RhdGEiLCJoYXNVbnBhcnNlQ29uZmlnIiwidXNlS2V5c0FzSGVhZGVycyIsInVzZUJvbSIsInF1b3RlU3RyaW5ncyIsImRlY2ltYWxTZXBhcmF0b3IiLCJxdW90ZXMiLCJjb2x1bW5zIiwiZGVsaW1pdGVyIiwiZmllbGRTZXBhcmF0b3IiLCJoZWFkZXIiLCJzaG93TGFiZWxzIiwicXVvdGVDaGFyIiwiY3N2IiwidW5wYXJzZSIsInNob3dUaXRsZSIsImZpbGVFeHRlbnNpb24iLCJ1c2VUZXh0RmlsZSIsImZpbGVUeXBlIiwiZG93bmxvYWRGaWxlbmFtZSIsInVzZUZvcm0iLCJwcm9wcyIsImRlZmF1bHRSZWRpcmVjdCIsInVzZVJlZmluZU9wdGlvbnMiLCJkZWZhdWx0TXV0YXRpb25Nb2RlIiwiaGFuZGxlU3VibWl0V2l0aFJlZGlyZWN0IiwidXNlUmVkaXJlY3Rpb25BZnRlclN1Ym1pc3Npb24iLCJwaWNrZWRNZXRhIiwic2V0SWQiLCJmb3JtQWN0aW9uIiwidXNlUmVzb3VyY2VQYXJhbXMiLCJhdXRvc2F2ZWQiLCJzZXRBdXRvc2F2ZWQiLCJpc0VkaXQiLCJpc0Nsb25lIiwiaXNDcmVhdGUiLCJpc0lkUmVxdWlyZWQiLCJpc0lkRGVmaW5lZCIsImlzUXVlcnlEaXNhYmxlZCIsImlkV2FybmluZ01lc3NhZ2UiLCJyZWRpcmVjdEFjdGlvbiIsInJlZGlyZWN0SWQiLCJxdWVyeVJlc3VsdCIsInF1ZXJ5TWV0YSIsImNyZWF0ZU11dGF0aW9uIiwiY3JlYXRlTXV0YXRpb25PcHRpb25zIiwidXBkYXRlTXV0YXRpb24iLCJ1cGRhdGVNdXRhdGlvbk9wdGlvbnMiLCJmb3JtTG9hZGluZyIsImF1dG9TYXZlIiwiaW52YWxpZGF0ZU9uVW5tb3VudCIsIm9uRmluaXNoIiwiaXNBdXRvc2F2ZSIsImlzUGVzc2ltaXN0aWMiLCJvblN1Y2Nlc3NSZWRpcmVjdCIsImF1dG9zYXZlT25Ob25FZGl0RXJyb3IiLCJtdXRhdGlvbk1ldGEiLCJvbk11dGF0aW9uU3VjY2VzcyIsIm9uTXV0YXRpb25FcnJvciIsIm9uRmluaXNoQXV0b1NhdmUiLCJhdXRvU2F2ZVByb3BzIiwic3RhdHVzIiwidXNlQmFjayIsImJhY2siLCJ1c2VHZXRUb1BhdGgiLCJyZXNvdXJjZUZyb21Sb3V0ZSIsInNlbGVjdGVkUmVzb3VyY2UiLCJyZXNvdXJjZVNlbGVjdCIsImdldFRvUGF0aCIsImdvRnJvbVJvdXRlciIsImhhbmRsZVJlc291cmNlRXJyb3JzIiwibmV3VG8iLCJ1c2VIaXN0b3J5IiwiaGlzdG9yeSIsImhhbmRsZVVybCIsImNyZWF0ZVVybCIsInJlc291cmNlSXRlbSIsImNyZWF0ZUFjdGlvblJvdXRlIiwiZWRpdFVybCIsImVuY29kZWRJZCIsImVuY29kZVVSSUNvbXBvbmVudCIsImVkaXRBY3Rpb25Sb3V0ZSIsImNsb25lVXJsIiwiY2xvbmVBY3Rpb25Sb3V0ZSIsInNob3dVcmwiLCJzaG93QWN0aW9uUm91dGUiLCJsaXN0VXJsIiwibGlzdEFjdGlvblJvdXRlIiwiZ29CYWNrIiwidXNlU2hvdyIsInVzZU9uZVByb3BzIiwic2hvd0lkIiwic2V0U2hvd0lkIiwiY2h1bmsiLCJ1c2VJbXBvcnQiLCJwYXBhcnNlT3B0aW9ucyIsImJhdGNoU2l6ZSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJvblByb2dyZXNzIiwicHJvY2Vzc2VkQW1vdW50Iiwic2V0UHJvY2Vzc2VkQW1vdW50IiwidG90YWxBbW91bnQiLCJzZXRUb3RhbEFtb3VudCIsImhhbmRsZUNsZWFudXAiLCJoYW5kbGVGaW5pc2giLCJjcmVhdGVkVmFsdWVzIiwic3VjY2VlZGVkIiwiZXJyb3JlZCIsImhhbmRsZUNoYW5nZSIsImNvbXBsZXRlIiwidmFsdWVGbnMiLCJjdXJyZW50QW1vdW50IiwicmVxdWVzdCIsImNodW5rcyIsImNodW5rZWRGbnMiLCJjaHVua2VkVmFsdWVzIiwiY3VycmVudEJhdGNoTGVuZ3RoIiwiaW5wdXRQcm9wcyIsImFjY2VwdCIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwiZmlsZXMiLCJ1c2VNb2RhbCIsImRlZmF1bHRWaXNpYmxlIiwidmlzaWJsZSIsInNldFZpc2libGUiLCJ1c2VUb1BhdGgiLCJmb3J3YXJkUmVmIiwiTGlua0NvbXBvbmVudCIsIkxpbmtGcm9tQ29udGV4dCIsIkxpbmsiLCJnb0Z1bmN0aW9uIiwicmVzb2x2ZWRUbyIsInVzZUxpbmsiLCJkZWZhdWx0UHJvdmlkZXIiLCJQcm9tcHQiLCJMZWdhY3lSb3V0ZXJDb250ZXh0IiwiTGVnYWN5Um91dGVyQ29udGV4dFByb3ZpZGVyIiwicm91dGVyQ29udGV4dFZhbHVlcyIsIkFjY2Vzc0NvbnRyb2xDb250ZXh0IiwiYnV0dG9ucyIsImVuYWJsZUFjY2Vzc0NvbnRyb2wiLCJoaWRlSWZVbmF1dGhvcml6ZWQiLCJBY2Nlc3NDb250cm9sQ29udGV4dFByb3ZpZGVyIiwiY2FuIiwic2FuaXRpemVSZXNvdXJjZSIsInJlc3RSZXNvdXJjZSIsIl9tZXRhSWNvbiIsInJlc3RNZXRhIiwiX29wdGlvbnNJY29uIiwicmVzdE9wdGlvbnMiLCJ1c2VDYW4iLCJob29rUXVlcnlPcHRpb25zIiwiZ2xvYmFsT3B0aW9ucyIsImdsb2JhbFF1ZXJ5T3B0aW9ucyIsIm1lcmdlZFF1ZXJ5T3B0aW9ucyIsIl9yZXNvdXJjZSIsInBhcmFtc1Jlc3QiLCJzYW5pdGl6ZWRSZXNvdXJjZSIsInVzZUNhbldpdGhvdXRDYWNoZSIsImNhbkZyb21Db250ZXh0IiwidW5pcUJ5IiwidXNlU2VsZWN0Iiwic2V0U2VhcmNoIiwic2V0T3B0aW9ucyIsInNlbGVjdGVkT3B0aW9ucyIsInNldFNlbGVjdGVkT3B0aW9ucyIsIm9wdGlvbkxhYmVsIiwib3B0aW9uVmFsdWUiLCJzZWFyY2hGaWVsZCIsImRlYm91bmNlVmFsdWUiLCJkZWZhdWx0VmFsdWVRdWVyeU9wdGlvbnMiLCJkZWZhdWx0VmFsdWVRdWVyeU9wdGlvbnNGcm9tUHJvcHMiLCJmZXRjaFNpemUiLCJkZWZhdWx0VmFsdWUiLCJzZWxlY3RlZE9wdGlvbnNPcmRlciIsIm9uU2VhcmNoIiwib25TZWFyY2hGcm9tUHJvcCIsImdldE9wdGlvbkxhYmVsIiwiZ2V0T3B0aW9uVmFsdWUiLCJkZWZhdWx0VmFsdWVzIiwiZGVmYXVsdFZhbHVlUXVlcnlPblN1Y2Nlc3MiLCJkZWZhdWx0VmFsdWVRdWVyeVJlc3VsdCIsImRlZmF1bHRRdWVyeU9uU3VjY2VzcyIsImNvbmNhdCIsImNvbWJpbmVkT3B0aW9ucyIsIm9uU2VhcmNoRnJvbVByb3BSZWYiLCJkZWZhdWx0VmFsdWVRdWVyeSIsImRlZmF1bHRQZXJtYW5lbnRGaWx0ZXIiLCJkZWZhdWx0UGVybWFuZW50U29ydGVyIiwidXNlVGFibGUiLCJpbml0aWFsQ3VycmVudCIsImluaXRpYWxQYWdlU2l6ZSIsImluaXRpYWxTb3J0ZXIiLCJkZWZhdWx0U2V0RmlsdGVyQmVoYXZpb3IiLCJpbml0aWFsRmlsdGVyIiwiZmlsdGVyc0Zyb21Qcm9wIiwic29ydGVyc0Zyb21Qcm9wIiwic3luY1dpdGhMb2NhdGlvblByb3AiLCJzeW5jV2l0aExvY2F0aW9uQ29udGV4dCIsInBhdGhuYW1lIiwicGFyc2VkUGFyYW1zIiwiaXNTZXJ2ZXJTaWRlRmlsdGVyaW5nRW5hYmxlZCIsImlzU2VydmVyU2lkZVNvcnRpbmdFbmFibGVkIiwiaXNQYWdpbmF0aW9uRW5hYmxlZCIsInByZWZmZXJlZEN1cnJlbnQiLCJwcmVmZmVyZWRQYWdlU2l6ZSIsInByZWZlcnJlZEluaXRpYWxGaWx0ZXJzIiwiaW5pdGlhbCIsInByZWZlcnJlZFBlcm1hbmVudEZpbHRlcnMiLCJwZXJtYW5lbnQiLCJwcmVmZXJyZWRJbml0aWFsU29ydGVycyIsInByZWZlcnJlZFBlcm1hbmVudFNvcnRlcnMiLCJwcmVmZmVyZWRGaWx0ZXJCZWhhdmlvciIsImRlZmF1bHRCZWhhdmlvciIsImRlZmF1bHRDdXJyZW50IiwiZGVmYXVsdFBhZ2VTaXplIiwic2V0U29ydGVycyIsInNldEZpbHRlcnMiLCJzZXRDdXJyZW50Iiwic2V0UGFnZVNpemUiLCJnZXRDdXJyZW50UXVlcnlQYXJhbXMiLCJjcmVhdGVMaW5rRm9yU3luY1dpdGhMb2NhdGlvbiIsImtlZXBIYXNoIiwia2VlcFF1ZXJ5IiwiY3VycmVudFF1ZXJ5UGFyYW1zIiwic3RyaW5naWZ5UGFyYW1zIiwicXVlcnlQYXJhbXMiLCJzaGFsbG93Iiwic2V0RmlsdGVyc0FzTWVyZ2UiLCJzZXRGaWx0ZXJzQXNSZXBsYWNlIiwic2V0RmlsdGVyc1dpdGhTZXR0ZXIiLCJzZXR0ZXIiLCJzZXRGaWx0ZXJzRm4iLCJzZXR0ZXJPckZpbHRlcnMiLCJiZWhhdmlvciIsInNldFNvcnRXaXRoVW5pb24iLCJuZXdTb3J0ZXIiLCJ0YWJsZVF1ZXJ5UmVzdWx0IiwidGFibGVRdWVyeSIsInNldFNvcnRlciIsInBhZ2VDb3VudCIsIkF1ZGl0TG9nQ29udGV4dCIsIkF1ZGl0TG9nQ29udGV4dFByb3ZpZGVyIiwibG9nTXV0YXRpb25PcHRpb25zIiwicmVuYW1lTXV0YXRpb25PcHRpb25zIiwiYXVkaXRMb2dDb250ZXh0IiwiaWRlbnRpdHlEYXRhIiwicmVmZXRjaCIsImxvZ1Blcm1pc3Npb25zIiwiYXVkaXRMb2ciLCJhdXRob3JEYXRhIiwiYXV0aG9yIiwicmVuYW1lIiwidXNlTG9nTGlzdCIsInVzZUJyZWFkY3J1bWIiLCJicmVhZGNydW1icyIsImFkZEJyZWFkY3J1bWIiLCJwYXJlbnRSZXNvdXJjZSIsImdyYW5kUGFyZW50TmFtZSIsImxpc3RBY3Rpb25PZlJlc291cmNlIiwiaHJlZlJhdyIsImFjdGlvbkxhYmVsIiwiY3JlYXRlUmVzb3VyY2VLZXkiLCJjdXJyZW50UGFyZW50UmVzb3VyY2UiLCJjcmVhdGVUcmVlIiwicm9vdCIsImN1cnJlbnRQYXJlbnQiLCJjdXJyZW50VHJlZSIsImZsYXR0ZW4iLCJpdGVtcyIsIml0ZW1LZXkiLCJnZXRDbGVhblBhdGgiLCJ1c2VNZW51IiwiaGlkZU9uTWlzc2luZ1BhcmFtZXRlciIsImxlZ2FjeVBhdGgiLCJnZXRGcmllbmRseU5hbWUiLCJjbGVhblJvdXRlIiwic2VsZWN0ZWRLZXkiLCJkZWZhdWx0T3BlbktleXMiLCJwcmVwYXJlSXRlbSIsImhpZGUiLCJjb21wb3NlZCIsInRyZWVJdGVtcyIsInRyZWVNZW51SXRlbXMiLCJwcmVwYXJlIiwicHJlcGFyZWROb2RlcyIsIm5ld0l0ZW0iLCJtZW51SXRlbXMiLCJNZXRhQ29udGV4dCIsIk1ldGFDb250ZXh0UHJvdmlkZXIiLCJjdXJyZW50VmFsdWUiLCJ1c2VNZXRhQ29udGV4dCIsIm1ldGFDb250ZXh0IiwibWV0YUZyb21Qcm9wIiwiX2ZpbHRlcnMiLCJfc29ydGVycyIsIl9jdXJyZW50IiwiX3BhZ2VTaXplIiwiYWRkaXRpb25hbFBhcmFtcyIsInRlbmFudElkIiwidXNlSWQiLCJpbmZlcnJlZElkIiwidXNlQWN0aW9uIiwiaW5mZXJyZWRBY3Rpb24iLCJpbmZlcnJlZElkZW50aWZpZXIiLCJyZXNvdXJjZVRvQ2hlY2siLCJpc1NhbWVSZXNvdXJjZSIsImRlZmF1bHRJZCIsInVzZUFjdGlvbmFibGVCdXR0b24iLCJ1c2VCdXR0b25DYW5BY2Nlc3MiLCJhY2Nlc3NDb250cm9sQ29udGV4dCIsImFjY2Vzc0NvbnRyb2xFbmFibGVkIiwiYWNjZXNzQ29udHJvbCIsImNhbkFjY2VzcyIsInJlYXNvbiIsImhpZGRlbiIsImRpc2FibGVkIiwidXNlTmF2aWdhdGlvbkJ1dHRvbiIsIm5hdmlnYXRpb24iLCJMZWdhY3lMaW5rIiwiZ2V0VXNlckZyaWVuZGx5TmFtZSIsInVzZURlbGV0ZUJ1dHRvbiIsImNvbmZpcm1Pa0xhYmVsIiwiY29uZmlybVRpdGxlIiwiY2FuY2VsTGFiZWwiLCJsb2FkaW5nIiwib25Db25maXJtIiwidXNlUmVmcmVzaEJ1dHRvbiIsIm9uQ2xpY2siLCJ1c2VTaG93QnV0dG9uIiwidXNlRWRpdEJ1dHRvbiIsInVzZUNsb25lQnV0dG9uIiwidXNlQ3JlYXRlQnV0dG9uIiwidXNlTGlzdEJ1dHRvbiIsInVzZVNhdmVCdXR0b24iLCJ1c2VFeHBvcnRCdXR0b24iLCJ1c2VJbXBvcnRCdXR0b24iLCJFcnJvckNvbXBvbmVudCIsImVycm9yTWVzc2FnZSIsInNldEVycm9yTWVzc2FnZSIsIkZyYWdtZW50IiwidXNlcm5hbWUiLCJzZXRVc2VybmFtZSIsInBhc3N3b3JkIiwic2V0UGFzc3dvcmQiLCJvblN1Ym1pdCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInNpemUiLCJhdXRvQ29ycmVjdCIsInNwZWxsQ2hlY2siLCJhdXRvQ2FwaXRhbGl6ZSIsImF1dG9Gb2N1cyIsInJlcXVpcmVkIiwicHJvdmlkZXJzIiwicmVnaXN0ZXJMaW5rIiwiZm9yZ290UGFzc3dvcmRMaW5rIiwicmVtZW1iZXJNZSIsImNvbnRlbnRQcm9wcyIsIndyYXBwZXJQcm9wcyIsInJlbmRlckNvbnRlbnQiLCJmb3JtUHJvcHMiLCJoaWRlRm9ybSIsIm11dGF0aW9uVmFyaWFibGVzIiwiQWN0aXZlTGluayIsImVtYWlsIiwic2V0RW1haWwiLCJyZW1lbWJlciIsInNldFJlbWVtYmVyIiwicmVuZGVyTGluayIsInJlbmRlclByb3ZpZGVycyIsInByb3ZpZGVyIiwic3R5bGUiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwibWFyZ2luQm90dG9tIiwidGV4dEFsaWduIiwiZmxleERpcmVjdGlvbiIsInBhZGRpbmciLCJodG1sRm9yIiwiY2hlY2tlZCIsIlJlZ2lzdGVyUGFnZSIsImxvZ2luTGluayIsIkZvcmdvdFBhc3N3b3JkUGFnZSIsIlVwZGF0ZVBhc3N3b3JkUGFnZSIsIm5ld1Bhc3N3b3JkIiwic2V0TmV3UGFzc3dvcmQiLCJjb25maXJtUGFzc3dvcmQiLCJzZXRDb25maXJtUGFzc3dvcmQiLCJBdXRoUGFnZSIsIlJlYWR5UGFnZSIsImdhcCIsInJlbCIsImNhcmRzIiwiaWNvblVybCIsIkNvbmZpZ1N1Y2Nlc3NQYWdlIiwiaXNUYWJsZXQiLCJpc01vYmlsZSIsImdldEdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJnZXRIZWFkZXJGb250U2l6ZSIsImdldFN1YkhlYWRlckZvbnRTaXplIiwicG9zaXRpb24iLCJ6SW5kZXgiLCJpbnNldCIsIm92ZXJmbG93IiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZCIsIm1pbkhlaWdodCIsIm1pbldpZHRoIiwiZm9udEZhbWlseSIsImNvbG9yIiwib3BhY2l0eSIsInRvcCIsInRyYW5zZm9ybSIsImJhY2tncm91bmRJbWFnZSIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsIm1hcmdpbiIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdCb3R0b20iLCJtYXhXaWR0aCIsImNhcmQiLCJDYXJkIiwiaXNIb3ZlciIsInNldElzSG92ZXIiLCJvblBvaW50ZXJFbnRlciIsIm9uUG9pbnRlckxlYXZlIiwidGV4dERlY29yYXRpb24iLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJ0cmFuc2l0aW9uIiwibGluZUhlaWdodCIsIkNvbmZpZ0Vycm9yUGFnZSIsImJhY2tkcm9wRmlsdGVyIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyIiwiYm94U2hhZG93IiwiYm9yZGVyQm90dG9tIiwiRXJyb3JHcmFkaWVudCIsIkVycm9ySWNvbiIsIkV4YW1wbGVJbXBsZW1lbnRhdGlvbiIsIm92ZXJmbG93WCIsImJhY2tncm91bmRDb2xvciIsIm1heEhlaWdodCIsImN4IiwiY3kiLCJncmFkaWVudFRyYW5zZm9ybSIsImdyYWRpZW50VW5pdHMiLCJzdG9wQ29sb3IiLCJzdG9wT3BhY2l0eSIsIm9mZnNldCIsIldlbGNvbWVQYWdlIiwidXNlUXVlcnlTdWJzY3JpcHRpb24iLCJRdWVyeUNsaWVudCIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJSRUZJTkVfVkVSU0lPTiIsInVzZVRlbGVtZXRyeURhdGEiLCJkYXRhQ29udGV4dCIsIm5vdGlmaWNhdGlvbkNvbnRleHQiLCJyZWZpbmVPcHRpb25zIiwibGl2ZSIsImkxOG4iLCJ2ZXJzaW9uIiwicmVzb3VyY2VDb3VudCIsInN0cmluZ2lmaWVkUGF5bG9hZCIsIkpTT04iLCJidG9hIiwiQnVmZmVyIiwiZnJvbSIsInRocm91Z2hJbWFnZSIsInNyYyIsImltZyIsIkltYWdlIiwidGhyb3VnaEZldGNoIiwiZmV0Y2giLCJ0cmFuc3BvcnQiLCJUZWxlbWV0cnkiLCJzZW50IiwiZW5jb2RlZCIsImNoZWNrUm91dGVyUHJvcE1pc3VzZSIsImJpbmRpbmdzIiwib3RoZXJQcm9wcyIsInVzZVJvdXRlck1pc3VzZVdhcm5pbmciLCJ3YXJuZWQiLCJSZWZpbmUiLCJsZWdhY3lSb3V0ZXJQcm92aWRlciIsInJvdXRlclByb3ZpZGVyIiwibm90aWZpY2F0aW9uUHJvdmlkZXIiLCJhY2Nlc3NDb250cm9sUHJvdmlkZXIiLCJhdWRpdExvZ1Byb3ZpZGVyIiwiZGVmYXVsdE9wdGlvbnMiLCJxdWVyaWVzIiwicmVmZXRjaE9uV2luZG93Rm9jdXMiLCJrZWVwUHJldmlvdXNEYXRhIiwibm90aWZpY2F0aW9uUHJvdmlkZXJDb250ZXh0VmFsdWVzIiwiUm91dGVyQ29tcG9uZW50IiwiY2xpZW50IiwiUm91dGVDaGFuZ2VIYW5kbGVyIiwidGltZW91dElkIiwic2V0VGltZW91dElkIiwiY2FuY2VsTm90aWZpY2F0aW9uIiwiY2xlYXJUaW1lb3V0IiwibmV3VGltZW91dElkIiwiTGF5b3V0V3JhcHBlciIsIkxheW91dEZyb21Qcm9wcyIsIlNpZGVyRnJvbVByb3BzIiwiSGVhZGVyRnJvbVByb3BzIiwiVGl0bGVGcm9tUHJvcHMiLCJGb290ZXJGcm9tUHJvcHMiLCJPZmZMYXlvdXRBcmVhRnJvbVByb3BzIiwiVW5zYXZlZFByb21wdCIsIndhcm5XaGVuTGlzdGVuZXIiLCJyZXR1cm5WYWx1ZSIsIndoZW4iLCJBdXRoZW50aWNhdGVkIiwicmVkaXJlY3RPbkZhaWwiLCJhcHBlbmRDdXJyZW50UGF0aFRvUXVlcnkiLCJmYWxsYmFja0NvbnRlbnQiLCJsb2FkaW5nQ29udGVudCIsImFjdGl2ZUF1dGhQcm92aWRlciIsImhhc0F1dGhQcm92aWRlciIsImlzTGVnYWN5QXV0aCIsImlzTGVnYWN5Um91dGVyIiwibGVnYWN5TG9jYXRpb24iLCJpc1N1Y2Nlc3MiLCJhdXRoZW50aWNhdGVkIiwiaXNBdXRoZW50aWNhdGVkU3RhdHVzIiwiYXV0aGVudGljYXRlZFJlZGlyZWN0IiwiaXNBdXRoZW50aWNhdGVkIiwiYXBwbGllZFJlZGlyZWN0IiwidG9RdWVyeSIsIlJlZGlyZWN0TGVnYWN5IiwicXVlcnlUb1ZhbHVlIiwiUmVkaXJlY3QiLCJsb2NhdGlvbiIsIkNhbkFjY2VzcyIsImFjdGlvbkZyb21Qcm9wIiwicGFyYW1zRnJvbVByb3AiLCJvblVuYXV0aG9yaXplZCIsImNvbXBvbmVudFF1ZXJ5T3B0aW9ucyIsImZhbGxiYWNrQWN0aW9uIiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJDU1NSdWxlcyIsIkdpdEh1YkJhbm5lciIsImNvbnRhaW5lclN0eWxlIiwic3R5bGVUYWciLCJoZWFkIiwicnVsZSIsInNoZWV0IiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiY2xhc3NOYW1lIiwiR2xvd1NtYWxsIiwiYW5pbWF0aW9uRGVsYXkiLCJHbG93QmlnIiwidHJhbnNpdGlvbkRlbGF5IiwiVGV4dCIsImZsZXhXcmFwIiwid2hpdGVTcGFjZSIsImFuaW1hdGlvbiIsImZpbGxPcGFjaXR5IiwiQXV0b1NhdmVJbmRpY2F0b3IiLCJlbGVtZW50cyIsIk1lc3NhZ2UiLCJ0cmFuc2xhdGlvbktleSIsImlkbGUiLCJjdCIsIkdzIiwic2MiLCJEYyIsIkZjIiwid2MiLCJyYyIsIkFjIiwiWGUiLCJ3dCIsImJjIiwiSW8iLCJZciIsImp1IiwiUW8iLCJQYyIsIlJ0IiwiVm8iLCJUcmFuc2xhdGlvbkNvbnRleHQiLCJhbiIsImRjIiwiaXMiLCJEYSIsIkNyIiwibHMiLCJ2YSIsImJhIiwiVHIiLCJ4ciIsImVzIiwic3IiLCJudCIsIlByIiwiYXMiLCJ2ciIsIkNhIiwiZWUiLCJBIiwiVHMiLCJ0cyIsInlyIiwiRXIiLCJMciIsIkRyIiwiU3QiLCJVciIsImllIiwicGkiLCJWYSIsIk1vIiwibGIiLCJrciIsImFDIiwidXQiLCJOYSIsIlp2IiwiWHQiLCJZdiIsImJvIiwibWkiLCJnaSIsImZlIiwiaG8iLCJZdSIsImNpIiwiWHYiLCJkaCIsImVEIiwibG8iLCJ4aCIsIm5vIiwiTG8iLCJVdCIsImhlIiwiQ2UiLCJwUiIsInREIiwiUmkiLCJBZSIsIkR0Iiwid3IiLCJ5byIsIloiLCJ5dCIsInp0IiwiSnYiLCJvbiIsInBlIiwiSmUiLCJKQyIsIiR0IiwiTXIiLCIkdSIsInVlIiwiQnIiLCJmUiIsIlBlIiwiJGUiLCJSZSIsIk90Iiwidm8iLCJUZSIsIlVhIiwiWWUiLCJtbiIsImdlIiwiQXQiLCJxdSIsImNvIiwiWSIsInFlIiwiaHQiLCJ0biIsImxlIiwic2UiLCJxdiIsIlRDIiwiRW8iLCJyUiIsImp2IiwiaVAiLCJNQyIsIlRhIiwiYnUiLCIkIiwiSlAiLCJUbyIsIm5pIiwiZm8iLCJQdCIsInZ0IiwibnIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-internal/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTrace: () => (/* binding */ p),\n/* harmony export */   getXRay: () => (/* binding */ k),\n/* harmony export */   useQuerySubscription: () => (/* binding */ C)\n/* harmony export */ });\n/* harmony import */ var error_stack_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! error-stack-parser */ \"(ssr)/./node_modules/error-stack-parser/error-stack-parser.js\");\n/* harmony import */ var _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @refinedev/devtools-shared */ \"(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ getTrace,getXRay,useQuerySubscription auto */ \nvar T = \"renderWithHooks\", y = (r)=>{\n    let e = r.findIndex((n)=>n.functionName === T);\n    return e !== -1 ? r.slice(0, e) : r;\n};\nvar f =  false ? 0 : /\\/refine\\/packages\\/(?<name>.*?)\\//;\nvar d = (r)=>r ? !!r.match(f) : !1;\nvar m = (r)=>{\n    var o;\n    if (!r) return;\n    let e = r.match(f), n = (o = e == null ? void 0 : e.groups) == null ? void 0 : o.name;\n    if (n) return `@refinedev/${n}`;\n};\nfunction p(r) {\n    if (false) {}\n    try {\n        let e = new Error, n = error_stack_parser__WEBPACK_IMPORTED_MODULE_0__.parse(e);\n        return y(n).map((t)=>({\n                file: t.fileName,\n                line: t.lineNumber,\n                column: t.columnNumber,\n                function: t.functionName,\n                isRefine: d(t.fileName),\n                packageName: m(t.fileName)\n            })).filter((t)=>t.function).filter((t)=>!(r != null && r.includes(t.function ?? \"\"))).slice(1);\n    } catch  {\n        return [];\n    }\n}\n\nvar E = (r, e)=>{\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"auth\") return null;\n    if (r === \"useCan\") return e ? \"key[1].resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"audit-log\") return r === \"useLog\" ? \"variables.resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"data\") {\n        if (r === \"useCustom\" || r === \"useCustomMutation\") return null;\n        switch(r){\n            case \"useList\":\n            case \"useInfiniteList\":\n            case \"useOne\":\n            case \"useMany\":\n                return e ? \"key[1]\" : \"key[2]\";\n            case \"useCreate\":\n            case \"useCreateMany\":\n            case \"useDelete\":\n            case \"useDeleteMany\":\n            case \"useUpdate\":\n            case \"useUpdateMany\":\n                return \"variables.resource\";\n        }\n    }\n    return null;\n};\nfunction k(r, e, n, o) {\n    if (false) {}\n    let s = p(o).slice(1), t = E(r, e);\n    return {\n        hookName: r,\n        trace: s,\n        resourcePath: t,\n        legacyKey: e,\n        resourceName: n\n    };\n}\n\n\n\nvar l = (r, e)=>{\n    let n = e == null ? void 0 : e.map((s)=>`${s.file}:${s.line}:${s.column}#${s.function}-${s.packageName}-${s.isRefine ? 1 : 0}`);\n    return JSON.stringify([\n        ...r ?? [],\n        ...n ?? []\n    ]);\n};\nvar g = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t, a;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"mutation\",\n                identifier: l(e == null ? void 0 : e.options.mutationKey, (t = e == null ? void 0 : e.meta) == null ? void 0 : t.trace),\n                key: e == null ? void 0 : e.options.mutationKey,\n                status: e == null ? void 0 : e.state.status,\n                state: e == null ? void 0 : e.state,\n                variables: (a = e == null ? void 0 : e.state) == null ? void 0 : a.variables,\n                ...n\n            }), s();\n        });\n    }, R = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"query\",\n                identifier: l(e.queryKey, (t = e.meta) == null ? void 0 : t.trace),\n                key: e.queryKey,\n                status: e.state.status,\n                state: e.state,\n                ...n\n            }), s();\n        });\n    };\nvar b = {}, x = ()=>b, C =  false ? 0 : (r)=>{\n    let { ws: e } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevToolsContext), n = react__WEBPACK_IMPORTED_MODULE_2__.useRef(), o = react__WEBPACK_IMPORTED_MODULE_2__.useRef();\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getQueryCache(), t = R(e);\n        return s.getAll().forEach(t), n.current = s.subscribe(({ query: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = n.current) == null || a.call(n);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getMutationCache(), t = g(e);\n        return s.getAll().forEach(t), o.current = s.subscribe(({ mutation: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = o.current) == null || a.call(o);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>e ? (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.receive)(e, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY_ACTION, ({ queryKey: t })=>{\n            t && r.invalidateQueries(t);\n        }) : ()=>0, [\n        e,\n        r\n    ]), {};\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-shared/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevToolsContext: () => (/* binding */ p),\n/* harmony export */   DevToolsContextProvider: () => (/* binding */ D),\n/* harmony export */   DevtoolsEvent: () => (/* binding */ c),\n/* harmony export */   hooksByScope: () => (/* binding */ L),\n/* harmony export */   receive: () => (/* binding */ _),\n/* harmony export */   scopes: () => (/* binding */ T),\n/* harmony export */   send: () => (/* binding */ d)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ DevToolsContext,DevToolsContextProvider,DevtoolsEvent,hooksByScope,receive,scopes,send auto */ var c = ((t)=>(t.RELOAD = \"devtools:reload\", t.DEVTOOLS_INIT = \"devtools:init\", t.DEVTOOLS_ALREADY_CONNECTED = \"devtools:already-connected\", t.ACTIVITY = \"devtools:send-activity\", t.DEVTOOLS_ACTIVITY_UPDATE = \"devtools:activity-update\", t.DEVTOOLS_CONNECTED_APP = \"devtools:connected-app\", t.DEVTOOLS_DISCONNECTED_APP = \"devtools:disconnected-app\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR = \"devtools:highlight-in-monitor\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION = \"devtools:highlight-in-monitor-action\", t.DEVTOOLS_LOGIN_SUCCESS = \"devtools:login-success\", t.DEVTOOLS_DISPLAY_LOGIN_FAILURE = \"devtools:display-login-failure\", t.DEVTOOLS_LOGIN_FAILURE = \"devtools:login-failure\", t.DEVTOOLS_RELOAD_AFTER_LOGIN = \"devtools:reload-after-login\", t.DEVTOOLS_INVALIDATE_QUERY = \"devtools:invalidate-query\", t.DEVTOOLS_INVALIDATE_QUERY_ACTION = \"devtools:invalidate-query-action\", t))(c || {});\nvar T = {\n    useCan: \"access-control\",\n    useLog: \"audit-log\",\n    useLogList: \"audit-log\",\n    useCreate: \"data\",\n    useCreateMany: \"data\",\n    useCustom: \"data\",\n    useCustomMutation: \"data\",\n    useDelete: \"data\",\n    useDeleteMany: \"data\",\n    useInfiniteList: \"data\",\n    useList: \"data\",\n    useMany: \"data\",\n    useOne: \"data\",\n    useUpdate: \"data\",\n    useUpdateMany: \"data\",\n    useForgotPassword: \"auth\",\n    useGetIdentity: \"auth\",\n    useIsAuthenticated: \"auth\",\n    useLogin: \"auth\",\n    useLogout: \"auth\",\n    useOnError: \"auth\",\n    usePermissions: \"auth\",\n    useRegister: \"auth\",\n    useUpdatePassword: \"auth\"\n}, L = Object.entries(T).reduce((e, [o, s])=>(e[s] || (e[s] = []), e[s].push(o), e), {});\n\nasync function d(e, o, s) {\n    if (e.readyState !== e.OPEN) {\n        await new Promise((n)=>{\n            let r = ()=>{\n                e.send(JSON.stringify({\n                    event: o,\n                    payload: s\n                })), n(), e.removeEventListener(\"open\", r);\n            };\n            e.addEventListener(\"open\", r);\n        });\n        return;\n    }\n    e.send(JSON.stringify({\n        event: o,\n        payload: s\n    }));\n}\nvar p = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    __devtools: !1,\n    httpUrl: \"http://localhost:5001\",\n    wsUrl: \"ws://localhost:5001\",\n    ws: null\n}), D = ({ __devtools: e, url: o = [\n    \"http://localhost:5001\",\n    \"ws://localhost:5001\"\n], children: s })=>{\n    let n = Array.isArray(o) ? o[0] : o, r = Array.isArray(o) ? o[1] : o.replace(/http(s)?:\\/\\//, \"ws$1://\"), [i, y] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        __devtools: e ?? !1,\n        httpUrl: n,\n        wsUrl: r,\n        ws: null\n    }), [O, v] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = null, a = new WebSocket(i.wsUrl);\n        return a.addEventListener(\"open\", ()=>{\n            i.__devtools || (l = setTimeout(()=>{\n                d(a, \"devtools:init\", {\n                    url: window.location.origin\n                });\n            }, 300));\n        }), v(a), ()=>{\n            l && clearTimeout(l), a.readyState === WebSocket.CONNECTING ? a.addEventListener(\"open\", ()=>{\n                a.close(1e3, window.location.origin);\n            }) : a.close(1e3, window.location.origin);\n        };\n    }, []);\n    let E = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...i,\n            ws: O\n        }), [\n        i,\n        O\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(p.Provider, {\n        value: E\n    }, s);\n};\nfunction _(e, o, s) {\n    let n = (r)=>{\n        let { event: i, payload: y } = JSON.parse(r.data);\n        o === i && s(y);\n    };\n    return e.addEventListener(\"message\", n), ()=>{\n        e.removeEventListener(\"message\", n);\n    };\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9kZXZ0b29scy1zaGFyZWQvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7NElBVU8sSUFBS0EsSUFBQUEsQ0FBQUEsQ0FBQUEsSUFDVkEsQ0FBQUEsRUFBQUMsTUFBQSxHQUFTLG1CQUNURCxFQUFBRSxhQUFBLEdBQWdCLGlCQUNoQkYsRUFBQUcsMEJBQUEsR0FBNkIsOEJBQzdCSCxFQUFBSSxRQUFBLEdBQVcsMEJBQ1hKLEVBQUFLLHdCQUFBLEdBQTJCLDRCQUMzQkwsRUFBQU0sc0JBQUEsR0FBeUIsMEJBQ3pCTixFQUFBTyx5QkFBQSxHQUE0Qiw2QkFDNUJQLEVBQUFRLDZCQUFBLEdBQWdDLGlDQUNoQ1IsRUFBQVMsb0NBQUEsR0FBdUMsd0NBQ3ZDVCxFQUFBVSxzQkFBQSxHQUF5QiwwQkFDekJWLEVBQUFXLDhCQUFBLEdBQWlDLGtDQUNqQ1gsRUFBQVksc0JBQUEsR0FBeUIsMEJBQ3pCWixFQUFBYSwyQkFBQSxHQUE4QiwrQkFDOUJiLEVBQUFjLHlCQUFBLEdBQTRCLDZCQUM1QmQsRUFBQWUsZ0NBQUEsR0FBbUMsb0NBZnpCZixDQUFBQSxDQUFBQSxFQUFBQSxLQUFBO0FDa0JMLElBQU1nQixJQUFxQztJQUNoREMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxlQUFlO0lBQ2ZDLFdBQVc7SUFDWEMsbUJBQW1CO0lBQ25CQyxXQUFXO0lBQ1hDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxTQUFTO0lBQ1RDLFNBQVM7SUFDVEMsUUFBUTtJQUNSQyxXQUFXO0lBQ1hDLGVBQWU7SUFDZkMsbUJBQW1CO0lBQ25CQyxnQkFBZ0I7SUFDaEJDLG9CQUFvQjtJQUNwQkMsVUFBVTtJQUNWQyxXQUFXO0lBQ1hDLFlBQVk7SUFDWkMsZ0JBQWdCO0lBQ2hCQyxhQUFhO0lBQ2JDLG1CQUFtQjtBQUNyQixHQUVhQyxJQUFlQyxPQUFPQyxPQUFBLENBQVEzQixHQUFRNEIsTUFBQSxDQUNqRCxDQUFDQyxHQUFLLENBQUNDLEdBQU1DLEVBQUssR0FDWEYsQ0FBQUEsQ0FBQUEsQ0FBSUUsRUFBSyxJQUNaRixDQUFBQSxDQUFBQSxDQUFJRSxFQUFLLEdBQUksRUFBQyxHQUdoQkYsQ0FBQUEsQ0FBSUUsRUFBSyxDQUFFQyxJQUFBLENBQUtGLElBRVRELENBQUFBLEdBRVQsQ0FBQztBRS9ESDtBQUFBLGVBQXNCSyxFQUNwQkMsQ0FBQUEsRUFDQUMsQ0FBQUEsRUFDQUMsQ0FBQUE7SUFJQSxJQUFJRixFQUFHRyxVQUFBLEtBQWVILEVBQUdJLElBQUEsRUFBTTtRQUM3QixNQUFNLElBQUlDLFFBQWVDLENBQUFBO1lBQ3ZCLElBQU1DLElBQVc7Z0JBQ2ZQLEVBQUdELElBQUEsQ0FBS1MsS0FBS0MsU0FBQSxDQUFVO29CQUFFUixPQUFBQTtvQkFBT0MsU0FBQUE7Z0JBQVEsS0FDeENJLEtBQ0FOLEVBQUdVLG1CQUFBLENBQW9CLFFBQVFIO1lBQ2pDO1lBRUFQLEVBQUdXLGdCQUFBLENBQWlCLFFBQVFKO1FBQzlCO1FBQ0E7SUFBQTtJQUVGUCxFQUFHRCxJQUFBLENBQUtTLEtBQUtDLFNBQUEsQ0FBVTtRQUFFUixPQUFBQTtRQUFPQyxTQUFBQTtJQUFRO0FBRTFDO0FEWE8sSUFBTVUsa0JBQWtCZCxnREFBTSxDQUFvQztJQUN2RWdCLFlBQVk7SUFDWkMsU0FBUztJQUNUQyxPQUFPO0lBQ1BoQixJQUFJO0FBQ04sSUFPYWlCLElBQTJDLENBQUMsRUFDdkRILFlBQUFBLENBQUFBLEVBQ0FJLEtBQUFBLElBQU07SUFBQztJQUF5QjtDQUFxQixFQUNyREMsVUFBQUEsQ0FDRjtJQUNFLElBQU1KLElBQVVLLE1BQU1DLE9BQUEsQ0FBUUgsS0FBT0EsQ0FBQUEsQ0FBSSxFQUFDLEdBQUlBLEdBQ3hDRixJQUFRSSxNQUFNQyxPQUFBLENBQVFILEtBQ3hCQSxDQUFBQSxDQUFJLEVBQUMsR0FDTEEsRUFBSUksT0FBQSxDQUFRLGlCQUFpQixZQUUzQixDQUFDQyxHQUFRQyxFQUFTLEdBQUkxQiwyQ0FBTSxDQUErQjtRQUMvRGdCLFlBQVlBLEtBQWM7UUFDMUJDLFNBQUFBO1FBQ0FDLE9BQUFBO1FBQ0FoQixJQUFJO0lBQ04sSUFFTSxDQUFDQSxHQUFJMEIsRUFBSyxHQUFJNUIsMkNBQU0sQ0FBMkI7SUFFckRBLDRDQUFNLENBQVU7UUFDZCxJQUFJOEIsSUFBaUMsTUFDL0JDLElBQWEsSUFBSUMsVUFBVVAsRUFBT1AsS0FBSztRQUU3QyxPQUFBYSxFQUFXbEIsZ0JBQUEsQ0FBaUIsUUFBUTtZQUM3QlksRUFBT1QsVUFBQSxJQUNWYyxDQUFBQSxJQUFVRyxXQUFXO2dCQUNuQmhDLEVBQUs4QixHQUFBQSxpQkFBeUM7b0JBQzVDWCxLQUFLYyxPQUFPQyxRQUFBLENBQVNDLE1BQ3ZCO2dCQUFBO1lBQ0YsR0FBRyxJQUFHO1FBRVYsSUFFQVIsRUFBTUcsSUFFQztZQUNERCxLQUFTTyxhQUFhUCxJQUt0QkMsRUFBVzFCLFVBQUEsS0FBZTJCLFVBQVVNLFVBQUEsR0FDdENQLEVBQVdsQixnQkFBQSxDQUFpQixRQUFRO2dCQUNsQ2tCLEVBQVdRLEtBQUEsQ0FBTSxLQUFNTCxPQUFPQyxRQUFBLENBQVNDLE1BQU07WUFDL0MsS0FFQUwsRUFBV1EsS0FBQSxDQUFNLEtBQU1MLE9BQU9DLFFBQUEsQ0FBU0MsTUFBTTtRQUVqRDtJQUNGLEdBQUcsRUFBRTtJQUVMLElBQU1JLElBQWdCeEMsMENBQU0sQ0FDMUIsSUFBTztZQUNMLEdBQUd5QixDQUFBQTtZQUNIdkIsSUFBQUE7UUFDRixJQUNBO1FBQUN1QjtRQUFRdkI7S0FDWDtJQUVBLHFCQUNFRixnREFBQSxDQUFDYyxFQUFnQjZCLFFBQUEsRUFBaEI7UUFBeUJDLE9BQU9KO0lBQUFBLEdBQzlCbkI7QUFHUDtBRXBGTyxTQUFTd0IsRUFDZDNDLENBQUFBLEVBQ0FDLENBQUFBLEVBQ0EyQyxDQUFBQTtJQUVBLElBQU1yQyxJQUFZc0MsQ0FBQUE7UUFDaEIsSUFBTSxFQUFFNUMsT0FBTzZDLENBQUFBLEVBQWU1QyxTQUFBQSxDQUFRLEtBQUlNLEtBQUt1QyxLQUFBLENBQU1GLEVBQUVHLElBQUk7UUFDdkQvQyxNQUFVNkMsS0FDWkYsRUFBUzFDO0lBRWI7SUFFQSxPQUFBRixFQUFHVyxnQkFBQSxDQUFpQixXQUFXSixJQUV4QjtRQUNMUCxFQUFHVSxtQkFBQSxDQUFvQixXQUFXSDtJQUNwQztBQUNGO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvZXZlbnQtdHlwZXMudHM/Zjc4NyIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvc2NvcGVzLnRzP2I2MDgiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL2NvbnRleHQudHN4P2M0YjMiLCJ3ZWJwYWNrOi8vY2xpZW50Sk0vLi4vc3JjL3NlbmQudHM/YWJkYiIsIndlYnBhY2s6Ly9jbGllbnRKTS8uLi9zcmMvcmVjZWl2ZS50cz84OTMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtcbiAgTXV0YXRpb24sXG4gIE11dGF0aW9uS2V5LFxuICBNdXRhdGlvblN0YXR1cyxcbiAgUXVlcnlLZXksXG4gIFF1ZXJ5U3RhdGUsXG4gIFF1ZXJ5U3RhdHVzLFxufSBmcm9tIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgdHlwZSB7IFRyYWNlVHlwZSB9IGZyb20gXCIuL3RyYWNlXCI7XG5cbmV4cG9ydCBlbnVtIERldnRvb2xzRXZlbnQge1xuICBSRUxPQUQgPSBcImRldnRvb2xzOnJlbG9hZFwiLFxuICBERVZUT09MU19JTklUID0gXCJkZXZ0b29sczppbml0XCIsXG4gIERFVlRPT0xTX0FMUkVBRFlfQ09OTkVDVEVEID0gXCJkZXZ0b29sczphbHJlYWR5LWNvbm5lY3RlZFwiLFxuICBBQ1RJVklUWSA9IFwiZGV2dG9vbHM6c2VuZC1hY3Rpdml0eVwiLFxuICBERVZUT09MU19BQ1RJVklUWV9VUERBVEUgPSBcImRldnRvb2xzOmFjdGl2aXR5LXVwZGF0ZVwiLFxuICBERVZUT09MU19DT05ORUNURURfQVBQID0gXCJkZXZ0b29sczpjb25uZWN0ZWQtYXBwXCIsXG4gIERFVlRPT0xTX0RJU0NPTk5FQ1RFRF9BUFAgPSBcImRldnRvb2xzOmRpc2Nvbm5lY3RlZC1hcHBcIixcbiAgREVWVE9PTFNfSElHSExJR0hUX0lOX01PTklUT1IgPSBcImRldnRvb2xzOmhpZ2hsaWdodC1pbi1tb25pdG9yXCIsXG4gIERFVlRPT0xTX0hJR0hMSUdIVF9JTl9NT05JVE9SX0FDVElPTiA9IFwiZGV2dG9vbHM6aGlnaGxpZ2h0LWluLW1vbml0b3ItYWN0aW9uXCIsXG4gIERFVlRPT0xTX0xPR0lOX1NVQ0NFU1MgPSBcImRldnRvb2xzOmxvZ2luLXN1Y2Nlc3NcIixcbiAgREVWVE9PTFNfRElTUExBWV9MT0dJTl9GQUlMVVJFID0gXCJkZXZ0b29sczpkaXNwbGF5LWxvZ2luLWZhaWx1cmVcIixcbiAgREVWVE9PTFNfTE9HSU5fRkFJTFVSRSA9IFwiZGV2dG9vbHM6bG9naW4tZmFpbHVyZVwiLFxuICBERVZUT09MU19SRUxPQURfQUZURVJfTE9HSU4gPSBcImRldnRvb2xzOnJlbG9hZC1hZnRlci1sb2dpblwiLFxuICBERVZUT09MU19JTlZBTElEQVRFX1FVRVJZID0gXCJkZXZ0b29sczppbnZhbGlkYXRlLXF1ZXJ5XCIsXG4gIERFVlRPT0xTX0lOVkFMSURBVEVfUVVFUllfQUNUSU9OID0gXCJkZXZ0b29sczppbnZhbGlkYXRlLXF1ZXJ5LWFjdGlvblwiLFxufVxuXG50eXBlIFRpbWVzdGFtcHMgPSB7XG4gIGNyZWF0ZWRBdDogbnVtYmVyO1xuICB1cGRhdGVkQXQ6IG51bWJlcjtcbn07XG5cbnR5cGUgQWN0aXZpdHlQYXlsb2FkID1cbiAgfCB7XG4gICAgICB0eXBlOiBcIm11dGF0aW9uXCI7XG4gICAgICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gICAgICBrZXk/OiBNdXRhdGlvbktleTtcbiAgICAgIHN0YXR1cz86IE11dGF0aW9uU3RhdHVzO1xuICAgICAgdHJhY2U/OiBUcmFjZVR5cGVbXTtcbiAgICAgIHN0YXRlOiBNdXRhdGlvbjxhbnksIGFueSwgYW55LCBhbnk+W1wic3RhdGVcIl07XG4gICAgICB2YXJpYWJsZXM/OiBNdXRhdGlvbjxhbnksIGFueSwgYW55LCBhbnk+W1wic3RhdGVcIl1bXCJ2YXJpYWJsZXNcIl07XG4gICAgICBob29rTmFtZTogc3RyaW5nO1xuICAgICAgcmVzb3VyY2VQYXRoOiBzdHJpbmcgfCBudWxsO1xuICAgICAgcmVzb3VyY2VOYW1lPzogc3RyaW5nO1xuICAgICAgbGVnYWN5S2V5OiBib29sZWFuO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBcInF1ZXJ5XCI7XG4gICAgICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gICAgICBrZXk/OiBRdWVyeUtleTtcbiAgICAgIHN0YXR1cz86IFF1ZXJ5U3RhdHVzO1xuICAgICAgdHJhY2U/OiBUcmFjZVR5cGVbXTtcbiAgICAgIHN0YXRlOiBRdWVyeVN0YXRlPGFueSwgYW55PjtcbiAgICAgIGhvb2tOYW1lOiBzdHJpbmc7XG4gICAgICByZXNvdXJjZVBhdGg6IHN0cmluZyB8IG51bGw7XG4gICAgICByZXNvdXJjZU5hbWU/OiBzdHJpbmc7XG4gICAgICBsZWdhY3lLZXk6IGJvb2xlYW47XG4gICAgfTtcblxuZXhwb3J0IHR5cGUgRGV2dG9vbHNFdmVudFBheWxvYWRzID0ge1xuICBbRGV2dG9vbHNFdmVudC5SRUxPQURdOiB7fTtcbiAgW0RldnRvb2xzRXZlbnQuREVWVE9PTFNfSU5JVF06IHsgdXJsOiBzdHJpbmcgfTtcbiAgW0RldnRvb2xzRXZlbnQuREVWVE9PTFNfQUxSRUFEWV9DT05ORUNURURdOiB7IHVybDogc3RyaW5nIH07XG4gIFtEZXZ0b29sc0V2ZW50LkFDVElWSVRZXTogQWN0aXZpdHlQYXlsb2FkO1xuICBbRGV2dG9vbHNFdmVudC5ERVZUT09MU19BQ1RJVklUWV9VUERBVEVdOiB7XG4gICAgdXBkYXRlZEFjdGl2aXRpZXM6IChBY3Rpdml0eVBheWxvYWQgJiBUaW1lc3RhbXBzKVtdO1xuICB9O1xuICBbRGV2dG9vbHNFdmVudC5ERVZUT09MU19DT05ORUNURURfQVBQXTogeyB1cmw6IHN0cmluZyB8IG51bGwgfTtcbiAgW0RldnRvb2xzRXZlbnQuREVWVE9PTFNfRElTQ09OTkVDVEVEX0FQUF06IHt9O1xuICBbRGV2dG9vbHNFdmVudC5ERVZUT09MU19ISUdITElHSFRfSU5fTU9OSVRPUl06IHsgbmFtZTogc3RyaW5nIH07XG4gIFtEZXZ0b29sc0V2ZW50LkRFVlRPT0xTX0hJR0hMSUdIVF9JTl9NT05JVE9SX0FDVElPTl06IHsgbmFtZTogc3RyaW5nIH07XG4gIFtEZXZ0b29sc0V2ZW50LkRFVlRPT0xTX0xPR0lOX1NVQ0NFU1NdOiB7fTtcbiAgW0RldnRvb2xzRXZlbnQuREVWVE9PTFNfTE9HSU5fRkFJTFVSRV06IHtcbiAgICBlcnJvcjogc3RyaW5nIHwgbnVsbDtcbiAgICBjb2RlOiBzdHJpbmcgfCBudWxsO1xuICB9O1xuICBbRGV2dG9vbHNFdmVudC5ERVZUT09MU19ESVNQTEFZX0xPR0lOX0ZBSUxVUkVdOiB7XG4gICAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG4gICAgY29kZTogc3RyaW5nIHwgbnVsbDtcbiAgfTtcbiAgW0RldnRvb2xzRXZlbnQuREVWVE9PTFNfUkVMT0FEX0FGVEVSX0xPR0lOXToge307XG4gIFtEZXZ0b29sc0V2ZW50LkRFVlRPT0xTX0lOVkFMSURBVEVfUVVFUlldOiB7IHF1ZXJ5S2V5OiBRdWVyeUtleSB9O1xuICBbRGV2dG9vbHNFdmVudC5ERVZUT09MU19JTlZBTElEQVRFX1FVRVJZX0FDVElPTl06IHsgcXVlcnlLZXk6IFF1ZXJ5S2V5IH07XG59O1xuIiwiZXhwb3J0IHR5cGUgUmVmaW5lSG9vayA9XG4gIHwgXCJ1c2VDYW5cIlxuICB8IFwidXNlTG9nXCJcbiAgfCBcInVzZUxvZ0xpc3RcIlxuICB8IFwidXNlQ3JlYXRlXCJcbiAgfCBcInVzZUNyZWF0ZU1hbnlcIlxuICB8IFwidXNlQ3VzdG9tXCJcbiAgfCBcInVzZUN1c3RvbU11dGF0aW9uXCJcbiAgfCBcInVzZURlbGV0ZVwiXG4gIHwgXCJ1c2VEZWxldGVNYW55XCJcbiAgfCBcInVzZUluZmluaXRlTGlzdFwiXG4gIHwgXCJ1c2VMaXN0XCJcbiAgfCBcInVzZU1hbnlcIlxuICB8IFwidXNlT25lXCJcbiAgfCBcInVzZVVwZGF0ZVwiXG4gIHwgXCJ1c2VVcGRhdGVNYW55XCJcbiAgfCBcInVzZUZvcmdvdFBhc3N3b3JkXCJcbiAgfCBcInVzZUdldElkZW50aXR5XCJcbiAgfCBcInVzZUlzQXV0aGVudGljYXRlZFwiXG4gIHwgXCJ1c2VMb2dpblwiXG4gIHwgXCJ1c2VMb2dvdXRcIlxuICB8IFwidXNlT25FcnJvclwiXG4gIHwgXCJ1c2VQZXJtaXNzaW9uc1wiXG4gIHwgXCJ1c2VSZWdpc3RlclwiXG4gIHwgXCJ1c2VVcGRhdGVQYXNzd29yZFwiO1xuXG5leHBvcnQgdHlwZSBTY29wZXMgPSBcImRhdGFcIiB8IFwiYXVkaXQtbG9nXCIgfCBcImFjY2Vzcy1jb250cm9sXCIgfCBcImF1dGhcIjtcblxuZXhwb3J0IGNvbnN0IHNjb3BlczogUmVjb3JkPFJlZmluZUhvb2ssIFNjb3Blcz4gPSB7XG4gIHVzZUNhbjogXCJhY2Nlc3MtY29udHJvbFwiLFxuICB1c2VMb2c6IFwiYXVkaXQtbG9nXCIsXG4gIHVzZUxvZ0xpc3Q6IFwiYXVkaXQtbG9nXCIsXG4gIHVzZUNyZWF0ZTogXCJkYXRhXCIsXG4gIHVzZUNyZWF0ZU1hbnk6IFwiZGF0YVwiLFxuICB1c2VDdXN0b206IFwiZGF0YVwiLFxuICB1c2VDdXN0b21NdXRhdGlvbjogXCJkYXRhXCIsXG4gIHVzZURlbGV0ZTogXCJkYXRhXCIsXG4gIHVzZURlbGV0ZU1hbnk6IFwiZGF0YVwiLFxuICB1c2VJbmZpbml0ZUxpc3Q6IFwiZGF0YVwiLFxuICB1c2VMaXN0OiBcImRhdGFcIixcbiAgdXNlTWFueTogXCJkYXRhXCIsXG4gIHVzZU9uZTogXCJkYXRhXCIsXG4gIHVzZVVwZGF0ZTogXCJkYXRhXCIsXG4gIHVzZVVwZGF0ZU1hbnk6IFwiZGF0YVwiLFxuICB1c2VGb3Jnb3RQYXNzd29yZDogXCJhdXRoXCIsXG4gIHVzZUdldElkZW50aXR5OiBcImF1dGhcIixcbiAgdXNlSXNBdXRoZW50aWNhdGVkOiBcImF1dGhcIixcbiAgdXNlTG9naW46IFwiYXV0aFwiLFxuICB1c2VMb2dvdXQ6IFwiYXV0aFwiLFxuICB1c2VPbkVycm9yOiBcImF1dGhcIixcbiAgdXNlUGVybWlzc2lvbnM6IFwiYXV0aFwiLFxuICB1c2VSZWdpc3RlcjogXCJhdXRoXCIsXG4gIHVzZVVwZGF0ZVBhc3N3b3JkOiBcImF1dGhcIixcbn07XG5cbmV4cG9ydCBjb25zdCBob29rc0J5U2NvcGUgPSBPYmplY3QuZW50cmllcyhzY29wZXMpLnJlZHVjZShcbiAgKGFjYywgW2hvb2ssIHNjb3BlXSkgPT4ge1xuICAgIGlmICghYWNjW3Njb3BlXSkge1xuICAgICAgYWNjW3Njb3BlXSA9IFtdO1xuICAgIH1cblxuICAgIGFjY1tzY29wZV0ucHVzaChob29rIGFzIFJlZmluZUhvb2spO1xuXG4gICAgcmV0dXJuIGFjYztcbiAgfSxcbiAge30gYXMgUmVjb3JkPFNjb3BlcywgUmVmaW5lSG9va1tdPixcbik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEZXZ0b29sc0V2ZW50IH0gZnJvbSBcIi4vZXZlbnQtdHlwZXNcIjtcbmltcG9ydCB7IHNlbmQgfSBmcm9tIFwiLi9zZW5kXCI7XG5pbXBvcnQgeyByZWNlaXZlIH0gZnJvbSBcIi4vcmVjZWl2ZVwiO1xuXG50eXBlIERldnRvb2xzQ29udGV4dFZhbHVlID0ge1xuICBfX2RldnRvb2xzOiBib29sZWFuO1xuICBodHRwVXJsOiBzdHJpbmc7XG4gIHdzVXJsOiBzdHJpbmc7XG4gIHdzOiBXZWJTb2NrZXQgfCBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IERldlRvb2xzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8RGV2dG9vbHNDb250ZXh0VmFsdWU+KHtcbiAgX19kZXZ0b29sczogZmFsc2UsXG4gIGh0dHBVcmw6IFwiaHR0cDovL2xvY2FsaG9zdDo1MDAxXCIsXG4gIHdzVXJsOiBcIndzOi8vbG9jYWxob3N0OjUwMDFcIixcbiAgd3M6IG51bGwsXG59KTtcblxudHlwZSBQcm9wcyA9IFJlYWN0LlByb3BzV2l0aENoaWxkcmVuPHtcbiAgX19kZXZ0b29scz86IGJvb2xlYW47XG4gIHVybD86IHN0cmluZyB8IFtodHRwVXJsOiBzdHJpbmcsIHdzVXJsOiBzdHJpbmddO1xufT47XG5cbmV4cG9ydCBjb25zdCBEZXZUb29sc0NvbnRleHRQcm92aWRlcjogUmVhY3QuRkM8UHJvcHM+ID0gKHtcbiAgX19kZXZ0b29scyxcbiAgdXJsID0gW1wiaHR0cDovL2xvY2FsaG9zdDo1MDAxXCIsIFwid3M6Ly9sb2NhbGhvc3Q6NTAwMVwiXSxcbiAgY2hpbGRyZW4sXG59KSA9PiB7XG4gIGNvbnN0IGh0dHBVcmwgPSBBcnJheS5pc0FycmF5KHVybCkgPyB1cmxbMF0gOiB1cmw7XG4gIGNvbnN0IHdzVXJsID0gQXJyYXkuaXNBcnJheSh1cmwpXG4gICAgPyB1cmxbMV1cbiAgICA6IHVybC5yZXBsYWNlKC9odHRwKHMpPzpcXC9cXC8vLCBcIndzJDE6Ly9cIik7XG5cbiAgY29uc3QgW3ZhbHVlcywgc2V0VmFsdWVzXSA9IFJlYWN0LnVzZVN0YXRlPERldnRvb2xzQ29udGV4dFZhbHVlPih7XG4gICAgX19kZXZ0b29sczogX19kZXZ0b29scyA/PyBmYWxzZSxcbiAgICBodHRwVXJsLFxuICAgIHdzVXJsLFxuICAgIHdzOiBudWxsLFxuICB9KTtcblxuICBjb25zdCBbd3MsIHNldFdzXSA9IFJlYWN0LnVzZVN0YXRlPFdlYlNvY2tldCB8IG51bGw+KG51bGwpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGw7XG4gICAgY29uc3Qgd3NJbnN0YW5jZSA9IG5ldyBXZWJTb2NrZXQodmFsdWVzLndzVXJsKTtcblxuICAgIHdzSW5zdGFuY2UuYWRkRXZlbnRMaXN0ZW5lcihcIm9wZW5cIiwgKCkgPT4ge1xuICAgICAgaWYgKCF2YWx1ZXMuX19kZXZ0b29scykge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc2VuZCh3c0luc3RhbmNlLCBEZXZ0b29sc0V2ZW50LkRFVlRPT0xTX0lOSVQsIHtcbiAgICAgICAgICAgIHVybDogd2luZG93LmxvY2F0aW9uLm9yaWdpbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHNldFdzKHdzSW5zdGFuY2UpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7XG5cbiAgICAgIC8vIEluIHN0cmljdCBtb2RlLCB0aGUgV2ViU29ja2V0IGluc3RhbmNlIG1pZ2h0IG5vdCBiZSBjb25uZWN0ZWQgeWV0XG4gICAgICAvLyBzbyB3ZSBuZWVkIHRvIHdhaXQgZm9yIGl0IHRvIGNvbm5lY3QgYmVmb3JlIGNsb3NpbmcgaXRcbiAgICAgIC8vIG90aGVyd2lzZSBpdCB3aWxsIGxvZyBhbiB1bm5lY2Vzc2FyeSBlcnJvciBpbiB0aGUgY29uc29sZVxuICAgICAgaWYgKHdzSW5zdGFuY2UucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0LkNPTk5FQ1RJTkcpIHtcbiAgICAgICAgd3NJbnN0YW5jZS5hZGRFdmVudExpc3RlbmVyKFwib3BlblwiLCAoKSA9PiB7XG4gICAgICAgICAgd3NJbnN0YW5jZS5jbG9zZSgxMDAwLCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3c0luc3RhbmNlLmNsb3NlKDEwMDAsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICBjb25zdCBjb250ZXh0VmFsdWVzID0gUmVhY3QudXNlTWVtbzxEZXZ0b29sc0NvbnRleHRWYWx1ZT4oXG4gICAgKCkgPT4gKHtcbiAgICAgIC4uLnZhbHVlcyxcbiAgICAgIHdzLFxuICAgIH0pLFxuICAgIFt2YWx1ZXMsIHdzXSxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxEZXZUb29sc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZXN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRGV2VG9vbHNDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCB0eXBlIHsgRGV2dG9vbHNFdmVudCwgRGV2dG9vbHNFdmVudFBheWxvYWRzIH0gZnJvbSBcIi4vZXZlbnQtdHlwZXNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmQ8VCBleHRlbmRzIERldnRvb2xzRXZlbnQ+KFxuICB3czogV2ViU29ja2V0LFxuICBldmVudDogVCxcbiAgcGF5bG9hZDogRGV2dG9vbHNFdmVudFBheWxvYWRzW1RdLFxuKSB7XG4gIC8vIGNoZWNrIGlmIHRoZSBzb2NrZXQgaXMgb3BlblxuICAvLyBpZiBub3QsIHdhaXQgZm9yIGl0IHRvIG9wZW5cbiAgaWYgKHdzLnJlYWR5U3RhdGUgIT09IHdzLk9QRU4pIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyBldmVudCwgcGF5bG9hZCB9KSk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgd3MucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9wZW5cIiwgbGlzdGVuZXIpO1xuICAgICAgfTtcblxuICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcihcIm9wZW5cIiwgbGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgZXZlbnQsIHBheWxvYWQgfSkpO1xuICByZXR1cm47XG59XG4iLCIvLyByZWNlaXZlIHdzIG1lc3NhZ2UgYnkgYWRkaW5nIGEgbGlzdGVuZXIgdG8gdGhlIHdzIG9iamVjdFxuXG5pbXBvcnQgdHlwZSB7IERldnRvb2xzRXZlbnQsIERldnRvb2xzRXZlbnRQYXlsb2FkcyB9IGZyb20gXCIuL2V2ZW50LXR5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNlaXZlPFQgZXh0ZW5kcyBEZXZ0b29sc0V2ZW50PihcbiAgd3M6IFdlYlNvY2tldCxcbiAgZXZlbnQ6IFQsXG4gIGNhbGxiYWNrOiAocGF5bG9hZDogRGV2dG9vbHNFdmVudFBheWxvYWRzW1RdKSA9PiB2b2lkLFxuKSB7XG4gIGNvbnN0IGxpc3RlbmVyID0gKGU6IE1lc3NhZ2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IHsgZXZlbnQ6IHJlY2VpdmVkRXZlbnQsIHBheWxvYWQgfSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcbiAgICBpZiAoZXZlbnQgPT09IHJlY2VpdmVkRXZlbnQpIHtcbiAgICAgIGNhbGxiYWNrKHBheWxvYWQpO1xuICAgIH1cbiAgfTtcblxuICB3cy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBsaXN0ZW5lcik7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICB3cy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBsaXN0ZW5lcik7XG4gIH07XG59XG4iXSwibmFtZXMiOlsiRGV2dG9vbHNFdmVudCIsIlJFTE9BRCIsIkRFVlRPT0xTX0lOSVQiLCJERVZUT09MU19BTFJFQURZX0NPTk5FQ1RFRCIsIkFDVElWSVRZIiwiREVWVE9PTFNfQUNUSVZJVFlfVVBEQVRFIiwiREVWVE9PTFNfQ09OTkVDVEVEX0FQUCIsIkRFVlRPT0xTX0RJU0NPTk5FQ1RFRF9BUFAiLCJERVZUT09MU19ISUdITElHSFRfSU5fTU9OSVRPUiIsIkRFVlRPT0xTX0hJR0hMSUdIVF9JTl9NT05JVE9SX0FDVElPTiIsIkRFVlRPT0xTX0xPR0lOX1NVQ0NFU1MiLCJERVZUT09MU19ESVNQTEFZX0xPR0lOX0ZBSUxVUkUiLCJERVZUT09MU19MT0dJTl9GQUlMVVJFIiwiREVWVE9PTFNfUkVMT0FEX0FGVEVSX0xPR0lOIiwiREVWVE9PTFNfSU5WQUxJREFURV9RVUVSWSIsIkRFVlRPT0xTX0lOVkFMSURBVEVfUVVFUllfQUNUSU9OIiwic2NvcGVzIiwidXNlQ2FuIiwidXNlTG9nIiwidXNlTG9nTGlzdCIsInVzZUNyZWF0ZSIsInVzZUNyZWF0ZU1hbnkiLCJ1c2VDdXN0b20iLCJ1c2VDdXN0b21NdXRhdGlvbiIsInVzZURlbGV0ZSIsInVzZURlbGV0ZU1hbnkiLCJ1c2VJbmZpbml0ZUxpc3QiLCJ1c2VMaXN0IiwidXNlTWFueSIsInVzZU9uZSIsInVzZVVwZGF0ZSIsInVzZVVwZGF0ZU1hbnkiLCJ1c2VGb3Jnb3RQYXNzd29yZCIsInVzZUdldElkZW50aXR5IiwidXNlSXNBdXRoZW50aWNhdGVkIiwidXNlTG9naW4iLCJ1c2VMb2dvdXQiLCJ1c2VPbkVycm9yIiwidXNlUGVybWlzc2lvbnMiLCJ1c2VSZWdpc3RlciIsInVzZVVwZGF0ZVBhc3N3b3JkIiwiaG9va3NCeVNjb3BlIiwiT2JqZWN0IiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsImhvb2siLCJzY29wZSIsInB1c2giLCJSZWFjdCIsInNlbmQiLCJ3cyIsImV2ZW50IiwicGF5bG9hZCIsInJlYWR5U3RhdGUiLCJPUEVOIiwiUHJvbWlzZSIsInJlc29sdmUiLCJsaXN0ZW5lciIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkRldlRvb2xzQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJfX2RldnRvb2xzIiwiaHR0cFVybCIsIndzVXJsIiwiRGV2VG9vbHNDb250ZXh0UHJvdmlkZXIiLCJ1cmwiLCJjaGlsZHJlbiIsIkFycmF5IiwiaXNBcnJheSIsInJlcGxhY2UiLCJ2YWx1ZXMiLCJzZXRWYWx1ZXMiLCJ1c2VTdGF0ZSIsInNldFdzIiwidXNlRWZmZWN0IiwidGltZW91dCIsIndzSW5zdGFuY2UiLCJXZWJTb2NrZXQiLCJzZXRUaW1lb3V0Iiwid2luZG93IiwibG9jYXRpb24iLCJvcmlnaW4iLCJjbGVhclRpbWVvdXQiLCJDT05ORUNUSU5HIiwiY2xvc2UiLCJjb250ZXh0VmFsdWVzIiwidXNlTWVtbyIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIiwicmVjZWl2ZSIsImNhbGxiYWNrIiwiZSIsInJlY2VpdmVkRXZlbnQiLCJwYXJzZSIsImRhdGEiLCJwIiwiRCIsImMiLCJMIiwiXyIsIlQiLCJkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/kbar/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/kbar/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KBAR_LISTBOX: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBAR_LISTBOX),\n/* harmony export */   KBarAnimator: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarAnimator),\n/* harmony export */   KBarContext: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarContext),\n/* harmony export */   KBarPortal: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPortal),\n/* harmony export */   KBarPositioner: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPositioner),\n/* harmony export */   KBarProvider: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarProvider),\n/* harmony export */   KBarResults: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarResults),\n/* harmony export */   KBarSearch: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarSearch),\n/* harmony export */   NO_GROUP: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.NO_GROUP),\n/* harmony export */   Priority: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.Priority),\n/* harmony export */   RefineKbar: () => (/* binding */ O),\n/* harmony export */   RefineKbarPropsContext: () => (/* binding */ w),\n/* harmony export */   RefineKbarProvider: () => (/* binding */ ge),\n/* harmony export */   VisualState: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.VisualState),\n/* harmony export */   createAction: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.createAction),\n/* harmony export */   getListboxItemId: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.getListboxItemId),\n/* harmony export */   useKBar: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useKBar),\n/* harmony export */   useMatches: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useMatches),\n/* harmony export */   useRefineKbar: () => (/* binding */ I),\n/* harmony export */   useRegisterActions: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useRegisterActions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var kbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kbar */ \"(ssr)/./node_modules/kbar/lib/index.js\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ KBAR_LISTBOX,KBarAnimator,KBarContext,KBarPortal,KBarPositioner,KBarProvider,KBarResults,KBarSearch,NO_GROUP,Priority,RefineKbar,RefineKbarPropsContext,RefineKbarProvider,VisualState,createAction,getListboxItemId,useKBar,useMatches,useRefineKbar,useRegisterActions auto */ var nt = Object.defineProperty;\nvar r = (n, e)=>nt(n, \"name\", {\n        value: e,\n        configurable: !0\n    });\n\n\n\n\n\n\nvar g = r((n)=>n.replace(/\\w\\S*/g, (e)=>e.charAt(0).toUpperCase() + e.slice(1).toLowerCase()), \"capitalize\");\n\nvar I = r(()=>{\n    let n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { resource: e, resources: p, id: c, action: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(), l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), d = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetToPath)(), b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), { mutate: H } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useDelete)(), { push: K, list: Pt, create: wt, show: Tt, edit: kt } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)(), V = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), $ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarContext), { can: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCanWithoutCache)(), [B, j] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        r(async ()=>await Promise.all(q().flatMap((i)=>F(i))), \"preaparedActions\")().then((i)=>j(i.flatMap((m)=>m)));\n    }, [\n        p,\n        c,\n        e,\n        y\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        B.length === 0 && $.query.setVisualState(kbar__WEBPACK_IMPORTED_MODULE_1__.VisualState.hidden);\n    }, [\n        B\n    ]);\n    let q = r(()=>{\n        let t = [\n            ...p\n        ], i = t == null ? void 0 : t.findIndex((m)=>(m.identifier ?? (m == null ? void 0 : m.name)) === ((e == null ? void 0 : e.identifier) ?? (e == null ? void 0 : e.name)));\n        if (i > 0) {\n            let m = t[i];\n            t.splice(i, 1), t.splice(0, 0, m);\n        }\n        return t;\n    }, \"moveActionToFirst\"), F = r(async (t)=>{\n        var L, E, z, N, M, U;\n        let { name: i, label: m, list: _, create: T, canCreate: Q, canEdit: X, canShow: J, icon: Y, show: k, canDelete: Z, edit: D, route: Dt } = t, tt = ((L = t == null ? void 0 : t.meta) == null ? void 0 : L.label) ?? ((E = t == null ? void 0 : t.options) == null ? void 0 : E.label) ?? m, h = ((z = t == null ? void 0 : t.meta) == null ? void 0 : z.icon) ?? ((N = t == null ? void 0 : t.options) == null ? void 0 : N.icon) ?? Y, et = ((M = t == null ? void 0 : t.meta) == null ? void 0 : M.canDelete) ?? ((U = t == null ? void 0 : t.options) == null ? void 0 : U.canDelete) ?? Z, A = tt ?? n(`${t.name}.${t.name}`, V(t.name, \"plural\")), x = [];\n        if (_ && (e !== void 0 && (e == null ? void 0 : e.name) !== i || y !== void 0 && (e == null ? void 0 : e.name) === i)) {\n            let { can: f } = await (a == null ? void 0 : a({\n                resource: i,\n                action: \"list\",\n                params: {\n                    id: c,\n                    resource: t\n                }\n            })) || {\n                can: !0\n            };\n            f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                name: n(\"actions.list\", g(\"list\")),\n                section: A,\n                icon: h,\n                perform: ()=>{\n                    let o = d({\n                        resource: t,\n                        action: \"list\",\n                        legacy: l === \"legacy\"\n                    });\n                    o && (l === \"legacy\" ? K(o) : b({\n                        to: o\n                    }));\n                }\n            }));\n        }\n        if ((Q || T) && T && (y !== \"create\" || (e == null ? void 0 : e.name) !== i)) {\n            let { can: f } = await (a == null ? void 0 : a({\n                resource: i,\n                action: \"create\",\n                params: {\n                    resource: t\n                }\n            })) || {\n                can: !0\n            };\n            f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                name: n(\"actions.create\", g(\"create\")),\n                section: A,\n                icon: h,\n                keywords: \"new\",\n                perform: ()=>{\n                    let o = d({\n                        resource: t,\n                        action: \"create\",\n                        legacy: l === \"legacy\"\n                    });\n                    o && (l === \"legacy\" ? K(o) : b({\n                        to: o\n                    }));\n                }\n            }));\n        }\n        if ((e == null ? void 0 : e.name) === i && c) {\n            if ((J || k) && k && y !== \"show\") {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"show\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"actions.show\", g(\"show\")),\n                    section: A,\n                    icon: h,\n                    perform: ()=>{\n                        let o = d({\n                            resource: t,\n                            action: \"show\",\n                            legacy: l === \"legacy\",\n                            meta: {\n                                id: c\n                            }\n                        });\n                        o && (l === \"legacy\" ? K(o) : b({\n                            to: o\n                        }));\n                    }\n                }));\n            }\n            if ((X || D) && D && y !== \"edit\") {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"edit\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"actions.edit\", g(\"edit\")),\n                    section: A,\n                    icon: h,\n                    perform: ()=>{\n                        let o = d({\n                            resource: t,\n                            action: \"edit\",\n                            legacy: l === \"legacy\",\n                            meta: {\n                                id: c\n                            }\n                        });\n                        o && (l === \"legacy\" ? K(o) : b({\n                            to: o\n                        }));\n                    }\n                }));\n            }\n            if (et) {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"delete\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push({\n                    id: \"delete\",\n                    name: n(\"actions.delete\", g(\"delete\")),\n                    section: A,\n                    icon: h\n                }, (0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"buttons.delete\", g(\"delete\")),\n                    section: n(\"buttons.confirm\", \"Are you sure?\"),\n                    parent: \"delete\",\n                    perform: ()=>{\n                        H({\n                            resource: t.name,\n                            id: c\n                        }, {\n                            onSuccess: ()=>{\n                                let o = d({\n                                    resource: t,\n                                    action: \"list\",\n                                    legacy: l === \"legacy\"\n                                });\n                                o && (l === \"legacy\" ? K(o) : b({\n                                    to: o\n                                }));\n                            }\n                        });\n                    }\n                }), (0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"buttons.cancel\", \"Cancel\"),\n                    parent: \"delete\",\n                    perform: ()=>null\n                }));\n            }\n        }\n        return x;\n    }, \"createActionWithResource\");\n    (0,kbar__WEBPACK_IMPORTED_MODULE_1__.useRegisterActions)(B, [\n        B\n    ]);\n}, \"useRefineKbar\");\n\n\nvar S = r(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPortal, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPositioner, {\n        style: {\n            opacity: 1,\n            transition: \"background 0.35s cubic-bezier(0.4, 0, 0.2, 1) 0s\",\n            backdropFilter: \"saturate(180%) blur(1px)\",\n            background: \"rgba(0, 0, 0, 0.1)\",\n            zIndex: \"9999\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarAnimator, {\n        style: {\n            maxWidth: \"600px\",\n            width: \"100%\",\n            background: \"white\",\n            color: \"black\",\n            borderRadius: \"8px\",\n            overflow: \"hidden\",\n            boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarSearch, {\n        style: {\n            padding: \"12px 16px\",\n            fontSize: \"16px\",\n            width: \"100%\",\n            boxSizing: \"border-box\",\n            outline: \"none\",\n            border: \"none\",\n            background: \"rgb(252 252 252)\",\n            color: \"black\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(v, null)))), \"CommandBar\");\n\n\nvar Bt = {\n    padding: \"8px 16px\",\n    fontSize: \"14px\",\n    textTransform: \"uppercase\",\n    fontWeight: \"bold\",\n    opacity: .5\n}, v = r(()=>{\n    let { results: n, rootActionId: e } = (0,kbar__WEBPACK_IMPORTED_MODULE_1__.useMatches)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarResults, {\n        items: n,\n        onRender: ({ item: p, active: c })=>typeof p == \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                style: Bt\n            }, p) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(C, {\n                action: p,\n                active: c,\n                currentRootActionId: e\n            })\n    });\n}, \"RenderResults\");\n\nvar C = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ action: n, active: e, currentRootActionId: p }, c)=>{\n    var l;\n    let y = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!p) return n.ancestors;\n        let d = n.ancestors.findIndex((b)=>b.id === p);\n        return n.ancestors.slice(d + 1);\n    }, [\n        n.ancestors,\n        p\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: c,\n        style: {\n            padding: \"12px 16px\",\n            background: e ? \"rgba(0 0 0 / 0.05)\" : \"transparent\",\n            borderLeft: `2px solid ${e ? \"rgb(28 28 29)\" : \"transparent\"}`,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            cursor: \"pointer\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: \"8px\",\n            alignItems: \"center\",\n            fontSize: 14\n        }\n    }, n.icon && n.icon, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, y.length > 0 && y.map((d)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            key: d.id\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            style: {\n                opacity: .5,\n                marginRight: 8\n            }\n        }, d.name), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            style: {\n                marginRight: 8\n            }\n        }, \"›\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: n.name.toLocaleUpperCase() === \"DELETE\" ? \"red\" : \"black\"\n        }\n    }, n.name)), n.subtitle && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: 12\n        }\n    }, n.subtitle))), (l = n.shortcut) != null && l.length ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"aria-hidden\": !0,\n        style: {\n            display: \"grid\",\n            gridAutoFlow: \"column\",\n            gap: \"4px\"\n        }\n    }, n.shortcut.map((d)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"kbd\", {\n            key: d,\n            style: {\n                padding: \"4px 6px\",\n                background: \"rgba(0 0 0 / .1)\",\n                borderRadius: \"4px\",\n                fontSize: 14\n            }\n        }, d))) : null);\n});\nC.displayName = \"ResultItem\";\n\nvar O = r(({ commandBarProps: n })=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(w);\n    I();\n    let p = {\n        ...e,\n        ...n\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(S, {\n        ...p\n    });\n}, \"RefineKbar\");\nvar w = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), ge = r(({ children: n, commandBarProps: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(w.Provider, {\n        value: e ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarProvider, null, n)), \"RefineKbarProvider\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/kbar/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/mui/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@refinedev/mui/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthPage: () => (/* binding */ AuthPage),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ AutoSaveIndicator),\n/* harmony export */   BooleanField: () => (/* binding */ BooleanField),\n/* harmony export */   Breadcrumb: () => (/* binding */ Breadcrumb),\n/* harmony export */   CircularDeterminate: () => (/* binding */ CircularDeterminate),\n/* harmony export */   CloneButton: () => (/* binding */ CloneButton),\n/* harmony export */   Create: () => (/* binding */ Create),\n/* harmony export */   CreateButton: () => (/* binding */ CreateButton),\n/* harmony export */   DarkTheme: () => (/* binding */ DarkTheme),\n/* harmony export */   DateField: () => (/* binding */ DateField),\n/* harmony export */   DeleteButton: () => (/* binding */ DeleteButton),\n/* harmony export */   Edit: () => (/* binding */ Edit),\n/* harmony export */   EditButton: () => (/* binding */ EditButton),\n/* harmony export */   EmailField: () => (/* binding */ EmailField),\n/* harmony export */   ErrorComponent: () => (/* binding */ ErrorComponent),\n/* harmony export */   ExportButton: () => (/* binding */ ExportButton),\n/* harmony export */   FileField: () => (/* binding */ FileField),\n/* harmony export */   HamburgerMenu: () => (/* binding */ HamburgerMenu),\n/* harmony export */   Header: () => (/* binding */ Header),\n/* harmony export */   ImportButton: () => (/* binding */ ImportButton),\n/* harmony export */   Layout: () => (/* binding */ Layout),\n/* harmony export */   LightTheme: () => (/* binding */ LightTheme),\n/* harmony export */   List: () => (/* binding */ List4),\n/* harmony export */   ListButton: () => (/* binding */ ListButton),\n/* harmony export */   LoginPage: () => (/* binding */ LoginPage),\n/* harmony export */   MarkdownField: () => (/* binding */ MarkdownField),\n/* harmony export */   NotistackSnackbarContent: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarContent),\n/* harmony export */   NumberField: () => (/* binding */ NumberField),\n/* harmony export */   ReadyPage: () => (/* binding */ ReadyPage),\n/* harmony export */   RefineSnackbarProvider: () => (/* binding */ RefineSnackbarProvider),\n/* harmony export */   RefineThemes: () => (/* binding */ RefineThemes),\n/* harmony export */   RefreshButton: () => (/* binding */ RefreshButton),\n/* harmony export */   SaveButton: () => (/* binding */ SaveButton),\n/* harmony export */   Show: () => (/* binding */ Show),\n/* harmony export */   ShowButton: () => (/* binding */ ShowButton),\n/* harmony export */   Sider: () => (/* binding */ Sider),\n/* harmony export */   SnackbarProvider: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarProvider),\n/* harmony export */   TagField: () => (/* binding */ TagField),\n/* harmony export */   TextFieldComponent: () => (/* binding */ TextField6),\n/* harmony export */   ThemedHeader: () => (/* binding */ ThemedHeader),\n/* harmony export */   ThemedHeaderV2: () => (/* binding */ ThemedHeaderV2),\n/* harmony export */   ThemedLayout: () => (/* binding */ ThemedLayout),\n/* harmony export */   ThemedLayoutContext: () => (/* binding */ ThemedLayoutContext),\n/* harmony export */   ThemedLayoutContextProvider: () => (/* binding */ ThemedLayoutContextProvider),\n/* harmony export */   ThemedLayoutV2: () => (/* binding */ ThemedLayoutV2),\n/* harmony export */   ThemedSider: () => (/* binding */ ThemedSider),\n/* harmony export */   ThemedSiderV2: () => (/* binding */ ThemedSiderV2),\n/* harmony export */   ThemedTitle: () => (/* binding */ ThemedTitle),\n/* harmony export */   ThemedTitleV2: () => (/* binding */ ThemedTitleV2),\n/* harmony export */   Title: () => (/* binding */ Title),\n/* harmony export */   UrlField: () => (/* binding */ UrlField),\n/* harmony export */   WelcomePage: () => (/* binding */ WelcomePage),\n/* harmony export */   notificationProvider: () => (/* binding */ notificationProvider),\n/* harmony export */   useAutocomplete: () => (/* binding */ useAutocomplete),\n/* harmony export */   useDataGrid: () => (/* binding */ useDataGrid),\n/* harmony export */   useNotificationProvider: () => (/* binding */ useNotificationProvider),\n/* harmony export */   useSiderVisible: () => (/* binding */ useSiderVisible),\n/* harmony export */   useSnackbar: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.useSnackbar),\n/* harmony export */   useThemedLayoutContext: () => (/* binding */ useThemedLayoutContext),\n/* harmony export */   withSnackbar: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.withSnackbar)\n/* harmony export */ });\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! notistack */ \"(ssr)/./node_modules/notistack/dist/notistack.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _mui_material_Box__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mui/material/Box */ \"(ssr)/./node_modules/@mui/material/Box/Box.js\");\n/* harmony import */ var _mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @mui/material/Drawer */ \"(ssr)/./node_modules/@mui/material/Drawer/Drawer.js\");\n/* harmony import */ var _mui_material_List__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @mui/material/List */ \"(ssr)/./node_modules/@mui/material/List/List.js\");\n/* harmony import */ var _mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material/ListItemButton */ \"(ssr)/./node_modules/@mui/material/ListItemButton/ListItemButton.js\");\n/* harmony import */ var _mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material/ListItemIcon */ \"(ssr)/./node_modules/@mui/material/ListItemIcon/ListItemIcon.js\");\n/* harmony import */ var _mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/ListItemText */ \"(ssr)/./node_modules/@mui/material/ListItemText/ListItemText.js\");\n/* harmony import */ var _mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @mui/material/Collapse */ \"(ssr)/./node_modules/@mui/material/Collapse/Collapse.js\");\n/* harmony import */ var _mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mui/material/Tooltip */ \"(ssr)/./node_modules/@mui/material/Tooltip/Tooltip.js\");\n/* harmony import */ var _mui_material_Button__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @mui/material/Button */ \"(ssr)/./node_modules/@mui/material/Button/Button.js\");\n/* harmony import */ var _mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @mui/material/IconButton */ \"(ssr)/./node_modules/@mui/material/IconButton/IconButton.js\");\n/* harmony import */ var _mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/icons-material/esm/ListOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ListOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @mui/icons-material/esm/Logout */ \"(ssr)/./node_modules/@mui/icons-material/esm/Logout.js\");\n/* harmony import */ var _mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/icons-material/esm/ExpandLess */ \"(ssr)/./node_modules/@mui/icons-material/esm/ExpandLess.js\");\n/* harmony import */ var _mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mui/icons-material/esm/ExpandMore */ \"(ssr)/./node_modules/@mui/icons-material/esm/ExpandMore.js\");\n/* harmony import */ var _mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @mui/icons-material/esm/ChevronLeft */ \"(ssr)/./node_modules/@mui/icons-material/esm/ChevronLeft.js\");\n/* harmony import */ var _mui_icons_material_esm_ChevronRight__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @mui/icons-material/esm/ChevronRight */ \"(ssr)/./node_modules/@mui/icons-material/esm/ChevronRight.js\");\n/* harmony import */ var _mui_icons_material_esm_MenuRounded__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @mui/icons-material/esm/MenuRounded */ \"(ssr)/./node_modules/@mui/icons-material/esm/MenuRounded.js\");\n/* harmony import */ var _mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @mui/icons-material/esm/Dashboard */ \"(ssr)/./node_modules/@mui/icons-material/esm/Dashboard.js\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var _mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @mui/material/AppBar */ \"(ssr)/./node_modules/@mui/material/AppBar/AppBar.js\");\n/* harmony import */ var _mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @mui/material/Stack */ \"(ssr)/./node_modules/@mui/material/Stack/Stack.js\");\n/* harmony import */ var _mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @mui/material/Toolbar */ \"(ssr)/./node_modules/@mui/material/Toolbar/Toolbar.js\");\n/* harmony import */ var _mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @mui/material/Typography */ \"(ssr)/./node_modules/@mui/material/Typography/Typography.js\");\n/* harmony import */ var _mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @mui/material/Avatar */ \"(ssr)/./node_modules/@mui/material/Avatar/Avatar.js\");\n/* harmony import */ var _mui_material_Paper__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @mui/material/Paper */ \"(ssr)/./node_modules/@mui/material/Paper/Paper.js\");\n/* harmony import */ var _mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @mui/icons-material/esm/Menu */ \"(ssr)/./node_modules/@mui/icons-material/esm/Menu.js\");\n/* harmony import */ var _mui_material_Link__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @mui/material/Link */ \"(ssr)/./node_modules/@mui/material/Link/Link.js\");\n/* harmony import */ var _mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @mui/material/SvgIcon */ \"(ssr)/./node_modules/@mui/material/SvgIcon/SvgIcon.js\");\n/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! lodash-es/isEqual.js */ \"(ssr)/./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! lodash-es/unionWith.js */ \"(ssr)/./node_modules/lodash-es/unionWith.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/useTheme.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @mui/system */ \"(ssr)/./node_modules/@mui/system/esm/colorManipulator.js\");\n/* harmony import */ var lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! lodash-es/differenceWith.js */ \"(ssr)/./node_modules/lodash-es/differenceWith.js\");\n/* harmony import */ var _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @mui/x-data-grid */ \"(ssr)/./node_modules/@mui/x-data-grid/models/gridFilterItem.js\");\n/* harmony import */ var _refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @refinedev/react-hook-form */ \"(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs\");\n/* harmony import */ var _mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @mui/material/TextField */ \"(ssr)/./node_modules/@mui/material/TextField/TextField.js\");\n/* harmony import */ var _mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @mui/material/FormControlLabel */ \"(ssr)/./node_modules/@mui/material/FormControlLabel/FormControlLabel.js\");\n/* harmony import */ var _mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @mui/material/Checkbox */ \"(ssr)/./node_modules/@mui/material/Checkbox/Checkbox.js\");\n/* harmony import */ var _mui_material_Container__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @mui/material/Container */ \"(ssr)/./node_modules/@mui/material/Container/Container.js\");\n/* harmony import */ var _mui_material_Card__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @mui/material/Card */ \"(ssr)/./node_modules/@mui/material/Card/Card.js\");\n/* harmony import */ var _mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @mui/material/CardContent */ \"(ssr)/./node_modules/@mui/material/CardContent/CardContent.js\");\n/* harmony import */ var _mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @mui/material/Grid */ \"(ssr)/./node_modules/@mui/material/Grid/Grid.js\");\n/* harmony import */ var _mui_icons_material_esm_Info__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @mui/icons-material/esm/Info */ \"(ssr)/./node_modules/@mui/icons-material/esm/Info.js\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! react-hook-form */ \"(ssr)/./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var _mui_material_Divider__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @mui/material/Divider */ \"(ssr)/./node_modules/@mui/material/Divider/Divider.js\");\n/* harmony import */ var _mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @mui/material/CardHeader */ \"(ssr)/./node_modules/@mui/material/CardHeader/CardHeader.js\");\n/* harmony import */ var _mui_material_CardActions__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @mui/material/CardActions */ \"(ssr)/./node_modules/@mui/material/CardActions/CardActions.js\");\n/* harmony import */ var _mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @mui/material/CircularProgress */ \"(ssr)/./node_modules/@mui/material/CircularProgress/CircularProgress.js\");\n/* harmony import */ var _mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @mui/icons-material/esm/ArrowBack */ \"(ssr)/./node_modules/@mui/icons-material/esm/ArrowBack.js\");\n/* harmony import */ var _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @refinedev/ui-types */ \"(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\");\n/* harmony import */ var _mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @mui/icons-material/esm/AddBoxOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/AddBoxOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @mui/icons-material/esm/EditOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/EditOutlined.js\");\n/* harmony import */ var _mui_material_Dialog__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @mui/material/Dialog */ \"(ssr)/./node_modules/@mui/material/Dialog/Dialog.js\");\n/* harmony import */ var _mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! @mui/material/DialogActions */ \"(ssr)/./node_modules/@mui/material/DialogActions/DialogActions.js\");\n/* harmony import */ var _mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @mui/material/DialogTitle */ \"(ssr)/./node_modules/@mui/material/DialogTitle/DialogTitle.js\");\n/* harmony import */ var _mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @mui/lab/LoadingButton */ \"(ssr)/./node_modules/@mui/lab/LoadingButton/LoadingButton.js\");\n/* harmony import */ var _mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @mui/icons-material/esm/DeleteOutline */ \"(ssr)/./node_modules/@mui/icons-material/esm/DeleteOutline.js\");\n/* harmony import */ var _mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! @mui/icons-material/esm/RefreshOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/RefreshOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @mui/icons-material/esm/VisibilityOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/VisibilityOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @mui/icons-material/esm/ImportExportOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ImportExportOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @mui/icons-material/esm/SaveOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/SaveOutlined.js\");\n/* harmony import */ var _mui_material_Chip__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @mui/material/Chip */ \"(ssr)/./node_modules/@mui/material/Chip/Chip.js\");\n/* harmony import */ var _mui_icons_material_esm_CheckOutlined__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! @mui/icons-material/esm/CheckOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/CheckOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_CloseOutlined__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! @mui/icons-material/esm/CloseOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/CloseOutlined.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! dayjs */ \"(ssr)/./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! dayjs/plugin/localizedFormat.js */ \"(ssr)/./node_modules/dayjs/plugin/localizedFormat.js\");\n/* harmony import */ var react_markdown__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/src/react-markdown.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var _mui_material_Breadcrumbs__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! @mui/material/Breadcrumbs */ \"(ssr)/./node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js\");\n/* harmony import */ var _mui_icons_material_esm_HomeOutlined__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! @mui/icons-material/esm/HomeOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/HomeOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_MoreHorizOutlined__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! @mui/icons-material/esm/MoreHorizOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/MoreHorizOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_SyncOutlined__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! @mui/icons-material/esm/SyncOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/SyncOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_TaskAltOutlined__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! @mui/icons-material/esm/TaskAltOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/TaskAltOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_ErrorOutlineOutlined__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! @mui/icons-material/esm/ErrorOutlineOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ErrorOutlineOutlined.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/createTheme.js\");\n/* harmony import */ var _mui_icons_material_esm_UndoOutlined__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! @mui/icons-material/esm/UndoOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/UndoOutlined.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/styled.js\");\n/* __next_internal_client_entry_do_not_use__ AuthPage,AutoSaveIndicator,BooleanField,Breadcrumb,CircularDeterminate,CloneButton,Create,CreateButton,DarkTheme,DateField,DeleteButton,Edit,EditButton,EmailField,ErrorComponent,ExportButton,FileField,HamburgerMenu,Header,ImportButton,Layout,LightTheme,List,ListButton,LoginPage,MarkdownField,NotistackSnackbarContent,NumberField,ReadyPage,RefineSnackbarProvider,RefineThemes,RefreshButton,SaveButton,Show,ShowButton,Sider,SnackbarProvider,TagField,TextFieldComponent,ThemedHeader,ThemedHeaderV2,ThemedLayout,ThemedLayoutContext,ThemedLayoutContextProvider,ThemedLayoutV2,ThemedSider,ThemedSiderV2,ThemedTitle,ThemedTitleV2,Title,UrlField,WelcomePage,notificationProvider,useAutocomplete,useDataGrid,useNotificationProvider,useSiderVisible,useSnackbar,useThemedLayoutContext,withSnackbar auto */ var __defProp = Object.defineProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\n// src/index.tsx\n\n// src/components/layout/index.tsx\n\n\n// src/components/layout/sider/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Sider = /* @__PURE__ */ __name(({ Title: TitleFromProps, render, meta })=>{\n    const [collapsed, setCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [opened, setOpened] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const drawerWidth = /* @__PURE__ */ __name(()=>{\n        if (collapsed) return 64;\n        return 200;\n    }, \"drawerWidth\");\n    const t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { warnWhen, setWarnWhen } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)();\n    const { menuItems, selectedKey, defaultOpenKeys } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta\n    });\n    const isExistAuthentication = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)();\n    const TitleFromContext = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: mutateLogout } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setOpen((previous)=>{\n            const previousKeys = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter((key)=>previous[key]);\n            const uniqueKeys = /* @__PURE__ */ new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(Array.from(uniqueKeys.values()).map((key)=>[\n                    key,\n                    true\n                ]));\n            return uniqueKeysRecord;\n        });\n    }, [\n        defaultOpenKeys\n    ]);\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? Title;\n    const handleClick = /* @__PURE__ */ __name((key)=>{\n        setOpen({\n            ...open,\n            [key]: !open[key]\n        });\n    }, \"handleClick\");\n    const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2)=>{\n        return tree.map((item)=>{\n            const { icon, label, route, name, children, parentName, meta: meta2, options } = item;\n            const isOpen = open[item.key || \"\"] || false;\n            const isSelected = item.key === selectedKey2;\n            const isNested = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);\n            if (children.length > 0) {\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                    key: item.key,\n                    resource: name,\n                    action: \"list\",\n                    params: {\n                        resource: item\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    key: item.key\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    title: label ?? name,\n                    placement: \"right\",\n                    disableHoverListener: !collapsed,\n                    arrow: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    onClick: ()=>{\n                        if (collapsed) {\n                            setCollapsed(false);\n                            if (!isOpen) {\n                                handleClick(item.key || \"\");\n                            }\n                        } else {\n                            handleClick(item.key || \"\");\n                        }\n                    },\n                    sx: {\n                        pl: isNested ? 4 : 2,\n                        justifyContent: \"center\",\n                        \"&.Mui-selected\": {\n                            \"&:hover\": {\n                                backgroundColor: \"transparent\"\n                            },\n                            backgroundColor: \"transparent\"\n                        }\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    sx: {\n                        justifyContent: \"center\",\n                        minWidth: 36,\n                        color: \"secondary.contrastText\"\n                    }\n                }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    primary: label,\n                    primaryTypographyProps: {\n                        noWrap: true,\n                        fontSize: \"14px\",\n                        fontWeight: isSelected ? \"bold\" : \"normal\"\n                    }\n                }), !collapsed && (isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__[\"default\"], null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__[\"default\"], null)))), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    in: open[item.key || \"\"],\n                    timeout: \"auto\",\n                    unmountOnExit: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    component: \"div\",\n                    disablePadding: true\n                }, renderTreeView(children, selectedKey2)))));\n            }\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: item.key,\n                resource: name,\n                action: \"list\",\n                params: {\n                    resource: item\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                title: label ?? name,\n                placement: \"right\",\n                disableHoverListener: !collapsed,\n                arrow: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                component: ActiveLink,\n                to: route,\n                selected: isSelected,\n                onClick: ()=>{\n                    setOpened(false);\n                },\n                sx: {\n                    pl: isNested ? 4 : 2,\n                    py: isNested ? 1.25 : 1,\n                    \"&.Mui-selected\": {\n                        \"&:hover\": {\n                            backgroundColor: \"transparent\"\n                        },\n                        backgroundColor: \"transparent\"\n                    },\n                    justifyContent: \"center\"\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                sx: {\n                    justifyContent: \"center\",\n                    minWidth: 36,\n                    color: \"secondary.contrastText\"\n                }\n            }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                primary: label,\n                primaryTypographyProps: {\n                    noWrap: true,\n                    fontSize: \"14px\",\n                    fontWeight: isSelected ? \"bold\" : \"normal\"\n                }\n            }))));\n        });\n    }, \"renderTreeView\");\n    const dashboard = hasDashboard ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n        resource: \"dashboard\",\n        action: \"list\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: translate(\"dashboard.title\", \"Dashboard\"),\n        placement: \"right\",\n        disableHoverListener: !collapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        component: ActiveLink,\n        to: \"/\",\n        selected: selectedKey === \"/\",\n        onClick: ()=>{\n            setOpened(false);\n        },\n        sx: {\n            pl: 2,\n            py: 1,\n            \"&.Mui-selected\": {\n                \"&:hover\": {\n                    backgroundColor: \"transparent\"\n                },\n                backgroundColor: \"transparent\"\n            },\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: 36,\n            color: \"secondary.contrastText\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: translate(\"dashboard.title\", \"Dashboard\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\",\n            fontWeight: selectedKey === \"/\" ? \"bold\" : \"normal\"\n        }\n    })))) : null;\n    const handleLogout = /* @__PURE__ */ __name(()=>{\n        if (warnWhen) {\n            const confirm = window.confirm(translate(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"));\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    }, \"handleLogout\");\n    const logout = isExistAuthentication && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: t(\"buttons.logout\", \"Logout\"),\n        placement: \"right\",\n        disableHoverListener: !collapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        key: \"logout\",\n        onClick: handleLogout,\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: 36,\n            color: \"secondary.contrastText\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: t(\"buttons.logout\", \"Logout\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })));\n    const items = renderTreeView(menuItems, selectedKey);\n    const renderSider = /* @__PURE__ */ __name(()=>{\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed\n            });\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, dashboard, items, logout);\n    }, \"renderSider\");\n    const drawer = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        disablePadding: true,\n        sx: {\n            mt: 1,\n            color: \"secondary.contrastText\"\n        }\n    }, renderSider());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: {\n                xs: drawerWidth()\n            },\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            transition: \"width 0.3s ease\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"nav\",\n        sx: {\n            position: \"fixed\",\n            zIndex: 1101,\n            width: {\n                sm: drawerWidth()\n            },\n            display: \"flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"temporary\",\n        open: opened,\n        onClose: ()=>setOpened(false),\n        ModalProps: {\n            keepMounted: true\n        },\n        sx: {\n            display: {\n                sm: \"block\",\n                md: \"none\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: 256,\n                bgcolor: \"secondary.main\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: false\n    })), drawer), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"permanent\",\n        PaperProps: {\n            elevation: 1\n        },\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: drawerWidth,\n                bgcolor: \"secondary.main\",\n                overflow: \"hidden\",\n                transition: \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\"\n            }\n        },\n        open: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            flexGrow: 1,\n            overflowX: \"hidden\",\n            overflowY: \"auto\"\n        }\n    }, drawer), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        sx: {\n            background: \"rgba(0,0,0,.5)\",\n            color: \"secondary.contrastText\",\n            textAlign: \"center\",\n            borderRadius: 0,\n            borderTop: \"1px solid #ffffff1a\"\n        },\n        fullWidth: true,\n        size: \"large\",\n        onClick: ()=>setCollapsed((prev)=>!prev)\n    }, collapsed ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronRight__WEBPACK_IMPORTED_MODULE_17__[\"default\"], null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: {\n                xs: \"block\",\n                md: \"none\"\n            },\n            position: \"fixed\",\n            top: \"64px\",\n            left: \"0px\",\n            borderRadius: \"0 6px 6px 0\",\n            bgcolor: \"secondary.main\",\n            zIndex: 1199,\n            width: \"36px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        sx: {\n            color: \"#fff\",\n            width: \"36px\"\n        },\n        onClick: ()=>setOpened((prev)=>!prev)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_MenuRounded__WEBPACK_IMPORTED_MODULE_20__[\"default\"], null)))));\n}, \"Sider\");\n// src/components/layout/header/index.tsx\n\n\n\n\n\n\n\nvar Header = /* @__PURE__ */ __name(()=>{\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { data: user } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const shouldRenderHeader = user && (user.name || user.avatar);\n    return shouldRenderHeader ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        color: \"default\",\n        position: \"sticky\",\n        elevation: 1\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        gap: \"16px\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, user == null ? void 0 : user.name), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n        src: user == null ? void 0 : user.avatar,\n        alt: user == null ? void 0 : user.name\n    }))))) : null;\n}, \"Header\");\n// src/components/layout/index.tsx\nvar Layout = /* @__PURE__ */ __name(({ Sider: Sider2, Header: Header2, Title: Title2, Footer, OffLayoutArea, children })=>{\n    const SiderToRender = Sider2 ?? Sider;\n    const HeaderToRender = Header2 ?? Header;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SiderToRender, {\n        Title: Title2\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flex: 1,\n            minHeight: \"100vh\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HeaderToRender, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"main\",\n        sx: {\n            p: {\n                xs: 1,\n                md: 2,\n                lg: 3\n            },\n            flexGrow: 1,\n            bgcolor: (theme)=>theme.palette.background.default\n        }\n    }, children), Footer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Footer, null)), OffLayoutArea && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(OffLayoutArea, null));\n}, \"Layout\");\n// src/components/layout/title/index.tsx\n\n\n\nvar Title = /* @__PURE__ */ __name(({ collapsed })=>{\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        fullWidth: true,\n        variant: \"text\",\n        disableRipple: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ActiveLink, {\n        to: \"/\"\n    }, collapsed ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine-mini.svg\",\n        alt: \"Refine\",\n        width: \"28px\",\n        style: {\n            maxHeight: \"38px\"\n        }\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine\",\n        width: \"140px\"\n    })));\n}, \"Title\");\n// src/components/themedLayout/index.tsx\n\n\n// src/components/themedLayout/sider/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ThemedSider = /* @__PURE__ */ __name(({ Title: TitleFromProps, render, meta, isSiderOpen, onToggleSiderClick })=>{\n    const [opened, setOpened] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const drawerWidth = /* @__PURE__ */ __name(()=>{\n        if (isSiderOpen) return 240;\n        return 56;\n    }, \"drawerWidth\");\n    const t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { menuItems, selectedKey, defaultOpenKeys } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta\n    });\n    const isExistAuthentication = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)();\n    const TitleFromContext = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { warnWhen, setWarnWhen } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)();\n    const { mutate: mutateLogout } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setOpen((previous)=>{\n            const previousKeys = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter((key)=>previous[key]);\n            const uniqueKeys = /* @__PURE__ */ new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(Array.from(uniqueKeys.values()).map((key)=>[\n                    key,\n                    true\n                ]));\n            return uniqueKeysRecord;\n        });\n    }, [\n        defaultOpenKeys\n    ]);\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitle;\n    const handleClick = /* @__PURE__ */ __name((key)=>{\n        setOpen({\n            ...open,\n            [key]: !open[key]\n        });\n    }, \"handleClick\");\n    const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2)=>{\n        return tree.map((item)=>{\n            const { icon, label, route, name, children, parentName, meta: meta2, options } = item;\n            const isOpen = open[item.key || \"\"] || false;\n            const isSelected = item.key === selectedKey2;\n            const isNested = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);\n            if (children.length > 0) {\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                    key: item.key,\n                    resource: name,\n                    action: \"list\",\n                    params: {\n                        resource: item\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    key: item.key\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    title: label ?? name,\n                    placement: \"right\",\n                    disableHoverListener: isSiderOpen,\n                    arrow: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    onClick: ()=>{\n                        if (!isSiderOpen) {\n                            onToggleSiderClick == null ? void 0 : onToggleSiderClick(true);\n                            if (!isOpen) {\n                                handleClick(item.key || \"\");\n                            }\n                        } else {\n                            handleClick(item.key || \"\");\n                        }\n                    },\n                    sx: {\n                        pl: isNested ? 4 : 2,\n                        justifyContent: \"center\",\n                        marginTop: \"8px\"\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    sx: {\n                        justifyContent: \"center\",\n                        minWidth: \"24px\",\n                        transition: \"margin-right 0.3s\",\n                        marginRight: isSiderOpen ? \"12px\" : \"0px\",\n                        color: \"currentColor\"\n                    }\n                }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    primary: label,\n                    primaryTypographyProps: {\n                        noWrap: true,\n                        fontSize: \"14px\"\n                    }\n                }), isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }))), isSiderOpen && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    in: open[item.key || \"\"],\n                    timeout: \"auto\",\n                    unmountOnExit: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    component: \"div\",\n                    disablePadding: true\n                }, renderTreeView(children, selectedKey2)))));\n            }\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: item.key,\n                resource: name,\n                action: \"list\",\n                params: {\n                    resource: item\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                title: label ?? name,\n                placement: \"right\",\n                disableHoverListener: isSiderOpen,\n                arrow: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                component: ActiveLink,\n                to: route,\n                selected: isSelected,\n                onClick: ()=>{\n                    setOpened(false);\n                },\n                sx: {\n                    pl: isNested ? 4 : 2,\n                    py: isNested ? 1.25 : 1,\n                    justifyContent: \"center\",\n                    color: isSelected ? \"primary.main\" : \"text.primary\"\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                sx: {\n                    justifyContent: \"center\",\n                    transition: \"margin-right 0.3s\",\n                    marginRight: isSiderOpen ? \"12px\" : \"0px\",\n                    minWidth: \"24px\",\n                    color: \"currentColor\"\n                }\n            }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                primary: label,\n                primaryTypographyProps: {\n                    noWrap: true,\n                    fontSize: \"14px\"\n                }\n            }))));\n        });\n    }, \"renderTreeView\");\n    const dashboard = hasDashboard ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n        resource: \"dashboard\",\n        action: \"list\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: translate(\"dashboard.title\", \"Dashboard\"),\n        placement: \"right\",\n        disableHoverListener: isSiderOpen,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        component: ActiveLink,\n        to: \"/\",\n        selected: selectedKey === \"/\",\n        onClick: ()=>{\n            setOpened(false);\n        },\n        sx: {\n            pl: 2,\n            py: 1,\n            justifyContent: \"center\",\n            color: selectedKey === \"/\" ? \"primary.main\" : \"text.primary\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: isSiderOpen ? \"12px\" : \"0px\",\n            color: \"currentColor\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: translate(\"dashboard.title\", \"Dashboard\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })))) : null;\n    const handleLogout = /* @__PURE__ */ __name(()=>{\n        if (warnWhen) {\n            const confirm = window.confirm(t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"));\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    }, \"handleLogout\");\n    const logout = isExistAuthentication && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: t(\"buttons.logout\", \"Logout\"),\n        placement: \"right\",\n        disableHoverListener: isSiderOpen,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        key: \"logout\",\n        onClick: ()=>handleLogout(),\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: isSiderOpen ? \"12px\" : \"0px\",\n            marginLeft: \"2px\",\n            color: \"currentColor\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: t(\"buttons.logout\", \"Logout\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })));\n    const items = renderTreeView(menuItems, selectedKey);\n    const renderSider = /* @__PURE__ */ __name(()=>{\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed: !isSiderOpen\n            });\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, dashboard, items, logout);\n    }, \"renderSider\");\n    const drawer = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        disablePadding: true,\n        sx: {\n            flexGrow: 1,\n            paddingTop: \"16px\"\n        }\n    }, renderSider());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: {\n                xs: drawerWidth()\n            },\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            transition: \"width 0.3s ease\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"nav\",\n        sx: {\n            position: \"fixed\",\n            zIndex: 1101,\n            width: {\n                sm: drawerWidth()\n            },\n            display: \"flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"temporary\",\n        elevation: 2,\n        open: opened,\n        onClose: ()=>setOpened(false),\n        ModalProps: {\n            keepMounted: true\n        },\n        sx: {\n            display: {\n                sm: \"block\",\n                md: \"none\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: drawerWidth()\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            paddingLeft: \"16px\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: false\n    })), drawer)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"permanent\",\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: drawerWidth,\n                overflow: \"hidden\",\n                transition: \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\"\n            }\n        },\n        open: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Paper__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        elevation: 0,\n        sx: {\n            fontSize: \"14px\",\n            width: \"100%\",\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: !isSiderOpen ? \"center\" : \"space-between\",\n            paddingLeft: !isSiderOpen ? 0 : \"16px\",\n            paddingRight: !isSiderOpen ? 0 : \"8px\",\n            variant: \"outlined\",\n            borderRadius: 0,\n            borderBottom: (theme)=>`1px solid ${theme.palette.action.focus}`\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: !isSiderOpen\n    }), isSiderOpen && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        size: \"small\",\n        onClick: ()=>onToggleSiderClick == null ? void 0 : onToggleSiderClick(false)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            flexGrow: 1,\n            overflowX: \"hidden\",\n            overflowY: \"auto\"\n        }\n    }, drawer)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        sx: (theme)=>{\n            const { palette } = theme;\n            const { mode, getContrastText, primary, background } = palette;\n            return {\n                color: mode === \"light\" ? getContrastText(primary.main) : getContrastText(background.paper),\n                display: {\n                    xs: \"flex\",\n                    md: \"none\"\n                },\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                position: \"fixed\",\n                top: \"12px\",\n                left: \"16px\",\n                zIndex: 1199,\n                height: \"36px\",\n                width: \"36px\"\n            };\n        },\n        onClick: ()=>setOpened((prev)=>!prev)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_MenuRounded__WEBPACK_IMPORTED_MODULE_20__[\"default\"], null))));\n}, \"ThemedSider\");\n// src/components/themedLayout/header/index.tsx\n\n\n\n\n\n\n\n\n\nvar ThemedHeader = /* @__PURE__ */ __name(({ isSiderOpen, onToggleSiderClick, toggleSiderIcon: toggleSiderIconFromProps })=>{\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { data: user } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const hasSidebarToggle = Boolean(onToggleSiderClick);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        position: \"sticky\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__[\"default\"], null, hasSidebarToggle && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        color: \"inherit\",\n        \"aria-label\": \"open drawer\",\n        onClick: ()=>onToggleSiderClick == null ? void 0 : onToggleSiderClick(),\n        edge: \"start\",\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"none\",\n                md: \"flex\"\n            },\n            ...isSiderOpen && {\n                display: \"none\"\n            }\n        }\n    }, (toggleSiderIconFromProps == null ? void 0 : toggleSiderIconFromProps(Boolean(isSiderOpen))) ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_27__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        gap: \"16px\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            }\n        },\n        variant: \"subtitle2\"\n    }, user == null ? void 0 : user.name), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n        src: user == null ? void 0 : user.avatar,\n        alt: user == null ? void 0 : user.name\n    })))));\n}, \"ThemedHeader\");\n// src/components/themedLayout/index.tsx\nvar ThemedLayout = /* @__PURE__ */ __name(({ Sider: Sider2, Header: Header2, Title: Title2, Footer, OffLayoutArea, children })=>{\n    const [isSiderOpen, setIsSiderOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const SiderToRender = Sider2 ?? ThemedSider;\n    const HeaderToRender = Header2 ?? ThemedHeader;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SiderToRender, {\n        Title: Title2,\n        isSiderOpen,\n        onToggleSiderClick: (isOpen)=>setIsSiderOpen(Boolean(isOpen))\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flex: 1,\n            minHeight: \"100vh\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HeaderToRender, {\n        isSiderOpen,\n        onToggleSiderClick: ()=>setIsSiderOpen((prev)=>!prev)\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"main\",\n        sx: {\n            p: {\n                xs: 1,\n                md: 2,\n                lg: 3\n            },\n            flexGrow: 1,\n            bgcolor: (theme)=>theme.palette.background.default\n        }\n    }, children), Footer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Footer, null)), OffLayoutArea && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(OffLayoutArea, null));\n}, \"ThemedLayout\");\n// src/components/themedLayout/title/index.tsx\n\n\n\n\n\nvar defaultText = \"Refine Project\";\nvar defaultIcon = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"svg\", {\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n}, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z\",\n    fill: \"currentColor\"\n}), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"path\", {\n    d: \"M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\n    fill: \"currentColor\"\n}));\nvar ThemedTitle = /* @__PURE__ */ __name(({ collapsed, wrapperStyles, icon = defaultIcon, text = defaultText })=>{\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        to: \"/\",\n        component: ActiveLink,\n        underline: \"none\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"12px\",\n            ...wrapperStyles\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        height: \"24px\",\n        width: \"24px\",\n        color: \"primary\"\n    }, icon), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h6\",\n        fontWeight: 700,\n        color: \"text.primary\",\n        fontSize: \"inherit\",\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }, text));\n}, \"ThemedTitle\");\n// src/components/themedLayoutV2/index.tsx\n\n\n// src/contexts/themedLayoutContext/index.tsx\n\nvar ThemedLayoutContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    siderCollapsed: false,\n    mobileSiderOpen: false,\n    setSiderCollapsed: ()=>void 0,\n    setMobileSiderOpen: ()=>void 0\n});\nvar ThemedLayoutContextProvider = /* @__PURE__ */ __name(({ children, initialSiderCollapsed })=>{\n    const [siderCollapsed, setSiderCollapsed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialSiderCollapsed ?? false);\n    const [mobileSiderOpen, setMobileSiderOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedLayoutContext.Provider, {\n        value: {\n            siderCollapsed,\n            mobileSiderOpen,\n            setSiderCollapsed,\n            setMobileSiderOpen\n        }\n    }, children);\n}, \"ThemedLayoutContextProvider\");\n// src/components/themedLayoutV2/sider/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/hooks/useAutocomplete/index.ts\n\n\n\nvar useAutocomplete = /* @__PURE__ */ __name((props)=>{\n    var _a, _b, _c, _d;\n    const { query, defaultValueQuery, onSearch, overtime } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSelect)(props);\n    return {\n        autocompleteProps: {\n            options: props.selectedOptionsOrder === \"selected-first\" ? (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"])(((_a = defaultValueQuery.data) == null ? void 0 : _a.data) || [], ((_b = query.data) == null ? void 0 : _b.data) || [], lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]) : (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"])(((_c = query.data) == null ? void 0 : _c.data) || [], ((_d = defaultValueQuery.data) == null ? void 0 : _d.data) || [], lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]),\n            loading: query.isFetching || defaultValueQuery.isFetching,\n            onInputChange: (event, value)=>{\n                if ((event == null ? void 0 : event.type) === \"change\") {\n                    onSearch(value);\n                } else if ((event == null ? void 0 : event.type) === \"click\") {\n                    onSearch(\"\");\n                }\n            },\n            filterOptions: (x)=>x\n        },\n        onSearch,\n        query,\n        defaultValueQuery,\n        queryResult: query,\n        defaultValueQueryResult: defaultValueQuery,\n        overtime\n    };\n}, \"useAutocomplete\");\n// src/hooks/useDataGrid/index.ts\n\n\n\n\n\n// src/definitions/dataGrid/index.ts\n\nvar transformSortModelToCrudSorting = /* @__PURE__ */ __name((sortModel)=>{\n    const sorter = sortModel.map(({ field, sort })=>({\n            field,\n            order: sort || \"asc\"\n        }));\n    return sorter;\n}, \"transformSortModelToCrudSorting\");\nvar transformCrudSortingToSortModel = /* @__PURE__ */ __name((crudSorting)=>{\n    const sortModel = crudSorting.map(({ field, order })=>({\n            field,\n            sort: order\n        }));\n    return sortModel;\n}, \"transformCrudSortingToSortModel\");\nvar transformMuiOperatorToCrudOperator = /* @__PURE__ */ __name((operatorValue)=>{\n    if (!operatorValue) {\n        return \"eq\";\n    }\n    switch(operatorValue){\n        case \"equals\":\n        case \"is\":\n        case \"=\":\n            return \"eq\";\n        case \"!=\":\n        case \"not\":\n            return \"ne\";\n        case \"contains\":\n            return \"contains\";\n        case \"isAnyOf\":\n            return \"in\";\n        case \">\":\n        case \"after\":\n            return \"gt\";\n        case \">=\":\n        case \"onOrAfter\":\n            return \"gte\";\n        case \"<\":\n        case \"before\":\n            return \"lt\";\n        case \"<=\":\n        case \"onOrBefore\":\n            return \"lte\";\n        case \"startsWith\":\n            return \"startswith\";\n        case \"endsWith\":\n            return \"endswith\";\n        case \"isEmpty\":\n            return \"null\";\n        case \"isNotEmpty\":\n            return \"nnull\";\n        default:\n            return operatorValue;\n    }\n}, \"transformMuiOperatorToCrudOperator\");\nvar transformFilterModelToCrudFilters = /* @__PURE__ */ __name(({ items, logicOperator })=>{\n    const filters = items.map(({ field, value, operator })=>{\n        const filter = {\n            field,\n            value: [\n                \"isEmpty\",\n                \"isNotEmpty\"\n            ].includes(operator) ? true : value ?? \"\",\n            operator: transformMuiOperatorToCrudOperator(operator)\n        };\n        return filter;\n    });\n    if (logicOperator === _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__.GridLogicOperator.Or) {\n        return [\n            {\n                operator: \"or\",\n                value: filters\n            }\n        ];\n    }\n    return filters;\n}, \"transformFilterModelToCrudFilters\");\nvar transformCrudOperatorToMuiOperator = /* @__PURE__ */ __name((operator, columnType)=>{\n    switch(columnType){\n        case \"number\":\n            switch(operator){\n                case \"eq\":\n                    return \"=\";\n                case \"ne\":\n                    return \"!=\";\n                case \"gt\":\n                    return \">\";\n                case \"gte\":\n                    return \">=\";\n                case \"lt\":\n                    return \"<\";\n                case \"lte\":\n                    return \"<=\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                case \"in\":\n                    return \"isAnyOf\";\n                default:\n                    return operator;\n            }\n        case \"singleSelect\":\n        case \"boolean\":\n            switch(operator){\n                case \"eq\":\n                    return \"is\";\n                default:\n                    return operator;\n            }\n        case void 0:\n        case \"string\":\n            switch(operator){\n                case \"eq\":\n                    return \"equals\";\n                case \"contains\":\n                    return \"contains\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                case \"startswith\":\n                    return \"startsWith\";\n                case \"endswith\":\n                    return \"endsWith\";\n                case \"in\":\n                    return \"isAnyOf\";\n                default:\n                    return operator;\n            }\n        case \"date\":\n        case \"dateTime\":\n            switch(operator){\n                case \"eq\":\n                    return \"is\";\n                case \"ne\":\n                    return \"not\";\n                case \"gt\":\n                    return \"after\";\n                case \"gte\":\n                    return \"onOrAfter\";\n                case \"lt\":\n                    return \"before\";\n                case \"lte\":\n                    return \"onOrBefore\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                default:\n                    return operator;\n            }\n        default:\n            return operator;\n    }\n}, \"transformCrudOperatorToMuiOperator\");\nvar transformCrudFiltersToFilterModel = /* @__PURE__ */ __name((crudFilters, columnsType)=>{\n    var _a;\n    const gridFilterItems = [];\n    const isExistOrFilter = crudFilters.some((filter)=>filter.operator === \"or\");\n    if (columnsType) {\n        if (isExistOrFilter) {\n            const orLogicalFilters = (_a = crudFilters.find((filter)=>filter.operator === \"or\")) == null ? void 0 : _a.value;\n            orLogicalFilters.map(({ field, value, operator })=>{\n                const columnType = columnsType[field];\n                gridFilterItems.push({\n                    field,\n                    operator: transformCrudOperatorToMuiOperator(operator, columnType),\n                    value: value === \"\" ? void 0 : value,\n                    id: field + operator\n                });\n            });\n        } else {\n            crudFilters.map(({ field, value, operator })=>{\n                const columnType = columnsType[field];\n                gridFilterItems.push({\n                    field,\n                    operator: transformCrudOperatorToMuiOperator(operator, columnType),\n                    value: value === \"\" ? void 0 : value,\n                    id: field + operator\n                });\n            });\n        }\n    }\n    return {\n        items: gridFilterItems,\n        // If there is \"or\" filter, default link operator is \"or\"\n        logicOperator: isExistOrFilter ? _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__.GridLogicOperator.Or : _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_32__.GridLogicOperator.And\n    };\n}, \"transformCrudFiltersToFilterModel\");\n// src/hooks/useDataGrid/index.ts\nfunction useDataGrid({ onSearch: onSearchProp, initialCurrent, initialPageSize = 25, pagination, hasPagination = true, initialSorter, permanentSorter, defaultSetFilterBehavior = \"replace\", initialFilter, permanentFilter, filters: filtersFromProp, sorters: sortersFromProp, syncWithLocation: syncWithLocationProp, resource: resourceFromProp, successNotification, errorNotification, queryOptions, liveMode: liveModeFromProp, onLiveEvent, liveParams, meta, metaData, dataProviderName, overtimeOptions, editable = false, updateMutationOptions } = {}) {\n    const theme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_33__[\"default\"])();\n    const liveMode = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLiveMode)(liveModeFromProp);\n    const [columnsTypes, setColumnsType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const { identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResourceParams)({\n        resource: resourceFromProp\n    });\n    const { tableQueryResult, tableQuery, current, setCurrent, pageSize, setPageSize, filters, setFilters, sorters, setSorters, sorter, setSorter, pageCount, createLinkForSyncWithLocation, overtime } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTable)({\n        permanentSorter,\n        permanentFilter,\n        initialCurrent,\n        initialPageSize,\n        pagination,\n        hasPagination,\n        initialSorter,\n        initialFilter,\n        filters: filtersFromProp,\n        sorters: sortersFromProp,\n        syncWithLocation: syncWithLocationProp,\n        defaultSetFilterBehavior,\n        resource: resourceFromProp,\n        successNotification,\n        errorNotification,\n        queryOptions,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta, metaData),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta, metaData),\n        dataProviderName,\n        overtimeOptions\n    });\n    const [muiCrudFilters, setMuiCrudFilters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(filters);\n    const { data, isFetched, isLoading } = tableQueryResult;\n    const isServerSideFilteringEnabled = ((filtersFromProp == null ? void 0 : filtersFromProp.mode) || \"server\") === \"server\";\n    const isServerSideSortingEnabled = ((sortersFromProp == null ? void 0 : sortersFromProp.mode) || \"server\") === \"server\";\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled = ((pagination == null ? void 0 : pagination.mode) ?? hasPaginationString) !== \"off\";\n    const preferredPermanentSorters = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(sortersFromProp == null ? void 0 : sortersFromProp.permanent, permanentSorter) ?? [];\n    const preferredPermanentFilters = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(filtersFromProp == null ? void 0 : filtersFromProp.permanent, permanentFilter) ?? [];\n    const handlePageChange = /* @__PURE__ */ __name((page)=>{\n        if (isPaginationEnabled) {\n            setCurrent(page + 1);\n        }\n    }, \"handlePageChange\");\n    const handlePageSizeChange = /* @__PURE__ */ __name((pageSize2)=>{\n        if (isPaginationEnabled) {\n            setPageSize(pageSize2);\n        }\n    }, \"handlePageSizeChange\");\n    const handleSortModelChange = /* @__PURE__ */ __name((sortModel)=>{\n        const crudSorting = transformSortModelToCrudSorting(sortModel);\n        setSorters(crudSorting);\n    }, \"handleSortModelChange\");\n    const handleFilterModelChange = /* @__PURE__ */ __name((filterModel)=>{\n        const crudFilters = transformFilterModelToCrudFilters(filterModel);\n        setMuiCrudFilters(crudFilters);\n        setFilters(crudFilters.filter((f)=>f.value !== \"\"));\n        if (isPaginationEnabled) {\n            setCurrent(1);\n        }\n    }, \"handleFilterModelChange\");\n    const search = /* @__PURE__ */ __name(async (value)=>{\n        if (onSearchProp) {\n            const searchFilters = await onSearchProp(value);\n            setMuiCrudFilters(searchFilters);\n            setFilters(searchFilters.filter((f)=>f.value !== \"\"));\n            if (isPaginationEnabled) {\n                setCurrent(1);\n            }\n        }\n    }, \"search\");\n    const dataGridPaginationValues = /* @__PURE__ */ __name(()=>{\n        if (isPaginationEnabled) {\n            return {\n                paginationMode: \"server\",\n                paginationModel: {\n                    page: current - 1,\n                    pageSize\n                },\n                onPaginationModelChange: (model)=>{\n                    handlePageChange(model.page);\n                    handlePageSizeChange(model.pageSize);\n                }\n            };\n        }\n        return {\n            paginationMode: \"client\"\n        };\n    }, \"dataGridPaginationValues\");\n    const { mutate } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUpdate)({\n        mutationOptions: updateMutationOptions\n    });\n    const processRowUpdate = /* @__PURE__ */ __name(async (newRow, oldRow)=>{\n        if (!editable) {\n            return Promise.resolve(oldRow);\n        }\n        if (!identifier) {\n            return Promise.reject(new Error(\"Resource is not defined\"));\n        }\n        return new Promise((resolve, reject)=>{\n            mutate({\n                resource: identifier,\n                id: newRow.id,\n                values: newRow\n            }, {\n                onError: (error)=>{\n                    reject(error);\n                },\n                onSuccess: (data2)=>{\n                    resolve(newRow);\n                }\n            });\n        });\n    }, \"processRowUpdate\");\n    return {\n        tableQueryResult,\n        tableQuery,\n        dataGridProps: {\n            disableRowSelectionOnClick: true,\n            rows: (data == null ? void 0 : data.data) || [],\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            rowCount: (data == null ? void 0 : data.total) || 0,\n            ...dataGridPaginationValues(),\n            sortingMode: isServerSideSortingEnabled ? \"server\" : \"client\",\n            sortModel: transformCrudSortingToSortModel((0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"])(sorters, preferredPermanentSorters, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"])),\n            onSortModelChange: handleSortModelChange,\n            filterMode: isServerSideFilteringEnabled ? \"server\" : \"client\",\n            filterModel: transformCrudFiltersToFilterModel((0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"])(muiCrudFilters, preferredPermanentFilters, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"]), columnsTypes),\n            onFilterModelChange: handleFilterModelChange,\n            onStateChange: (state)=>{\n                const newColumnsTypes = Object.fromEntries(Object.entries(state.columns.lookup).map(([key, value])=>{\n                    return [\n                        key,\n                        value.type\n                    ];\n                }));\n                const isStateChanged = !(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"])(newColumnsTypes, columnsTypes);\n                if (isStateChanged) {\n                    setColumnsType(newColumnsTypes);\n                }\n            },\n            sx: {\n                border: \"none\",\n                \"& .MuiDataGrid-columnHeaders\": {\n                    background: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.darken)(theme.palette.background.paper, 0.05),\n                    borderBottom: `1px solid ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.darken)(theme.palette.background.paper, 0.1)}`\n                },\n                \"& .MuiDataGrid-cell\": {\n                    borderBottom: `1px solid ${(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.darken)(theme.palette.background.paper, 0.05)}`\n                }\n            },\n            processRowUpdate: editable ? processRowUpdate : void 0\n        },\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount,\n        sorters,\n        setSorters,\n        sorter,\n        setSorter,\n        filters,\n        setFilters,\n        search,\n        createLinkForSyncWithLocation,\n        overtime\n    };\n}\n__name(useDataGrid, \"useDataGrid\");\n// src/hooks/useSiderVisible/index.ts\n\nvar useSiderVisible = /* @__PURE__ */ __name(()=>{\n    const { mobileSiderOpen, siderCollapsed, setMobileSiderOpen, setSiderCollapsed } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemedLayoutContext);\n    return {\n        siderVisible: mobileSiderOpen,\n        setSiderVisible: setMobileSiderOpen,\n        drawerSiderVisible: !siderCollapsed,\n        setDrawerSiderVisible: (visible)=>setSiderCollapsed(!visible)\n    };\n}, \"useSiderVisible\");\n// src/hooks/useThemedLayoutContext/index.ts\n\nvar useThemedLayoutContext = /* @__PURE__ */ __name(()=>{\n    const { mobileSiderOpen, siderCollapsed, setMobileSiderOpen, setSiderCollapsed } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemedLayoutContext);\n    return {\n        mobileSiderOpen,\n        siderCollapsed,\n        setMobileSiderOpen,\n        setSiderCollapsed\n    };\n}, \"useThemedLayoutContext\");\n// src/components/themedLayoutV2/sider/index.tsx\nvar ThemedSiderV2 = /* @__PURE__ */ __name(({ Title: TitleFromProps, render, meta, activeItemDisabled = false })=>{\n    const { siderCollapsed, setSiderCollapsed, mobileSiderOpen, setMobileSiderOpen } = useThemedLayoutContext();\n    const drawerWidth = /* @__PURE__ */ __name(()=>{\n        if (siderCollapsed) return 56;\n        return 240;\n    }, \"drawerWidth\");\n    const t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { menuItems, selectedKey, defaultOpenKeys } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta\n    });\n    const isExistAuthentication = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)();\n    const TitleFromContext = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { warnWhen, setWarnWhen } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)();\n    const { mutate: mutateLogout } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setOpen((previous)=>{\n            const previousKeys = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter((key)=>previous[key]);\n            const uniqueKeys = /* @__PURE__ */ new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(Array.from(uniqueKeys.values()).map((key)=>[\n                    key,\n                    true\n                ]));\n            return uniqueKeysRecord;\n        });\n    }, [\n        defaultOpenKeys\n    ]);\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitleV2;\n    const handleClick = /* @__PURE__ */ __name((key)=>{\n        setOpen({\n            ...open,\n            [key]: !open[key]\n        });\n    }, \"handleClick\");\n    const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2)=>{\n        return tree.map((item)=>{\n            const { icon, label, route, name, children, parentName, meta: meta2, options } = item;\n            const isOpen = open[item.key || \"\"] || false;\n            const isSelected = item.key === selectedKey2;\n            const isNested = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);\n            if (children.length > 0) {\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                    key: item.key,\n                    resource: name,\n                    action: \"list\",\n                    params: {\n                        resource: item\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    key: item.key\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                    title: label ?? name,\n                    placement: \"right\",\n                    disableHoverListener: !siderCollapsed,\n                    arrow: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                    onClick: ()=>{\n                        if (siderCollapsed) {\n                            setSiderCollapsed(false);\n                            if (!isOpen) {\n                                handleClick(item.key || \"\");\n                            }\n                        } else {\n                            handleClick(item.key || \"\");\n                        }\n                    },\n                    sx: {\n                        pl: isNested ? 4 : 2,\n                        justifyContent: \"center\"\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    sx: {\n                        justifyContent: \"center\",\n                        minWidth: \"24px\",\n                        transition: \"margin-right 0.3s\",\n                        marginRight: siderCollapsed ? \"0px\" : \"12px\",\n                        color: \"currentColor\"\n                    }\n                }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    primary: label,\n                    primaryTypographyProps: {\n                        noWrap: true,\n                        fontSize: \"14px\"\n                    }\n                }), isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }))), !siderCollapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n                    in: open[item.key || \"\"],\n                    timeout: \"auto\",\n                    unmountOnExit: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    component: \"div\",\n                    disablePadding: true\n                }, renderTreeView(children, selectedKey2)))));\n            }\n            const linkStyle = activeItemDisabled && isSelected ? {\n                pointerEvents: \"none\"\n            } : {};\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: item.key,\n                resource: name,\n                action: \"list\",\n                params: {\n                    resource: item\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                title: label ?? name,\n                placement: \"right\",\n                disableHoverListener: !siderCollapsed,\n                arrow: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                component: ActiveLink,\n                to: route,\n                selected: isSelected,\n                style: linkStyle,\n                onClick: ()=>{\n                    setMobileSiderOpen(false);\n                },\n                sx: {\n                    pl: isNested ? 4 : 2,\n                    py: isNested ? 1.25 : 1,\n                    justifyContent: \"center\",\n                    color: isSelected ? \"primary.main\" : \"text.primary\"\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                sx: {\n                    justifyContent: \"center\",\n                    transition: \"margin-right 0.3s\",\n                    marginRight: siderCollapsed ? \"0px\" : \"12px\",\n                    minWidth: \"24px\",\n                    color: \"currentColor\"\n                }\n            }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                primary: label,\n                primaryTypographyProps: {\n                    noWrap: true,\n                    fontSize: \"14px\"\n                }\n            }))));\n        });\n    }, \"renderTreeView\");\n    const dashboard = hasDashboard ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n        resource: \"dashboard\",\n        action: \"list\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: translate(\"dashboard.title\", \"Dashboard\"),\n        placement: \"right\",\n        disableHoverListener: !siderCollapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        component: ActiveLink,\n        to: \"/\",\n        selected: selectedKey === \"/\",\n        onClick: ()=>{\n            setMobileSiderOpen(false);\n        },\n        sx: {\n            pl: 2,\n            py: 1,\n            justifyContent: \"center\",\n            color: selectedKey === \"/\" ? \"primary.main\" : \"text.primary\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: siderCollapsed ? \"0px\" : \"12px\",\n            color: \"currentColor\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: translate(\"dashboard.title\", \"Dashboard\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })))) : null;\n    const handleLogout = /* @__PURE__ */ __name(()=>{\n        if (warnWhen) {\n            const confirm = window.confirm(t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"));\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    }, \"handleLogout\");\n    const logout = isExistAuthentication && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: t(\"buttons.logout\", \"Logout\"),\n        placement: \"right\",\n        disableHoverListener: !siderCollapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        key: \"logout\",\n        onClick: ()=>handleLogout(),\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: siderCollapsed ? \"0px\" : \"12px\",\n            color: \"currentColor\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        primary: t(\"buttons.logout\", \"Logout\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })));\n    const items = renderTreeView(menuItems, selectedKey);\n    const renderSider = /* @__PURE__ */ __name(()=>{\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed: siderCollapsed\n            });\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, dashboard, items, logout);\n    }, \"renderSider\");\n    const drawer = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        disablePadding: true,\n        sx: {\n            flexGrow: 1,\n            paddingTop: \"16px\"\n        }\n    }, renderSider());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: {\n                xs: drawerWidth()\n            },\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            transition: \"width 0.3s ease\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"nav\",\n        sx: {\n            position: \"fixed\",\n            zIndex: 1101,\n            width: {\n                sm: drawerWidth()\n            },\n            display: \"flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"temporary\",\n        elevation: 2,\n        open: mobileSiderOpen,\n        onClose: ()=>setMobileSiderOpen(false),\n        ModalProps: {\n            keepMounted: true\n        },\n        sx: {\n            display: {\n                sm: \"block\",\n                md: \"none\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: drawerWidth()\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            paddingLeft: \"16px\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: false\n    })), drawer)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        variant: \"permanent\",\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: drawerWidth(),\n                overflow: \"hidden\",\n                transition: \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\"\n            }\n        },\n        open: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Paper__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        elevation: 0,\n        sx: {\n            fontSize: \"14px\",\n            width: \"100%\",\n            height: 64,\n            display: \"flex\",\n            flexShrink: 0,\n            alignItems: \"center\",\n            justifyContent: siderCollapsed ? \"center\" : \"space-between\",\n            paddingLeft: siderCollapsed ? 0 : \"16px\",\n            paddingRight: siderCollapsed ? 0 : \"8px\",\n            variant: \"outlined\",\n            borderRadius: 0,\n            borderBottom: (theme)=>`1px solid ${theme.palette.action.focus}`\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: siderCollapsed\n    }), !siderCollapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        size: \"small\",\n        onClick: ()=>setSiderCollapsed(true)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            flexGrow: 1,\n            overflowX: \"hidden\",\n            overflowY: \"auto\"\n        }\n    }, drawer))));\n}, \"ThemedSiderV2\");\n// src/components/themedLayoutV2/header/index.tsx\n\n\n\n\n\n\n\n// src/components/themedLayoutV2/hamburgerMenu/index.tsx\n\n\n\nvar HamburgerIcon = /* @__PURE__ */ __name((props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        color: \"inherit\",\n        \"aria-label\": \"open drawer\",\n        edge: \"start\",\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_27__[\"default\"], null)), \"HamburgerIcon\");\nvar HamburgerMenu = /* @__PURE__ */ __name(()=>{\n    const { siderCollapsed, setSiderCollapsed, mobileSiderOpen, setMobileSiderOpen } = useThemedLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerIcon, {\n        onClick: ()=>setSiderCollapsed(!siderCollapsed),\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"none\",\n                md: \"flex\"\n            },\n            ...!siderCollapsed && {\n                display: \"none\"\n            }\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerIcon, {\n        onClick: ()=>setMobileSiderOpen(!mobileSiderOpen),\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"flex\",\n                md: \"none\"\n            },\n            ...mobileSiderOpen && {\n                display: \"none\"\n            }\n        }\n    }));\n}, \"HamburgerMenu\");\n// src/components/themedLayoutV2/header/index.tsx\nvar ThemedHeaderV2 = /* @__PURE__ */ __name(({ isSticky, sticky })=>{\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { data: user } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const prefferedSticky = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(sticky, isSticky) ?? true;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_AppBar__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        position: prefferedSticky ? \"sticky\" : \"relative\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_22__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerMenu, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        gap: \"16px\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }, (user == null ? void 0 : user.name) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, user == null ? void 0 : user.name), (user == null ? void 0 : user.avatar) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Avatar__WEBPACK_IMPORTED_MODULE_25__[\"default\"], {\n        src: user == null ? void 0 : user.avatar,\n        alt: user == null ? void 0 : user.name\n    })))));\n}, \"ThemedHeaderV2\");\n// src/components/themedLayoutV2/index.tsx\nvar ThemedLayoutV2 = /* @__PURE__ */ __name(({ Sider: Sider2, Header: Header2, Title: Title2, Footer, OffLayoutArea, children, initialSiderCollapsed })=>{\n    const SiderToRender = Sider2 ?? ThemedSiderV2;\n    const HeaderToRender = Header2 ?? ThemedHeaderV2;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedLayoutContextProvider, {\n        initialSiderCollapsed\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SiderToRender, {\n        Title: Title2\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: [\n            {\n                display: \"flex\",\n                flexDirection: \"column\",\n                flex: 1,\n                minWidth: \"1px\",\n                minHeight: \"1px\"\n            }\n        ]\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HeaderToRender, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"main\",\n        sx: {\n            p: {\n                xs: 1,\n                md: 2,\n                lg: 3\n            },\n            flexGrow: 1,\n            bgcolor: (theme)=>theme.palette.background.default\n        }\n    }, children), Footer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Footer, null)), OffLayoutArea && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(OffLayoutArea, null)));\n}, \"ThemedLayoutV2\");\n// src/components/themedLayoutV2/title/index.tsx\n\n\n\n\n\nvar ThemedTitleV2 = /* @__PURE__ */ __name(({ collapsed, wrapperStyles, icon: iconFromProps, text: textFromProps })=>{\n    const { title: { icon: defaultIcon2, text: defaultText2 } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineOptions)();\n    const icon = typeof iconFromProps === \"undefined\" ? defaultIcon2 : iconFromProps;\n    const text = typeof textFromProps === \"undefined\" ? defaultText2 : textFromProps;\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        to: \"/\",\n        component: ActiveLink,\n        underline: \"none\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"12px\",\n            ...wrapperStyles\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        height: \"24px\",\n        width: \"24px\",\n        color: \"primary\"\n    }, icon), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h6\",\n        fontWeight: 700,\n        color: \"text.primary\",\n        fontSize: \"inherit\",\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }, text));\n}, \"ThemedTitleV2\");\n// src/components/pages/login/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar LoginPage = /* @__PURE__ */ __name(()=>{\n    var _a;\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: login, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogin)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        sx: {\n            background: \"radial-gradient(50% 50% at 50% 50%, #63386A 0%, #310438 100%)\",\n            backgroundSize: \"cover\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            height: \"100vh\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine Logo\",\n        style: {\n            maxWidth: 200\n        }\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        mt: 4\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            paddingX: \"32px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        sx: {\n            fontWeight: \"700\",\n            margin: \"12px 0\"\n        }\n    }, translate(\"pages.login.title\", \"Sign in your account\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            login(data);\n        }),\n        gap: \"16px\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"username\", {\n            required: true\n        }),\n        id: \"username\",\n        margin: \"normal\",\n        size: \"small\",\n        fullWidth: true,\n        label: translate(\"pages.login.username\", \"Username\"),\n        name: \"username\",\n        autoComplete: \"username\",\n        autoFocus: true\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: true\n        }),\n        id: \"password\",\n        size: \"small\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.login.password\", \"Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        sx: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_41__[\"default\"], {\n        sx: {\n            span: {\n                fontSize: \"12px\",\n                color: \"text.secondary\"\n            }\n        },\n        color: \"secondary\",\n        control: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n            size: \"small\",\n            id: \"remember\",\n            ...register(\"remember\")\n        }),\n        label: translate(\"pages.login.remember\", \"Remember me\")\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"#\",\n        sx: {\n            fontSize: \"12px\",\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        sx: {\n            fontSize: \"12px\"\n        }\n    }, translate(\"pages.login.forgotPassword\", \"Forgot password?\")))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            my: \"8px\",\n            color: \"white\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.login.signin\", \"Sign in\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        style: {\n            marginTop: 8\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, translate(\"pages.login.noAccount\", \"Don’t have an account?\"), \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        underline: \"none\",\n        href: \"#\",\n        style: {\n            fontWeight: \"bold\"\n        }\n    }, translate(\"pages.login.signup\", \"Sign up\"))))))))))));\n}, \"LoginPage\");\n// src/components/pages/ready/index.tsx\n\n\n\n\n\n\nvar ReadyPage = /* @__PURE__ */ __name(()=>{\n    const renderCode = /* @__PURE__ */ __name((text)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            sx: {\n                backgroundColor: (theme)=>theme.palette.secondary.contrastText,\n                color: (theme)=>theme.palette.secondary.main,\n                display: \"inline-block\",\n                fontFamily: \"monospace\"\n            }\n        }, text), \"renderCode\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        container: true,\n        sx: {\n            backgroundColor: (theme)=>theme.palette.secondary.main,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"100vh\",\n            backgroundImage: \"url('https://refine.ams3.cdn.digitaloceanspaces.com/login-background/background.png')\",\n            backgroundSize: \"cover\"\n        },\n        p: 3\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"column\",\n        flex: 1,\n        alignItems: \"center\",\n        color: (theme)=>theme.palette.primary.contrastText\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"img\", {\n        style: {\n            marginBottom: \"48px\"\n        },\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine Logo\"\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h2\",\n        fontWeight: \"bold\",\n        display: \"flex\",\n        justifyContent: \"center\"\n    }, \"Welcome on board\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h5\",\n        mt: 2\n    }, \"Your configuration is completed.\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h6\",\n        mt: 2\n    }, \"Now you can get started by adding your resources to the\", \" \", renderCode(\"resources\"), \" property of \", renderCode(\"Refine\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        item: true,\n        sm: 12,\n        mt: 12,\n        display: \"flex\",\n        justifyContent: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        spacing: 2,\n        direction: {\n            xs: \"column\",\n            sm: \"row\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"https://refine.dev\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        variant: \"outlined\",\n        fullWidth: true\n    }, \"Documentation\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"https://refine.dev/examples\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        variant: \"outlined\",\n        fullWidth: true\n    }, \"Examples\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: \"https://discord.gg/refine\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        variant: \"outlined\",\n        fullWidth: true\n    }, \"Community\")))))));\n}, \"ReadyPage\");\n// src/components/pages/welcome/index.tsx\n\n\nvar WelcomePage = /* @__PURE__ */ __name(()=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.WelcomePage, null);\n}, \"WelcomePage\");\n// src/components/pages/error/index.tsx\n\n\n\n\n\n\n\n\n\nvar ErrorComponent = /* @__PURE__ */ __name(()=>{\n    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const { push } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const { resource, action } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (resource && action) {\n            setErrorMessage(translate(\"pages.error.info\", {\n                action,\n                resource: resource == null ? void 0 : resource.name\n            }, `You may have forgotten to add the \"${action}\" component to \"${resource == null ? void 0 : resource.name}\" resource.`));\n        }\n    }, [\n        action,\n        resource\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        mt: 20\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n        container: true,\n        direction: \"column\",\n        display: \"flex\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"h1\"\n    }, \"404\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        direction: \"row\",\n        spacing: \"2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], null, translate(\"pages.error.404\", \"Sorry, the page you visited does not exist.\")), errorMessage && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: errorMessage\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Info__WEBPACK_IMPORTED_MODULE_44__[\"default\"], {}))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        onClick: ()=>{\n            if (routerType === \"legacy\") {\n                push(\"/\");\n            } else {\n                go({\n                    to: \"/\"\n                });\n            }\n        }\n    }, translate(\"pages.error.backHome\", \"Back Home\"))));\n}, \"ErrorComponent\");\n// src/components/pages/auth/index.tsx\n\n// src/components/pages/auth/components/login/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/components/pages/auth/components/styles.ts\nvar layoutStyles = {};\nvar titleStyles = {\n    textAlign: \"center\",\n    fontSize: \"24px\",\n    marginBottom: \"24px\",\n    overflowWrap: \"break-word\",\n    hyphens: \"manual\",\n    textOverflow: \"unset\",\n    whiteSpace: \"pre-wrap\"\n};\n// src/components/pages/auth/components/login/index.tsx\nvar LoginPage2 = /* @__PURE__ */ __name(({ providers, registerLink, forgotPasswordLink, rememberMe, contentProps, wrapperProps, renderContent, formProps, title, hideForm, mutationVariables })=>{\n    var _a;\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const methods = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const { register, handleSubmit, formState: { errors } } = methods;\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: login, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogin)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const renderProviders = /* @__PURE__ */ __name(()=>{\n        if (providers && providers.length > 0) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n                spacing: 1\n            }, providers.map((provider)=>{\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                    key: provider.name,\n                    variant: \"outlined\",\n                    fullWidth: true,\n                    sx: {\n                        color: \"primary.light\",\n                        borderColor: \"primary.light\",\n                        textTransform: \"none\"\n                    },\n                    onClick: ()=>login({\n                            ...mutationVariables,\n                            providerName: provider.name\n                        }),\n                    startIcon: provider.icon\n                }, provider.label);\n            })), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_45__[\"default\"], {\n                sx: {\n                    fontSize: \"12px\",\n                    marginY: \"16px\"\n                }\n            }, translate(\"pages.login.divider\", \"or\")));\n        }\n        return null;\n    }, \"renderProviders\");\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.login.title\", \"Sign in to your account\")), renderProviders(), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return login({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.login.errors.requiredEmail\", \"Email is required\")\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.login.fields.email\", \"Email\"),\n        error: !!errors.email,\n        name: \"email\",\n        type: \"email\",\n        autoComplete: \"email\",\n        sx: {\n            mt: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.login.errors.requiredPassword\", \"Password is required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.login.fields.password\", \"Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        error: !!errors.password,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n        }\n    }, rememberMe ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_41__[\"default\"], {\n        sx: {\n            span: {\n                fontSize: \"14px\",\n                color: \"text.secondary\"\n            }\n        },\n        color: \"secondary\",\n        control: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n            size: \"small\",\n            id: \"remember\",\n            ...register(\"remember\")\n        }),\n        label: translate(\"pages.login.buttons.rememberMe\", \"Remember me\")\n    }), forgotPasswordLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        variant: \"body2\",\n        color: \"primary\",\n        fontSize: \"12px\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/forgot-password\"\n    }, translate(\"pages.login.buttons.forgotPassword\", \"Forgot password?\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: isLoading,\n        sx: {\n            mt: \"24px\"\n        }\n    }, translate(\"pages.login.signin\", \"Sign in\"))), registerLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        textAlign: \"center\",\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.login.buttons.noAccount\", \"Don’t have an account?\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        ml: \"4px\",\n        fontSize: \"12px\",\n        variant: \"body2\",\n        color: \"primary\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/register\",\n        fontWeight: \"bold\"\n    }, translate(\"pages.login.signup\", \"Sign up\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react_hook_form__WEBPACK_IMPORTED_MODULE_46__.FormProvider, {\n        ...methods\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: hideForm ? \"flex-start\" : \"center\",\n            alignItems: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: \"100%\",\n            maxWidth: \"400px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: hideForm ? \"15dvh\" : 0\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content)))));\n}, \"LoginPage\");\n// src/components/pages/auth/components/register/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RegisterPage = /* @__PURE__ */ __name(({ loginLink, wrapperProps, contentProps, renderContent, providers, formProps, title, hideForm, mutationVariables })=>{\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: registerMutate, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRegister)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const renderProviders = /* @__PURE__ */ __name(()=>{\n        if (providers && providers.length > 0) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n                spacing: 1\n            }, providers.map((provider)=>{\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n                    key: provider.name,\n                    color: \"secondary\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    sx: {\n                        color: \"primary.light\",\n                        borderColor: \"primary.light\",\n                        textTransform: \"none\"\n                    },\n                    onClick: ()=>registerMutate({\n                            ...mutationVariables,\n                            providerName: provider.name\n                        }),\n                    startIcon: provider.icon\n                }, provider.label);\n            })), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_45__[\"default\"], {\n                sx: {\n                    fontSize: \"12px\",\n                    marginY: \"16px\"\n                }\n            }, translate(\"pages.register.divider\", translate(\"pages.login.divider\", \"or\"))));\n        }\n        return null;\n    }, \"renderProviders\");\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.register.title\", \"Sign up for your account\")), renderProviders(), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return registerMutate({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.register.errors.requiredEmail\", \"Email is required\"),\n            pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: translate(\"pages.register.errors.validEmail\", \"Invalid email address\")\n            }\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.register.email\", \"Email\"),\n        error: !!errors.email,\n        helperText: errors[\"email\"] ? errors[\"email\"].message : \"\",\n        name: \"email\",\n        autoComplete: \"email\",\n        sx: {\n            mt: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.register.errors.requiredPassword\", \"Password is required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.register.fields.password\", \"Password\"),\n        helperText: errors[\"password\"] ? errors[\"password\"].message : \"\",\n        error: !!errors.password,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: isLoading,\n        sx: {\n            mt: \"24px\"\n        }\n    }, translate(\"pages.register.signup\", \"Sign up\"))), loginLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.register.buttons.haveAccount\", translate(\"pages.login.buttons.haveAccount\", \"Have an account?\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        ml: \"4px\",\n        variant: \"body2\",\n        color: \"primary\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/login\",\n        fontSize: \"12px\",\n        fontWeight: \"bold\"\n    }, translate(\"pages.register.signin\", translate(\"pages.login.signin\", \"Sign in\"))))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: hideForm ? \"flex-start\" : \"center\",\n            alignItems: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            width: \"100%\",\n            maxWidth: \"400px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: hideForm ? \"15dvh\" : 0\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"RegisterPage\");\n// src/components/pages/auth/components/forgotPassword/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar ForgotPasswordPage = /* @__PURE__ */ __name(({ loginLink, wrapperProps, contentProps, renderContent, formProps, title, mutationVariables })=>{\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const { mutate, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useForgotPassword)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link6 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link6;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.forgotPassword.title\", \"Forgot your password?\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return mutate({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.forgotPassword.errors.requiredEmail\", \"Email is required\"),\n            pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: translate(\"pages.register.errors.validEmail\", \"Invalid email address\")\n            }\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.forgotPassword.fields.email\", \"Email\"),\n        name: \"email\",\n        type: \"email\",\n        error: !!errors.email,\n        autoComplete: \"email\",\n        sx: {\n            m: 0\n        }\n    }), loginLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        textAlign: \"right\",\n        sx: {\n            mt: \"24px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.forgotPassword.buttons.haveAccount\", translate(\"pages.register.buttons.haveAccount\", \"Have an account? \"))), \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        variant: \"body2\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/login\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"primary.light\"\n    }, translate(\"pages.forgotPassword.signin\", translate(\"pages.login.signin\", \"Sign in\")))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            mt: \"24px\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"ForgotPasswordPage\");\n// src/components/pages/auth/components/updatePassword/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar UpdatePasswordPage = /* @__PURE__ */ __name(({ wrapperProps, contentProps, renderContent, formProps, title = void 0, mutationVariables })=>{\n    var _a, _b;\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, watch, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_36__.useForm)({\n        ...useFormProps\n    });\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: update, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUpdatePassword)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.updatePassword.title\", \"Set New Password\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return update({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.updatePassword.errors.requiredPassword\", \"Password required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.updatePassword.fields.password\", \"New Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        error: !!(errors == null ? void 0 : errors.password),\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            m: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n        ...register(\"confirmPassword\", {\n            required: translate(\"pages.updatePassword.errors.requiredConfirmPassword\", \"Confirm Password is required\"),\n            validate: (value)=>{\n                if (watch(\"password\") !== value) {\n                    return translate(\"pages.updatePassword.errors.confirmPasswordNotMatch\", \"Passwords do not match\");\n                }\n                return true;\n            }\n        }),\n        id: \"confirmPassword\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"confirmPassword\",\n        label: translate(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\"),\n        helperText: (_b = errors == null ? void 0 : errors.confirmPassword) == null ? void 0 : _b.message,\n        error: !!(errors == null ? void 0 : errors.confirmPassword),\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-confirm-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            mt: \"24px\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.updatePassword.buttons.submit\", \"Update\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"UpdatePasswordPage\");\n// src/components/pages/auth/index.tsx\nvar AuthPage = /* @__PURE__ */ __name((props)=>{\n    const { type } = props;\n    const renderView = /* @__PURE__ */ __name(()=>{\n        switch(type){\n            case \"register\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RegisterPage, {\n                    ...props\n                });\n            case \"forgotPassword\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ForgotPasswordPage, {\n                    ...props\n                });\n            case \"updatePassword\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(UpdatePasswordPage, {\n                    ...props\n                });\n            default:\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LoginPage2, {\n                    ...props\n                });\n        }\n    }, \"renderView\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, renderView());\n}, \"AuthPage\");\n// src/components/crud/create/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Create = /* @__PURE__ */ __name(({ title, children, saveButtonProps: saveButtonPropsFromProps, resource: resourceFromProps, isLoading = false, breadcrumb: breadcrumbFromProps, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps })=>{\n    var _a, _b;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const { goBack } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const saveButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        ...saveButtonPropsFromProps\n    };\n    const defaultFooterButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SaveButton, {\n        ...saveButtonProps\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {},\n        sx: {\n            position: \"relative\",\n            ...wrapperProps == null ? void 0 : wrapperProps.sx\n        }\n    }, isLoading && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            position: \"absolute\",\n            inset: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: (theme)=>theme.zIndex.drawer + 1,\n            // this is needed to support custom themes, dark mode etc.\n            bgcolor: (theme)=>(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.alpha)(theme.palette.background.paper, 0.4)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_48__[\"default\"], null)), breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.create`, `Create ${getUserFriendlyName(((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n            onClick: action !== \"list\" || typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_50__[\"default\"], null)),\n        action: headerButtons ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: null\n        }) : headerButtons : null) : void 0,\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            gap: \"16px\",\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: defaultFooterButtons,\n        saveButtonProps\n    }) : footerButtons : defaultFooterButtons));\n}, \"Create\");\n// src/components/crud/edit/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Edit = /* @__PURE__ */ __name(({ title, saveButtonProps: saveButtonPropsFromProps, mutationMode: mutationModeProp, recordItemId, children, deleteButtonProps: deleteButtonPropsFromProps, canDelete, resource: resourceFromProps, isLoading = false, breadcrumb: breadcrumbFromProps, dataProviderName, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps, autoSaveProps })=>{\n    var _a, _b, _c;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const { mutationMode: mutationModeContext } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMutationMode)();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const { goBack, list: legacyGoList } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, id: idFromParams, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const goListPath = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource,\n        action: \"list\"\n    });\n    const id = recordItemId ?? idFromParams;\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;\n    const isDeleteButtonVisible = canDelete ?? ((((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete)) || deleteButtonPropsFromProps);\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const listButtonProps = hasList ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier\n    } : void 0;\n    const refreshButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        dataProviderName\n    };\n    const defaultHeaderButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\"\n    }, autoSaveProps && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AutoSaveIndicator, {\n        ...autoSaveProps\n    }), hasList && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ListButton, {\n        ...listButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RefreshButton, {\n        ...refreshButtonProps\n    }));\n    const deleteButtonProps = isDeleteButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        mutationMode,\n        variant: \"outlined\",\n        onSuccess: ()=>{\n            if (routerType === \"legacy\") {\n                legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? \"\");\n            } else {\n                go({\n                    to: goListPath\n                });\n            }\n        },\n        recordItemId: id,\n        dataProviderName,\n        ...deleteButtonPropsFromProps\n    } : void 0;\n    const saveButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        ...saveButtonPropsFromProps\n    };\n    const defaultFooterButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, isDeleteButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DeleteButton, {\n        ...deleteButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SaveButton, {\n        ...saveButtonProps\n    }));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {},\n        sx: {\n            position: \"relative\",\n            ...wrapperProps == null ? void 0 : wrapperProps.sx\n        }\n    }, isLoading && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            position: \"absolute\",\n            inset: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: (theme)=>theme.zIndex.drawer + 1,\n            // this is needed to support custom themes, dark mode etc.\n            bgcolor: (theme)=>(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.alpha)(theme.palette.background.paper, 0.4)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_48__[\"default\"], null)), breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.edit`, `Edit ${getUserFriendlyName(((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n            onClick: action !== \"list\" && typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_50__[\"default\"], null)),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            listButtonProps,\n            refreshButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            gap: \"16px\",\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: defaultFooterButtons,\n        deleteButtonProps,\n        saveButtonProps\n    }) : footerButtons : defaultFooterButtons));\n}, \"Edit\");\n// src/components/crud/list/index.tsx\n\n\n\n\n\n\n\n\nvar List4 = /* @__PURE__ */ __name(({ title, canCreate, children, createButtonProps: createButtonPropsFromProps, resource: resourceFromProps, breadcrumb: breadcrumbFromProps, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons })=>{\n    var _a, _b;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const { resource, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const isCreateButtonVisible = canCreate ?? (((resource == null ? void 0 : resource.canCreate) ?? !!(resource == null ? void 0 : resource.create)) || createButtonPropsFromProps);\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const createButtonProps = isCreateButtonVisible ? {\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        ...createButtonPropsFromProps\n    } : void 0;\n    const defaultHeaderButtons = isCreateButtonVisible ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CreateButton, {\n        ...createButtonProps\n    }) : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {}\n    }, breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.list`, getUserFriendlyName(((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"plural\"))),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            createButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children));\n}, \"List\");\n// src/components/crud/show/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Show = /* @__PURE__ */ __name(({ title, canEdit, canDelete, isLoading = false, children, resource: resourceFromProps, recordItemId, breadcrumb: breadcrumbFromProps, dataProviderName, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps })=>{\n    var _a, _b, _c;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const { goBack, list: legacyGoList } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, id: idFromParams, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const goListPath = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource,\n        action: \"list\"\n    });\n    const id = recordItemId ?? idFromParams;\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;\n    const hasDelete = canDelete ?? ((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete);\n    const isDeleteButtonVisible = hasDelete && typeof id !== \"undefined\";\n    const isEditButtonVisible = canEdit ?? (resource == null ? void 0 : resource.canEdit) ?? !!(resource == null ? void 0 : resource.edit);\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const listButtonProps = hasList ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier\n    } : void 0;\n    const editButtonProps = isEditButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id\n    } : void 0;\n    const deleteButtonProps = isDeleteButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        onSuccess: ()=>{\n            if (routerType === \"legacy\") {\n                legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? \"\");\n            } else {\n                go({\n                    to: goListPath\n                });\n            }\n        },\n        dataProviderName\n    } : void 0;\n    const refreshButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        dataProviderName\n    };\n    const defaultHeaderButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, hasList && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ListButton, {\n        ...listButtonProps\n    }), isEditButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(EditButton, {\n        ...editButtonProps\n    }), isDeleteButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DeleteButton, {\n        ...deleteButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RefreshButton, {\n        ...refreshButtonProps\n    }));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...wrapperProps ?? {},\n        sx: {\n            position: \"relative\",\n            ...wrapperProps == null ? void 0 : wrapperProps.sx\n        }\n    }, isLoading && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            position: \"absolute\",\n            inset: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: (theme)=>theme.zIndex.drawer + 1,\n            // this is needed to support custom themes, dark mode etc.\n            bgcolor: (theme)=>(0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_35__.alpha)(theme.palette.background.paper, 0.4)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_48__[\"default\"], null)), breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.show`, `Show ${getUserFriendlyName(((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n            onClick: action !== \"list\" && typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_50__[\"default\"], null)),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            deleteButtonProps,\n            editButtonProps,\n            listButtonProps,\n            refreshButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        sx: {\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: null\n    }) : footerButtons : null));\n}, \"Show\");\n// src/components/buttons/create/index.tsx\n\n\n\n\n\nvar CreateButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, disabled, hidden, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCreateButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        meta,\n        accessControl\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        variant: \"contained\",\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.CreateButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"CreateButton\");\n// src/components/buttons/edit/index.tsx\n\n\n\n\n\nvar EditButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useEditButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        accessControl,\n        meta\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n            sx: {\n                selfAlign: \"center\"\n            },\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.EditButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"EditButton\");\n// src/components/buttons/delete/index.tsx\n\n\n\n\n\n\n\n\n\nvar DeleteButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, onSuccess, mutationMode, children, successNotification, errorNotification, hideText = false, accessControl, meta, metaData, dataProviderName, confirmTitle, confirmOkText, confirmCancelText, svgIconProps, invalidates, ...rest })=>{\n    const { onConfirm, title, label, hidden, disabled, loading, confirmTitle: defaultConfirmTitle, confirmOkLabel, cancelLabel } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useDeleteButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        dataProviderName,\n        mutationMode,\n        accessControl,\n        invalidates,\n        onSuccess,\n        meta,\n        successNotification,\n        errorNotification\n    });\n    const [open, setOpen] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const { sx, ...restProps } = rest;\n    if (hidden) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n        color: \"error\",\n        onClick: ()=>setOpen(true),\n        disabled,\n        loading,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_55__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        loadingPosition: hideText ? \"center\" : \"start\",\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.DeleteButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_55__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Dialog__WEBPACK_IMPORTED_MODULE_56__[\"default\"], {\n        open,\n        onClose: ()=>setOpen(false),\n        \"aria-labelledby\": \"alert-dialog-title\",\n        \"aria-describedby\": \"alert-dialog-description\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_57__[\"default\"], {\n        id: \"alert-dialog-title\"\n    }, confirmTitle ?? defaultConfirmTitle), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_58__[\"default\"], {\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        onClick: ()=>setOpen(false)\n    }, confirmCancelText ?? cancelLabel), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        color: \"error\",\n        onClick: ()=>{\n            onConfirm();\n            setOpen(false);\n        },\n        autoFocus: true\n    }, confirmOkText ?? confirmOkLabel))));\n}, \"DeleteButton\");\n// src/components/buttons/refresh/index.tsx\n\n\n\n\n\nvar RefreshButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, dataProviderName, svgIconProps, children, onClick, meta: _meta, metaData: _metaData, ...rest })=>{\n    const { onClick: onRefresh, loading, label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefreshButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        dataProviderName\n    });\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_59__[\"default\"], {\n            ...svgIconProps\n        }),\n        loading,\n        loadingPosition: hideText ? \"center\" : \"start\",\n        onClick: onClick ? onClick : onRefresh,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.RefreshButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_59__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"RefreshButton\");\n// src/components/buttons/show/index.tsx\n\n\n\n\n\nvar ShowButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useShowButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        accessControl,\n        meta\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_60__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ShowButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_60__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ShowButton\");\n// src/components/buttons/list/index.tsx\n\n\n\n\n\nvar ListButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useListButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        meta,\n        accessControl\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ListButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ListButton\");\n// src/components/buttons/export/index.tsx\n\n\n\n\n\nvar ExportButton = /* @__PURE__ */ __name(({ hideText = false, children, loading = false, svgIconProps, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useExportButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n        ...rest,\n        loading,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_61__[\"default\"], {\n            ...svgIconProps\n        }),\n        loadingPosition: hideText ? \"center\" : \"start\",\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ExportButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_61__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"ExportButton\");\n// src/components/buttons/save/index.tsx\n\n\n\n\n\nvar SaveButton = /* @__PURE__ */ __name(({ hideText = false, svgIconProps, children, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSaveButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_62__[\"default\"], {\n            ...svgIconProps\n        }),\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        variant: \"contained\",\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.SaveButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_62__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"SaveButton\");\n// src/components/buttons/clone/index.tsx\n\n\n\n\n\nvar CloneButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCloneButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        meta,\n        accessControl\n    });\n    if (hidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (disabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_16__[\"default\"], {\n        disabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.CloneButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"CloneButton\");\n// src/components/buttons/import/index.tsx\n\n\n\n\n\nvar ImportButton = /* @__PURE__ */ __name(({ inputProps, hideText = false, loading = false, svgIconProps, children, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useImportButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"label\", {\n        htmlFor: \"contained-button-file\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"input\", {\n        ...inputProps,\n        id: \"contained-button-file\",\n        multiple: true,\n        hidden: true\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n        component: \"span\",\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_61__[\"default\"], {\n            ...svgIconProps\n        }),\n        loadingPosition: hideText ? \"center\" : \"start\",\n        loading,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_47__.RefineButtonClassNames.ImportButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_61__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ImportButton\");\n// src/components/circularDeterminate/index.tsx\n\n\n\n\nvar CircularDeterminate = /* @__PURE__ */ __name(({ undoableTimeout, message })=>{\n    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(100);\n    const [timeCount, setTimeCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undoableTimeout);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const increaseProgress = 100 / undoableTimeout;\n        const timer = setInterval(()=>{\n            setTimeCount((prevProgress)=>prevProgress - 1);\n            setProgress((prevProgress)=>prevProgress - increaseProgress);\n        }, 1e3);\n        if (timeCount === 0) {\n            clearInterval(timer);\n        }\n        return ()=>{\n            clearInterval(timer);\n        };\n    }, [\n        timeCount\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            position: \"relative\",\n            display: \"inline-flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        color: \"inherit\",\n        variant: \"determinate\",\n        value: progress\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: \"absolute\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        component: \"div\"\n    }, timeCount))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n        sx: {\n            marginLeft: \"10px\",\n            maxWidth: {\n                xs: \"150px\",\n                md: \"100%\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"subtitle2\"\n    }, message)));\n}, \"CircularDeterminate\");\n// src/components/fields/text/index.tsx\n\n\nvar TextField6 = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, value);\n}, \"TextField\");\n// src/components/fields/tag/index.tsx\n\n\nvar TagField = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Chip__WEBPACK_IMPORTED_MODULE_63__[\"default\"], {\n        label: value == null ? void 0 : value.toString(),\n        ...rest\n    });\n}, \"TagField\");\n// src/components/fields/email/index.tsx\n\n\n\nvar EmailField = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: `mailto:${value}`,\n        ...rest\n    }, value));\n}, \"EmailField\");\n// src/components/fields/boolean/index.tsx\n\n\n\n\nvar BooleanField = /* @__PURE__ */ __name(({ value, valueLabelTrue = \"true\", valueLabelFalse = \"false\", trueIcon, falseIcon, svgIconProps, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        title: value ? valueLabelTrue : valueLabelFalse,\n        ...rest\n    }, value ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, trueIcon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_CheckOutlined__WEBPACK_IMPORTED_MODULE_64__[\"default\"], {\n        ...svgIconProps\n    })) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, falseIcon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_CloseOutlined__WEBPACK_IMPORTED_MODULE_65__[\"default\"], {\n        ...svgIconProps\n    })));\n}, \"BooleanField\");\n// src/components/fields/date/index.tsx\n\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_66__.extend(dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_67__);\nvar defaultLocale = dayjs__WEBPACK_IMPORTED_MODULE_66__.locale();\nvar DateField = /* @__PURE__ */ __name(({ value, locales, format: dateFormat = \"L\", ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, value ? dayjs__WEBPACK_IMPORTED_MODULE_66__(value).locale(locales || defaultLocale).format(dateFormat) : \"\");\n}, \"DateField\");\n// src/components/fields/file/index.tsx\n\nvar FileField = /* @__PURE__ */ __name(({ title, src, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(UrlField, {\n        value: src,\n        title,\n        ...rest\n    }, title ?? src);\n}, \"FileField\");\n// src/components/fields/url/index.tsx\n\n\n\nvar UrlField = /* @__PURE__ */ __name(({ children, value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        href: value,\n        ...rest\n    }, children ?? value));\n}, \"UrlField\");\n// src/components/fields/number/index.tsx\n\n\nfunction toLocaleStringSupportsOptions() {\n    return !!(typeof Intl === \"object\" && Intl && typeof Intl.NumberFormat === \"function\");\n}\n__name(toLocaleStringSupportsOptions, \"toLocaleStringSupportsOptions\");\nvar NumberField = /* @__PURE__ */ __name(({ value, locale, options, ...rest })=>{\n    const number = Number(value);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, toLocaleStringSupportsOptions() ? number.toLocaleString(locale, options) : number);\n}, \"NumberField\");\n// src/components/fields/markdown/index.tsx\n\n\n\nvar MarkdownField = /* @__PURE__ */ __name(({ value = \"\" })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react_markdown__WEBPACK_IMPORTED_MODULE_68__, {\n        remarkPlugins: [\n            remark_gfm__WEBPACK_IMPORTED_MODULE_69__\n        ]\n    }, value);\n}, \"MarkdownField\");\n// src/components/breadcrumb/index.tsx\n\n\n\n\n\n\n\nvar Breadcrumb = /* @__PURE__ */ __name(({ breadcrumbProps, showHome = true, hideIcons = false, meta })=>{\n    var _a, _b;\n    const { breadcrumbs } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBreadcrumb)({\n        meta\n    });\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const NewLink = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : NewLink;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const { resources } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)();\n    const rootRouteResource = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.matchResourceFromRoute)(\"/\", resources);\n    if (breadcrumbs.length === 1) {\n        return null;\n    }\n    const LinkRouter = /* @__PURE__ */ __name((props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n            ...props,\n            component: ActiveLink\n        }), \"LinkRouter\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Breadcrumbs__WEBPACK_IMPORTED_MODULE_70__[\"default\"], {\n        \"aria-label\": \"breadcrumb\",\n        sx: {\n            paddingY: 2,\n            paddingX: 2,\n            ...(breadcrumbProps == null ? void 0 : breadcrumbProps.sx) ?? {}\n        },\n        ...breadcrumbProps\n    }, showHome && (hasDashboard || rootRouteResource.found) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkRouter, {\n        underline: \"hover\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\"\n        },\n        color: \"inherit\",\n        to: \"/\"\n    }, ((_b = (_a = rootRouteResource == null ? void 0 : rootRouteResource.resource) == null ? void 0 : _a.meta) == null ? void 0 : _b.icon) ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_HomeOutlined__WEBPACK_IMPORTED_MODULE_71__[\"default\"], {\n        sx: {\n            fontSize: \"18px\"\n        }\n    })), breadcrumbs.map(({ label, icon, href })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid__WEBPACK_IMPORTED_MODULE_43__[\"default\"], {\n            key: label,\n            sx: {\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .MuiSvgIcon-root\": {\n                    fontSize: \"16px\"\n                }\n            }\n        }, !hideIcons && icon, href ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkRouter, {\n            underline: \"hover\",\n            sx: {\n                display: \"flex\",\n                alignItems: \"center\",\n                fontSize: \"14px\"\n            },\n            color: \"inherit\",\n            to: href,\n            variant: \"subtitle1\",\n            marginLeft: 0.5\n        }, label) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n            fontSize: \"14px\"\n        }, label));\n    }));\n}, \"Breadcrumb\");\n// src/components/autoSaveIndicator/index.tsx\n\n\n\n\n\n\n\nvar AutoSaveIndicator = /* @__PURE__ */ __name(({ status, elements: { success = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.success\",\n    defaultMessage: \"saved\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_TaskAltOutlined__WEBPACK_IMPORTED_MODULE_72__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), error = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.error\",\n    defaultMessage: \"auto save failure\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ErrorOutlineOutlined__WEBPACK_IMPORTED_MODULE_73__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), loading = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.loading\",\n    defaultMessage: \"saving...\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SyncOutlined__WEBPACK_IMPORTED_MODULE_74__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), idle = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_MoreHorizOutlined__WEBPACK_IMPORTED_MODULE_75__[\"default\"], {\n        fontSize: \"small\"\n    })\n}) } = {} })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.AutoSaveIndicator, {\n        status,\n        elements: {\n            success,\n            error,\n            loading,\n            idle\n        }\n    });\n}, \"AutoSaveIndicator\");\nvar Message = /* @__PURE__ */ __name(({ translationKey, defaultMessage, icon })=>{\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        color: \"gray\",\n        fontSize: \"0.8rem\",\n        position: \"relative\",\n        display: \"flex\",\n        alignItems: \"center\",\n        flexWrap: \"wrap\",\n        marginRight: \".3rem\"\n    }, translate(translationKey, defaultMessage), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        style: {\n            position: \"relative\",\n            top: \"3px\",\n            marginLeft: \"3px\"\n        }\n    }, icon));\n}, \"Message\");\n// src/theme/index.ts\n\n// src/theme/palette/lightPalette.ts\nvar lightPalette = {\n    mode: \"light\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\"\n    },\n    background: {\n        default: \"#f0f0f0\",\n        paper: \"#ffffff\"\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    error: {\n        main: \"#fa541c\",\n        contrastText: \"#fff\"\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\"\n    },\n    info: {\n        main: \"#0b82f0\",\n        contrastText: \"#fff\"\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#626262\",\n        secondary: \"#9f9f9f\",\n        disabled: \"#c1c1c1\"\n    }\n};\n// src/theme/palette/darkPalette.ts\nvar darkPalette = {\n    mode: \"dark\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\"\n    },\n    background: {\n        default: \"#212121\",\n        paper: \"#242424\"\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    error: {\n        main: \"#ee2a1e\",\n        contrastText: \"#fff\"\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\"\n    },\n    info: {\n        main: \"#1890ff\",\n        contrastText: \"#fff\"\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#fff\",\n        secondary: \"rgba(255,255,255,0.7)\",\n        disabled: \"#d1d1d1\"\n    }\n};\n// src/theme/typography.ts\nvar typography = {\n    fontFamily: [\n        \"Montserrat\",\n        \"-apple-system\",\n        \"BlinkMacSystemFont\",\n        '\"Segoe UI\"',\n        \"Roboto\",\n        '\"Helvetica Neue\"',\n        \"Arial\",\n        \"sans-serif\",\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"'\n    ].join(\",\")\n};\n// src/theme/palette/refinePalette.ts\nvar RefinePalettes = {\n    Blue: {\n        mode: \"light\",\n        primary: {\n            main: \"#1976D2\",\n            light: \"#4791db\",\n            dark: \"#115293\"\n        }\n    },\n    BlueDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#67b7f7\",\n            light: \"#85c5f8\",\n            dark: \"#4880ac\"\n        }\n    },\n    Purple: {\n        mode: \"light\",\n        primary: {\n            main: \"#7B1FA2\",\n            light: \"#954bb4\",\n            dark: \"#561571\"\n        }\n    },\n    PurpleDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#AB47BC\",\n            light: \"#bb6bc9\",\n            dark: \"#773183\"\n        }\n    },\n    Magenta: {\n        mode: \"light\",\n        primary: {\n            main: \"#C2185B\",\n            light: \"#ce467b\",\n            dark: \"#87103f\"\n        }\n    },\n    MagentaDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#EC407A\",\n            light: \"#ef6694\",\n            dark: \"#a52c55\"\n        }\n    },\n    Red: {\n        mode: \"light\",\n        primary: {\n            main: \"#D32F2F\",\n            light: \"#db5858\",\n            dark: \"#932020\"\n        }\n    },\n    RedDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#EF5350\",\n            light: \"#f27573\",\n            dark: \"#a73a38\"\n        }\n    },\n    Orange: {\n        mode: \"light\",\n        primary: {\n            main: \"#F57C00\",\n            light: \"#f79633\",\n            dark: \"#ab5600\"\n        }\n    },\n    OrangeDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#FFA726\",\n            light: \"#ffb851\",\n            dark: \"#b2741a\"\n        }\n    },\n    Yellow: {\n        mode: \"light\",\n        primary: {\n            main: \"#FFA000\",\n            light: \"#ffb333\",\n            dark: \"#b27000\"\n        }\n    },\n    YellowDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#FFCA28\",\n            light: \"#ffd453\",\n            dark: \"#E87040\"\n        }\n    },\n    Green: {\n        mode: \"light\",\n        primary: {\n            main: \"#689F38\",\n            light: \"#86b25f\",\n            dark: \"#486f27\"\n        }\n    },\n    GreenDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#9CCC65\",\n            light: \"#afd683\",\n            dark: \"#6d8e46\"\n        }\n    }\n};\n// src/theme/index.ts\nvar commonThemeProperties = {\n    shape: {\n        borderRadius: 6\n    },\n    typography: {\n        ...typography\n    }\n};\nvar LightTheme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_76__[\"default\"])({\n    ...commonThemeProperties,\n    palette: lightPalette,\n    components: {\n        MuiAppBar: {\n            styleOverrides: {\n                colorDefault: {\n                    backgroundColor: \"#fff\"\n                }\n            }\n        },\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage: \"linear-gradient(rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.01))\"\n                }\n            }\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\"\n                }\n            }\n        }\n    }\n});\nvar DarkTheme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_76__[\"default\"])({\n    ...commonThemeProperties,\n    palette: darkPalette,\n    components: {\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage: \"linear-gradient(rgba(255, 255, 255, 0.025), rgba(255, 255, 255, 0.025))\"\n                }\n            }\n        },\n        MuiAppBar: {\n            defaultProps: {\n                color: \"transparent\"\n            }\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\"\n                }\n            }\n        }\n    }\n});\nvar RefineThemes = Object.keys(RefinePalettes).reduce((acc, key)=>{\n    const paletteName = key;\n    return {\n        ...acc,\n        [key]: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_76__[\"default\"])({\n            palette: {\n                ...RefinePalettes[paletteName]\n            },\n            components: {\n                MuiButton: {\n                    styleOverrides: {\n                        root: ({ ownerState })=>({\n                                ...ownerState.variant === \"contained\" && ownerState.color === \"primary\" && {\n                                    color: \"#fff\"\n                                }\n                            })\n                    }\n                }\n            }\n        })\n    };\n}, {});\n// src/providers/notificationProvider/index.tsx\n\n\n\n\n\n\nvar useNotificationProvider = /* @__PURE__ */ __name(()=>{\n    const { closeSnackbar, enqueueSnackbar } = (0,notistack__WEBPACK_IMPORTED_MODULE_0__.useSnackbar)();\n    const notificationProvider2 = {\n        open: ({ message, type, undoableTimeout, key, cancelMutation, description })=>{\n            if (type === \"progress\") {\n                const action = /* @__PURE__ */ __name((key2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n                        onClick: ()=>{\n                            cancelMutation == null ? void 0 : cancelMutation();\n                            closeSnackbar(key2);\n                        },\n                        color: \"inherit\"\n                    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_UndoOutlined__WEBPACK_IMPORTED_MODULE_77__[\"default\"], null)), \"action\");\n                enqueueSnackbar(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CircularDeterminate, {\n                    undoableTimeout: undoableTimeout ?? 0,\n                    message\n                })), {\n                    action,\n                    preventDuplicate: true,\n                    key,\n                    autoHideDuration: (undoableTimeout ?? 0) * 1e3\n                });\n            } else {\n                enqueueSnackbar(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_14__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                    variant: \"subtitle2\",\n                    component: \"h6\"\n                }, description), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n                    variant: \"caption\",\n                    component: \"p\"\n                }, message)), {\n                    key,\n                    variant: type\n                });\n            }\n        },\n        close: (key)=>{\n            closeSnackbar(key);\n        }\n    };\n    return notificationProvider2;\n}, \"useNotificationProvider\");\nvar notificationProvider = useNotificationProvider;\n// src/providers/refineSnackbarProvider/index.tsx\n\n\n\nvar SnackbarProviderWithDefaultValues = /* @__PURE__ */ __name(({ anchorOrigin = {\n    vertical: \"top\",\n    horizontal: \"right\"\n}, disableWindowBlurListener = true, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarProvider, {\n        anchorOrigin,\n        disableWindowBlurListener,\n        ...rest\n    });\n}, \"SnackbarProviderWithDefaultValues\");\nvar RefineSnackbarProvider = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_78__[\"default\"])(SnackbarProviderWithDefaultValues)`\n&.SnackbarItem-contentRoot {\n    background-color: ${(props)=>props.theme.palette.background.default};\n    color: ${(props)=>props.theme.palette.primary.main};\n}\n&.SnackbarItem-variantSuccess {\n    background-color: ${(props)=>props.theme.palette.success.main};\n    color: ${(props)=>props.theme.palette.success.contrastText};\n}\n&.SnackbarItem-variantError {\n    background-color: ${(props)=>props.theme.palette.error.main};\n    color: ${(props)=>props.theme.palette.error.contrastText};\n}\n&.SnackbarItem-variantInfo {\n    background-color: ${(props)=>props.theme.palette.info.main};\n    color: ${(props)=>props.theme.palette.info.contrastText};\n}\n&.SnackbarItem-variantWarning {\n    background-color: ${(props)=>props.theme.palette.warning.main};\n    color: ${(props)=>props.theme.palette.warning.contrastText};\n}\n`;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/mui/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigateToResource: () => (/* binding */ v),\n/* harmony export */   RefineRoutes: () => (/* binding */ M),\n/* harmony export */   \"default\": () => (/* binding */ k),\n/* harmony export */   paramsFromCurrentPath: () => (/* binding */ P),\n/* harmony export */   parseTableParams: () => (/* binding */ H),\n/* harmony export */   stringifyConfig: () => (/* binding */ T)\n/* harmony export */ });\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var next_navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/navigation.js */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var next_link_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link.js */ \"(ssr)/./node_modules/next/dist/api/link.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/qs/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ NavigateToResource,RefineRoutes,default,paramsFromCurrentPath,parseTableParams,stringifyConfig auto */ \n\n\n\n\nvar P = (e, r)=>{\n    let t = {}, o = r.replace(/^\\/|\\/$/g, \"\"), n = e.replace(/^\\/|\\/$/g, \"\"), s = o.split(\"/\"), a = n.split(\"/\");\n    return s.forEach((i, u)=>{\n        var p;\n        i.startsWith(\":\") && ((p = a[u]) == null ? void 0 : p.length) > 0 && (t[i.replace(\":\", \"\")] = a[u]);\n    }), t;\n};\nvar R = (e)=>{\n    if (typeof e > \"u\") return e;\n    let r = Number(e);\n    return `${r}` === e ? r : e;\n};\nvar T = {\n    addQueryPrefix: !0,\n    skipNulls: !0,\n    arrayFormat: \"indices\",\n    encode: !1,\n    encodeValuesOnly: !0\n}, k = {\n    go: ()=>{\n        let { push: e, replace: r } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), t = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)();\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(({ to: s, type: a, query: i, options: { keepQuery: u, keepHash: p } = {}, hash: c })=>{\n            let m = \"\";\n            p && typeof document < \"u\" && (m = document.location.hash), c && (m = `#${c.replace(/^#/, \"\")}`);\n            let d = {\n                ...u ? qs__WEBPACK_IMPORTED_MODULE_3__.parse(o.toString(), {\n                    ignoreQueryPrefix: !0\n                }) : {},\n                ...i\n            };\n            d.to && (d.to = encodeURIComponent(`${d.to}`));\n            let N = (t == null ? void 0 : t.split(\"?\")[0].split(\"#\")[0]) ?? \"\", S = s || N, $ = m.length > 1, z = Object.keys(d).length > 0, g = `${S}${z ? qs__WEBPACK_IMPORTED_MODULE_3__.stringify(d, T) : \"\"}${$ ? m : \"\"}`;\n            if (a === \"path\") return g;\n            a === \"replace\" ? r(g) : e(g);\n        }, [\n            o,\n            e,\n            r\n        ]);\n    },\n    back: ()=>{\n        let { back: e } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)();\n        return e;\n    },\n    parse: ()=>{\n        let e = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), r = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)(), { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.ResourceContext), { resource: o, action: n, matchedRoute: s } = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>e ? (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.matchResourceFromRoute)(e, t) : {\n                found: !1\n            }, [\n            e,\n            t\n        ]), a = s && e ? P(e, s) : {}, i = a.id, u = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>{\n            let c = r.toString();\n            return qs__WEBPACK_IMPORTED_MODULE_3__.parse(c, {\n                ignoreQueryPrefix: !0\n            });\n        }, [\n            r\n        ]);\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(()=>{\n            let c = {\n                ...a,\n                ...u\n            };\n            return {\n                ...o && {\n                    resource: o\n                },\n                ...n && {\n                    action: n\n                },\n                ...i && {\n                    id: decodeURIComponent(i)\n                },\n                pathname: e || void 0,\n                params: {\n                    ...c,\n                    current: R(c.current),\n                    pageSize: R(c.pageSize),\n                    to: c.to ? decodeURIComponent(c.to) : void 0\n                }\n            };\n        }, [\n            e,\n            u,\n            a,\n            i,\n            o,\n            n\n        ]);\n    },\n    Link: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function({ to: r, ...t }, o) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(next_link_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n            href: r,\n            ...t,\n            ref: o\n        });\n    })\n};\n\n\n\nvar M = ({ children: e })=>{\n    let { resource: r, action: t } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), n = r && t ? r[t] : void 0, s = typeof n == \"function\" ? n : typeof n == \"object\" ? n.component : void 0;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, null, e ? e(s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0, o ?? void 0) : s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0);\n};\n\n\n\nvar v = ({ resource: e, meta: r })=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_2__.useRef(!1), { replace: o } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useGetToPath)(), { resource: s, resources: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(e), i = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>s || a.find((u)=>u.list), [\n        s,\n        a\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (i && !t.current) {\n            let u = n({\n                resource: i,\n                action: \"list\",\n                meta: r\n            });\n            u && o(u), t.current = !0;\n        }\n    }, [\n        i,\n        o,\n        r,\n        n\n    ]), null;\n};\n\nvar G = (e)=>{\n    let r = qs__WEBPACK_IMPORTED_MODULE_3__.parse(e, {\n        ignoreQueryPrefix: !0\n    }), t = {\n        ...r,\n        pagination: {\n            current: r.current,\n            pageSize: r.pageSize\n        }\n    };\n    return delete t.current, delete t.pageSize, t;\n}, H = G;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@refinedev/react-hook-form/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useForm: () => (/* binding */ C),\n/* harmony export */   useModalForm: () => (/* binding */ xe),\n/* harmony export */   useStepsForm: () => (/* binding */ le)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/get.js */ \"(ssr)/./node_modules/lodash-es/get.js\");\n/* harmony import */ var lodash_es_has_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/has.js */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ \"(ssr)/./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ useForm,useModalForm,useStepsForm auto */ var L = Object.defineProperty;\nvar F = (t, a)=>L(t, \"name\", {\n        value: a,\n        configurable: !0\n    });\n\n\n\n\n\nvar C = F(({ refineCoreProps: t, warnWhenUnsavedChanges: a, disableServerSideValidation: p = !1, ...g } = {})=>{\n    let { options: R } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useRefineContext)(), h = (R == null ? void 0 : R.disableServerSideValidation) || p, U = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useTranslate)(), { warnWhenUnsavedChanges: v, setWarnWhen: f } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useWarnAboutChange)(), V = a ?? v, o = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.useForm)({\n        ...g\n    }), { watch: c, setValue: y, getValues: i, handleSubmit: n, setError: E } = o, x = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useForm)({\n        ...t,\n        onMutationError: (r, s, e)=>{\n            var b, H;\n            if (h) {\n                (b = t == null ? void 0 : t.onMutationError) == null || b.call(t, r, s, e);\n                return;\n            }\n            let m = r == null ? void 0 : r.errors;\n            for(let D in m){\n                if (!Object.keys((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.flattenObjectKeys)(s)).includes(D)) continue;\n                let u = m[D], B = \"\";\n                Array.isArray(u) && (B = u.join(\" \")), typeof u == \"string\" && (B = u), typeof u == \"boolean\" && u && (B = \"Field is not valid.\"), typeof u == \"object\" && \"key\" in u && (B = U(u.key, u.message)), E(D, {\n                    message: B\n                });\n            }\n            (H = t == null ? void 0 : t.onMutationError) == null || H.call(t, r, s, e);\n        }\n    }), { query: l, onFinish: d, formLoading: S, onFinishAutoSave: M } = x;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var e;\n        let r = (e = l == null ? void 0 : l.data) == null ? void 0 : e.data;\n        if (!r) return;\n        Object.keys((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.flattenObjectKeys)(i())).forEach((m)=>{\n            let b = (0,lodash_es_has_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(r, m), H = (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(r, m);\n            b && y(m, H);\n        });\n    }, [\n        l == null ? void 0 : l.data,\n        y,\n        i\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let r = c((s, { type: e })=>{\n            e === \"change\" && W(s);\n        });\n        return ()=>r.unsubscribe();\n    }, [\n        c\n    ]);\n    let W = F((r)=>{\n        var s, e;\n        if (V && f(!0), (s = t == null ? void 0 : t.autoSave) != null && s.enabled) {\n            f(!1);\n            let m = ((e = t.autoSave) == null ? void 0 : e.onFinish) ?? ((b)=>b);\n            return M(m(r)).catch((b)=>b);\n        }\n        return r;\n    }, \"onValuesChange\"), Q = F((r, s)=>async (e)=>(f(!1), n(r, s)(e)), \"handleSubmit\");\n    return {\n        ...o,\n        handleSubmit: Q,\n        refineCore: x,\n        saveButtonProps: {\n            disabled: S,\n            onClick: (r)=>{\n                Q((s)=>d(s).catch(()=>{}), ()=>!1)(r);\n            }\n        }\n    };\n}, \"useForm\");\n\n\nvar le = F(({ stepsProps: t, ...a } = {})=>{\n    let { defaultStep: p = 0, isBackValidate: g = !1 } = t ?? {}, [R, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(p), U = C({\n        ...a\n    }), { trigger: v, getValues: f, setValue: V, formState: { dirtyFields: o }, refineCore: { query: c } } = U;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var x;\n        let n = (x = c == null ? void 0 : c.data) == null ? void 0 : x.data;\n        if (!n) return;\n        let E = Object.keys(f());\n        console.log({\n            dirtyFields: o,\n            registeredFields: E,\n            data: n\n        }), Object.entries(n).forEach(([l, d])=>{\n            let S = l;\n            E.includes(S) && ((0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(o, S) || V(S, d));\n        });\n    }, [\n        c == null ? void 0 : c.data,\n        R,\n        V,\n        f\n    ]);\n    let y = F((n)=>{\n        let E = n;\n        n < 0 && (E = 0), h(E);\n    }, \"go\");\n    return {\n        ...U,\n        steps: {\n            currentStep: R,\n            gotoStep: F(async (n)=>{\n                if (n === R) return;\n                if (n < R && !g) {\n                    y(n);\n                    return;\n                }\n                await v() && y(n);\n            }, \"gotoStep\")\n        }\n    };\n}, \"useStepsForm\");\n\n\n\nvar xe = F(({ modalProps: t, refineCoreProps: a, syncWithLocation: p, ...g } = {})=>{\n    var A, N;\n    let R = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useInvalidate)(), [h, U] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), v = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useTranslate)(), { resource: f, action: V } = a ?? {}, { resource: o, action: c, identifier: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useResource)(f), i = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useParsed)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useGo)(), E = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useUserFriendlyName)(), x = V ?? c ?? \"\", l = !(typeof p == \"object\" && (p == null ? void 0 : p.syncId) === !1), d = typeof p == \"object\" && \"key\" in p ? p.key : o && x && p ? `modal-${y}-${x}` : void 0, { defaultVisible: S = !1, autoSubmitClose: M = !0, autoResetForm: W = !0 } = t ?? {}, Q = C({\n        refineCoreProps: {\n            ...a,\n            meta: {\n                ...d ? {\n                    [d]: void 0\n                } : {},\n                ...a == null ? void 0 : a.meta\n            }\n        },\n        ...g\n    }), { reset: $, refineCore: { onFinish: r, id: s, setId: e, autoSaveProps: m }, saveButtonProps: b, handleSubmit: H } = Q, { visible: D, show: k, close: u } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useModal)({\n        defaultVisible: S\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var T, j, K, I;\n        if (h === !1 && d) {\n            let w = (j = (T = i == null ? void 0 : i.params) == null ? void 0 : T[d]) == null ? void 0 : j.open;\n            if (typeof w == \"boolean\" ? w && k() : typeof w == \"string\" && w === \"true\" && k(), l) {\n                let G = (I = (K = i == null ? void 0 : i.params) == null ? void 0 : K[d]) == null ? void 0 : I.id;\n                G && (e == null || e(G));\n            }\n            U(!0);\n        }\n    }, [\n        d,\n        i,\n        l,\n        e\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var T;\n        h === !0 && (D && d ? n({\n            query: {\n                [d]: {\n                    ...(T = i == null ? void 0 : i.params) == null ? void 0 : T[d],\n                    open: !0,\n                    ...l && s && {\n                        id: s\n                    }\n                }\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }) : d && !D && n({\n            query: {\n                [d]: void 0\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }));\n    }, [\n        s,\n        D,\n        k,\n        d,\n        l\n    ]);\n    let B = F(async (T)=>{\n        await r(T), M && u(), W && $();\n    }, \"submit\"), { warnWhen: O, setWarnWhen: X } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useWarnAboutChange)(), Z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        var T;\n        if (m.status === \"success\" && (T = a == null ? void 0 : a.autoSave) != null && T.invalidateOnClose && R({\n            id: s,\n            invalidates: a.invalidates || [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ],\n            dataProviderName: a.dataProviderName,\n            resource: y\n        }), O) if (window.confirm(v(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"))) X(!1);\n        else return;\n        e == null || e(void 0), u();\n    }, [\n        O,\n        m.status\n    ]), _ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((T)=>{\n        typeof T < \"u\" && (e == null || e(T)), (!(x === \"edit\" || x === \"clone\") || typeof T < \"u\" || typeof s < \"u\") && k();\n    }, [\n        s\n    ]), q = v(`${y}.titles.${V}`, void 0, `${E(`${V} ${((A = o == null ? void 0 : o.meta) == null ? void 0 : A.label) ?? ((N = o == null ? void 0 : o.options) == null ? void 0 : N.label) ?? (o == null ? void 0 : o.label) ?? y}`, \"singular\")}`);\n    return {\n        modal: {\n            submit: B,\n            close: Z,\n            show: _,\n            visible: D,\n            title: q\n        },\n        ...Q,\n        saveButtonProps: {\n            ...b,\n            onClick: (T)=>H(B)(T)\n        }\n    };\n}, \"useModalForm\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   axiosInstance: () => (/* binding */ h),\n/* harmony export */   \"default\": () => (/* binding */ N),\n/* harmony export */   generateFilter: () => (/* binding */ g),\n/* harmony export */   generateSort: () => (/* binding */ f),\n/* harmony export */   mapOperator: () => (/* binding */ M),\n/* harmony export */   stringify: () => (/* reexport safe */ query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)\n/* harmony export */ });\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\nvar M=r=>{switch(r){case\"ne\":case\"gte\":case\"lte\":return`_${r}`;case\"contains\":return\"_like\";default:return\"\"}};var f=r=>{if(r&&r.length>0){let s=[],e=[];return r.map(t=>{s.push(t.field),e.push(t.order)}),{_sort:s,_order:e}}};var g=r=>{let s={};return r&&r.map(e=>{if(e.operator===\"or\"||e.operator===\"and\")throw new Error(`[@refinedev/simple-rest]: \\`operator: ${e.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`);if(\"field\"in e){let{field:t,operator:o,value:n}=e;if(t===\"q\"){s[t]=n;return}let d=M(o);s[`${t}${d}`]=n}}),s};var h=axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create();h.interceptors.response.use(r=>r,r=>{var e,t,o;let s={...r,message:(t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message,statusCode:(o=r.response)==null?void 0:o.status};return Promise.reject(s)});var q=(r,s=h)=>({getList:async({resource:e,pagination:t,filters:o,sorters:n,meta:d})=>{let i=`${r}/${e}`,{current:c=1,pageSize:a=10,mode:p=\"server\"}=t??{},{headers:$,method:m}=d??{},x=m??\"get\",v=g(o),u={};p===\"server\"&&(u._start=(c-1)*a,u._end=c*a);let l=f(n);if(l){let{_sort:T,_order:b}=l;u._sort=T.join(\",\"),u._order=b.join(\",\")}let _={...u,...v},O=Object.keys(_).length?`${i}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(_)}`:i,{data:w,headers:F}=await s[x](O,{headers:$}),S=+F[\"x-total-count\"];return{data:w,total:S||w.length}},getMany:async({resource:e,ids:t,meta:o})=>{let{headers:n,method:d}=o??{},i=d??\"get\",{data:c}=await s[i](`${r}/${e}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)({id:t})}`,{headers:n});return{data:c}},create:async({resource:e,variables:t,meta:o})=>{let n=`${r}/${e}`,{headers:d,method:i}=o??{},c=i??\"post\",{data:a}=await s[c](n,t,{headers:d});return{data:a}},update:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"patch\",{data:p}=await s[a](d,o,{headers:i});return{data:p}},getOne:async({resource:e,id:t,meta:o})=>{let n=`${r}/${e}/${t}`,{headers:d,method:i}=o??{},c=i??\"get\",{data:a}=await s[c](n,{headers:d});return{data:a}},deleteOne:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"delete\",{data:p}=await s[a](d,{data:o,headers:i});return{data:p}},getApiUrl:()=>r,custom:async({url:e,method:t,filters:o,sorters:n,payload:d,query:i,headers:c})=>{let a=`${e}?`;if(n){let m=f(n);if(m){let{_sort:x,_order:v}=m,u={_sort:x.join(\",\"),_order:v.join(\",\")};a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(u)}`}}if(o){let m=g(o);a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(m)}`}i&&(a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(i)}`);let p;switch(t){case\"put\":case\"post\":case\"patch\":p=await s[t](e,d,{headers:c});break;case\"delete\":p=await s.delete(e,{data:d,headers:c});break;default:p=await s.get(a,{headers:c});break}let{data:$}=p;return Promise.resolve({data:$})}});var N=q;\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFrRixVQUFVLFVBQVUsdUNBQXVDLEVBQUUsRUFBRSw2QkFBNkIsbUJBQW1CLFVBQVUsa0JBQWtCLGNBQWMsaUJBQWlCLGdDQUFnQyxHQUFHLG9CQUFvQixVQUFVLFNBQVMsb0JBQW9CLGtHQUFrRyxXQUFXLHlKQUF5SixnQkFBZ0IsSUFBSSwyQkFBMkIsR0FBRyxZQUFZLE9BQU8sT0FBTyxXQUFXLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxLQUEwQixNQUFNLDZDQUFDLFVBQVUscUNBQXFDLFVBQVUsT0FBTyw0SEFBNEgseUJBQXlCLEVBQUUsaUJBQWlCLGVBQWUsbURBQW1ELElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLDBDQUEwQyxNQUFNLEVBQUUsbUJBQW1CLE1BQU0sd0JBQXdCLDRDQUE0QyxXQUFXLE1BQU0sSUFBSSxpQkFBaUIsR0FBRyx5Q0FBeUMsT0FBTyxVQUFVLDRCQUE0QixFQUFFLEdBQUcsdURBQUMsSUFBSSxLQUFLLGlCQUFpQixlQUFlLFVBQVUsd0JBQXdCLE9BQU8sMEJBQTBCLGdCQUFnQix3QkFBd0IsSUFBSSxJQUFJLG1CQUFtQixNQUFNLGFBQWEsT0FBTyxlQUFlLEVBQUUsR0FBRyxFQUFFLEdBQUcsdURBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxVQUFVLEVBQUUsT0FBTyxRQUFRLGVBQWUsOEJBQThCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixNQUFNLGNBQWMsT0FBTyxpQkFBaUIsVUFBVSxFQUFFLE9BQU8sUUFBUSxlQUFlLG1DQUFtQyxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLE1BQU0sZUFBZSxPQUFPLGlCQUFpQixVQUFVLEVBQUUsT0FBTyxRQUFRLGVBQWUsdUJBQXVCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxtQkFBbUIsTUFBTSxhQUFhLE9BQU8sZUFBZSxVQUFVLEVBQUUsT0FBTyxRQUFRLGtCQUFrQixtQ0FBbUMsSUFBSSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixNQUFNLGdCQUFnQixPQUFPLGVBQWUsaUJBQWlCLEVBQUUsT0FBTyxRQUFRLCtCQUErQiwrREFBK0QsSUFBSSxTQUFTLEVBQUUsR0FBRyxNQUFNLFdBQVcsTUFBTSxJQUFJLGlCQUFpQixNQUFNLHNDQUFzQyxLQUFLLEVBQUUsR0FBRyx1REFBQyxJQUFJLEdBQUcsTUFBTSxXQUFXLEtBQUssRUFBRSxHQUFHLHVEQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyx1REFBQyxJQUFJLEdBQUcsTUFBTSxVQUFVLG1EQUFtRCxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsVUFBVSxFQUFFLE1BQU0sSUFBSSxPQUFPLEdBQUcsd0JBQXdCLE9BQU8sR0FBRyxFQUFFLFFBQXNIO0FBQzkwRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudEpNLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3QvZGlzdC9pbmRleC5tanM/YjU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7c3RyaW5naWZ5IGFzIEp9ZnJvbVwicXVlcnktc3RyaW5nXCI7aW1wb3J0e3N0cmluZ2lmeSBhcyB5fWZyb21cInF1ZXJ5LXN0cmluZ1wiO3ZhciBNPXI9Pntzd2l0Y2gocil7Y2FzZVwibmVcIjpjYXNlXCJndGVcIjpjYXNlXCJsdGVcIjpyZXR1cm5gXyR7cn1gO2Nhc2VcImNvbnRhaW5zXCI6cmV0dXJuXCJfbGlrZVwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O3ZhciBmPXI9PntpZihyJiZyLmxlbmd0aD4wKXtsZXQgcz1bXSxlPVtdO3JldHVybiByLm1hcCh0PT57cy5wdXNoKHQuZmllbGQpLGUucHVzaCh0Lm9yZGVyKX0pLHtfc29ydDpzLF9vcmRlcjplfX19O3ZhciBnPXI9PntsZXQgcz17fTtyZXR1cm4gciYmci5tYXAoZT0+e2lmKGUub3BlcmF0b3I9PT1cIm9yXCJ8fGUub3BlcmF0b3I9PT1cImFuZFwiKXRocm93IG5ldyBFcnJvcihgW0ByZWZpbmVkZXYvc2ltcGxlLXJlc3RdOiBcXGBvcGVyYXRvcjogJHtlLm9wZXJhdG9yfVxcYCBpcyBub3Qgc3VwcG9ydGVkLiBZb3UgY2FuIGNyZWF0ZSBjdXN0b20gZGF0YSBwcm92aWRlci4gaHR0cHM6Ly9yZWZpbmUuZGV2L2RvY3MvYXBpLXJlZmVyZW5jZS9jb3JlL3Byb3ZpZGVycy9kYXRhLXByb3ZpZGVyLyNjcmVhdGluZy1hLWRhdGEtcHJvdmlkZXJgKTtpZihcImZpZWxkXCJpbiBlKXtsZXR7ZmllbGQ6dCxvcGVyYXRvcjpvLHZhbHVlOm59PWU7aWYodD09PVwicVwiKXtzW3RdPW47cmV0dXJufWxldCBkPU0obyk7c1tgJHt0fSR7ZH1gXT1ufX0pLHN9O2ltcG9ydCBqIGZyb21cImF4aW9zXCI7dmFyIGg9ai5jcmVhdGUoKTtoLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2Uocj0+cixyPT57dmFyIGUsdCxvO2xldCBzPXsuLi5yLG1lc3NhZ2U6KHQ9KGU9ci5yZXNwb25zZSk9PW51bGw/dm9pZCAwOmUuZGF0YSk9PW51bGw/dm9pZCAwOnQubWVzc2FnZSxzdGF0dXNDb2RlOihvPXIucmVzcG9uc2UpPT1udWxsP3ZvaWQgMDpvLnN0YXR1c307cmV0dXJuIFByb21pc2UucmVqZWN0KHMpfSk7dmFyIHE9KHIscz1oKT0+KHtnZXRMaXN0OmFzeW5jKHtyZXNvdXJjZTplLHBhZ2luYXRpb246dCxmaWx0ZXJzOm8sc29ydGVyczpuLG1ldGE6ZH0pPT57bGV0IGk9YCR7cn0vJHtlfWAse2N1cnJlbnQ6Yz0xLHBhZ2VTaXplOmE9MTAsbW9kZTpwPVwic2VydmVyXCJ9PXQ/P3t9LHtoZWFkZXJzOiQsbWV0aG9kOm19PWQ/P3t9LHg9bT8/XCJnZXRcIix2PWcobyksdT17fTtwPT09XCJzZXJ2ZXJcIiYmKHUuX3N0YXJ0PShjLTEpKmEsdS5fZW5kPWMqYSk7bGV0IGw9ZihuKTtpZihsKXtsZXR7X3NvcnQ6VCxfb3JkZXI6Yn09bDt1Ll9zb3J0PVQuam9pbihcIixcIiksdS5fb3JkZXI9Yi5qb2luKFwiLFwiKX1sZXQgXz17Li4udSwuLi52fSxPPU9iamVjdC5rZXlzKF8pLmxlbmd0aD9gJHtpfT8ke3koXyl9YDppLHtkYXRhOncsaGVhZGVyczpGfT1hd2FpdCBzW3hdKE8se2hlYWRlcnM6JH0pLFM9K0ZbXCJ4LXRvdGFsLWNvdW50XCJdO3JldHVybntkYXRhOncsdG90YWw6U3x8dy5sZW5ndGh9fSxnZXRNYW55OmFzeW5jKHtyZXNvdXJjZTplLGlkczp0LG1ldGE6b30pPT57bGV0e2hlYWRlcnM6bixtZXRob2Q6ZH09bz8/e30saT1kPz9cImdldFwiLHtkYXRhOmN9PWF3YWl0IHNbaV0oYCR7cn0vJHtlfT8ke3koe2lkOnR9KX1gLHtoZWFkZXJzOm59KTtyZXR1cm57ZGF0YTpjfX0sY3JlYXRlOmFzeW5jKHtyZXNvdXJjZTplLHZhcmlhYmxlczp0LG1ldGE6b30pPT57bGV0IG49YCR7cn0vJHtlfWAse2hlYWRlcnM6ZCxtZXRob2Q6aX09bz8/e30sYz1pPz9cInBvc3RcIix7ZGF0YTphfT1hd2FpdCBzW2NdKG4sdCx7aGVhZGVyczpkfSk7cmV0dXJue2RhdGE6YX19LHVwZGF0ZTphc3luYyh7cmVzb3VyY2U6ZSxpZDp0LHZhcmlhYmxlczpvLG1ldGE6bn0pPT57bGV0IGQ9YCR7cn0vJHtlfS8ke3R9YCx7aGVhZGVyczppLG1ldGhvZDpjfT1uPz97fSxhPWM/P1wicGF0Y2hcIix7ZGF0YTpwfT1hd2FpdCBzW2FdKGQsbyx7aGVhZGVyczppfSk7cmV0dXJue2RhdGE6cH19LGdldE9uZTphc3luYyh7cmVzb3VyY2U6ZSxpZDp0LG1ldGE6b30pPT57bGV0IG49YCR7cn0vJHtlfS8ke3R9YCx7aGVhZGVyczpkLG1ldGhvZDppfT1vPz97fSxjPWk/P1wiZ2V0XCIse2RhdGE6YX09YXdhaXQgc1tjXShuLHtoZWFkZXJzOmR9KTtyZXR1cm57ZGF0YTphfX0sZGVsZXRlT25lOmFzeW5jKHtyZXNvdXJjZTplLGlkOnQsdmFyaWFibGVzOm8sbWV0YTpufSk9PntsZXQgZD1gJHtyfS8ke2V9LyR7dH1gLHtoZWFkZXJzOmksbWV0aG9kOmN9PW4/P3t9LGE9Yz8/XCJkZWxldGVcIix7ZGF0YTpwfT1hd2FpdCBzW2FdKGQse2RhdGE6byxoZWFkZXJzOml9KTtyZXR1cm57ZGF0YTpwfX0sZ2V0QXBpVXJsOigpPT5yLGN1c3RvbTphc3luYyh7dXJsOmUsbWV0aG9kOnQsZmlsdGVyczpvLHNvcnRlcnM6bixwYXlsb2FkOmQscXVlcnk6aSxoZWFkZXJzOmN9KT0+e2xldCBhPWAke2V9P2A7aWYobil7bGV0IG09ZihuKTtpZihtKXtsZXR7X3NvcnQ6eCxfb3JkZXI6dn09bSx1PXtfc29ydDp4LmpvaW4oXCIsXCIpLF9vcmRlcjp2LmpvaW4oXCIsXCIpfTthPWAke2F9JiR7eSh1KX1gfX1pZihvKXtsZXQgbT1nKG8pO2E9YCR7YX0mJHt5KG0pfWB9aSYmKGE9YCR7YX0mJHt5KGkpfWApO2xldCBwO3N3aXRjaCh0KXtjYXNlXCJwdXRcIjpjYXNlXCJwb3N0XCI6Y2FzZVwicGF0Y2hcIjpwPWF3YWl0IHNbdF0oZSxkLHtoZWFkZXJzOmN9KTticmVhaztjYXNlXCJkZWxldGVcIjpwPWF3YWl0IHMuZGVsZXRlKGUse2RhdGE6ZCxoZWFkZXJzOmN9KTticmVhaztkZWZhdWx0OnA9YXdhaXQgcy5nZXQoYSx7aGVhZGVyczpjfSk7YnJlYWt9bGV0e2RhdGE6JH09cDtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtkYXRhOiR9KX19KTt2YXIgTj1xO2V4cG9ydHtoIGFzIGF4aW9zSW5zdGFuY2UsTiBhcyBkZWZhdWx0LGcgYXMgZ2VuZXJhdGVGaWx0ZXIsZiBhcyBnZW5lcmF0ZVNvcnQsTSBhcyBtYXBPcGVyYXRvcixKIGFzIHN0cmluZ2lmeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@refinedev/ui-types/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RefineButtonClassNames: () => (/* binding */ n),\n/* harmony export */   RefineButtonTestIds: () => (/* binding */ e),\n/* harmony export */   RefinePageHeaderClassNames: () => (/* binding */ o)\n/* harmony export */ });\nvar e={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};var o={Title:\"refine-pageHeader-title\",SubTitle:\"refine-pageHeader-subTitle\"},n={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi91aS10eXBlcy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLHlWQUF5VixPQUFPLHNFQUFzRSxJQUFJLHlWQUFzYjtBQUN2MkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnRKTS8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3VpLXR5cGVzL2Rpc3QvaW5kZXgubWpzPzY3NWMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGU9e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07dmFyIG89e1RpdGxlOlwicmVmaW5lLXBhZ2VIZWFkZXItdGl0bGVcIixTdWJUaXRsZTpcInJlZmluZS1wYWdlSGVhZGVyLXN1YlRpdGxlXCJ9LG49e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07ZXhwb3J0e24gYXMgUmVmaW5lQnV0dG9uQ2xhc3NOYW1lcyxlIGFzIFJlZmluZUJ1dHRvblRlc3RJZHMsbyBhcyBSZWZpbmVQYWdlSGVhZGVyQ2xhc3NOYW1lc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/mui/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@refinedev/mui/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthPage: () => (/* binding */ e0),
/* harmony export */   AutoSaveIndicator: () => (/* binding */ e1),
/* harmony export */   BooleanField: () => (/* binding */ e2),
/* harmony export */   Breadcrumb: () => (/* binding */ e3),
/* harmony export */   CircularDeterminate: () => (/* binding */ e4),
/* harmony export */   CloneButton: () => (/* binding */ e5),
/* harmony export */   Create: () => (/* binding */ e6),
/* harmony export */   CreateButton: () => (/* binding */ e7),
/* harmony export */   DarkTheme: () => (/* binding */ e8),
/* harmony export */   DateField: () => (/* binding */ e9),
/* harmony export */   DeleteButton: () => (/* binding */ e10),
/* harmony export */   Edit: () => (/* binding */ e11),
/* harmony export */   EditButton: () => (/* binding */ e12),
/* harmony export */   EmailField: () => (/* binding */ e13),
/* harmony export */   ErrorComponent: () => (/* binding */ e14),
/* harmony export */   ExportButton: () => (/* binding */ e15),
/* harmony export */   FileField: () => (/* binding */ e16),
/* harmony export */   HamburgerMenu: () => (/* binding */ e17),
/* harmony export */   Header: () => (/* binding */ e18),
/* harmony export */   ImportButton: () => (/* binding */ e19),
/* harmony export */   Layout: () => (/* binding */ e20),
/* harmony export */   LightTheme: () => (/* binding */ e21),
/* harmony export */   List: () => (/* binding */ e22),
/* harmony export */   ListButton: () => (/* binding */ e23),
/* harmony export */   LoginPage: () => (/* binding */ e24),
/* harmony export */   MarkdownField: () => (/* binding */ e25),
/* harmony export */   NotistackSnackbarContent: () => (/* binding */ e26),
/* harmony export */   NumberField: () => (/* binding */ e27),
/* harmony export */   ReadyPage: () => (/* binding */ e28),
/* harmony export */   RefineSnackbarProvider: () => (/* binding */ e29),
/* harmony export */   RefineThemes: () => (/* binding */ e30),
/* harmony export */   RefreshButton: () => (/* binding */ e31),
/* harmony export */   SaveButton: () => (/* binding */ e32),
/* harmony export */   Show: () => (/* binding */ e33),
/* harmony export */   ShowButton: () => (/* binding */ e34),
/* harmony export */   Sider: () => (/* binding */ e35),
/* harmony export */   SnackbarProvider: () => (/* binding */ e36),
/* harmony export */   TagField: () => (/* binding */ e37),
/* harmony export */   TextFieldComponent: () => (/* binding */ e38),
/* harmony export */   ThemedHeader: () => (/* binding */ e39),
/* harmony export */   ThemedHeaderV2: () => (/* binding */ e40),
/* harmony export */   ThemedLayout: () => (/* binding */ e41),
/* harmony export */   ThemedLayoutContext: () => (/* binding */ e42),
/* harmony export */   ThemedLayoutContextProvider: () => (/* binding */ e43),
/* harmony export */   ThemedLayoutV2: () => (/* binding */ e44),
/* harmony export */   ThemedSider: () => (/* binding */ e45),
/* harmony export */   ThemedSiderV2: () => (/* binding */ e46),
/* harmony export */   ThemedTitle: () => (/* binding */ e47),
/* harmony export */   ThemedTitleV2: () => (/* binding */ e48),
/* harmony export */   Title: () => (/* binding */ e49),
/* harmony export */   UrlField: () => (/* binding */ e50),
/* harmony export */   WelcomePage: () => (/* binding */ e51),
/* harmony export */   notificationProvider: () => (/* binding */ e52),
/* harmony export */   useAutocomplete: () => (/* binding */ e53),
/* harmony export */   useDataGrid: () => (/* binding */ e54),
/* harmony export */   useNotificationProvider: () => (/* binding */ e55),
/* harmony export */   useSiderVisible: () => (/* binding */ e56),
/* harmony export */   useSnackbar: () => (/* binding */ e57),
/* harmony export */   useThemedLayoutContext: () => (/* binding */ e58),
/* harmony export */   withSnackbar: () => (/* binding */ e59)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");


const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#AuthPage`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#AutoSaveIndicator`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#BooleanField`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Breadcrumb`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#CircularDeterminate`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#CloneButton`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Create`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#CreateButton`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#DarkTheme`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#DateField`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#DeleteButton`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Edit`);

const e12 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#EditButton`);

const e13 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#EmailField`);

const e14 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ErrorComponent`);

const e15 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ExportButton`);

const e16 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#FileField`);

const e17 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#HamburgerMenu`);

const e18 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Header`);

const e19 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ImportButton`);

const e20 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Layout`);

const e21 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#LightTheme`);

const e22 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#List`);

const e23 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ListButton`);

const e24 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#LoginPage`);

const e25 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#MarkdownField`);

const e26 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#NotistackSnackbarContent`);

const e27 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#NumberField`);

const e28 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ReadyPage`);

const e29 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#RefineSnackbarProvider`);

const e30 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#RefineThemes`);

const e31 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#RefreshButton`);

const e32 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#SaveButton`);

const e33 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Show`);

const e34 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ShowButton`);

const e35 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Sider`);

const e36 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#SnackbarProvider`);

const e37 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#TagField`);

const e38 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#TextFieldComponent`);

const e39 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedHeader`);

const e40 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedHeaderV2`);

const e41 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedLayout`);

const e42 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedLayoutContext`);

const e43 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedLayoutContextProvider`);

const e44 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedLayoutV2`);

const e45 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedSider`);

const e46 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedSiderV2`);

const e47 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedTitle`);

const e48 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#ThemedTitleV2`);

const e49 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#Title`);

const e50 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#UrlField`);

const e51 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#WelcomePage`);

const e52 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#notificationProvider`);

const e53 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#useAutocomplete`);

const e54 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#useDataGrid`);

const e55 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#useNotificationProvider`);

const e56 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#useSiderVisible`);

const e57 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#useSnackbar`);

const e58 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#useThemedLayoutContext`);

const e59 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`C:\Users\Kevin\Documents\kevin\4ano_1Semetre\Oblicuos\Ubicuos\DashboardUbicuos\clientJM\node_modules\@refinedev\mui\dist\index.mjs#withSnackbar`);


/***/ })

};
;